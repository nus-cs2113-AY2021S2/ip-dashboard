[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"### User Guide"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"Starting up Duke"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"1. Move ip2.jar file and duke.txt file (if any) into the same folder."},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"2. Open Command Prompt (on Windows) or Terminal (on Mac)."},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"3. Change directory to where ip2.jar file and duke.txt file (if any) are stored. E.g. : cd Desktop"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"4. Type java -jar ip2.jar to run Duke."},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"### Feature 1: Add todo task"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"Add a todo task."},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `todo homework`"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"- Description of a todo task cannot be empty."},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"- adds a todo task with `homework` as task description."},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"- input: `todo homework`"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":"- outcome: adds [T][ ] homework to text file."},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"### Feature 2: Add deadline task"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"Add a deadline task."},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `deadline project123 /by Monday`"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"- Description of a deadline task cannot be empty."},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":"- /by has to be specified."},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"- adds a deadline task with `project123` as task description and Monday to be the deadline."},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"- input: `deadline project123 /by Monday`"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":"- outcome: adds [D][ ] project123 (by: Monday) to text file."},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":48,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":49,"author":{"gitId":"warmwhalefy"},"content":"### Feature 3: Add event task"},{"lineNumber":50,"author":{"gitId":"warmwhalefy"},"content":"Add an event task."},{"lineNumber":51,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":52,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `event birthday party /at MBS`"},{"lineNumber":53,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":54,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":55,"author":{"gitId":"warmwhalefy"},"content":"- Description of an event task cannot be empty."},{"lineNumber":56,"author":{"gitId":"warmwhalefy"},"content":"- /at has to be specified."},{"lineNumber":57,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":58,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":59,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":60,"author":{"gitId":"warmwhalefy"},"content":"- adds a event task with `birthday party` as task description and MBS to be the location."},{"lineNumber":61,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":62,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":63,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":64,"author":{"gitId":"warmwhalefy"},"content":"- input: `event birthday party /at MBS`"},{"lineNumber":65,"author":{"gitId":"warmwhalefy"},"content":"- outcome: adds [E][ ] birthday party (at: MBS) to text file."},{"lineNumber":66,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":67,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":68,"author":{"gitId":"warmwhalefy"},"content":"### Feature 4: List tasks"},{"lineNumber":69,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":70,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `list`"},{"lineNumber":71,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":72,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":73,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":74,"author":{"gitId":"warmwhalefy"},"content":"- prints out all tasks in the list"},{"lineNumber":75,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":76,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":77,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":78,"author":{"gitId":"warmwhalefy"},"content":"- input: `list`"},{"lineNumber":79,"author":{"gitId":"warmwhalefy"},"content":"- outcome: lists out all tasks"},{"lineNumber":80,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":81,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":82,"author":{"gitId":"warmwhalefy"},"content":"### Feature 5: Mark task as done"},{"lineNumber":83,"author":{"gitId":"warmwhalefy"},"content":"Mark a task as done. "},{"lineNumber":84,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":85,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `done 1`"},{"lineNumber":86,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":87,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":88,"author":{"gitId":"warmwhalefy"},"content":"- Task number cannot be empty."},{"lineNumber":89,"author":{"gitId":"warmwhalefy"},"content":"- Task number entered must be valid, or will encounter error message."},{"lineNumber":90,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":91,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":92,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":93,"author":{"gitId":"warmwhalefy"},"content":"- marks task in list as done. "},{"lineNumber":94,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":95,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":96,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":97,"author":{"gitId":"warmwhalefy"},"content":"- input: `done 1`"},{"lineNumber":98,"author":{"gitId":"warmwhalefy"},"content":"- outcome: marks task 1 of list of tasks as done. "},{"lineNumber":99,"author":{"gitId":"warmwhalefy"},"content":"    - Status icon for that particular task changes to `[X]` from `[ ]`."},{"lineNumber":100,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":101,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":102,"author":{"gitId":"warmwhalefy"},"content":"### Feature 6: Delete Task"},{"lineNumber":103,"author":{"gitId":"warmwhalefy"},"content":"Delete a task from list of tasks."},{"lineNumber":104,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":105,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `delete 1`"},{"lineNumber":106,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":107,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":108,"author":{"gitId":"warmwhalefy"},"content":"- Task number cannot be empty."},{"lineNumber":109,"author":{"gitId":"warmwhalefy"},"content":"- Task number entered must be valid, or will encounter error message."},{"lineNumber":110,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":111,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":112,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":113,"author":{"gitId":"warmwhalefy"},"content":"- task is removed from list of tasks."},{"lineNumber":114,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":115,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":116,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":117,"author":{"gitId":"warmwhalefy"},"content":"- input: `delete 1`"},{"lineNumber":118,"author":{"gitId":"warmwhalefy"},"content":"- outcome: task 1 will be deleted."},{"lineNumber":119,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":120,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":121,"author":{"gitId":"warmwhalefy"},"content":"### Feature 7: Find tasks"},{"lineNumber":122,"author":{"gitId":"warmwhalefy"},"content":"Finds tasks that contains the particular keyword and prints the list of task(s) containing that keyword."},{"lineNumber":123,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":124,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `find sleep`"},{"lineNumber":125,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":126,"author":{"gitId":"warmwhalefy"},"content":"_Requirements:_"},{"lineNumber":127,"author":{"gitId":"warmwhalefy"},"content":"- keyword cannot be empty"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":130,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":131,"author":{"gitId":"warmwhalefy"},"content":"- prints out a list of tasks that contains the `keyword`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"warmwhalefy"},"content":"- input: `find sleep`"},{"lineNumber":136,"author":{"gitId":"warmwhalefy"},"content":"- outcome: prints a list of all tasks containing the word `sleep`."},{"lineNumber":137,"author":{"gitId":"warmwhalefy"},"content":"_________"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"warmwhalefy"},"content":"### Feature 8: Bye"},{"lineNumber":140,"author":{"gitId":"warmwhalefy"},"content":"Exits program"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"warmwhalefy"},"content":"#### Usage: `bye`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"warmwhalefy"},"content":"__Expected outcome:__"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"warmwhalefy"},"content":"- prints goodbye message and exits program"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"warmwhalefy"},"content":"__Example of usage:__"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"warmwhalefy"},"content":"- input: `bye`"},{"lineNumber":151,"author":{"gitId":"warmwhalefy"},"content":"- outcome: `Bye. Hope to see you again soon!`"}],"authorContributionMap":{"warmwhalefy":140,"-":11}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"[T][X] sleep"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":"[D][ ] ticket  (by: tpday)"},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"[T][ ] sleep properly"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"[T][X] sleepp"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"There are a total of 4 tasks in the list."}],"authorContributionMap":{"warmwhalefy":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    public static final String SECTION_DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"    private final Storage storage;"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"    public Duke(String filePath) {"},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"        ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"        ui.greetUser();"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"            tasks.viewTasks();"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"            ui.showLoadingError(e.getMessage());"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":"    public void run() {"},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"        boolean isBye \u003d false;"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"        while (!isBye) {"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"            try {"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"                String userInput \u003d Ui.getUserInput();"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":"                Command command \u003d Parser.parseCommand(userInput);"},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"                command.executeCommand(userInput, tasks, Path.of(Storage.fileName));"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"                isBye \u003d ui.sayBye(userInput);"},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":"            } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":"                ui.showErrorMessage(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":"    public static void main(String[] args) {"},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"        new Duke(\"duke.txt\").run();"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"warmwhalefy":46,"-":2}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"// to add task"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"        Task taskToAdd \u003d Parser.getTask(userInput);"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        tasks.addTask(taskToAdd);"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"        Storage.updateFile(tasks, Path.of(Storage.fileName));"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":16}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"//leave"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"public class ByeCommand extends  Command {"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":10}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"    public abstract void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException;"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":9}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"// to delete task"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"        int taskNo \u003d Parser.getTaskNo(userInput);"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"        tasks.deleteTask(taskNo);"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        Storage.updateFile(tasks, Path.of(Storage.fileName));"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":15}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"public class DoneCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"    //marking task as done"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"        int taskNo \u003d Parser.getTaskNo(userInput);"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        tasks.markTaskAsDone(taskNo);"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"        Storage.updateFile(tasks, Path.of(Storage.fileName));"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":16}},{"path":"src/main/java/duke/command/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"//to print error message"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(errorMessage);"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":8}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.command.TaskList;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.command.DukeException;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"import static duke.Duke.SECTION_DIVIDER;"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"        String keyword \u003d Parser.findKeyword(userInput);"},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"        ArrayList\u003cTask\u003e relatedTasks \u003d tasks.findTasks(keyword);"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"        printRelatedTasks(relatedTasks);"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"    private void printRelatedTasks(ArrayList\u003cTask\u003e relatedTasks) {"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"        if (relatedTasks.isEmpty()){"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"There are no matching tasks in your list.\");"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"        else {"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"            int i \u003d 1;"},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":"            for (Task t : relatedTasks) {"},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"                System.out.println(i + \": \" + t.toString());"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"                i++;"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"public class ListCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"// to view the list of tasks"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"    public void executeCommand(String userInput, TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"        tasks.viewTasks();"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"        Storage.updateFile(tasks, Path.of(Storage.fileName));"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":12}},{"path":"src/main/java/duke/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.NoSuchFileException;"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"    private static final String UPDATE_FILE_ERROR \u003d \"Something went wrong when updating file.\";"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"    private static final String LOAD_FILE_ERROR \u003d \"Something went wrong when loading file.\";"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"    private static final String NO_FILE_ERROR \u003d \"File not found, new duke.txt file will be created.\";"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"    public static String fileName;"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"        fileName \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"        ArrayList\u003cTask\u003e arrayOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"        Scanner s;"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"            s \u003d new Scanner(Path.of(fileName));"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"        } catch (NoSuchFileException e) {"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(NO_FILE_ERROR);"},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(LOAD_FILE_ERROR);"},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":"        while (s.hasNext()) {"},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"            String fileInput \u003d s.nextLine();"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":"            String taskIcon \u003d fileInput.substring(0, 3);"},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"            addTaskFromFile(fileInput, taskIcon, arrayOfTasks);"},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":"        return arrayOfTasks;"},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"    // Update file according to changes to list of tasks"},{"lineNumber":48,"author":{"gitId":"warmwhalefy"},"content":"    public static void updateFile(TaskList tasks, Path filePath) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"warmwhalefy"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"warmwhalefy"},"content":"            FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"},{"lineNumber":51,"author":{"gitId":"warmwhalefy"},"content":"            for (Task t : tasks.getArrayOfTasks()) {"},{"lineNumber":52,"author":{"gitId":"warmwhalefy"},"content":"                fw.write(t.toString() + System.lineSeparator());"},{"lineNumber":53,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"warmwhalefy"},"content":"            fw.write(\"There are a total of \" + tasks.getNoOfTasks() + \" tasks in the list.\");"},{"lineNumber":55,"author":{"gitId":"warmwhalefy"},"content":"            fw.close();"},{"lineNumber":56,"author":{"gitId":"warmwhalefy"},"content":"        } catch (IOException e) {"},{"lineNumber":57,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(UPDATE_FILE_ERROR);"},{"lineNumber":58,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":61,"author":{"gitId":"warmwhalefy"},"content":"    // adding task based on what is in text file"},{"lineNumber":62,"author":{"gitId":"warmwhalefy"},"content":"    public static void addTaskFromFile(String fileInput, String taskIcon, ArrayList\u003cTask\u003e arrayOfTasks) {"},{"lineNumber":63,"author":{"gitId":"warmwhalefy"},"content":"        switch (taskIcon) {"},{"lineNumber":64,"author":{"gitId":"warmwhalefy"},"content":"        case \"[T]\":"},{"lineNumber":65,"author":{"gitId":"warmwhalefy"},"content":"            addTodoFromFile(fileInput, arrayOfTasks);"},{"lineNumber":66,"author":{"gitId":"warmwhalefy"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"warmwhalefy"},"content":"        case \"[E]\":"},{"lineNumber":68,"author":{"gitId":"warmwhalefy"},"content":"            addEventFromFile(fileInput, arrayOfTasks);"},{"lineNumber":69,"author":{"gitId":"warmwhalefy"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"warmwhalefy"},"content":"        case \"[D]\":"},{"lineNumber":71,"author":{"gitId":"warmwhalefy"},"content":"            addDeadlineFromFile(fileInput, arrayOfTasks);"},{"lineNumber":72,"author":{"gitId":"warmwhalefy"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"warmwhalefy"},"content":"        default:"},{"lineNumber":74,"author":{"gitId":"warmwhalefy"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":78,"author":{"gitId":"warmwhalefy"},"content":"    private static void addDeadlineFromFile(String fileInput, ArrayList\u003cTask\u003e arrayOfTasks) {"},{"lineNumber":79,"author":{"gitId":"warmwhalefy"},"content":"        int byIndex \u003d fileInput.indexOf(\"(by:\");"},{"lineNumber":80,"author":{"gitId":"warmwhalefy"},"content":"        Deadline deadlineAdded \u003d new Deadline(fileInput.substring(7, byIndex), fileInput.substring(byIndex + 5, fileInput.indexOf(\")\")));"},{"lineNumber":81,"author":{"gitId":"warmwhalefy"},"content":"        arrayOfTasks.add(deadlineAdded);"},{"lineNumber":82,"author":{"gitId":"warmwhalefy"},"content":"        if (fileInput.contains(\"X\")) {"},{"lineNumber":83,"author":{"gitId":"warmwhalefy"},"content":"            arrayOfTasks.get(arrayOfTasks.size() - 1).markAsDone();"},{"lineNumber":84,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":87,"author":{"gitId":"warmwhalefy"},"content":"    private static void addEventFromFile(String fileInput, ArrayList\u003cTask\u003e arrayOfTasks) {"},{"lineNumber":88,"author":{"gitId":"warmwhalefy"},"content":"        int byIndex \u003d fileInput.indexOf(\"(at:\");"},{"lineNumber":89,"author":{"gitId":"warmwhalefy"},"content":"        Event eventAdded \u003d new Event(fileInput.substring(7, byIndex), fileInput.substring(byIndex + 5, fileInput.indexOf(\")\")));"},{"lineNumber":90,"author":{"gitId":"warmwhalefy"},"content":"        arrayOfTasks.add(eventAdded);"},{"lineNumber":91,"author":{"gitId":"warmwhalefy"},"content":"        if (fileInput.contains(\"X\")) {"},{"lineNumber":92,"author":{"gitId":"warmwhalefy"},"content":"            arrayOfTasks.get(arrayOfTasks.size() - 1).markAsDone();"},{"lineNumber":93,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":96,"author":{"gitId":"warmwhalefy"},"content":"    private static void addTodoFromFile(String fileInput, ArrayList\u003cTask\u003e arrayOfTasks) {"},{"lineNumber":97,"author":{"gitId":"warmwhalefy"},"content":"        Todo todoAdded \u003d new Todo(fileInput.substring(7));"},{"lineNumber":98,"author":{"gitId":"warmwhalefy"},"content":"        arrayOfTasks.add(todoAdded);"},{"lineNumber":99,"author":{"gitId":"warmwhalefy"},"content":"        if (fileInput.contains(\"X\")) {"},{"lineNumber":100,"author":{"gitId":"warmwhalefy"},"content":"            arrayOfTasks.get(arrayOfTasks.size() - 1).markAsDone();"},{"lineNumber":101,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":104,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":104}},{"path":"src/main/java/duke/command/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"import static duke.Duke.SECTION_DIVIDER;"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    private final ArrayList\u003cTask\u003e arrayOfTasks;"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"        arrayOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"    public TaskList(ArrayList\u003cTask\u003e arrayOfTasks) {"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"        this.arrayOfTasks \u003d arrayOfTasks;"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"    public ArrayList\u003cTask\u003e getArrayOfTasks() {"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"        return arrayOfTasks;"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"    public int getNoOfTasks() {"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"        return arrayOfTasks.size();"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":"    public void addTask(Task task) {"},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"        arrayOfTasks.add(task);"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"        printTaskAdded(task);"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":"    public Task getTaskFromIndex(int index) {"},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"        return arrayOfTasks.get(index);"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":"    //printing task after it is added"},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"    private void printTaskAdded(Task taskAdded) {"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\" + System.lineSeparator() + taskAdded);"},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Now you have \" + getNoOfTasks() + \" tasks in the list.\");"},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"    // prints items on current arrayOfTasks"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":"    public void viewTasks() {"},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"        // handle error case where no tasks in array"},{"lineNumber":48,"author":{"gitId":"warmwhalefy"},"content":"        if (getNoOfTasks() \u003d\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"There are no tasks in your list.\");"},{"lineNumber":50,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":52,"author":{"gitId":"warmwhalefy"},"content":"            for (int i \u003d 1; i \u003c\u003d getNoOfTasks(); i++) {"},{"lineNumber":53,"author":{"gitId":"warmwhalefy"},"content":"                System.out.println(i + \". \" + getArrayOfTasks().get(i - 1));"},{"lineNumber":54,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":57,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":59,"author":{"gitId":"warmwhalefy"},"content":"    // marks tasks as done"},{"lineNumber":60,"author":{"gitId":"warmwhalefy"},"content":"    public void markTaskAsDone(int taskNo) {"},{"lineNumber":61,"author":{"gitId":"warmwhalefy"},"content":"        if (taskNo \u003e getNoOfTasks()) {"},{"lineNumber":62,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"You only have \" + getNoOfTasks() + \" task(s)!\");"},{"lineNumber":63,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":64,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"warmwhalefy"},"content":"            getTaskFromIndex(taskNo - 1).markAsDone();"},{"lineNumber":66,"author":{"gitId":"warmwhalefy"},"content":"            printTaskDone(taskNo);"},{"lineNumber":67,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":70,"author":{"gitId":"warmwhalefy"},"content":"    // printing out task that is marked done"},{"lineNumber":71,"author":{"gitId":"warmwhalefy"},"content":"    public void printTaskDone(int taskNo) {"},{"lineNumber":72,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Nice! I have marked this task as done:\" + getTaskFromIndex(taskNo - 1));"},{"lineNumber":73,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":74,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":76,"author":{"gitId":"warmwhalefy"},"content":"    // Delete tasks"},{"lineNumber":77,"author":{"gitId":"warmwhalefy"},"content":"    public void deleteTask(int taskNo) {"},{"lineNumber":78,"author":{"gitId":"warmwhalefy"},"content":"        if (taskNo \u003e arrayOfTasks.size()) {"},{"lineNumber":79,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"You only have \" + arrayOfTasks.size() + \" task(s)!\");"},{"lineNumber":80,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":81,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"warmwhalefy"},"content":"            printTaskDeleted(taskNo);"},{"lineNumber":83,"author":{"gitId":"warmwhalefy"},"content":"            arrayOfTasks.remove(taskNo - 1);"},{"lineNumber":84,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":87,"author":{"gitId":"warmwhalefy"},"content":"    public void printTaskDeleted(int taskNo) {"},{"lineNumber":88,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \" + System.lineSeparator() + getTaskFromIndex(taskNo - 1));"},{"lineNumber":89,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Now you have \" + arrayOfTasks.size() + \" tasks in the list.\");"},{"lineNumber":90,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":91,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":93,"author":{"gitId":"warmwhalefy"},"content":"    public ArrayList\u003cTask\u003e findTasks(String keyword) {"},{"lineNumber":94,"author":{"gitId":"warmwhalefy"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitId":"warmwhalefy"},"content":"        for (Task t : arrayOfTasks) {"},{"lineNumber":96,"author":{"gitId":"warmwhalefy"},"content":"            if (t.toString().toLowerCase().contains(keyword)) {"},{"lineNumber":97,"author":{"gitId":"warmwhalefy"},"content":"                foundTasks.add(t);"},{"lineNumber":98,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"warmwhalefy"},"content":"        return foundTasks;"},{"lineNumber":101,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":102}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"import static duke.Duke.SECTION_DIVIDER;"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"    private static final String TODO_ERROR \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    private static final String EVENT_ERROR \u003d \"☹ OOPS!!! The description of an event cannot be empty or is incomplete (/at).\";"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"    private static final String DEADLINE_ERROR \u003d \"☹ OOPS!!! The description of a deadline cannot be empty or is incomplete (/by).\";"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_TODO \u003d \"todo\";"},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_EVENT \u003d \"event\";"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_DEADLINE \u003d \"deadline\";"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_BYE \u003d \"bye\";"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_LIST \u003d \"list\";"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_DONE \u003d \"done\";"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"    public static final String KEYWORD_DELETE \u003d \"delete\";"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"    public static final int ADD_INDEX_TO_TODO \u003d 5;"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"    public static final int ADD_INDEX_TO_EVENT \u003d 6;"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"    public static final int ADD_INDEX_TO_DEADLINE \u003d 9;"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"    public static boolean isInvalidInput \u003d false;"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"    public static void handleErrorUserInputs(String userInput) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":"        userInput \u003d userInput.toLowerCase().trim();"},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"    //making sure user input is correct"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.contains(KEYWORD_TODO) \u0026\u0026 !(userInput.contains(KEYWORD_EVENT)) \u0026\u0026 !(userInput.contains(KEYWORD_DEADLINE))) {"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"            validateTodo(userInput);"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_EVENT) \u0026\u0026 !(userInput.contains(KEYWORD_TODO)) \u0026\u0026 !(userInput.contains(KEYWORD_DEADLINE))) {"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":"            validateEvent(userInput);"},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_DEADLINE) \u0026\u0026 !(userInput.contains(KEYWORD_TODO)) \u0026\u0026 !(userInput.contains(KEYWORD_EVENT))) {"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"            validateDeadline(userInput);"},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_LIST)"},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.contains(KEYWORD_BYE)"},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.contains(KEYWORD_DONE)"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.contains(KEYWORD_DELETE)"},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.contains(\"find\")) {"},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":"            isInvalidInput \u003d false;"},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":"            isInvalidInput \u003d true;"},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"            //input is invalid, have to re-enter"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":48,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":51,"author":{"gitId":"warmwhalefy"},"content":"    //ensure description and deadline is not empty"},{"lineNumber":52,"author":{"gitId":"warmwhalefy"},"content":"    private static void validateDeadline(String userInput) throws DukeException {"},{"lineNumber":53,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.substring(ADD_INDEX_TO_DEADLINE - 1).trim().isEmpty()"},{"lineNumber":54,"author":{"gitId":"warmwhalefy"},"content":"                || !(userInput.contains(\"/by\"))"},{"lineNumber":55,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.substring(userInput.indexOf(\"/by\") + 3).trim().isEmpty() ) {"},{"lineNumber":56,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(DEADLINE_ERROR);"},{"lineNumber":57,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"warmwhalefy"},"content":"            isInvalidInput \u003d false;"},{"lineNumber":59,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":62,"author":{"gitId":"warmwhalefy"},"content":"    //ensure description and event location is not empty"},{"lineNumber":63,"author":{"gitId":"warmwhalefy"},"content":"    private static void validateEvent(String userInput) throws DukeException {"},{"lineNumber":64,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.substring(ADD_INDEX_TO_EVENT - 1).trim().isEmpty()"},{"lineNumber":65,"author":{"gitId":"warmwhalefy"},"content":"                || !(userInput.contains(\"/at\"))"},{"lineNumber":66,"author":{"gitId":"warmwhalefy"},"content":"                || userInput.substring(userInput.indexOf(\"/at\") + 3).trim().isEmpty()) {"},{"lineNumber":67,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(EVENT_ERROR);"},{"lineNumber":68,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"warmwhalefy"},"content":"            isInvalidInput \u003d false;"},{"lineNumber":70,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":73,"author":{"gitId":"warmwhalefy"},"content":"    //ensure description is not empty"},{"lineNumber":74,"author":{"gitId":"warmwhalefy"},"content":"    private static void validateTodo(String userInput) throws DukeException {"},{"lineNumber":75,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.substring(ADD_INDEX_TO_TODO - 1).trim().isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(TODO_ERROR);"},{"lineNumber":77,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"warmwhalefy"},"content":"            isInvalidInput \u003d false;"},{"lineNumber":79,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":82,"author":{"gitId":"warmwhalefy"},"content":"    //different command for different keywords"},{"lineNumber":83,"author":{"gitId":"warmwhalefy"},"content":"    public static Command parseCommand(String userInput) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.contains(KEYWORD_LIST)) {"},{"lineNumber":85,"author":{"gitId":"warmwhalefy"},"content":"            return new ListCommand();"},{"lineNumber":86,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_DONE)) {"},{"lineNumber":87,"author":{"gitId":"warmwhalefy"},"content":"            return new DoneCommand();"},{"lineNumber":88,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_DELETE)) {"},{"lineNumber":89,"author":{"gitId":"warmwhalefy"},"content":"            return new DeleteCommand();"},{"lineNumber":90,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(\"find\")) {"},{"lineNumber":91,"author":{"gitId":"warmwhalefy"},"content":"            return new FindCommand();"},{"lineNumber":92,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_BYE)) {"},{"lineNumber":93,"author":{"gitId":"warmwhalefy"},"content":"            return new ByeCommand();"},{"lineNumber":94,"author":{"gitId":"warmwhalefy"},"content":"        } else if (!userInput.contains(KEYWORD_BYE)) {"},{"lineNumber":95,"author":{"gitId":"warmwhalefy"},"content":"            return new AddCommand();"},{"lineNumber":96,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(\"Command Error!\");"},{"lineNumber":98,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":101,"author":{"gitId":"warmwhalefy"},"content":"    // to add task from input"},{"lineNumber":102,"author":{"gitId":"warmwhalefy"},"content":"    public static Task getTask(String userInput) {"},{"lineNumber":103,"author":{"gitId":"warmwhalefy"},"content":"        Task taskToAdd \u003d null;"},{"lineNumber":104,"author":{"gitId":"warmwhalefy"},"content":"        if (userInput.contains(KEYWORD_DEADLINE)) {"},{"lineNumber":105,"author":{"gitId":"warmwhalefy"},"content":"            taskToAdd \u003d getDeadline(userInput);"},{"lineNumber":106,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_EVENT)) {"},{"lineNumber":107,"author":{"gitId":"warmwhalefy"},"content":"            taskToAdd \u003d getEvent(userInput);"},{"lineNumber":108,"author":{"gitId":"warmwhalefy"},"content":"        } else if (userInput.contains(KEYWORD_TODO)){"},{"lineNumber":109,"author":{"gitId":"warmwhalefy"},"content":"            taskToAdd \u003d getTodo(userInput);"},{"lineNumber":110,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"warmwhalefy"},"content":"        return taskToAdd;"},{"lineNumber":112,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":114,"author":{"gitId":"warmwhalefy"},"content":"    private static Todo getTodo(String userInput) {"},{"lineNumber":115,"author":{"gitId":"warmwhalefy"},"content":"        int descriptionIndex \u003d userInput.indexOf(\"todo\") + ADD_INDEX_TO_TODO;"},{"lineNumber":116,"author":{"gitId":"warmwhalefy"},"content":"        return new Todo(userInput.substring(descriptionIndex));"},{"lineNumber":117,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":119,"author":{"gitId":"warmwhalefy"},"content":"    private static Event getEvent(String userInput) {"},{"lineNumber":120,"author":{"gitId":"warmwhalefy"},"content":"        int descriptionIndex \u003d userInput.indexOf(\"event\") + ADD_INDEX_TO_EVENT;"},{"lineNumber":121,"author":{"gitId":"warmwhalefy"},"content":"        int byIndex \u003d userInput.indexOf(\"/at\");"},{"lineNumber":122,"author":{"gitId":"warmwhalefy"},"content":"        return new Event(userInput.substring(descriptionIndex, byIndex-1), userInput.substring(byIndex + 4));"},{"lineNumber":123,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":125,"author":{"gitId":"warmwhalefy"},"content":"    private static Deadline getDeadline(String userInput) {"},{"lineNumber":126,"author":{"gitId":"warmwhalefy"},"content":"        int descriptionIndex \u003d userInput.indexOf(\"deadline\") + ADD_INDEX_TO_DEADLINE;"},{"lineNumber":127,"author":{"gitId":"warmwhalefy"},"content":"        int byIndex \u003d userInput.indexOf(\"/by\");"},{"lineNumber":128,"author":{"gitId":"warmwhalefy"},"content":"        return new Deadline(userInput.substring(descriptionIndex, byIndex-1), userInput.substring(byIndex + 4));"},{"lineNumber":129,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":131,"author":{"gitId":"warmwhalefy"},"content":"    //getting task"},{"lineNumber":132,"author":{"gitId":"warmwhalefy"},"content":"    public static int getTaskNo(String userInput) throws DukeException {"},{"lineNumber":133,"author":{"gitId":"warmwhalefy"},"content":"        userInput \u003d userInput.replaceAll(\"[^0-9]\", \"\");"},{"lineNumber":134,"author":{"gitId":"warmwhalefy"},"content":"        int taskNo;"},{"lineNumber":135,"author":{"gitId":"warmwhalefy"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"warmwhalefy"},"content":"            taskNo \u003d Integer.parseInt(userInput);"},{"lineNumber":137,"author":{"gitId":"warmwhalefy"},"content":"            if (taskNo \u003d\u003d 0) {"},{"lineNumber":138,"author":{"gitId":"warmwhalefy"},"content":"                throw new DukeException(\"Invalid Input! Integer cannot be 0!\");"},{"lineNumber":139,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"warmwhalefy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":141,"author":{"gitId":"warmwhalefy"},"content":"            throw new DukeException(\"Invalid Input! Input format should have an integer!\");"},{"lineNumber":142,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"warmwhalefy"},"content":"        return taskNo;"},{"lineNumber":144,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":146,"author":{"gitId":"warmwhalefy"},"content":"    public static String findKeyword(String userInput) {"},{"lineNumber":147,"author":{"gitId":"warmwhalefy"},"content":"        int descriptionIndex \u003d userInput.indexOf(\"find\") + 5;"},{"lineNumber":148,"author":{"gitId":"warmwhalefy"},"content":"        return userInput.substring(descriptionIndex).trim().toLowerCase();"},{"lineNumber":149,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":150}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":15}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"public class Event extends Task{"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":15}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"        return (this.description);"},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"    public void markAsDone(){"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"        this.isDone \u003d true;"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":"    public String toString(){"},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":28}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"public class Todo extends Task{"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"     public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"         super(description);"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":12}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"import duke.command.DukeException;"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"import static duke.Duke.SECTION_DIVIDER;"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"import static duke.parser.Parser.KEYWORD_BYE;"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"warmwhalefy"},"content":"    private static final String logo \u003d \" ____        _        \\n\""},{"lineNumber":12,"author":{"gitId":"warmwhalefy"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":13,"author":{"gitId":"warmwhalefy"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"warmwhalefy"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":15,"author":{"gitId":"warmwhalefy"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":16,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":17,"author":{"gitId":"warmwhalefy"},"content":"    public void greetUser(){"},{"lineNumber":18,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":19,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":20,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"Hello! I\u0027m Duke.\");"},{"lineNumber":21,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":22,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":23,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":25,"author":{"gitId":"warmwhalefy"},"content":"    public boolean sayBye(String byeInput) {"},{"lineNumber":26,"author":{"gitId":"warmwhalefy"},"content":"        if (byeInput.toLowerCase().contains(KEYWORD_BYE)) {"},{"lineNumber":27,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":28,"author":{"gitId":"warmwhalefy"},"content":"            System.out.println(SECTION_DIVIDER);"},{"lineNumber":29,"author":{"gitId":"warmwhalefy"},"content":"            return true;"},{"lineNumber":30,"author":{"gitId":"warmwhalefy"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"warmwhalefy"},"content":"            return false;"},{"lineNumber":32,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":35,"author":{"gitId":"warmwhalefy"},"content":"    public static String getUserInput() throws DukeException {"},{"lineNumber":36,"author":{"gitId":"warmwhalefy"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":37,"author":{"gitId":"warmwhalefy"},"content":"        String userInput \u003d scan.nextLine();"},{"lineNumber":38,"author":{"gitId":"warmwhalefy"},"content":"        Parser.handleErrorUserInputs(userInput);"},{"lineNumber":39,"author":{"gitId":"warmwhalefy"},"content":"        while (Parser.isInvalidInput) {"},{"lineNumber":40,"author":{"gitId":"warmwhalefy"},"content":"            userInput \u003d scan.nextLine();"},{"lineNumber":41,"author":{"gitId":"warmwhalefy"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"warmwhalefy"},"content":"                Parser.handleErrorUserInputs(userInput);"},{"lineNumber":43,"author":{"gitId":"warmwhalefy"},"content":"            } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"warmwhalefy"},"content":"                Parser.isInvalidInput \u003d true;"},{"lineNumber":45,"author":{"gitId":"warmwhalefy"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"warmwhalefy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"warmwhalefy"},"content":"        return userInput;"},{"lineNumber":48,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":50,"author":{"gitId":"warmwhalefy"},"content":"    public Ui() {"},{"lineNumber":51,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":53,"author":{"gitId":"warmwhalefy"},"content":"    public void showLoadingError(String message) {"},{"lineNumber":54,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(message);"},{"lineNumber":55,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":56,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"warmwhalefy"},"content":""},{"lineNumber":58,"author":{"gitId":"warmwhalefy"},"content":"    public void showErrorMessage(String message) {"},{"lineNumber":59,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(message);"},{"lineNumber":60,"author":{"gitId":"warmwhalefy"},"content":"        System.out.println(SECTION_DIVIDER);"},{"lineNumber":61,"author":{"gitId":"warmwhalefy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"warmwhalefy"},"content":"}"}],"authorContributionMap":{"warmwhalefy":62}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"warmwhalefy"},"content":"todo laundry"},{"lineNumber":2,"author":{"gitId":"warmwhalefy"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"warmwhalefy"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"warmwhalefy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"warmwhalefy"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"warmwhalefy"},"content":"list"},{"lineNumber":7,"author":{"gitId":"warmwhalefy"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"warmwhalefy"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"warmwhalefy"},"content":"list"},{"lineNumber":10,"author":{"gitId":"warmwhalefy"},"content":"bye"}],"authorContributionMap":{"warmwhalefy":10}}]
