[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"# Hi, I am Friday, your personal assistant."},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":"**_(A task management applictaion based on the Duke project)_**  "},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"This is a project based on the template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. "},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"Given below are instructions on how to use it."},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"## Check the Friday User Guide"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"Read the user guide [here](https://song0180.github.io/ip/) to know about how to use this application"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"## Run the application using the ip.jar file"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"Prerequisites: Java 11.  "},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"1. Open a terminal at the folder where the `ip.jar` file is located.  "},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"1. Run command `java -jar ip.jar`"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"### Open the project using IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"   _____________________________________________________________"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    Welcome."},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"    I am your assistant Friday :)"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    Just FYI, I am developed by Song Yu."},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    May I know what I can help you?"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"   _____________________________________________________________"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":16,"Song0180":22}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"# Friday - User Guide"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":"**Hi, I am Friday, your personal assistant.**  \\"},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"\\"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"Friday is a desktop task management applictaion based on the Duke project, which is a greenfield Java project named after the Java mascot Duke. It is designed for use via **Command Line Interface (CLI)**."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"---"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"## Table of Content"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"* [Quick start](README.md#quick-start)"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"* [Features](README.md#features)"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    - [Adding a to-do type of task : `todo`](README.md#adding-a-to-do-type-of-task--todo)"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    - [Adding a deadline type of task : `deadline`](README.md#adding-a-deadline-type-of-task--deadline)"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    - [Adding an event type of task : `event`](README.md#adding-an-event-type-of-task--event)"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"    - [Viewing all tasks currently in the task list : `list`](README.md#viewing-all-tasks-currently-in-the-task-list--list)"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    - [Marking a task as done : `done`](README.md#marking-a-task-as-done--done)"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    - [Deleting a task from the task list : `delete`](README.md#deleting-a-task-from-the-task-list--delete)"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    - [Searching a task in the task list : `find`](README.md#searching-a-task-in-the-task-list--find)"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    - [Exiting the application : `bye` \u0026 `exit`](README.md#exiting-the-application--exit-or-bye)"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"* [Command summary](README.md#command-summary)"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"---"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"## Quick start"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"This is a cross-platform application, you can run it on any operating system as long as **Java 11** is installed. "},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"\u003e To verify if you have **Java 11** installed, simply type command `java --version` in your terminal."},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"1. Download the `ip.jar` file from the [latest release](https://github.com/song0180/ip/releases)."},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"1. Open a new terminal at the folder where the `ip.jar` file is located."},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"1. Run the applictaion use command `java -jar ip.jar`"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"1. Refer to the [Features](README.md#features) section below for more info on commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"\u003e **Note:**"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"\u003e * All commands should be input in `lower_case`. It is always the first word supplied by the user."},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"\u003e   e.g. `help`, `list`, `todo haha`, etc."},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"\u003e * Parameters of a command are denoted in `UPPER_CASE`. They must be supplied by the user, otherwise the command will not be recognized."},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"\u003e   The actual input of the parameters can be in any case. "},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"\u003e   "},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"\u003e   e.g. in `todo TASK_CONTENT`, `TASK_CONTENT` is a parameter which can be used as `todo Submit My Assignment`."},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"\u003e * Redundant parameters for single-word commands (such as `help` and `list`) will be ignored. "},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"\u003e    e.g. if the command `help hahahaha` is input, it is equivalent to `help`."},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"\u003e * After the appliction starts running, it checks if a `data` folder exists in the same directory where `ip.jar` is located."},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"\u003e   If the folder does not exist, the application will create a new folder `data`, "},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"\u003e   which is used to store the `task.txt` file which contains details of the user\u0027s tasks."},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"\u003e"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"\u003e * The text file `tasks.txt` will be automatically updated in correspondance to the user\u0027s task list. "},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"\u003e "},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"\u003e   i.e. the content of the text file will be updated after operations such as adding/removing tasks in the task list."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"### Get help from instructions on how to use this app : `help`"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"Adds a to-do type of task to the task list."},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"Format: `help`"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"Example: `help`"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"_______________________________________________________________________________________________________________________________________________________________________________________"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":" \u0027help\u0027     : Display tips on using this application"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":" \u0027exit\u0027     : Exit the application"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":" \u0027bye\u0027      : Exit the application"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":" \u0027list\u0027     : List all type of tasks you added to your task list"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":" \u0027done\u0027     : Mark a task as done"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027done 2\u0027 will mark the second task as done"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":" \u0027todo\u0027     : Add a new todo task"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027todo read book\u0027 will add \"read book\" to your task list"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":" \u0027deadline\u0027 : Add a new deadline task"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027deadline read book /by YYYY-DD-MM\u0027 will add \"read book\" to your task list with deadline task by date in format YYYY-DD-MM"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":" \u0027event\u0027    : Add a new event task"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027event read book /at YYYY-DD-MM\u0027 will add \"read book\" to your task list with an event task at date in format YYYY-DD-MM"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":" \u0027delete\u0027   : Delete a task using the index"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027delete 1\u0027 will delete the task with index of 1"},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":" \u0027find\u0027     : Search tasks using strings"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"\t e.g. \u0027find eat\u0027 will display a list of tasks that contains the string \u0027eat\u0027"},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"_______________________________________________________________________________________________________________________________________________________________________________________"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"### Adding a to-do type of task : `todo`"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"Adds a to-do type of task to the task list."},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"Format: `todo TASK_CONTENT`"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"Example: `todo Order food for dinner`"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"A new to-do task is added:"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"Task content  :Order food for dinner"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"Now you have 1 task in the list."},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"### Adding a deadline type of task : `deadline`"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"Adds a deadline type of task to the task list."},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"Format: `deadline TASK_CONTENT /by DEADLINE_DATE`"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `DEADLINE_DATE` parameter must be specified in the format `YYYY-MM-DD`."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"Example: `deadline Submit Lab report /by 2021-02-27`"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"A new deadline task is added:"},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":"Task content  :Submit Lab report"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"Task deadline :(by: SATURDAY, 27 FEBRUARY 2021)"},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":"Now you have 2 tasks in the list."},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"### Adding an event type of task : `event`"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"Adds a event type of task to the task list."},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"Format: `event TASK_CONTENT /at EVENT_DATE`"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `EVENT_DATE` parameter must be specified in the format `YYYY-MM-DD`."},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"Example: `event Graduation ceremony /at 2023-05-10`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"A new event task is added:"},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":"Task content  :Graduation ceremony"},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"Task period   :(at: WEDNESDAY, 10 MAY 2023)"},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"Now you have 3 tasks in the list."},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"### Viewing all tasks currently in the task list : `list`"},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":"Displays all tasks currently the task list, along with the task type and task status."},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":147,"author":{"gitId":"Song0180"},"content":"\u003e There are 3 types of task:  "},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":"\u003e * `T` - to-do type of task  "},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"\u003e * `D` - deadline type of task  "},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":"\u003e * `E` - event type of task  "},{"lineNumber":151,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":152,"author":{"gitId":"Song0180"},"content":"\u003e There are 2 status of task:  "},{"lineNumber":153,"author":{"gitId":"Song0180"},"content":"\u003e * `  ` - the task is not done yet  "},{"lineNumber":154,"author":{"gitId":"Song0180"},"content":"\u003e * `X` - the task is marked as done  "},{"lineNumber":155,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":156,"author":{"gitId":"Song0180"},"content":"Format: `list`"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Song0180"},"content":"Example: `list`"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"Song0180"},"content":"Expected outcome 1:"},{"lineNumber":161,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":162,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"Song0180"},"content":"This is your current task list:"},{"lineNumber":165,"author":{"gitId":"Song0180"},"content":"1. [T] [ ] Order food for dinner"},{"lineNumber":166,"author":{"gitId":"Song0180"},"content":"2. [D] [ ] Submit Lab report (by: SATURDAY, 27 FEBRUARY 2021)"},{"lineNumber":167,"author":{"gitId":"Song0180"},"content":"3. [E] [ ] Graduation ceremony (at: WEDNESDAY, 10 MAY 2023)"},{"lineNumber":168,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":169,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":170,"author":{"gitId":"Song0180"},"content":"Expected outcome 2 (When there is no task in the task list):"},{"lineNumber":171,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":172,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"Song0180"},"content":"This is your current task list:"},{"lineNumber":175,"author":{"gitId":"Song0180"},"content":" - The list is empty!"},{"lineNumber":176,"author":{"gitId":"Song0180"},"content":" - You can try add task object by input what"},{"lineNumber":177,"author":{"gitId":"Song0180"},"content":"   you want to do."},{"lineNumber":178,"author":{"gitId":"Song0180"},"content":" - check \u0027help\u0027 for more."},{"lineNumber":179,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":180,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":181,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":182,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":183,"author":{"gitId":"Song0180"},"content":"### Marking a task as done : `done`"},{"lineNumber":184,"author":{"gitId":"Song0180"},"content":"Marks a task as done using its index in the task list."},{"lineNumber":185,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":186,"author":{"gitId":"Song0180"},"content":"Format: `done TASK_INDEX`"},{"lineNumber":187,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":188,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `TASK_INDEX` parameter must be an `Integer` within the range of the task list."},{"lineNumber":189,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":190,"author":{"gitId":"Song0180"},"content":"Example: `done 1`"},{"lineNumber":191,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":192,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":193,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":194,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":195,"author":{"gitId":"Song0180"},"content":"The task object: "},{"lineNumber":196,"author":{"gitId":"Song0180"},"content":" | Order food for dinner |"},{"lineNumber":197,"author":{"gitId":"Song0180"},"content":"is marked as done."},{"lineNumber":198,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":199,"author":{"gitId":"Song0180"},"content":"This is your current task list:"},{"lineNumber":200,"author":{"gitId":"Song0180"},"content":"1. [T] [X] Order food for dinner"},{"lineNumber":201,"author":{"gitId":"Song0180"},"content":"2. [D] [ ] Submit Lab report (by: SATURDAY, 27 FEBRUARY 2021)"},{"lineNumber":202,"author":{"gitId":"Song0180"},"content":"3. [E] [ ] Graduation ceremony (at: WEDNESDAY, 10 MAY 2023)"},{"lineNumber":203,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":204,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":205,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":206,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":207,"author":{"gitId":"Song0180"},"content":"### Deleting a task from the task list : `delete`"},{"lineNumber":208,"author":{"gitId":"Song0180"},"content":"Deletes a task using its index in the task list."},{"lineNumber":209,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":210,"author":{"gitId":"Song0180"},"content":"Format: `delete TASK_INDEX`"},{"lineNumber":211,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":212,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `TASK_INDEX` parameter must be an `Integer` within the range of the task list."},{"lineNumber":213,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":214,"author":{"gitId":"Song0180"},"content":"Example: `delete 1`"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":217,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":218,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":219,"author":{"gitId":"Song0180"},"content":"The task below is successfully removed from your task list:)"},{"lineNumber":220,"author":{"gitId":"Song0180"},"content":"\t[T] [X] Order food for dinner"},{"lineNumber":221,"author":{"gitId":"Song0180"},"content":"Now you have 2 tasks in the list."},{"lineNumber":222,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":223,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":224,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":225,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":226,"author":{"gitId":"Song0180"},"content":"### Searching a task in the task list : `find`"},{"lineNumber":227,"author":{"gitId":"Song0180"},"content":"Searches for a task using that contains the keyword input."},{"lineNumber":228,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":229,"author":{"gitId":"Song0180"},"content":"Format: `find KEY_WORD`"},{"lineNumber":230,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":231,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `KEY_WORD` parameter is case sensitive. The keyword input must match the exact case of the desired task content, otherwise no task will be found."},{"lineNumber":232,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":233,"author":{"gitId":"Song0180"},"content":"Example: `find Submit`"},{"lineNumber":234,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":235,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":236,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":237,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":238,"author":{"gitId":"Song0180"},"content":"Here are the matching tasks in your list:"},{"lineNumber":239,"author":{"gitId":"Song0180"},"content":"1. [D] [ ] Submit Lab report (by: SATURDAY, 27 FEBRUARY 2021)"},{"lineNumber":240,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":241,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":242,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":243,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":244,"author":{"gitId":"Song0180"},"content":"### Exiting the application : `exit` or `bye`"},{"lineNumber":245,"author":{"gitId":"Song0180"},"content":"Terminates the application."},{"lineNumber":246,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":247,"author":{"gitId":"Song0180"},"content":"Format: `exit` or `bye`"},{"lineNumber":248,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":249,"author":{"gitId":"Song0180"},"content":"\u003e Note that the `KEY_WORD` parameter is case sensitive. The keyword input must match the exact case of the desired task content, otherwise no task will be found."},{"lineNumber":250,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":251,"author":{"gitId":"Song0180"},"content":"Example 1: `exit`  "},{"lineNumber":252,"author":{"gitId":"Song0180"},"content":"Example 2: `bye`"},{"lineNumber":253,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":254,"author":{"gitId":"Song0180"},"content":"Expected outcome:"},{"lineNumber":255,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":256,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":257,"author":{"gitId":"Song0180"},"content":" Thank you for getting in touch."},{"lineNumber":258,"author":{"gitId":"Song0180"},"content":" See you next time."},{"lineNumber":259,"author":{"gitId":"Song0180"},"content":" Have a nice day :)"},{"lineNumber":260,"author":{"gitId":"Song0180"},"content":"_____________________________________________________________"},{"lineNumber":261,"author":{"gitId":"Song0180"},"content":"```"},{"lineNumber":262,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":263,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":264,"author":{"gitId":"Song0180"},"content":"---"},{"lineNumber":265,"author":{"gitId":"Song0180"},"content":"## Command summary"},{"lineNumber":266,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":267,"author":{"gitId":"Song0180"},"content":"Action | Format, Examples"},{"lineNumber":268,"author":{"gitId":"Song0180"},"content":"--- | ---"},{"lineNumber":269,"author":{"gitId":"Song0180"},"content":"Help | `help`"},{"lineNumber":270,"author":{"gitId":"Song0180"},"content":"Add Todo type of task| `todo TASK_CONTENT` e.g. `todo Order food for dinner`"},{"lineNumber":271,"author":{"gitId":"Song0180"},"content":"Add Deadline type of task| `deadline TASK_CONTENT /by DEADLINE_DATE` e.g. `deadline Submit Lab report /by 2021-02-27` "},{"lineNumber":272,"author":{"gitId":"Song0180"},"content":"Add Event type of task| `event TASK_CONTENT /at EVENT_DATE` e.g. `event Graduation ceremony /at 2023-05-10`"},{"lineNumber":273,"author":{"gitId":"Song0180"},"content":"List | `list`"},{"lineNumber":274,"author":{"gitId":"Song0180"},"content":"Done | `done TASK_INDEX` e.g. `done 1`"},{"lineNumber":275,"author":{"gitId":"Song0180"},"content":"Delete | `delete TASK_INDEX` e.g. `delete 1`"},{"lineNumber":276,"author":{"gitId":"Song0180"},"content":"Find | `find KEY_WORD` e.g. `find Submit`"},{"lineNumber":277,"author":{"gitId":"Song0180"},"content":"Exit | `bye`, `exit`"},{"lineNumber":278,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"-":19,"Song0180":259}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import duke.storage.FileHandler;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import duke.taskList.TaskList;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import duke.taskList.TaskListOperation;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import duke.ui.UI;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":" * \u003ch1\u003eHi, this is Friday, your personal assistant!\u003c/h1\u003e"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":" * This application is designed for managing tasks. The"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":" * user can add, delete, search, and mark tasks as done."},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":" * It is developed using the basic framework known as"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":" * Duke."},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":" *"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":" * @author Song Yu"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":" * @version 1.0"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":" * @since 2021-02-24"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"     * The list that stores all tasks of the user."},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"    private static final TaskList taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     * Gets user input and execute corresponding command until the loop is exit."},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    private static void operateMainLoop() {"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"        String userInput;"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        while (true) {"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"            userInput \u003d sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"            String userCommand \u003d Parser.getCommand(userInput);"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"            switch (userCommand) {"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"            case \"help\":"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"                UI.printHelp();"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"            case \"list\":"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"                taskList.printCurrentList();"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"            case \"todo\":"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.addTodoTaskToList(taskList, userInput);"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"            case \"deadline\":"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.addDeadlineTaskToList(taskList, userInput);"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"            case \"event\":"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.addEventTaskToList(taskList, userInput);"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"            case \"done\":"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.handleDoneTask(taskList, userInput);"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"            case \"delete\":"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.deleteTask(taskList, userInput);"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"            case \"find\":"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"                TaskListOperation.searchTaskByString(taskList, userInput);"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"            case \"exit\":"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"                //FALL-THROUGH"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"            case \"bye\":"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"                FileHandler.writeTaskList(taskList);"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"                return;"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"            default:"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"                UI.printNotCommand();"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"     * The main method that drives the application."},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"     * @param args Commandline arguments."},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"    public static void main(String[] args) {"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"        TaskListOperation.initializeTaskList(taskList);"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"        UI.printGreetings();"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"        operateMainLoop();"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        UI.printExitGreetings();"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"Song0180":89}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * This class contains methods that help convert raw user input into a usable format."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"     * Gets command from user input."},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"     * @param userInput user\u0027s input."},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"     * @return command."},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    public static String getCommand(String userInput) {"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"        String[] inputWords \u003d userInput.split(\" \");"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"        return inputWords[0];"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     * Returns the task index in integer."},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"     * @return an integer task index."},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    public static String getTaskIndexString(String userInput) {"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"        return userInput.split(\" \")[1];"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     * Returns the keywords from the user input."},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"     * @return a string of keyword for searching tasks."},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    public static String getSearchKeyword(String userInput) {"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        return userInput.split(\" \")[1];"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"     * Parses the content and time limit of a task from user input."},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"     * @param words                      an String array obtained by splitting the User\u0027s keyboard input."},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     * @param indexOfTimeLimitIdentifier the index of the time limit identifier, such as \"/by\" and \"/at\""},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     * @return an array of size 2. the first slot stores the task content, the second stores the time limit."},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     * @throws Exception error occurred when parsing the content and/or time limit."},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"    public static String[] parseTaskContentAndTime(String[] words, int indexOfTimeLimitIdentifier) throws Exception {"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        String content \u003d getTaskContentString(words, indexOfTimeLimitIdentifier);"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"        String timeLimit \u003d getTaskTimeLimitString(words, indexOfTimeLimitIdentifier);"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"        String[] parseResult \u003d new String[2];"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"        parseResult[0] \u003d content;"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"        parseResult[1] \u003d timeLimit;"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"        return parseResult;"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"     * Parses the time limit of a task from user input and convert it to a usable string."},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"     * @param words                      an String array obtained by splitting the User\u0027s keyboard input."},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"     * @param indexOfTimeLimitIdentifier the index of the time limit identifier, such as \"/by\" and \"/at\""},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"     * @return the processed time limit in String."},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     * @throws Exception error occurred when parsing the time limit."},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"    private static String getTaskTimeLimitString(String[] words, int indexOfTimeLimitIdentifier) throws Exception {"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"        StringBuilder timeLimitBuilder \u003d new StringBuilder();"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        for (int i \u003d (indexOfTimeLimitIdentifier + 1); i \u003c words.length; i++) {"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"            String timeLimitWord \u003d words[i] + \" \";"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"            timeLimitBuilder.append(timeLimitWord);"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"        String timeLimitString \u003d timeLimitBuilder.toString().trim();"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"        if (timeLimitString.length() \u003c 1) {"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"            throw new Exception(\"Time limit must be input! Check \u0027help\u0027.\\n\");"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"        return timeLimitString;"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"     * Parses the content of a task from user input and convert it to a usable string."},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"     * @param words                      an String array obtained by splitting the User\u0027s keyboard input."},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"     * @param indexOfTimeLimitIdentifier the index of the time limit identifier, such as \"/by\" and \"/at\""},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"     * @return the processed task content in String."},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"     * @throws Exception error occurred when parsing the task content."},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"    private static String getTaskContentString(String[] words, int indexOfTimeLimitIdentifier) throws Exception {"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"        StringBuilder contentBuilder \u003d new StringBuilder();"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"        for (int i \u003d 1; i \u003c indexOfTimeLimitIdentifier; i++) {"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"            String contentWord \u003d words[i] + \" \";"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"            contentBuilder.append(contentWord);"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"        String contentStr \u003d contentBuilder.toString().trim();"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"        if (contentStr.length() \u003c 1) {"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"            throw new Exception(\"Task content must be input! Check \u0027help\u0027.\\n\");"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"        return contentStr;"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":96}},{"path":"src/main/java/duke/storage/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import duke.taskList.TaskList;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import duke.ui.UI;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":" * This class contains methods for read/write the task list of the application."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"public class FileHandler {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"    private static final String FILE_PATH \u003d \"data/\";"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    private static final String FILE_NAME \u003d \"tasks.txt\";"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"    private static final String DELIMINATOR \u003d \"#\";"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    private static final String PADDING_TIME \u003d \"NO_TIME_LIMIT\";"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    private static void writeFile(String content) throws IOException {"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH + FileHandler.FILE_NAME);"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"        fw.write(content);"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"        fw.close();"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    private static ArrayList\u003cTask\u003e getTasksFromText(File taskFile) throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"        Scanner sc \u003d new Scanner(taskFile);"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        while (sc.hasNext()) {"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"            String taskStr \u003d sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"            Task newTask \u003d convertStringToTaskObject(taskStr);"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"            if (newTask !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"                tasks.add(newTask);"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"        return tasks;"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"    private static Task convertStringToTaskObject(String taskStr) {"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"        String[] taskWords \u003d taskStr.split(DELIMINATOR);"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        String type \u003d taskWords[0];"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"        boolean isDone \u003d Boolean.parseBoolean(taskWords[1]);"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"        String content \u003d taskWords[2];"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"        LocalDate time \u003d null;"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"        if (!taskWords[3].equals(PADDING_TIME)) {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"            time \u003d LocalDate.parse(taskWords[3]);"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"        Task newTask;"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"        switch (type) {"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"        case \"TODO\":"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"            newTask \u003d new Todo(content);"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"        case \"EVENT\":"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"            newTask \u003d new Event(content, time);"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"        case \"DEADLINE\":"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"            newTask \u003d new Deadline(content, time);"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"            System.out.println(\"Task type not identified!\\n\");"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"            return null;"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"        newTask.setDone(isDone);"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"        return newTask;"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"    private static void createDataDir() {"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"            Files.createDirectory(Path.of(FILE_PATH));"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"        } catch (IOException e) {"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"            e.printStackTrace();"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"    private static String convertTaskToText(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"        StringBuilder taskInText \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"        for (Task task : tasks) {"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"            TaskType type \u003d task.getTaskType();"},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"            String timeLimit;"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"            if (type.equals(TaskType.TODO)) {"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"                timeLimit \u003d PADDING_TIME;"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"            } else {"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"                timeLimit \u003d task.getTimeLimitString();"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"            String taskLine \u003d task.getTaskType()"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"                    + DELIMINATOR + task.isDone()"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"                    + DELIMINATOR + task.getTaskContent()"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"                    + DELIMINATOR + timeLimit;"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"            taskInText.append(taskLine).append(System.lineSeparator());"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"        return taskInText.toString();"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"     * Reads a text file in a fixed file path and converts the text to task objects."},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"     * @return an ArrayList of task objects."},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"    public static ArrayList\u003cTask\u003e readTasksFromFile() {"},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":"        File taskFile \u003d new File(FILE_PATH + FILE_NAME);"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"        ArrayList\u003cTask\u003e localTasks \u003d null;"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"            localTasks \u003d getTasksFromText(taskFile);"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":"            System.out.println(UI.DIVIDER +"},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":"                    \" Local task list file is not found.\\n A new task list is initialized for you.\");"},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"            createDataDir();"},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":"        return localTasks;"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"     * Writes the current task list into a text file in a fixed file path."},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":"     * @param taskListToWrite the task list that will be written into the text file."},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"    public static void writeTaskList(TaskList taskListToWrite) {"},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskListToWrite.getTasks();"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"        String taskInText \u003d convertTaskToText(tasks);"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"            writeFile(taskInText);"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"            e.printStackTrace();"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"            System.out.println(UI.DIVIDER + e.getMessage() + \"\\n\" + UI.DIVIDER_LINE_ONLY);"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":138}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":" * Represents a task with deadline."},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    private LocalDate deadline;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"     * Creates a new Deadline task object with specified task content and deadline (in date)."},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"     * The deadline is a LocalDate object in the format \"YYYY-MM-DD\"."},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"     * @param content  the content of the deadline task."},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * @param deadline the deadline of the deadline task."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    public Deadline(String content, LocalDate deadline) {"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"        super(content);"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        this.taskType \u003d TaskType.DEADLINE;"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"     * Checks if a user input contains keyword used to identify should a deadline task be created."},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     * @throws Exception an exception object with error message to notify the user that"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     *                   the deadline object cannot be create due to the absence of keywords."},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"    public static void isDeadlineCommandValid(String userInput) throws Exception {"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"        if (!userInput.contains(\"/by\")) {"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"            throw new Exception(\"Invalid deadline command. Check \u0027help\u0027.\\n\");"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"     * Returns the content of the deadline task."},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     * @return a String of the content of the deadline task in a usable format."},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     * @throws Exception an exception object with error message to notify the user that"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     *                   the task content cannot be found or parsed."},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"    public static String[] getDeadlineTaskContent(String userInput) throws Exception {"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"        int indexOfByWord \u003d 0;"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"            if (words[i].equals(\"/by\")) {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"                indexOfByWord \u003d i;"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"        return Parser.parseTaskContentAndTime(words, indexOfByWord);"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"     * Gets the deadline of the deadline task."},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     * @return a LocalDate object representing the deadline."},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        return deadline;"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"     * Gets the deadline of the deadline task in String."},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"     * @return a String of the deadline."},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"        return deadline.toString();"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":77}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":" * Represents a task that happens at a given period of time."},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"    private LocalDate eventTime;"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"     * Creates an event task object with specified task content and time period."},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"     * @param content the content of the event."},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"     * @param period  the period when the event takes place."},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"    public Event(String content, LocalDate period) {"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"        super(content);"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"        this.taskType \u003d TaskType.EVENT;"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        this.eventTime \u003d period;"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"     * Checks if a user input contains keyword used to identify should a event task be created."},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     * @throws Exception an exception object with error message to notify the user that"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     *                   the event object cannot be create due to the absence of keywords."},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    public static void isEventCommandValid(String userInput) throws Exception {"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"        if (!userInput.contains(\"/at\")) {"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"            throw new Exception(\"Invalid event command. Check \u0027help\u0027.\\n\");"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"     * Returns the content of the event task."},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     * @return a String of the content of the event task in a usable format."},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     * @throws Exception an exception object with error message to notify the user that"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     *                   the task content cannot be found or parsed."},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"    public static String[] getEventTaskContent(String userInput) throws Exception {"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"        int indexOfAtWord \u003d 0;"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"            if (words[i].equals(\"/at\")) {"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"                indexOfAtWord \u003d i;"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"        return Parser.parseTaskContentAndTime(words, indexOfAtWord);"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"     * Gets the time period of the event task."},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     * @return a LocalDate object representing the time period."},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"    public LocalDate getEventTime() {"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"        return eventTime;"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"     * Gets the time period of the event task in String."},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     * @return a String of the time period."},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"        return eventTime.toString();"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":75}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents the concept of a task."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" * Abstract as it is a high level concept."},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":" * Contains the basic attributes and methods of an ideal task."},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"     * The status of the task."},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"     * The content of the task."},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    protected String taskContent;"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * The type of the task."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    protected TaskType taskType;"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"     * Initializes the task object with given parameter as content."},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"     * @param taskContent The content of the task."},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"    public Task(String taskContent) {"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"        this.isDone \u003d false;"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"        this.taskContent \u003d taskContent;"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"     * Returns the status of the task."},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"     * @return the status of the task."},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"    public boolean isDone() {"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"        return isDone;"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     * Sets a new status of the task."},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"     * @param done the new status of the task."},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"    public void setDone(boolean done) {"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"        isDone \u003d done;"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"     * Returns the content of the task."},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"     * @return the content of the task."},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"    public String getTaskContent() {"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"        return taskContent;"},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"     * Returns the type of the task."},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     * @return the type of the task."},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"    public TaskType getTaskType() {"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        return taskType;"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"     * Gets a String of time limit of a Task object, if applicable."},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"     * @return The time limit of a Task in String."},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"    public abstract String getTimeLimitString();"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":74}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents all the possible types of a task object."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":8}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":" * Represents a to-do task."},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"    public static String[] getTodoTaskContent(String userInput) throws Exception {"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"        String[] parseResult \u003d new String[1];"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"        String contentStr \u003d userInput.substring(5).trim();"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"        if (contentStr.length() \u003c 1) {"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"            throw new Exception(\"Invalid todo command! Check \u0027help\u0027.\\n\");"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"        parseResult[0] \u003d contentStr;"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"        return parseResult;"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * Initializes a To-do type of Task object."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"     * @param content The content of the To-do Task."},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    public Todo(String content) {"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"        super(content);"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"        this.taskType \u003d TaskType.TODO;"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"     * Gets the time limit of the task, if applicable."},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"     * @return \"\"."},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"        return \"\";"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":35}},{"path":"src/main/java/duke/taskList/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.taskList;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import duke.ui.UI;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":" * Represents a list that stores tasks."},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"     * Total number of task object in current list."},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    private int numOfTasks \u003d 0;"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     * The collection of task object in current list."},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"    private ArrayList\u003cTask\u003e Tasks;"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"     * Initializes a to-do-list object with an empty array list that stores task item."},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"    public TaskList() {"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"        this.Tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"     * Returns the total number of task object."},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"     * @return the total number of task object."},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"    public int getNumOfTasks() {"},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"        return numOfTasks;"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"     * Gets all tasks in an ArrayList."},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"     * @return an ArrayList that stores all task objects."},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"        return Tasks;"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"     * Sets tasks in an ArrayList to the current task list."},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"     * @param tasks an ArrayList that stores all task objects to be set."},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"        Tasks \u003d tasks;"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"     * Sets the total number of task objects in a taskList object."},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"     * @param numOfTasks the total number of task objects."},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"    public void setNumOfTasks(int numOfTasks) {"},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"        this.numOfTasks \u003d numOfTasks;"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"     * Returns a string message about the number of task objects in the list."},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"     * @return a string of the number of task objects in the list."},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"    private String getNumOfTasksString() {"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"        int numOfTasks \u003d getNumOfTasks();"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"        return \"Now you have \" + numOfTasks + (numOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"     * Prints the current list with dividers."},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"    public void printCurrentList() {"},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER);"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"        printList();"},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER_LINE_ONLY);"},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"     * Prints the current list (without dividers)."},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"    private void printList() {"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"        int listSize \u003d Tasks.size();"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"        System.out.println(\"This is your current task list:\");"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"        if (listSize \u003d\u003d 0) {"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"            printListEmptyWarning();"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"            for (int i \u003d 0; i \u003c listSize; i++) {"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"                Task currentItem \u003d Tasks.get(i);"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"                String timeLimitFormatted \u003d UI.getTimeLimitFormatted(currentItem);"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"                System.out.println((i + 1) + \". \""},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"                        + \"[\" + UI.convertTaskType(currentItem.getTaskType()) + \"] \""},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"                        + \"[\" + (currentItem.isDone() ? \"X\" : \" \") + \"] \""},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"                        + currentItem.getTaskContent()"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"                        + (currentItem.getTaskType() \u003d\u003d TaskType.TODO ? \"\" : \" \")"},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":"                        + timeLimitFormatted"},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"                );"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"     * Prints warning message if the list is empty."},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"    private void printListEmptyWarning() {"},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":"        System.out.println(\" - The list is empty!\");"},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":"        System.out.println(\" - You can try add task object by input what\\n\""},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"                + \"   you want to do.\\n\""},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"                + \" - check \u0027help\u0027 for more.\""},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"     * Adds a new to-do task to the current task list."},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"     * @param content the content of the new task object."},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"    public void addTodoTask(String content) {"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"        Todo newTask \u003d new Todo(content);"},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"        numOfTasks++;"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":"                + \"A new to-do task is added:\\n\""},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"                + UI.DIVIDER_LINE_ONLY"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":"     * Adds a new deadline task to the current task list."},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":"     * @param content  the content of the new deadline task object."},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"     * @param deadline the deadline of the new deadline task object."},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":"    public void addDeadlineTask(String content, String deadline) {"},{"lineNumber":147,"author":{"gitId":"Song0180"},"content":"        LocalDate timeLimit \u003d getTimeLimitInDate(deadline);"},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":"        Deadline newTask \u003d new Deadline(content, timeLimit);"},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":"        numOfTasks++;"},{"lineNumber":151,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER"},{"lineNumber":152,"author":{"gitId":"Song0180"},"content":"                + \"A new deadline task is added:\\n\""},{"lineNumber":153,"author":{"gitId":"Song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":154,"author":{"gitId":"Song0180"},"content":"                + \"Task deadline :\" + UI.getTimeLimitFormatted(newTask) + \"\\n\""},{"lineNumber":155,"author":{"gitId":"Song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":156,"author":{"gitId":"Song0180"},"content":"                + UI.DIVIDER_LINE_ONLY"},{"lineNumber":157,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":158,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":160,"author":{"gitId":"Song0180"},"content":"    private LocalDate getTimeLimitInDate(String timeLimit) throws DateTimeParseException {"},{"lineNumber":161,"author":{"gitId":"Song0180"},"content":"        return LocalDate.parse(timeLimit);"},{"lineNumber":162,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":164,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"Song0180"},"content":"     * Adds a new event task to the current task list."},{"lineNumber":166,"author":{"gitId":"Song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":167,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"Song0180"},"content":"     * @param content the content of the new event task object."},{"lineNumber":169,"author":{"gitId":"Song0180"},"content":"     * @param period  the period of the new event task object."},{"lineNumber":170,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"Song0180"},"content":"    public void addEventTask(String content, String period) {"},{"lineNumber":172,"author":{"gitId":"Song0180"},"content":"        LocalDate timeLimit \u003d getTimeLimitInDate(period);"},{"lineNumber":173,"author":{"gitId":"Song0180"},"content":"        Event newTask \u003d new Event(content, timeLimit);"},{"lineNumber":174,"author":{"gitId":"Song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":175,"author":{"gitId":"Song0180"},"content":"        numOfTasks++;"},{"lineNumber":176,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER"},{"lineNumber":177,"author":{"gitId":"Song0180"},"content":"                + \"A new event task is added:\\n\""},{"lineNumber":178,"author":{"gitId":"Song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":179,"author":{"gitId":"Song0180"},"content":"                + \"Task period   :\" + UI.getTimeLimitFormatted(newTask) + \"\\n\""},{"lineNumber":180,"author":{"gitId":"Song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":181,"author":{"gitId":"Song0180"},"content":"                + UI.DIVIDER_LINE_ONLY"},{"lineNumber":182,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":183,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":185,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"Song0180"},"content":"     * Removes a given task object from the current task list."},{"lineNumber":187,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"Song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":189,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"Song0180"},"content":"    public void removeTaskFromList(int itemIndex) {"},{"lineNumber":191,"author":{"gitId":"Song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":192,"author":{"gitId":"Song0180"},"content":"        Tasks.remove(itemIndex);"},{"lineNumber":193,"author":{"gitId":"Song0180"},"content":"        numOfTasks--;"},{"lineNumber":194,"author":{"gitId":"Song0180"},"content":"        String timeLimitFormatted \u003d UI.getTimeLimitFormatted(currentItem);"},{"lineNumber":195,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER"},{"lineNumber":196,"author":{"gitId":"Song0180"},"content":"                + \"The task below is successfully removed from your task list:)\\n\\t\""},{"lineNumber":197,"author":{"gitId":"Song0180"},"content":"                + \"[\" + UI.convertTaskType(currentItem.getTaskType()) + \"] \""},{"lineNumber":198,"author":{"gitId":"Song0180"},"content":"                + \"[\" + (currentItem.isDone() ? \"X\" : \" \") + \"] \""},{"lineNumber":199,"author":{"gitId":"Song0180"},"content":"                + currentItem.getTaskContent()"},{"lineNumber":200,"author":{"gitId":"Song0180"},"content":"                + (currentItem.getTaskType() \u003d\u003d TaskType.TODO ? \"\" : \" \")"},{"lineNumber":201,"author":{"gitId":"Song0180"},"content":"                + timeLimitFormatted + \"\\n\""},{"lineNumber":202,"author":{"gitId":"Song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":203,"author":{"gitId":"Song0180"},"content":"                + UI.DIVIDER_LINE_ONLY"},{"lineNumber":204,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":205,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":207,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"Song0180"},"content":"     * Updates the status of a given task object."},{"lineNumber":209,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"Song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":211,"author":{"gitId":"Song0180"},"content":"     * @param isDone    the new status of the task object."},{"lineNumber":212,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"Song0180"},"content":"    public void updateTaskStatus(int itemIndex, boolean isDone) {"},{"lineNumber":214,"author":{"gitId":"Song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":215,"author":{"gitId":"Song0180"},"content":"        currentItem.setDone(isDone);"},{"lineNumber":216,"author":{"gitId":"Song0180"},"content":"        printUpdatedTaskStatus(isDone, currentItem);"},{"lineNumber":217,"author":{"gitId":"Song0180"},"content":"        printList();"},{"lineNumber":218,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER_LINE_ONLY);"},{"lineNumber":219,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":221,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"Song0180"},"content":"     * Prints the updated status of a Task object."},{"lineNumber":223,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"Song0180"},"content":"     * @param isDone      The status of the Task object."},{"lineNumber":225,"author":{"gitId":"Song0180"},"content":"     * @param currentTask The current Task object whose status is updated."},{"lineNumber":226,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"Song0180"},"content":"    private void printUpdatedTaskStatus(boolean isDone, Task currentTask) {"},{"lineNumber":228,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER"},{"lineNumber":229,"author":{"gitId":"Song0180"},"content":"                + \"The task object: \\n\""},{"lineNumber":230,"author":{"gitId":"Song0180"},"content":"                + \" | \" + currentTask.getTaskContent() + \" |\\n\""},{"lineNumber":231,"author":{"gitId":"Song0180"},"content":"                + \"is marked as \""},{"lineNumber":232,"author":{"gitId":"Song0180"},"content":"                + (isDone ? \"done\" : \"undone\") + \".\\n\""},{"lineNumber":233,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":234,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":236,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"Song0180"},"content":"     * Checks if the index of a given task is in the range of the list;"},{"lineNumber":238,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":239,"author":{"gitId":"Song0180"},"content":"     * @param index the index of the task object."},{"lineNumber":240,"author":{"gitId":"Song0180"},"content":"     * @return true if in range, false otherwise."},{"lineNumber":241,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"Song0180"},"content":"    public boolean isIndexInRange(int index) {"},{"lineNumber":243,"author":{"gitId":"Song0180"},"content":"        return !(index \u003c 0 || index \u003e\u003d numOfTasks);"},{"lineNumber":244,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":246,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":246}},{"path":"src/main/java/duke/taskList/TaskListOperation.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.taskList;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import duke.storage.FileHandler;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"import duke.task.*;"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import duke.ui.UI;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":" * This class contains methods of operations upon a taskList object."},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"public class TaskListOperation {"},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"     * Marks a task with a given integer index as done, if the index is not out of range."},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":"    public static void handleDoneTask(TaskList taskList, String userInput) {"},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"            String taskIndexString \u003d Parser.getTaskIndexString(userInput);"},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"            int itemIndex \u003d Integer.parseInt(taskIndexString) - 1;"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"            if (isTaskIndexOutOfRange(taskList, itemIndex)) {"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"                return;"},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"            setTaskAsDone(taskList, itemIndex);"},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"            UI.printInvalidIntegerWarning();"},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":"     * Sets the status of a Task object as done."},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"    private static void setTaskAsDone(TaskList taskList, int itemIndex) {"},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"        taskList.updateTaskStatus(itemIndex, true);"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"     * Returns true if the index of the task is out of range, false if in range."},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"     * @return true if the index of the task is out of range."},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"    private static boolean isTaskIndexOutOfRange(TaskList taskList, int itemIndex) {"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"        if (!taskList.isIndexInRange(itemIndex)) {"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"            System.out.println(UI.DIVIDER"},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"                    + \"The task index input is out of range!\\n\""},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"                    + UI.DIVIDER"},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"                    + \"Try again:\""},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"            );"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":"        return false;"},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"     * Adds an event type task into the taskList."},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"    public static void addEventTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"            Event.isEventCommandValid(userInput);"},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"            String[] eventTaskContent \u003d Event.getEventTaskContent(userInput);"},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"            String taskContent \u003d eventTaskContent[0];"},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"            String taskPeriod \u003d eventTaskContent[1];"},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"            taskList.addEventTask(taskContent, taskPeriod);"},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"            UI.printParseDateError();"},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"            UI.printErrorMessage(e);"},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"     * Adds a deadline type task into the taskList."},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"    public static void addDeadlineTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"            Deadline.isDeadlineCommandValid(userInput);"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":"            String[] deadlineTaskContent \u003d Deadline.getDeadlineTaskContent(userInput);"},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"            String taskContent \u003d deadlineTaskContent[0];"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"            String taskDeadline \u003d deadlineTaskContent[1];"},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"            taskList.addDeadlineTask(taskContent, taskDeadline);"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"            UI.printParseDateError();"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"            UI.printErrorMessage(e);"},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":"     * Adds a to-do type task into the taskList."},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"    public static void addTodoTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"            String[] todoTaskContent \u003d Todo.getTodoTaskContent(userInput);"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"            taskList.addTodoTask(todoTaskContent[0]);"},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":"            UI.printErrorMessage(e);"},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":"     * Deletes a task from the taskList."},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"     * @param taskList  the taskList object that contains the list of tasks."},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"    public static void deleteTask(TaskList taskList, String userInput) {"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"            String taskIndexStr \u003d Parser.getTaskIndexString(userInput);"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"            int taskIndex \u003d Integer.parseInt(taskIndexStr) - 1;"},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"            if (isTaskIndexOutOfRange(taskList, taskIndex)) {"},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"                return;"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"            taskList.removeTaskFromList(taskIndex);"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"            System.out.println(UI.DIVIDER +"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"                    \"Invalid input! The parameter must be an integer!\\n\" + UI.DIVIDER_LINE_ONLY);"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"     * Initializes the taskList object from a text file."},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":"     * @param taskList the current taskList in use."},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":"    public static void initializeTaskList(TaskList taskList) {"},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"        ArrayList\u003cTask\u003e localTasks \u003d FileHandler.readTasksFromFile();"},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":"        if (localTasks !\u003d null) {"},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":"            taskList.setTasks(localTasks);"},{"lineNumber":147,"author":{"gitId":"Song0180"},"content":"            taskList.setNumOfTasks(localTasks.size());"},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":151,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"Song0180"},"content":"     * Searches tasks that contains keywords input by the user."},{"lineNumber":153,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"Song0180"},"content":"     * @param taskList  the taskList object that contains the list of tasks."},{"lineNumber":155,"author":{"gitId":"Song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":156,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"Song0180"},"content":"    public static void searchTaskByString(TaskList taskList, String userInput) {"},{"lineNumber":158,"author":{"gitId":"Song0180"},"content":"        ArrayList\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"},{"lineNumber":159,"author":{"gitId":"Song0180"},"content":"        String keyword \u003d Parser.getSearchKeyword(userInput);"},{"lineNumber":160,"author":{"gitId":"Song0180"},"content":"        for (Task task : taskList.getTasks()) {"},{"lineNumber":161,"author":{"gitId":"Song0180"},"content":"            if (task.getTaskContent().contains(keyword)) {"},{"lineNumber":162,"author":{"gitId":"Song0180"},"content":"                searchResult.add(task);"},{"lineNumber":163,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Song0180"},"content":"        printSearchResult(searchResult);"},{"lineNumber":166,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":168,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"Song0180"},"content":"     * Prints tasks found using keywords."},{"lineNumber":170,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"Song0180"},"content":"     * @param resultList an ArrayList that stores task objects that contain keywords input by the user."},{"lineNumber":172,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"Song0180"},"content":"    private static void printSearchResult(ArrayList\u003cTask\u003e resultList) {"},{"lineNumber":174,"author":{"gitId":"Song0180"},"content":"        int listSize \u003d resultList.size();"},{"lineNumber":175,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER + \"Here are the matching tasks in your list:\");"},{"lineNumber":176,"author":{"gitId":"Song0180"},"content":"        if (listSize \u003d\u003d 0) {"},{"lineNumber":177,"author":{"gitId":"Song0180"},"content":"            System.out.println(\"No data found. Try some other keywords.\");"},{"lineNumber":178,"author":{"gitId":"Song0180"},"content":"        } else {"},{"lineNumber":179,"author":{"gitId":"Song0180"},"content":"            for (int i \u003d 0; i \u003c listSize; i++) {"},{"lineNumber":180,"author":{"gitId":"Song0180"},"content":"                Task currentItem \u003d resultList.get(i);"},{"lineNumber":181,"author":{"gitId":"Song0180"},"content":"                String timeLimitFormatted \u003d UI.getTimeLimitFormatted(currentItem);"},{"lineNumber":182,"author":{"gitId":"Song0180"},"content":"                System.out.println((i + 1) + \". \""},{"lineNumber":183,"author":{"gitId":"Song0180"},"content":"                        + \"[\" + UI.convertTaskType(currentItem.getTaskType()) + \"] \""},{"lineNumber":184,"author":{"gitId":"Song0180"},"content":"                        + \"[\" + (currentItem.isDone() ? \"X️\" : \" \") + \"] \""},{"lineNumber":185,"author":{"gitId":"Song0180"},"content":"                        + currentItem.getTaskContent()"},{"lineNumber":186,"author":{"gitId":"Song0180"},"content":"                        + (currentItem.getTaskType() \u003d\u003d TaskType.TODO ? \"\" : \" \")"},{"lineNumber":187,"author":{"gitId":"Song0180"},"content":"                        + timeLimitFormatted"},{"lineNumber":188,"author":{"gitId":"Song0180"},"content":"                );"},{"lineNumber":189,"author":{"gitId":"Song0180"},"content":"            }"},{"lineNumber":190,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"Song0180"},"content":"        System.out.println(UI.DIVIDER_LINE_ONLY);"},{"lineNumber":192,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":193}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"import duke.task.TaskType;"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":8,"author":{"gitId":"Song0180"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Song0180"},"content":" * This class contains methods that print prompt information of the user interface."},{"lineNumber":10,"author":{"gitId":"Song0180"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Song0180"},"content":"public class UI {"},{"lineNumber":12,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Song0180"},"content":"     * A divider (horizontal line) with line break at the end."},{"lineNumber":15,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Song0180"},"content":"    public static final String DIVIDER \u003d \"_____________________________________________________________\\n\";"},{"lineNumber":17,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Song0180"},"content":"     * A divider (horizontal line)."},{"lineNumber":19,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Song0180"},"content":"    public static final String DIVIDER_LINE_ONLY \u003d \"_____________________________________________________________\";"},{"lineNumber":21,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":22,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Song0180"},"content":"     * Prints greetings when the program starts."},{"lineNumber":24,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Song0180"},"content":"    public static void printGreetings() {"},{"lineNumber":26,"author":{"gitId":"Song0180"},"content":"        System.out.println("},{"lineNumber":27,"author":{"gitId":"Song0180"},"content":"                DIVIDER"},{"lineNumber":28,"author":{"gitId":"Song0180"},"content":"                        + \" Welcome.\\n\""},{"lineNumber":29,"author":{"gitId":"Song0180"},"content":"                        + \" I am your assistant Friday :)\\n\""},{"lineNumber":30,"author":{"gitId":"Song0180"},"content":"                        + \" Just FYI, I am developed by Song Yu.\\n\""},{"lineNumber":31,"author":{"gitId":"Song0180"},"content":"                        + \" May I know what I can help you?\\n\""},{"lineNumber":32,"author":{"gitId":"Song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":33,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":34,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":36,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Song0180"},"content":"     * Prints greetings when the program ends."},{"lineNumber":38,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Song0180"},"content":"    public static void printExitGreetings() {"},{"lineNumber":40,"author":{"gitId":"Song0180"},"content":"        System.out.print("},{"lineNumber":41,"author":{"gitId":"Song0180"},"content":"                DIVIDER"},{"lineNumber":42,"author":{"gitId":"Song0180"},"content":"                        + \" Thank you for getting in touch.\\n\""},{"lineNumber":43,"author":{"gitId":"Song0180"},"content":"                        + \" See you next time.\\n\""},{"lineNumber":44,"author":{"gitId":"Song0180"},"content":"                        + \" Have a nice day :)\\n\""},{"lineNumber":45,"author":{"gitId":"Song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":46,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":49,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Song0180"},"content":"     * Prints the error message when user\u0027s input does not match any command."},{"lineNumber":51,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Song0180"},"content":"    public static void printNotCommand() {"},{"lineNumber":53,"author":{"gitId":"Song0180"},"content":"        System.out.println("},{"lineNumber":54,"author":{"gitId":"Song0180"},"content":"                DIVIDER"},{"lineNumber":55,"author":{"gitId":"Song0180"},"content":"                        + \" Sorry, your command is not recognized\\n\""},{"lineNumber":56,"author":{"gitId":"Song0180"},"content":"                        + \" See \u0027help\u0027. \\n\""},{"lineNumber":57,"author":{"gitId":"Song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":58,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":61,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Song0180"},"content":"     * Prints the help message."},{"lineNumber":63,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Song0180"},"content":"    public static void printHelp() {"},{"lineNumber":65,"author":{"gitId":"Song0180"},"content":"        String helpMessage \u003d \" \u0027help\u0027     : Display tips on using this application\\n\""},{"lineNumber":66,"author":{"gitId":"Song0180"},"content":"                + \" \u0027exit\u0027     : Exit the application\\n\""},{"lineNumber":67,"author":{"gitId":"Song0180"},"content":"                + \" \u0027bye\u0027      : Exit the application\\n\""},{"lineNumber":68,"author":{"gitId":"Song0180"},"content":"                + \" \u0027list\u0027     : List all type of tasks you added to your task list\\n\""},{"lineNumber":69,"author":{"gitId":"Song0180"},"content":"                + \" \u0027done\u0027     : Mark a task as done\\n\\t\""},{"lineNumber":70,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027done 2\u0027 will mark the second task as done\\n\""},{"lineNumber":71,"author":{"gitId":"Song0180"},"content":"                + \" \u0027todo\u0027     : Add a new todo task\\n\\t\""},{"lineNumber":72,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027todo read book\u0027 will add \\\"read book\\\" to your task list\\n\""},{"lineNumber":73,"author":{"gitId":"Song0180"},"content":"                + \" \u0027deadline\u0027 : Add a new deadline task\\n\\t\""},{"lineNumber":74,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027deadline read book /by YYYY-DD-MM\u0027 will\""},{"lineNumber":75,"author":{"gitId":"Song0180"},"content":"                + \" add \\\"read book\\\" to your task list with deadline task by date in format YYYY-DD-MM\\n\""},{"lineNumber":76,"author":{"gitId":"Song0180"},"content":"                + \" \u0027event\u0027    : Add a new event task\\n\\t\""},{"lineNumber":77,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027event read book /at YYYY-DD-MM\u0027 will\""},{"lineNumber":78,"author":{"gitId":"Song0180"},"content":"                + \" add \\\"read book\\\" to your task list with an event task at date in format YYYY-DD-MM\\n\""},{"lineNumber":79,"author":{"gitId":"Song0180"},"content":"                + \" \u0027delete\u0027   : Delete a task using the index\\n\\t\""},{"lineNumber":80,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027delete 1\u0027 will\""},{"lineNumber":81,"author":{"gitId":"Song0180"},"content":"                + \" delete the task with index of 1\\n\""},{"lineNumber":82,"author":{"gitId":"Song0180"},"content":"                + \" \u0027find\u0027     : Search tasks using strings\\n\\t\""},{"lineNumber":83,"author":{"gitId":"Song0180"},"content":"                + \" e.g. \u0027find eat\u0027 will\""},{"lineNumber":84,"author":{"gitId":"Song0180"},"content":"                + \" display a list of tasks that contains the string \u0027eat\u0027\\n\";"},{"lineNumber":85,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":86,"author":{"gitId":"Song0180"},"content":"        System.out.println("},{"lineNumber":87,"author":{"gitId":"Song0180"},"content":"                DIVIDER_LINE_ONLY + DIVIDER_LINE_ONLY + DIVIDER"},{"lineNumber":88,"author":{"gitId":"Song0180"},"content":"                        + helpMessage"},{"lineNumber":89,"author":{"gitId":"Song0180"},"content":"                        + DIVIDER_LINE_ONLY + DIVIDER_LINE_ONLY + DIVIDER_LINE_ONLY"},{"lineNumber":90,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":91,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":93,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Song0180"},"content":"     * Prints a warning that the input is not a valid integer."},{"lineNumber":95,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Song0180"},"content":"    public static void printInvalidIntegerWarning() {"},{"lineNumber":97,"author":{"gitId":"Song0180"},"content":"        System.out.println(DIVIDER"},{"lineNumber":98,"author":{"gitId":"Song0180"},"content":"                + \"Invalid input!\\n\""},{"lineNumber":99,"author":{"gitId":"Song0180"},"content":"                + \"The item number should be a valid integer!\\n\""},{"lineNumber":100,"author":{"gitId":"Song0180"},"content":"                + DIVIDER"},{"lineNumber":101,"author":{"gitId":"Song0180"},"content":"                + \"Try again:\""},{"lineNumber":102,"author":{"gitId":"Song0180"},"content":"        );"},{"lineNumber":103,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":105,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"Song0180"},"content":"     * Prints the error message of a given exception object."},{"lineNumber":107,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"Song0180"},"content":"     * @param e the exception object"},{"lineNumber":109,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Song0180"},"content":"    public static void printErrorMessage(Exception e) {"},{"lineNumber":111,"author":{"gitId":"Song0180"},"content":"        System.out.println(DIVIDER + e.getMessage() + \"\\n\" + DIVIDER_LINE_ONLY);"},{"lineNumber":112,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":114,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"Song0180"},"content":"     * Prints the error message to notify the date input cannot be parsed."},{"lineNumber":116,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"Song0180"},"content":"    public static void printParseDateError() {"},{"lineNumber":118,"author":{"gitId":"Song0180"},"content":"        System.out.println(DIVIDER"},{"lineNumber":119,"author":{"gitId":"Song0180"},"content":"                + \"The time format you input is incorrect or out of range!\\n\""},{"lineNumber":120,"author":{"gitId":"Song0180"},"content":"                + \"The format is in YYYY-MM-DD. Please try again.\\n\""},{"lineNumber":121,"author":{"gitId":"Song0180"},"content":"                + DIVIDER_LINE_ONLY);"},{"lineNumber":122,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":124,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"Song0180"},"content":"     * Returns the time limit of a task in format WEEKDAY, DAY MONTH YEAR."},{"lineNumber":126,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"Song0180"},"content":"     * @param task a task object."},{"lineNumber":128,"author":{"gitId":"Song0180"},"content":"     * @return a string of formatted time limit of a task."},{"lineNumber":129,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"Song0180"},"content":"    public static String getTimeLimitFormatted(Task task) {"},{"lineNumber":131,"author":{"gitId":"Song0180"},"content":"        String timeLimitFormatted \u003d \"\";"},{"lineNumber":132,"author":{"gitId":"Song0180"},"content":"        if (task.getTaskType().equals(TaskType.TODO)) {"},{"lineNumber":133,"author":{"gitId":"Song0180"},"content":"            return timeLimitFormatted;"},{"lineNumber":134,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Song0180"},"content":"        LocalDate timeLimitInDate \u003d LocalDate.parse(task.getTimeLimitString());"},{"lineNumber":136,"author":{"gitId":"Song0180"},"content":"        timeLimitFormatted \u003d timeLimitInDate.getDayOfWeek().toString() + \", \""},{"lineNumber":137,"author":{"gitId":"Song0180"},"content":"                + timeLimitInDate.getDayOfMonth() + \" \""},{"lineNumber":138,"author":{"gitId":"Song0180"},"content":"                + timeLimitInDate.getMonth() + \" \""},{"lineNumber":139,"author":{"gitId":"Song0180"},"content":"                + timeLimitInDate.getYear();"},{"lineNumber":140,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":141,"author":{"gitId":"Song0180"},"content":"        if (task.getTaskType().equals(TaskType.EVENT)) {"},{"lineNumber":142,"author":{"gitId":"Song0180"},"content":"            timeLimitFormatted \u003d \"(at: \" + timeLimitFormatted + \")\";"},{"lineNumber":143,"author":{"gitId":"Song0180"},"content":"        } else if (task.getTaskType().equals(TaskType.DEADLINE)) {"},{"lineNumber":144,"author":{"gitId":"Song0180"},"content":"            timeLimitFormatted \u003d \"(by: \" + timeLimitFormatted + \")\";"},{"lineNumber":145,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"Song0180"},"content":"        return timeLimitFormatted;"},{"lineNumber":147,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"Song0180"},"content":""},{"lineNumber":149,"author":{"gitId":"Song0180"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"Song0180"},"content":"     * Converts the enum type to string."},{"lineNumber":151,"author":{"gitId":"Song0180"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"Song0180"},"content":"     * @param type the type of the task."},{"lineNumber":153,"author":{"gitId":"Song0180"},"content":"     * @return the type of the task in string."},{"lineNumber":154,"author":{"gitId":"Song0180"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"Song0180"},"content":"    public static String convertTaskType(TaskType type) {"},{"lineNumber":156,"author":{"gitId":"Song0180"},"content":"        switch (type) {"},{"lineNumber":157,"author":{"gitId":"Song0180"},"content":"        case TODO:"},{"lineNumber":158,"author":{"gitId":"Song0180"},"content":"            return \"T\";"},{"lineNumber":159,"author":{"gitId":"Song0180"},"content":"        case EVENT:"},{"lineNumber":160,"author":{"gitId":"Song0180"},"content":"            return \"E\";"},{"lineNumber":161,"author":{"gitId":"Song0180"},"content":"        case DEADLINE:"},{"lineNumber":162,"author":{"gitId":"Song0180"},"content":"            return \"D\";"},{"lineNumber":163,"author":{"gitId":"Song0180"},"content":"        default:"},{"lineNumber":164,"author":{"gitId":"Song0180"},"content":"            return \"Unknown task type\";"},{"lineNumber":165,"author":{"gitId":"Song0180"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"Song0180"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"Song0180"},"content":"}"}],"authorContributionMap":{"Song0180":167}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Song0180"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Song0180"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Song0180"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Song0180"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"Song0180"},"content":"deadline do homework /by no idea :)"},{"lineNumber":6,"author":{"gitId":"Song0180"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Song0180"},"content":"bye"}],"authorContributionMap":{"Song0180":7}}]
