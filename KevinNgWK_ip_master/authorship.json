[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":"### Listing all tasks: `list`"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eShows a list of tasks.\u003c/div\u003e"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: list\u003c/div\u003e"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eAny parameters after list will be ignored\u003c/li\u003e"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"### Add a todo task: `todo`"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eAdds a todo task into todo list\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: todo NAME\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eReads the name given as the name of the task\u003c/li\u003e"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"### Add a event task: `event`"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eAdds an event task into todo list\u003c/div\u003e"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: event NAME /at TIME\u003c/div\u003e"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eReads the name and uses it as the name of the task\u003c/li\u003e"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eReads the time and uses it as a time period for this task\u003c/li\u003e"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"### Add a deadline task: `deadline`"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eAdds a deadline task into todo list\u003c/div\u003e"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: deadline NAME /by TIME\u003c/div\u003e"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eReads the name and uses it as the name of the task\u003c/li\u003e"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eReads the time and uses it as a time period for this task\u003c/li\u003e"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"### Delete a task: `delete`"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eDeletes a task in the todo list\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: delete INDEX\u003c/div\u003e"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eTakes the index as input and deletes tasks stored in that particular index\u003c/li\u003e"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"### Mark a task as completed: `done`"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eMarks a task as completed\u003c/div\u003e"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: done INDEX\u003c/div\u003e"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eTakes the index as input and mark tasks stored in that particular index as completed\u003c/li\u003e"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"### Find a task name: `find`"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFinds tasks which contains a certain name\u003c/div\u003e"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"\u003cdiv\u003eFormat: find NAME\u003c/div\u003e"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"\u003cli\u003eSearches for task names that contain NAME\u003c/li\u003e"}],"authorContributionMap":{"KevinNgWK":36,"-":4}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" * Represents an executor that will add tasks to the task list"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"public class AddCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"    public String taskType;"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    public String taskName;"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isCompleted;"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"    public boolean exit;"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    public String timeConstraint;"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     * Constructor of this class. Initializes necessary details to add a task"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskType The type of task to be added"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskName The name of task to be added"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"     * @param isCompleted Whether the task has been completed"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"     * @param timeConstraint The time requirements set by user"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"    public AddCommand(String taskType, String taskName, boolean isCompleted, String timeConstraint) {"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"        super();"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"        this.timeConstraint \u003d timeConstraint;"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"     * Adds a task to the task list"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList TaskList object that stores all current tasks"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"     * @param storage Storage object that communicates with database"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"     * @param ui Ui object that handles the interaction with user"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions if the task type is not valid"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"        Task newTask;"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"        if (taskType.equals(\"todo\")) {"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"            newTask \u003d new ToDo(taskName, taskType);"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"        } else if (taskType.equals(\"deadline\")) {"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"            newTask \u003d new Deadline(taskName, taskType, timeConstraint);"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"        } else if (taskType.equals(\"event\")) {"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"            newTask \u003d new Event(taskName, taskType, timeConstraint);"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"        newTask.setIsCompleted(isCompleted);"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"        taskList.appendTask(newTask);"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"        storage.save(taskList);"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"        ui.showAddedTasks(newTask, taskList.getSize());"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"     * Checks if we want to exit the program"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"     * @return whether or not to exit the program"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":64}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"    protected boolean exit;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"    public Command() {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"        exit \u003d false;"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"    public abstract void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions;"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"    public abstract boolean isExit();"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":16}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":" * Represents the executor that will delete tasks from task list"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    public List\u003cString\u003e indexList;"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     * Constructor of this class. Initializes the tasks to be deleted"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"     * @param indexList The list indexes of tasks to be deleted"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    public DeleteCommand(List\u003cString\u003e indexList) {"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"        super();"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"        this.indexList \u003d indexList;"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"     * Deletes tasks from task list"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList TaskList object that stores all current tasks"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     * @param storage Storage object that communicates with database"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     * @param ui Ui object that handles the interaction with user"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions if invalid indexes provided or if no indexes provided"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"        if (indexList.size() \u003c 1) {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cInteger\u003e integerIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cTask\u003e deletedTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"        for (String index: indexList) {"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"            int indexInt;"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"            indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"            if (indexInt \u003e\u003d taskList.getSize()) {"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"            integerIndexList.add(indexInt);"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        Collections.sort(integerIndexList, Collections.reverseOrder());"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"        for (int index: integerIndexList) {"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"            deletedTaskList.add(taskList.getTask(index));"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"            taskList.deleteTask(index);"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"        storage.save(taskList);"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"        ui.showDeletedTasks(deletedTaskList, taskList.getSize());"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"     * Checks if we want to exit the program"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"     * @return whether or not to exit the program"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":64}},{"path":"src/main/java/duke/command/DisplayCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" * Represents the executor that will display all tasks from task list"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"public class DisplayCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"     * Displays all tasks in the task list"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList TaskList object that stores all current tasks"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"     * @param storage Storage object that communicates with database"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"     * @param ui Ui object that handles the interaction with user"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions if the task list is empty"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"        ui.showDisplayTasks(taskList);"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * Checks if we want to exit the program"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     * @return whether or not to exit the program"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":34}},{"path":"src/main/java/duke/command/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":" * Main class to be run."},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"    private final Storage storage;"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    private final Ui ui;"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"    public Duke(String filePath) {"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"        ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"        } catch (DukeExceptions e) {"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"            ui.showLoadingError();"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    public void run() {"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"        ui.showWelcome();"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"        boolean isExit \u003d false;"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"        while (!isExit) {"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"            try {"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"                ui.showLine();"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"                c.execute(taskList, storage, ui);"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"            } catch (DukeExceptions e) {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"                ui.showError(\"Error\");"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"            } finally {"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"                ui.showLine();"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"        ui.showGoodbye();"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"    public static void main(String[] args) {"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"        new Duke(\"./src/main/java/duke/data/tasks.txt\").run();"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"KevinNgWK":44,"-":2}},{"path":"src/main/java/duke/command/DukeExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":"public class DukeExceptions extends Exception {"},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"    // Exception when invalid instructions are provided"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":4}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" * Represents the executor to exit program"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"     * Constructor of this class. Sets exit to be true to exit program."},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    public ExitCommand() {"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"        this.exit \u003d true;"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"     * Executor to exit program"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList TaskList object that stores all current tasks"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"     * @param storage Storage object that communicates with database"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"     * @param ui Ui object that handles the interaction with user"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions does not occur"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"bye\");"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"     * Checks if we want to exit the program"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"     * @return whether or not to exit the program"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"public class FindCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    public String keyword;"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"        super();"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"        if (keyword.equals(\"\")) {"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"        for (Task task: taskList.getTaskList()) {"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"            if (task.getTaskName().contains(keyword)) {"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"                foundTasks.add(task);"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"        ui.showFoundTasks(foundTasks);"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":37}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" * Represents the object that handles input from the user"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":" * Parses the user input into something the program can understand"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    public Parser() { }"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"     * Parses the command from the user"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"     * @param line The input from the user"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"     * @return The executor for a particular statement from the user"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"    public static Command parse(String line) throws DukeExceptions{"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"        if (line.equals(\"\")){"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"        List\u003cString\u003e userCommands \u003d Arrays.asList(line.split(\" \"));"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"        if (userCommands.size() \u003c 1) {"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"        Command newCommand;"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"        if (userCommands.get(0).equals(\"list\")) {"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new DisplayCommand();"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"done\")) {"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new UpdateCommand(userCommands.subList(1, userCommands.size()));"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"delete\")) {"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new DeleteCommand(userCommands.subList(1, userCommands.size()));"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"bye\")) {"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new ExitCommand();"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"find\")) {"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new FindCommand(String.join(\" \", userCommands.subList(1, userCommands.size())));"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"todo\")) {"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"            String taskType \u003d userCommands.get(0);"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"            String taskNameTodo \u003d String.join(\" \", userCommands.subList(1, userCommands.size()));"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new AddCommand(taskType, taskNameTodo, false, \"\");"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"event\")) {"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"            String taskType \u003d userCommands.get(0);"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"            int indexEvent \u003d userCommands.indexOf(\"/at\");"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"            if (indexEvent \u003d\u003d -1) {"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"            List\u003cString\u003e taskNameEvent \u003d userCommands.subList(1, indexEvent);"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"            List\u003cString\u003e timeConstraintEvent \u003d userCommands.subList(indexEvent+1, userCommands.size());"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new AddCommand("},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"                    taskType,"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"                    String.join(\" \", taskNameEvent),"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"                    false,"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"                    String.join(\" \", timeConstraintEvent)"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"            );"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"        } else if (userCommands.get(0).equals(\"deadline\")) {"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"            String taskType \u003d userCommands.get(0);"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"            int indexDeadline \u003d userCommands.indexOf(\"/by\");"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"            if (indexDeadline \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"            List\u003cString\u003e taskNameDeadline \u003d userCommands.subList(1, indexDeadline);"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"            List\u003cString\u003e timeConstraintDeadline \u003d userCommands.subList(indexDeadline+1, userCommands.size());"},{"lineNumber":65,"author":{"gitId":"KevinNgWK"},"content":"            newCommand \u003d new AddCommand("},{"lineNumber":66,"author":{"gitId":"KevinNgWK"},"content":"                    taskType,"},{"lineNumber":67,"author":{"gitId":"KevinNgWK"},"content":"                    String.join(\" \", taskNameDeadline),"},{"lineNumber":68,"author":{"gitId":"KevinNgWK"},"content":"                    false,"},{"lineNumber":69,"author":{"gitId":"KevinNgWK"},"content":"                    String.join(\" \", timeConstraintDeadline)"},{"lineNumber":70,"author":{"gitId":"KevinNgWK"},"content":"            );"},{"lineNumber":71,"author":{"gitId":"KevinNgWK"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":73,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"KevinNgWK"},"content":"        return newCommand;"},{"lineNumber":75,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":77,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":77}},{"path":"src/main/java/duke/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":" * Represents the object that handles interactions with user"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":" * Mainly prints statements and requests for inputs from the user"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    private static final String lineSpacing \u003d \"\\t----------------------------------\";"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"    private String line;"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    private Scanner in;"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"     * Constructor of this class. Initializes a scanner to read user inputs"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"    public Ui() {"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"     * Reads the user commands"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * @return The input given by the user as a string"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"    public String readCommand() {"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"        line \u003d in.nextLine();"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"        return line;"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"    public void showError(String errMessage) {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(errMessage);"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"    public void showWelcome() {"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"        String greetings \u003d \"\\tHello! I\u0027m Duke\\n\" + \"\\tWhat can I do for you?\\n\\n\";"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(lineSpacing);"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(greetings);"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(lineSpacing);"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"    public void showGoodbye() {"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"        String exitStatements \u003d \"\\tBye. Hope to see you again soon!\\n\";"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(lineSpacing);"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(exitStatements);"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(lineSpacing);"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"    public void showLine() {"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(lineSpacing);"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"    public void showLoadingError() {"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"Unable to load from file. Will initialize a new todo list for you!\");"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":66,"author":{"gitId":"KevinNgWK"},"content":"    public void showAddedTasks(Task task, Integer tasksSize) {"},{"lineNumber":67,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"},{"lineNumber":68,"author":{"gitId":"KevinNgWK"},"content":"        System.out.print(\"\\t\");"},{"lineNumber":69,"author":{"gitId":"KevinNgWK"},"content":"        task.printTask();"},{"lineNumber":70,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"\\tNow you have \" + tasksSize + \" tasks in the list\");"},{"lineNumber":71,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":73,"author":{"gitId":"KevinNgWK"},"content":"    public void showDisplayTasks(TaskList taskList) {"},{"lineNumber":74,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"\\tHere are the tasks in your list\");"},{"lineNumber":75,"author":{"gitId":"KevinNgWK"},"content":"        Integer counter \u003d 1;"},{"lineNumber":76,"author":{"gitId":"KevinNgWK"},"content":"        for (Task task: taskList.getTaskList()) {"},{"lineNumber":77,"author":{"gitId":"KevinNgWK"},"content":"            System.out.print(\"\\t\" + counter + \".\");"},{"lineNumber":78,"author":{"gitId":"KevinNgWK"},"content":"            counter +\u003d 1;"},{"lineNumber":79,"author":{"gitId":"KevinNgWK"},"content":"            task.printTask();"},{"lineNumber":80,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":83,"author":{"gitId":"KevinNgWK"},"content":"    public void showDeletedTasks(ArrayList\u003cTask\u003e deletedTaskList, Integer tasksSize) {"},{"lineNumber":84,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"},{"lineNumber":85,"author":{"gitId":"KevinNgWK"},"content":"        for (Task task: deletedTaskList) {"},{"lineNumber":86,"author":{"gitId":"KevinNgWK"},"content":"            System.out.print(\"\\t\");"},{"lineNumber":87,"author":{"gitId":"KevinNgWK"},"content":"            task.printTask();"},{"lineNumber":88,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"\\tNow you have \" + tasksSize + \" tasks in the list\");"},{"lineNumber":90,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":92,"author":{"gitId":"KevinNgWK"},"content":"    public void showUpdatedTasks(ArrayList\u003cTask\u003e updatedTaskList) {"},{"lineNumber":93,"author":{"gitId":"KevinNgWK"},"content":"        for (Task task: updatedTaskList) {"},{"lineNumber":94,"author":{"gitId":"KevinNgWK"},"content":"            System.out.print(\"\\t\");"},{"lineNumber":95,"author":{"gitId":"KevinNgWK"},"content":"            task.printTask();"},{"lineNumber":96,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":99,"author":{"gitId":"KevinNgWK"},"content":"    public void showFoundTasks(ArrayList\u003cTask\u003e foundTasks) {"},{"lineNumber":100,"author":{"gitId":"KevinNgWK"},"content":"        Integer counter \u003d 1;"},{"lineNumber":101,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":102,"author":{"gitId":"KevinNgWK"},"content":"        for (Task task: foundTasks) {"},{"lineNumber":103,"author":{"gitId":"KevinNgWK"},"content":"            System.out.print(\"\\t\" + counter + \".\");"},{"lineNumber":104,"author":{"gitId":"KevinNgWK"},"content":"            task.printTask();"},{"lineNumber":105,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":107}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":" * Represents the executor to update a list of tasks as completed"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"    List\u003cString\u003e indexList;"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"     * Constructor of the class. Initializes the indexes of tasks to be updated"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     * @param indexList The list of indexes provided by the user"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"    public UpdateCommand(List\u003cString\u003e indexList) {"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"        super();"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"        this.indexList \u003d indexList;"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"     * Updates tasks specified by the user to completed"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList TaskList object that stores all current tasks"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * @param storage Storage object that communicates with database"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     * @param ui Ui object that handles the interaction with user"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions if invalid indexes provided"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeExceptions {"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cInteger\u003e integerIndexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cTask\u003e updatedTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"        for (String index: indexList) {"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"            int indexInt;"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"            indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"            if (indexInt \u003e\u003d taskList.getSize()) {"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"            integerIndexList.add(indexInt);"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"        for (int index: integerIndexList) {"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"            taskList.markIsCompletedTask(index, true);"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"            updatedTaskList.add(taskList.getTask(index));"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        storage.save(taskList);"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"        ui.showUpdatedTasks(updatedTaskList);"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"     * Checks if we want to exit the program"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"     * @return whether or not to exit the program"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isExit() {"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"        return exit;"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":59}},{"path":"src/main/java/duke/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"todo\u003cseparator\u003esay hello\u003cseparator\u003efalse"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":"event\u003cseparator\u003esleep\u003cseparator\u003e1\u003cseparator\u003efalse"},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"deadline\u003cseparator\u003efinish this\u003cseparator\u003etmr\u003cseparator\u003efalse"}],"authorContributionMap":{"KevinNgWK":3}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"import duke.command.DukeExceptions;"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"import duke.task.*;"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":" * Represents a platform for communication with the database"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":" * Database in this case is a txt file"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    public String storageFilePath;"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"    public Storage(String storageFilePath) {"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"        this.storageFilePath \u003d storageFilePath;"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * Loads the past entries stored in the database"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     * @return An arraylist of tasks"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions if any DukeExceptions are caught"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeExceptions{"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"            File taskFile \u003d new File(storageFilePath);"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"            Scanner taskReader \u003d new Scanner(taskFile);"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"            while (taskReader.hasNextLine()) {"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"                String storedTaskString \u003d taskReader.nextLine();"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"                Task task \u003d initializeTask(storedTaskString);"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"                taskList.add(task);"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"        } catch(FileNotFoundException e) {"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"            System.out.println(\"File path was not found! No previous tasks were read\");"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"        } catch(DukeExceptions e) {"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"//            System.out.println(\"Formatting errors detected in \" + storageFilePath);"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        return taskList;"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"     * Saves all tasks in the task list"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"     * @param taskList The list of tasks to be saved"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"    public void save(TaskList taskList) {"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"            FileWriter fw \u003d new FileWriter(storageFilePath);"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"            for (Task task: taskList.getTaskList()) {"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":"                String textToAdd \u003d task.formatTaskToWrite();"},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"                fw.write(textToAdd + \"\\n\");"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":"            fw.close();"},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"        } catch (IOException e) {"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":67,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"KevinNgWK"},"content":"     * Reads the stored task and create Task objects"},{"lineNumber":69,"author":{"gitId":"KevinNgWK"},"content":"     * @param task The stored task"},{"lineNumber":70,"author":{"gitId":"KevinNgWK"},"content":"     * @return The task object to be added into TaskList"},{"lineNumber":71,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions If the stored tasks has issues"},{"lineNumber":72,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"KevinNgWK"},"content":"    public Task initializeTask(String task) throws DukeExceptions{"},{"lineNumber":74,"author":{"gitId":"KevinNgWK"},"content":"        List\u003cString\u003e taskProperties \u003d Arrays.asList(task.split(\"\u003cseparator\u003e\"));"},{"lineNumber":75,"author":{"gitId":"KevinNgWK"},"content":"        String taskType \u003d taskProperties.get(0);"},{"lineNumber":76,"author":{"gitId":"KevinNgWK"},"content":"        switch (taskType) {"},{"lineNumber":77,"author":{"gitId":"KevinNgWK"},"content":"        case \"todo\":"},{"lineNumber":78,"author":{"gitId":"KevinNgWK"},"content":"            if (taskProperties.size() !\u003d 3) {"},{"lineNumber":79,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":80,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"KevinNgWK"},"content":"            String todoName \u003d taskProperties.get(1);"},{"lineNumber":82,"author":{"gitId":"KevinNgWK"},"content":"            boolean todoIsCompleted \u003d Boolean.parseBoolean(taskProperties.get(2));"},{"lineNumber":83,"author":{"gitId":"KevinNgWK"},"content":"            ToDo newTodo \u003d new ToDo(todoName, taskType);"},{"lineNumber":84,"author":{"gitId":"KevinNgWK"},"content":"            newTodo.setIsCompleted(todoIsCompleted);"},{"lineNumber":85,"author":{"gitId":"KevinNgWK"},"content":"            return newTodo;"},{"lineNumber":86,"author":{"gitId":"KevinNgWK"},"content":"        case \"deadline\":"},{"lineNumber":87,"author":{"gitId":"KevinNgWK"},"content":"            if (taskProperties.size() !\u003d 4) {"},{"lineNumber":88,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":89,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"KevinNgWK"},"content":"            String deadlineName \u003d taskProperties.get(1);"},{"lineNumber":91,"author":{"gitId":"KevinNgWK"},"content":"            String deadlineTimeConstraint \u003d taskProperties.get(2);"},{"lineNumber":92,"author":{"gitId":"KevinNgWK"},"content":"            boolean deadlineIsCompleted \u003d Boolean.parseBoolean(taskProperties.get(3));"},{"lineNumber":93,"author":{"gitId":"KevinNgWK"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineName, taskType, deadlineTimeConstraint);"},{"lineNumber":94,"author":{"gitId":"KevinNgWK"},"content":"            newDeadline.setIsCompleted(deadlineIsCompleted);"},{"lineNumber":95,"author":{"gitId":"KevinNgWK"},"content":"            return newDeadline;"},{"lineNumber":96,"author":{"gitId":"KevinNgWK"},"content":"        case \"event\":"},{"lineNumber":97,"author":{"gitId":"KevinNgWK"},"content":"            if (taskProperties.size() !\u003d 4) {"},{"lineNumber":98,"author":{"gitId":"KevinNgWK"},"content":"                throw new DukeExceptions();"},{"lineNumber":99,"author":{"gitId":"KevinNgWK"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"KevinNgWK"},"content":"            String eventName \u003d taskProperties.get(1);"},{"lineNumber":101,"author":{"gitId":"KevinNgWK"},"content":"            String eventTimeConstraint \u003d taskProperties.get(2);"},{"lineNumber":102,"author":{"gitId":"KevinNgWK"},"content":"            boolean eventIsCompleted \u003d Boolean.parseBoolean(taskProperties.get(3));"},{"lineNumber":103,"author":{"gitId":"KevinNgWK"},"content":"            Event newEvent \u003d new Event(eventName, taskType, eventTimeConstraint);"},{"lineNumber":104,"author":{"gitId":"KevinNgWK"},"content":"            newEvent.setIsCompleted(eventIsCompleted);"},{"lineNumber":105,"author":{"gitId":"KevinNgWK"},"content":"            return newEvent;"},{"lineNumber":106,"author":{"gitId":"KevinNgWK"},"content":"        default:"},{"lineNumber":107,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":108,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":110}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":" * Represents a task type called deadline"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"    protected String timeConstraint;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"    public Deadline(String taskName, String taskType, String timeConstraint) {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"        super(taskName, taskType);"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"        this.timeConstraint \u003d timeConstraint;"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"     * Getter method for time constraint"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"     * @return time constraint for this deadline"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    public String getTimeConstraint() { return timeConstraint; }"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"     * Setter method for time constraint"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"     * @param timeConstraint The time constraint to be set"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    public void setTimeConstraint(String timeConstraint) { this.timeConstraint \u003d timeConstraint; }"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * Prints task in a readable format"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"    public void printTask() {"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"        String output;"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"        if (isCompleted) {"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[D][X] \" + taskName;"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[D][ ] \" + taskName;"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"        output +\u003d \" (by: \" + timeConstraint + \")\";"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(output);"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"     * Formats the task for storage"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"     * @return The task formatted for storage"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"    public String formatTaskToWrite() {"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        String formattedTask;"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"        formattedTask \u003d String.join("},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"                \"\u003cseparator\u003e\","},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"                taskType,"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"                taskName,"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"                timeConstraint,"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"                String.valueOf(isCompleted)"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"        return formattedTask;"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":57}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":" * Represents a task type named Event"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"    protected String timeConstraint;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"    public Event(String taskName, String taskType, String timeConstraint) {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"        super(taskName, taskType);"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"        this.timeConstraint \u003d timeConstraint;"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"     * Getter method for time constraint"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"     * @return time constraint for this deadline"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    public String getTimeConstraint() { return timeConstraint; }"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"     * Setter method for time constraint"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"     * @param timeConstraint The time constraint to be set"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    public void setTimeConstraint(String timeConstraint) { this.timeConstraint \u003d timeConstraint; }"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * Prints task in a readable format"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"    public void printTask() {"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"        String output;"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"        if (isCompleted) {"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[E][X] \" + taskName;"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[E][ ] \" + taskName;"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"        output +\u003d \" (at: \" + timeConstraint + \")\";"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(output);"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"     * Formats the task for storage"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"     * @return The task formatted for storage"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"    public String formatTaskToWrite() {"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"        String formattedTask;"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":"        formattedTask \u003d String.join("},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"                \"\u003cseparator\u003e\","},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"                taskType,"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"                taskName,"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"                timeConstraint,"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"                String.valueOf(isCompleted)"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"        return formattedTask;"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":57}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":" * Base abstract class for all tasks"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":"    protected String taskName;"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"    protected String taskType;"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"    protected boolean isCompleted;"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":"    public Task(String taskName, String taskType) {"},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"        this.isCompleted \u003d false;"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"    public String getTaskName() { return taskName; }"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"    public void setTaskName(String taskName) { this.taskName \u003d taskName; }"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"    public String getTaskType() { return taskType; }"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"    public void setTaskType(String taskType) { this.taskType \u003d taskType; }"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"    public boolean getIsCompleted() { return isCompleted; }"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"    public void setIsCompleted(boolean isCompleted) { this.isCompleted \u003d isCompleted; }"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"    public abstract void printTask();"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    public abstract String formatTaskToWrite();"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":32}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"import duke.command.DukeExceptions;"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":" * Represents the object that stores all current tasks"},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"    public ArrayList\u003cTask\u003e taskList;"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"    public boolean isEmpty() {"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"        return (taskList.size() \u003d\u003d 0);"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":"        return taskList;"},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     * Gets a task within the task list"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"     * @param index The index of the task within the arraylist"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"     * @return The task indexed by the input index"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions If the index provided is out of range"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"    public Task getTask(Integer index) throws DukeExceptions {"},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"        if (index \u003e taskList.size()) {"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"        return taskList.get(index);"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":"     * Adds a new task into task list"},{"lineNumber":43,"author":{"gitId":"KevinNgWK"},"content":"     * @param newTask The task to be added"},{"lineNumber":44,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"KevinNgWK"},"content":"    public void appendTask(Task newTask) {"},{"lineNumber":46,"author":{"gitId":"KevinNgWK"},"content":"        taskList.add(newTask);"},{"lineNumber":47,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":49,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"KevinNgWK"},"content":"     * Marks a task as valid"},{"lineNumber":51,"author":{"gitId":"KevinNgWK"},"content":"     * @param index The index position of the task"},{"lineNumber":52,"author":{"gitId":"KevinNgWK"},"content":"     * @param isCompleted The completion status to be changed"},{"lineNumber":53,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"KevinNgWK"},"content":"    public void markIsCompletedTask(Integer index, boolean isCompleted) {"},{"lineNumber":55,"author":{"gitId":"KevinNgWK"},"content":"        Task currentTask \u003d taskList.get((int)index);"},{"lineNumber":56,"author":{"gitId":"KevinNgWK"},"content":"        currentTask.setIsCompleted(isCompleted);"},{"lineNumber":57,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":59,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"KevinNgWK"},"content":"     * Deletes a task in the task list"},{"lineNumber":61,"author":{"gitId":"KevinNgWK"},"content":"     * @param index The index position of the task to delete"},{"lineNumber":62,"author":{"gitId":"KevinNgWK"},"content":"     * @throws DukeExceptions If index is out of range"},{"lineNumber":63,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"KevinNgWK"},"content":"    public void deleteTask(Integer index) throws DukeExceptions{"},{"lineNumber":65,"author":{"gitId":"KevinNgWK"},"content":"        if (index \u003e taskList.size()) {"},{"lineNumber":66,"author":{"gitId":"KevinNgWK"},"content":"            throw new DukeExceptions();"},{"lineNumber":67,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"KevinNgWK"},"content":"        taskList.remove((int)index);"},{"lineNumber":69,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":71,"author":{"gitId":"KevinNgWK"},"content":"    public Integer getSize() {"},{"lineNumber":72,"author":{"gitId":"KevinNgWK"},"content":"        return taskList.size();"},{"lineNumber":73,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"KevinNgWK"},"content":"}"}],"authorContributionMap":{"KevinNgWK":74}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KevinNgWK"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinNgWK"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"KevinNgWK"},"content":" * Represents a task type named Todo"},{"lineNumber":5,"author":{"gitId":"KevinNgWK"},"content":" */"},{"lineNumber":6,"author":{"gitId":"KevinNgWK"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":8,"author":{"gitId":"KevinNgWK"},"content":"    public ToDo(String taskName, String taskType) {"},{"lineNumber":9,"author":{"gitId":"KevinNgWK"},"content":"        super(taskName, taskType);"},{"lineNumber":10,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":12,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"KevinNgWK"},"content":"     * Prints task in a readable format"},{"lineNumber":14,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"KevinNgWK"},"content":"    public void printTask() {"},{"lineNumber":17,"author":{"gitId":"KevinNgWK"},"content":"        String output;"},{"lineNumber":18,"author":{"gitId":"KevinNgWK"},"content":"        if (isCompleted) {"},{"lineNumber":19,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[T][X] \" + taskName;"},{"lineNumber":20,"author":{"gitId":"KevinNgWK"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"KevinNgWK"},"content":"            output \u003d \"[T][ ] \" + taskName;"},{"lineNumber":22,"author":{"gitId":"KevinNgWK"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"KevinNgWK"},"content":"        System.out.println(output);"},{"lineNumber":24,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"KevinNgWK"},"content":""},{"lineNumber":26,"author":{"gitId":"KevinNgWK"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"KevinNgWK"},"content":"     * Formats the task for storage"},{"lineNumber":28,"author":{"gitId":"KevinNgWK"},"content":"     * @return The task formatted for storage"},{"lineNumber":29,"author":{"gitId":"KevinNgWK"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"KevinNgWK"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"KevinNgWK"},"content":"    public String formatTaskToWrite() {"},{"lineNumber":32,"author":{"gitId":"KevinNgWK"},"content":"        String formattedTask;"},{"lineNumber":33,"author":{"gitId":"KevinNgWK"},"content":"        formattedTask \u003d String.join("},{"lineNumber":34,"author":{"gitId":"KevinNgWK"},"content":"                \"\u003cseparator\u003e\","},{"lineNumber":35,"author":{"gitId":"KevinNgWK"},"content":"                taskType,"},{"lineNumber":36,"author":{"gitId":"KevinNgWK"},"content":"                taskName,"},{"lineNumber":37,"author":{"gitId":"KevinNgWK"},"content":"                String.valueOf(isCompleted)"},{"lineNumber":38,"author":{"gitId":"KevinNgWK"},"content":"        );"},{"lineNumber":39,"author":{"gitId":"KevinNgWK"},"content":"        return formattedTask;"},{"lineNumber":40,"author":{"gitId":"KevinNgWK"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"KevinNgWK"},"content":"}"},{"lineNumber":42,"author":{"gitId":"KevinNgWK"},"content":""}],"authorContributionMap":{"KevinNgWK":42}}]
