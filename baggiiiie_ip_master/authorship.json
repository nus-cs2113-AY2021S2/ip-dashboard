[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"# Duke2.Duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"1. After that, locate the `src/main/java/Duke2.Duke.Duke.java` file, right-click it, and choose `Run Duke2.Duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"baggiiiie":2,"-":24}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Functions.*;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.*;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"import java.io.*;"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    private static String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static String inputString;"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    public static int taskCount \u003d 0;"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public static List\u003cTask\u003e lists \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        greetings();"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        readFile(lists);"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"        processInput();"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        writeFile(lists);"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"        goodbye();"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"    public static void processInput(){"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"        Scanner userInput \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"        while(true) {"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"            inputString \u003d userInput.nextLine().trim();"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"            String[] inputStringSplit \u003d inputString.split(\" \", 2);"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"            System.out.println(LINE);"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"            if (inputString.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"                return;"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"            } else if (inputStringSplit[0].equalsIgnoreCase(\"done\")) {"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"                if (inputStringSplit.length \u003e 1) {"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                    MarkAsDone.markAsDone(inputStringSplit[1]);"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"                } else {"},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"                    DukeException.doneWithoutNo();"},{"lineNumber":40,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"baggiiiie"},"content":"            } else if (inputStringSplit[0].equalsIgnoreCase(\"delete\")) {"},{"lineNumber":42,"author":{"gitId":"baggiiiie"},"content":"                if (inputStringSplit.length \u003e 1) {"},{"lineNumber":43,"author":{"gitId":"baggiiiie"},"content":"                    Delete.deleteTask(inputStringSplit[1]);"},{"lineNumber":44,"author":{"gitId":"baggiiiie"},"content":"                } else {"},{"lineNumber":45,"author":{"gitId":"baggiiiie"},"content":"                    DukeException.deleteWithoutNo();"},{"lineNumber":46,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":47,"author":{"gitId":"baggiiiie"},"content":"            } else if (inputStringSplit[0].equalsIgnoreCase(\"list\")) {"},{"lineNumber":48,"author":{"gitId":"baggiiiie"},"content":"                printList(0, taskCount);"},{"lineNumber":49,"author":{"gitId":"baggiiiie"},"content":"            } else if (AddToList.keywordCheck(inputStringSplit[0])) {"},{"lineNumber":50,"author":{"gitId":"baggiiiie"},"content":"                if (inputStringSplit.length \u003e 1) {"},{"lineNumber":51,"author":{"gitId":"baggiiiie"},"content":"                    AddToList.AddToList(inputStringSplit[0], inputStringSplit[1]);"},{"lineNumber":52,"author":{"gitId":"baggiiiie"},"content":"                } else {"},{"lineNumber":53,"author":{"gitId":"baggiiiie"},"content":"                    DukeException.taskDescriptionEmpty();"},{"lineNumber":54,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"baggiiiie"},"content":"            } else {"},{"lineNumber":56,"author":{"gitId":"baggiiiie"},"content":"                DukeException.illegalInput();"},{"lineNumber":57,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":61,"author":{"gitId":"baggiiiie"},"content":"    private static void readFile(List\u003cTask\u003e lists){"},{"lineNumber":62,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"baggiiiie"},"content":"            File file \u003d new File(\"src/main/java/Duke/Duke.txt\");"},{"lineNumber":64,"author":{"gitId":"baggiiiie"},"content":"            if (file.createNewFile()) {"},{"lineNumber":65,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\"A new file has been created! ^_^\");"},{"lineNumber":66,"author":{"gitId":"baggiiiie"},"content":"            } else {"},{"lineNumber":67,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\"Reading saved Task Lists ^_^\");"},{"lineNumber":68,"author":{"gitId":"baggiiiie"},"content":"                Scanner readingFile \u003d new Scanner(file);"},{"lineNumber":69,"author":{"gitId":"baggiiiie"},"content":"                while (readingFile.hasNextLine()) {"},{"lineNumber":70,"author":{"gitId":"baggiiiie"},"content":"                    String line \u003d readingFile.nextLine();"},{"lineNumber":71,"author":{"gitId":"baggiiiie"},"content":"                    String[] parts \u003d line.split(\"\\\\|\", 4);"},{"lineNumber":72,"author":{"gitId":"baggiiiie"},"content":"                    String type \u003d parts[0];"},{"lineNumber":73,"author":{"gitId":"baggiiiie"},"content":"                    String isDone \u003d parts[1];"},{"lineNumber":74,"author":{"gitId":"baggiiiie"},"content":"                    String task \u003d parts[2];"},{"lineNumber":75,"author":{"gitId":"baggiiiie"},"content":"                    if (type.equals(\"T\")) {"},{"lineNumber":76,"author":{"gitId":"baggiiiie"},"content":"                        Task taskInFile \u003d new ToDoTask(task);"},{"lineNumber":77,"author":{"gitId":"baggiiiie"},"content":"                        lists.add(taskInFile);"},{"lineNumber":78,"author":{"gitId":"baggiiiie"},"content":"                        if (isDone.equals(\"true\")) {"},{"lineNumber":79,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile.markAsDone();"},{"lineNumber":80,"author":{"gitId":"baggiiiie"},"content":"                        }"},{"lineNumber":81,"author":{"gitId":"baggiiiie"},"content":"                    } else if (type.equals(\"D\")) {"},{"lineNumber":82,"author":{"gitId":"baggiiiie"},"content":"                        String time \u003d parts[3];"},{"lineNumber":83,"author":{"gitId":"baggiiiie"},"content":"                        DeadlineTask taskInFile \u003d new DeadlineTask(task, time);"},{"lineNumber":84,"author":{"gitId":"baggiiiie"},"content":"                        lists.add(taskInFile);"},{"lineNumber":85,"author":{"gitId":"baggiiiie"},"content":"                        if (isDone.equals(\"true\")) {"},{"lineNumber":86,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile.markAsDone();"},{"lineNumber":87,"author":{"gitId":"baggiiiie"},"content":"                        }"},{"lineNumber":88,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":89,"author":{"gitId":"baggiiiie"},"content":"                        String time \u003d parts[3];"},{"lineNumber":90,"author":{"gitId":"baggiiiie"},"content":"                        EventTask taskInFile \u003d new EventTask(task, time);"},{"lineNumber":91,"author":{"gitId":"baggiiiie"},"content":"                        lists.add(taskInFile);"},{"lineNumber":92,"author":{"gitId":"baggiiiie"},"content":"                        if (isDone.equals(\"true\")) {"},{"lineNumber":93,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile.markAsDone();"},{"lineNumber":94,"author":{"gitId":"baggiiiie"},"content":"                        }"},{"lineNumber":95,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":96,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"baggiiiie"},"content":"                taskCount \u003d lists.size();"},{"lineNumber":98,"author":{"gitId":"baggiiiie"},"content":"                printList(0, taskCount);"},{"lineNumber":99,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"baggiiiie"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"baggiiiie"},"content":"            e.printStackTrace();"},{"lineNumber":102,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":105,"author":{"gitId":"baggiiiie"},"content":"    private static void writeFile(List\u003cTask\u003e lists){"},{"lineNumber":106,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"baggiiiie"},"content":"            FileWriter writer \u003d new FileWriter(\"src/main/java/Duke/Duke.txt\",false);"},{"lineNumber":108,"author":{"gitId":"baggiiiie"},"content":"            for (Task taskInList : lists) {"},{"lineNumber":109,"author":{"gitId":"baggiiiie"},"content":"                if (taskInList instanceof ToDoTask) {"},{"lineNumber":110,"author":{"gitId":"baggiiiie"},"content":"                    writer.write(taskInList.getTaskType() + \"|\" + taskInList.isDone() + \"|\" + taskInList.getTask().trim());"},{"lineNumber":111,"author":{"gitId":"baggiiiie"},"content":"                } else {"},{"lineNumber":112,"author":{"gitId":"baggiiiie"},"content":"                    writer.write(taskInList.getTaskType() + \"|\" + taskInList.isDone() + \"|\" + taskInList.getTask().trim() + \"|\" + taskInList.getTaskTime().trim());"},{"lineNumber":113,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"baggiiiie"},"content":"                writer.write(\"\\r\\n\");"},{"lineNumber":115,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"baggiiiie"},"content":"            writer.close();"},{"lineNumber":117,"author":{"gitId":"baggiiiie"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"baggiiiie"},"content":"            e.printStackTrace();"},{"lineNumber":119,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":122,"author":{"gitId":"baggiiiie"},"content":"    public static void printList(int startIndex, int endIndex) {"},{"lineNumber":123,"author":{"gitId":"baggiiiie"},"content":"        if (endIndex \u003d\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"baggiiiie"},"content":"            System.out.println(\"List is empty :o\\n\" + LINE + \"\\n\");"},{"lineNumber":125,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":126,"author":{"gitId":"baggiiiie"},"content":"            for(int i \u003d startIndex; i \u003c endIndex; ++i) {"},{"lineNumber":127,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" \" + (i + 1) + \": \" + lists.get(i).toString());"},{"lineNumber":128,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":132,"author":{"gitId":"baggiiiie"},"content":"    public static void greetings(){"},{"lineNumber":133,"author":{"gitId":"baggiiiie"},"content":"        String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":134,"author":{"gitId":"baggiiiie"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":135,"author":{"gitId":"baggiiiie"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":136,"author":{"gitId":"baggiiiie"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":137,"author":{"gitId":"baggiiiie"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":138,"author":{"gitId":"baggiiiie"},"content":"        System.out.println( LOGO + LINE + \"\\n\" + \" Hello! I\u0027m Duke.Duke\\n\" + \" What can I do for you?\\n\" + LINE + \"\\n\" );"},{"lineNumber":139,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":141,"author":{"gitId":"baggiiiie"},"content":"    public static void goodbye(){"},{"lineNumber":142,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Bye! Hope to see you again soon!\\n\" + LINE );"},{"lineNumber":143,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":144}},{"path":"src/main/java/Duke/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"E|false|second|5 -5"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":"T|true|third"},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"D|false|1|1"}],"authorContributionMap":{"baggiiiie":3}},{"path":"src/main/java/Duke/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"public class DukeException extends Duke {"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"    public static void taskDescriptionEmpty(){"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No task description :(\\n Ahh what\u0027s the task here?\");"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public static void taskWithoutTime() {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No time input :(\\n When do you need to get it done?\");"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static void illegalInput() {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Duke.Duke doesn\u0027t know what to do with the command D:\");"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    public static void doneWithoutNo() {"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No index input :(\\n Which task is done?\");"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    public static void deleteWithoutNo() {"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No index input :(\\n Which task you wanna delete?\");"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"    public static void exceedListLength(int taskIndex) {"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" You don\u0027t have Task \"+ taskIndex +\" in your list ^_^\");"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":29}},{"path":"src/main/java/Duke/Functions/AddToList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Functions;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.EventTask;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.ToDoTask;"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"public class AddToList extends Duke {"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public static void AddToList(String taskType, String taskDescription) {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        if (taskType.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"            lists.add(new ToDoTask(taskDescription));"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"            taskAddedText();"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    } else if (taskDescription.contains(\"/\")) {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"            String[] taskAndTime \u003d taskDescription.split(\"/\", 2);"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            if (taskType.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"                lists.add(new DeadlineTask(taskAndTime[0], taskAndTime[1]));"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"                taskAddedText();"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            } else if (taskType.equalsIgnoreCase(\"event\")) {"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"                lists.add(new EventTask(taskAndTime[0], taskAndTime[1]));"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"                taskAddedText();"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"            DukeException.taskWithoutTime();"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"    public static void taskAddedText() {"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Task added! ^_^\");"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"        printList(taskCount, taskCount + 1);"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"        ++taskCount;"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"    public static boolean keywordCheck(String keyword) {"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"        return keyword.equalsIgnoreCase(\"deadline\") ||"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"                keyword.equalsIgnoreCase(\"event\") ||"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                keyword.equalsIgnoreCase(\"todo\");"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":39}},{"path":"src/main/java/Duke/Functions/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Functions;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"public class Delete extends Duke {"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public static void deleteTask(String deleteTask){"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        try{"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"            int deleteTaskIndex \u003d Integer.parseInt(deleteTask) - 1;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"            if (deleteTaskIndex \u003c taskCount \u0026\u0026 deleteTaskIndex \u003e\u003d 0) {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" Yay! This task is deleted!\");"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"                printList(deleteTaskIndex, deleteTaskIndex + 1);"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"                lists.remove(deleteTaskIndex);"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"                taskCount--;"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"            } else {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"                DukeException.exceedListLength(deleteTaskIndex + 1);"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            DukeException.deleteWithoutNo();"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":22}},{"path":"src/main/java/Duke/Functions/MarkAsDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Functions;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"public class MarkAsDone extends Duke {"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public static void markAsDone(String doneTask){"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        try{"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"            int doneTaskIndex \u003d Integer.parseInt(doneTask) - 1;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"            if (doneTaskIndex \u003c taskCount \u0026\u0026 doneTaskIndex \u003e\u003d 0) {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" Yay! This task is done!\");"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"                lists.get(doneTaskIndex).markAsDone();"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"                printList(doneTaskIndex, doneTaskIndex + 1);"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"            } else {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"                DukeException.exceedListLength(doneTaskIndex + 1);"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            DukeException.doneWithoutNo();"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":21}},{"path":"src/main/java/Duke/Task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    protected String time;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public DeadlineTask(String taskDescription, String time) {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        super(taskDescription);"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"        this.time \u003d time;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime() {"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        return time;"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        return \"D\";"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + time + \")\";"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":26}},{"path":"src/main/java/Duke/Task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class EventTask extends Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    protected String time;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public EventTask(String description, String time) {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"        this.time \u003d time;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        return \"E\";"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime(){"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        return time;"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":26}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"    protected String taskDescription;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public Task(String taskDescription) {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public String getStatusIcon() {"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public void markAsDone() {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        this.isDone \u003d true;"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    public boolean isDone() { return isDone; }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    public String getTask() {"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"        return taskDescription;"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"        return null;"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime() {"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"        return null;"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getTask();"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":37}},{"path":"src/main/java/Duke/Task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class ToDoTask extends Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    public ToDoTask(String taskDescription) {"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"        super(taskDescription);"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"        return \"T\";"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"java -classpath ..\\bin Duke2.Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"baggiiiie":1,"-":20}}]
