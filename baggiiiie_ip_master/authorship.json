[{"path":"Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"[D]|true|1|1"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":"[T]|false|1"},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"[D]|false|1|"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"[T]|false|math class"}],"authorContributionMap":{"baggiiiie":4}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"# Duke2.Duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"1. After that, locate the `src/main/java/Duke2.Duke.Duke.java` file, right-click it, and choose `Run Duke2.Duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"baggiiiie":2,"-":24}},{"path":"src/main/java/Duke/Commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"public class AddDeadlineCommand extends Duke {"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * Add Deadline Task into the list,"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     * show error message if theres no time input"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"     * @param taskDescription"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static void execute(String taskDescription) {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        if (taskDescription.contains(\"/\")) {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            String[] taskAndTime \u003d taskDescription.split(\"/\", 2);"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            lists.add(new DeadlineTask(taskAndTime[0].trim(), taskAndTime[1].trim()));"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            UI.taskAddedText();"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            taskCount++;"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"            Errors.taskWithoutTime();"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":24}},{"path":"src/main/java/Duke/Commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.EventTask;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"public class AddEventCommand extends Duke {"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * Add Event Task into the list"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     * show error if theres no time input"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"     * @param taskDescription"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static void execute(String taskDescription) {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        if (taskDescription.contains(\"/\")) {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            String[] taskAndTime \u003d taskDescription.split(\"/\", 2);"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            lists.add(new EventTask(taskAndTime[0].trim(), taskAndTime[1].trim()));"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            UI.taskAddedText();"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            taskCount++;"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"            Errors.taskWithoutTime();"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":24}},{"path":"src/main/java/Duke/Commands/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.ToDoTask;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"public class AddTodoCommand extends Duke {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"     * Add Todo Task into the list"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * @param taskDescription"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public static void execute(String taskDescription) {"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"        lists.add(new ToDoTask(taskDescription));"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        UI.taskAddedText();"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        taskCount++;"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":17}},{"path":"src/main/java/Duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"public class DeleteCommand extends Duke {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"     * Delete a task"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * @param deleteTask"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public static void deleteTask(String deleteTask){"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"        int deleteTaskIndex \u003d Integer.parseInt(deleteTask) - 1;"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        if (deleteTaskIndex \u003c taskCount \u0026\u0026 deleteTaskIndex \u003e\u003d 0) {"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"            PrintListCommand.printList(deleteTaskIndex, deleteTaskIndex + 1);"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            lists.remove(deleteTaskIndex);"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            UI.taskDeleted();"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            taskCount--;"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"            Errors.exceedListLength(deleteTaskIndex + 1);"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":23}},{"path":"src/main/java/Duke/Commands/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.Task;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"public class FindTaskCommand extends Duke {"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     * Find tasks on a specific date"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"     * show error if theres no task on the date"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"     * @param date"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    public static void FindWithDate(String date) {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            LocalDate d1 \u003d LocalDate.parse(date);"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            String d2 \u003d d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            for (Task t : lists) {"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"                if (d2.equals(t.getTaskTime())) {"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"                    System.out.println(lists.indexOf(t) + 1 + \". \" + t.toString());"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"            Errors.cannotRecognise(date);"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"     * Find tasks with a specific keyword"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"     * show error if theres no task on the date"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"     * @param keyword"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"    public static void FindWithKeyword(String keyword) {"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"            for (Task t : lists) {"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                if (t.getTask().contains(keyword)) {"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"                    System.out.println(lists.indexOf(t) + 1 + \". \" + t.toString());"},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":42,"author":{"gitId":"baggiiiie"},"content":"            Errors.cannotRecognise(keyword);"},{"lineNumber":43,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":45}},{"path":"src/main/java/Duke/Commands/MarkAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"public class MarkAsDoneCommand extends Duke {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"     * Take the index from input"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * and mark the task with the index as done"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     * @param doneTask"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    public static void markAsDone(String doneTask){"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        int doneTaskIndex \u003d Integer.parseInt(doneTask) - 1;"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        if (doneTaskIndex \u003c taskCount \u0026\u0026 doneTaskIndex \u003e\u003d 0) {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            UI.taskDone();"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"            lists.get(doneTaskIndex).markAsDone();"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            PrintListCommand.printList(doneTaskIndex, doneTaskIndex + 1);"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"            Errors.exceedListLength(doneTaskIndex + 1);"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":23}},{"path":"src/main/java/Duke/Commands/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"public class PrintListCommand extends Duke {"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"     * Print list from start index to end index"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"     * Used to print both list and a single task"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"     * @param startIndex"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"     * @param endIndex"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public static void printList(int startIndex, int endIndex) {"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"        if (endIndex \u003d\u003d 0) {"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"            System.out.println(\"List is empty :o\\n\");"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        } else {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"            for(int i \u003d startIndex; i \u003c endIndex; ++i) {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" \" + (i + 1) + \": \" + lists.get(i).toString());"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":21}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.FileHandling.FileHandler;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Parser.ProcessInput;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.*;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public static String inputString;"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    public static int taskCount \u003d 0;"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static List\u003cTask\u003e lists \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        UI.greetings();"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"        FileHandler.readFile();"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"        ProcessInput.processInput();"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        FileHandler.writeFile();"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"        UI.goodbye();"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":23}},{"path":"src/main/java/Duke/Errors/Errors.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Errors;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"public class Errors extends Duke {"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"     * Error messages for invalid inputs"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"    public static void taskDescriptionEmpty(){"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No task description :(\\n Ahh what\u0027s the task here?\");"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    public static void taskWithoutTime() {"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No time input :(\");"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    public static void illegalInput() {"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Duke doesn\u0027t know what to do with the command D:\");"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"    public static void noIndexInput() {"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" No index input :(\");"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"    public static void exceedListLength(int taskIndex) {"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" You don\u0027t have Task \"+ taskIndex +\" in your list ^_^\");"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"    public static void cannotRecognise(String input) {"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Duke could find any tasks related to \" + input);"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":32}},{"path":"src/main/java/Duke/FileHandling/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.FileHandling;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Commands.PrintListCommand;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.EventTask;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.Task;"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"import Duke.Task.ToDoTask;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"public class FileHandler extends Duke{"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"     * Load tasks from file"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    public static void readFile(){"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"            String localDir \u003d System.getProperty(\"user.dir\"); //get the path of current directory"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"            File file \u003d new File(localDir + \"/Duke.txt\");"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"            if (file.createNewFile()) {"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"                //create new file if file does not exist"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" A new file [\" + file.getName()+ \"] has been created! ^_^\\nIt could be found at \" + localDir);"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"            } else {"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"                System.out.println(\" Reading saved Task Lists from [\" + file.getName()+ \"]^_^\\nIt could be found at \" + localDir);"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"                Scanner readingFile \u003d new Scanner(file);"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"                while (readingFile.hasNextLine()) {"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"                    String line \u003d readingFile.nextLine();"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"                    String[] parts \u003d line.split(\"\\\\|\", 4);"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"                    String type \u003d parts[0];"},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"                    String isDone \u003d parts[1];"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"                    String task \u003d parts[2];"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"                    Task taskInFile \u003d new Task(task);"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                    switch (type) {"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"                        case \"[T]\":"},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile \u003d new ToDoTask(task);"},{"lineNumber":40,"author":{"gitId":"baggiiiie"},"content":"                            lists.add(taskInFile);"},{"lineNumber":41,"author":{"gitId":"baggiiiie"},"content":"                            break;"},{"lineNumber":42,"author":{"gitId":"baggiiiie"},"content":"                        case \"[D]\":"},{"lineNumber":43,"author":{"gitId":"baggiiiie"},"content":"                            String time \u003d parts[3];"},{"lineNumber":44,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile \u003d new DeadlineTask(task, time);"},{"lineNumber":45,"author":{"gitId":"baggiiiie"},"content":"                            lists.add(taskInFile);"},{"lineNumber":46,"author":{"gitId":"baggiiiie"},"content":"                            break;"},{"lineNumber":47,"author":{"gitId":"baggiiiie"},"content":"                        case \"[E]\":"},{"lineNumber":48,"author":{"gitId":"baggiiiie"},"content":"                            time \u003d parts[3];"},{"lineNumber":49,"author":{"gitId":"baggiiiie"},"content":"                            taskInFile \u003d new EventTask(task, time);"},{"lineNumber":50,"author":{"gitId":"baggiiiie"},"content":"                            lists.add(taskInFile);"},{"lineNumber":51,"author":{"gitId":"baggiiiie"},"content":"                            break;"},{"lineNumber":52,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":53,"author":{"gitId":"baggiiiie"},"content":"                    if (isDone.equals(\"true\")) {"},{"lineNumber":54,"author":{"gitId":"baggiiiie"},"content":"                        taskInFile.markAsDone();"},{"lineNumber":55,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":56,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"baggiiiie"},"content":"                taskCount \u003d lists.size();"},{"lineNumber":58,"author":{"gitId":"baggiiiie"},"content":"                //prints list after copying every task from file"},{"lineNumber":59,"author":{"gitId":"baggiiiie"},"content":"                PrintListCommand.printList(0, taskCount);"},{"lineNumber":60,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"baggiiiie"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitId":"baggiiiie"},"content":"            e.printStackTrace();"},{"lineNumber":63,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":66,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"baggiiiie"},"content":"     * Copy list to file"},{"lineNumber":68,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"baggiiiie"},"content":"    public static void writeFile(){"},{"lineNumber":70,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"baggiiiie"},"content":"            String localDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":72,"author":{"gitId":"baggiiiie"},"content":"            FileWriter writer \u003d new FileWriter(localDir + \"/Duke.txt\",false);"},{"lineNumber":73,"author":{"gitId":"baggiiiie"},"content":"            for (Task taskInList : lists) {"},{"lineNumber":74,"author":{"gitId":"baggiiiie"},"content":"                writer.write(taskInList.getTaskType() + \"|\" + taskInList.isDone() + \"|\" + taskInList.getTask().trim());"},{"lineNumber":75,"author":{"gitId":"baggiiiie"},"content":"                if (!(taskInList instanceof ToDoTask)) {"},{"lineNumber":76,"author":{"gitId":"baggiiiie"},"content":"                    //if it\u0027s a deadline task or event task, there\u0027s time info"},{"lineNumber":77,"author":{"gitId":"baggiiiie"},"content":"                    writer.write(\"|\" + taskInList.getTaskTime().trim());"},{"lineNumber":78,"author":{"gitId":"baggiiiie"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"baggiiiie"},"content":"                writer.write(\"\\r\\n\");"},{"lineNumber":80,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"baggiiiie"},"content":"            System.out.println(\" File saved!\");"},{"lineNumber":82,"author":{"gitId":"baggiiiie"},"content":"            writer.close();"},{"lineNumber":83,"author":{"gitId":"baggiiiie"},"content":"        } catch (IOException e) {"},{"lineNumber":84,"author":{"gitId":"baggiiiie"},"content":"            e.printStackTrace();"},{"lineNumber":85,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":87}},{"path":"src/main/java/Duke/Parser/ProcessInput.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Parser;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Commands.*;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"import Duke.Errors.Errors;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"import Duke.UI.UI;"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"public class ProcessInput extends Duke {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"     * Take input from user"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"     * switch according to the first word"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"     * show errors if the second word is invalid"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public static void processInput(){"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        Scanner userInput \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"        while(true) {"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            inputString \u003d userInput.nextLine().trim();"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"            String[] inputStringSplit \u003d inputString.split(\" \", 2);"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"            System.out.println(UI.LINE);"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"            switch (inputStringSplit[0]) {"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"                case \"bye\":"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"                    //ends program"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"                    return;"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"                case \"done\":"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"                    //mark a task as done"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"                        //makes sure there\u0027s an index after \"done\", otherwise shows error"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"                        MarkAsDoneCommand.markAsDone(inputStringSplit[1]);"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"                        Errors.noIndexInput();"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"                case \"delete\":"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"                    //deletes a task"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"                        DeleteCommand.deleteTask(inputStringSplit[1]);"},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":40,"author":{"gitId":"baggiiiie"},"content":"                        Errors.noIndexInput();"},{"lineNumber":41,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":42,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"baggiiiie"},"content":"                case \"list\":"},{"lineNumber":44,"author":{"gitId":"baggiiiie"},"content":"                    //shows list"},{"lineNumber":45,"author":{"gitId":"baggiiiie"},"content":"                    PrintListCommand.printList(0, taskCount);"},{"lineNumber":46,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":47,"author":{"gitId":"baggiiiie"},"content":"                case \"help\":"},{"lineNumber":48,"author":{"gitId":"baggiiiie"},"content":"                    //shows help menu"},{"lineNumber":49,"author":{"gitId":"baggiiiie"},"content":"                    UI.helpMenu();"},{"lineNumber":50,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"baggiiiie"},"content":"                case \"date\":"},{"lineNumber":52,"author":{"gitId":"baggiiiie"},"content":"                    //finds tasks on a date"},{"lineNumber":53,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":54,"author":{"gitId":"baggiiiie"},"content":"                        FindTaskCommand.FindWithDate(inputStringSplit[1]);"},{"lineNumber":55,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":56,"author":{"gitId":"baggiiiie"},"content":"                        Errors.noIndexInput();"},{"lineNumber":57,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":58,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"baggiiiie"},"content":"                case \"find\":"},{"lineNumber":60,"author":{"gitId":"baggiiiie"},"content":"                    //finds tasks containing keyword"},{"lineNumber":61,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":62,"author":{"gitId":"baggiiiie"},"content":"                        FindTaskCommand.FindWithKeyword(inputStringSplit[1]);"},{"lineNumber":63,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":64,"author":{"gitId":"baggiiiie"},"content":"                        Errors.noIndexInput();"},{"lineNumber":65,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":66,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"baggiiiie"},"content":"                case \"todo\":"},{"lineNumber":68,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":69,"author":{"gitId":"baggiiiie"},"content":"                        AddTodoCommand.execute(inputStringSplit[1]);"},{"lineNumber":70,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":71,"author":{"gitId":"baggiiiie"},"content":"                        Errors.taskDescriptionEmpty();"},{"lineNumber":72,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":73,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":74,"author":{"gitId":"baggiiiie"},"content":"                case \"deadline\":"},{"lineNumber":75,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":76,"author":{"gitId":"baggiiiie"},"content":"                        AddDeadlineCommand.execute(inputStringSplit[1]);"},{"lineNumber":77,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":78,"author":{"gitId":"baggiiiie"},"content":"                        Errors.taskDescriptionEmpty();"},{"lineNumber":79,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":81,"author":{"gitId":"baggiiiie"},"content":"                case \"event\":"},{"lineNumber":82,"author":{"gitId":"baggiiiie"},"content":"                    if (inputStringSplit.length \u003e 1) {"},{"lineNumber":83,"author":{"gitId":"baggiiiie"},"content":"                        AddEventCommand.execute(inputStringSplit[1]);"},{"lineNumber":84,"author":{"gitId":"baggiiiie"},"content":"                    } else {"},{"lineNumber":85,"author":{"gitId":"baggiiiie"},"content":"                        Errors.taskDescriptionEmpty();"},{"lineNumber":86,"author":{"gitId":"baggiiiie"},"content":"                    }"},{"lineNumber":87,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":88,"author":{"gitId":"baggiiiie"},"content":"                default:"},{"lineNumber":89,"author":{"gitId":"baggiiiie"},"content":"                    Errors.illegalInput();"},{"lineNumber":90,"author":{"gitId":"baggiiiie"},"content":"                    break;"},{"lineNumber":91,"author":{"gitId":"baggiiiie"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":94}},{"path":"src/main/java/Duke/Task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    protected String time;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public DeadlineTask(String taskDescription, String time) {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        super(taskDescription);"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"        this.time \u003d time;"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime() {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"            LocalDate d1 \u003d LocalDate.parse(time);"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"            return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"            return time;"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"     * Print task type"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"     * @return [D]"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"        return \"[D]\";"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"        return getTaskType() + super.toString() + \" (by: \" + getTaskTime() + \")\";"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":38}},{"path":"src/main/java/Duke/Task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"public class EventTask extends Task {"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    protected String time;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public EventTask(String description, String time) {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"        this.time \u003d time;"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        return \"[E]\";"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime(){"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"            LocalDate d1 \u003d LocalDate.parse(time);"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"            return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"        } catch (Exception e) {"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"            return time;"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"        return getTaskType() + super.toString() + \" (at: \" + getTaskTime() + \")\";"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":34}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"    protected String taskDescription;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    public Task(String taskDescription) {"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    public String getStatusIcon() {"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"    public void markAsDone() {"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"        this.isDone \u003d true;"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"    public boolean isDone() { return isDone; }"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":"    public String getTask() {"},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"        return taskDescription;"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"        return null;"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskTime() {"},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"        return null;"},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getTask();"},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":37}},{"path":"src/main/java/Duke/Task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"public class ToDoTask extends Task {"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":"    public ToDoTask(String taskDescription) {"},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"        super(taskDescription);"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        return getTaskType() + super.toString();"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"    public String getTaskType() {"},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"        return \"[T]\";"},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":18}},{"path":"src/main/java/Duke/UI/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"baggiiiie"},"content":"package Duke.UI;"},{"lineNumber":2,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":3,"author":{"gitId":"baggiiiie"},"content":"import Duke.Commands.PrintListCommand;"},{"lineNumber":4,"author":{"gitId":"baggiiiie"},"content":"import Duke.Duke;"},{"lineNumber":5,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":6,"author":{"gitId":"baggiiiie"},"content":"public class UI extends Duke{"},{"lineNumber":7,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":8,"author":{"gitId":"baggiiiie"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":9,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":10,"author":{"gitId":"baggiiiie"},"content":"    public UI(){"},{"lineNumber":11,"author":{"gitId":"baggiiiie"},"content":"        greetings();"},{"lineNumber":12,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":14,"author":{"gitId":"baggiiiie"},"content":"    public static void greetings(){"},{"lineNumber":15,"author":{"gitId":"baggiiiie"},"content":"        String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":16,"author":{"gitId":"baggiiiie"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":17,"author":{"gitId":"baggiiiie"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":19,"author":{"gitId":"baggiiiie"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":20,"author":{"gitId":"baggiiiie"},"content":"        System.out.println( LOGO + LINE + \"\\n\" + \" Hello! I\u0027m Duke\\n\" + \" Type \u0027help\u0027 to see what i could do for you\\n\" + LINE + \"\\n\" );"},{"lineNumber":21,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":23,"author":{"gitId":"baggiiiie"},"content":"    public static void goodbye(){"},{"lineNumber":24,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Bye! Hope to see you again soon!\\n\" + LINE );"},{"lineNumber":25,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":27,"author":{"gitId":"baggiiiie"},"content":"    public static void helpMenu(){"},{"lineNumber":28,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\"Here\u0027s what I could do for you ^_^\\n\""},{"lineNumber":29,"author":{"gitId":"baggiiiie"},"content":"                + \"help: print help menu\\n\""},{"lineNumber":30,"author":{"gitId":"baggiiiie"},"content":"                + \"list: see saved tasks in the list\\n\""},{"lineNumber":31,"author":{"gitId":"baggiiiie"},"content":"                + \"todo: add todo task into the list\\n\""},{"lineNumber":32,"author":{"gitId":"baggiiiie"},"content":"                + \"event: add event into the list\\n\""},{"lineNumber":33,"author":{"gitId":"baggiiiie"},"content":"                + \"deadline: add deadline into the list\\n\""},{"lineNumber":34,"author":{"gitId":"baggiiiie"},"content":"                + \"[tip: enter date as YYYY-MM-DD to help duke understand better!]\\n\""},{"lineNumber":35,"author":{"gitId":"baggiiiie"},"content":"                + \"done: mark a task in the list as done\\n\""},{"lineNumber":36,"author":{"gitId":"baggiiiie"},"content":"                + \"delete: delete a task from the list\\n\""},{"lineNumber":37,"author":{"gitId":"baggiiiie"},"content":"                + \"date: search saved tasks on a specific day\\n\""},{"lineNumber":38,"author":{"gitId":"baggiiiie"},"content":"                + \"find: search saved tasks by keywords\\n\""},{"lineNumber":39,"author":{"gitId":"baggiiiie"},"content":"                + \"bye: exit Duke\\n\""},{"lineNumber":40,"author":{"gitId":"baggiiiie"},"content":"                );"},{"lineNumber":41,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"baggiiiie"},"content":"    public static void taskAddedText() {"},{"lineNumber":43,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Task added! ^_^\");"},{"lineNumber":44,"author":{"gitId":"baggiiiie"},"content":"        PrintListCommand.printList(taskCount, taskCount + 1);"},{"lineNumber":45,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"baggiiiie"},"content":"    public static void taskDeleted() {"},{"lineNumber":47,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Yay! This task is deleted!\");"},{"lineNumber":48,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":50,"author":{"gitId":"baggiiiie"},"content":"    public static void taskDone() {"},{"lineNumber":51,"author":{"gitId":"baggiiiie"},"content":"        System.out.println(\" Yay! This task is done!\");"},{"lineNumber":52,"author":{"gitId":"baggiiiie"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"baggiiiie"},"content":""},{"lineNumber":54,"author":{"gitId":"baggiiiie"},"content":"}"}],"authorContributionMap":{"baggiiiie":54}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"baggiiiie"},"content":"java -classpath ..\\bin Duke2.Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"baggiiiie":1,"-":20}}]
