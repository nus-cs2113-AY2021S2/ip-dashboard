[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"ManikaHennedige":1,"-":25}},{"path":"data/savedata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"Duke\u0027s Most Recent Task List"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":"D | 1 | Kidnap the chancellor || 20-02-2020 01:00 PM"},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"T | 0 | Learn about Jacen Solo"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"T | 1 | Find out about Tenel-Ka and Allana"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"T | 0 | Figure out what happened to Darth Krayt"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"D | 0 | Blow up Death Star II || 20-02-2020 01:00 PM"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"E | 0 | Hear the tragedy of Darth Plagueis the Wise || 20-02-2020 01:00 PM"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"E | 1 | use the force Luke || 20-02-2020 01:00 PM"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"E | 0 | use the force anakin || 02-02-2021 08:00 AM"}],"authorContributionMap":{"ManikaHennedige":9}},{"path":"src/main/java/duke/controller/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.ui.UI;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"        UI.showWelcomeScreen();"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":"        String input;"},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"        runProgramLoop(sc);"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"    private static void runProgramLoop(Scanner sc) {"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"        String input;"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"        do {"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"            switch (input) {"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":"            case \"list\":"},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"                UI.showAllTasks();"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"            case \"bye\":"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"                UI.showFarewellScreen();"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"            default:"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"                try {"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"                    TaskManager.processTask(input);"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"                } catch (InvalidInputException e) {"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"                    UI.requestInput();"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"        } while (!input.equals(\"bye\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":38,"-":4}},{"path":"src/main/java/duke/controller/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.*;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"import duke.ui.UI;"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"public class TaskManager {"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"     * processTask is the main class which redirects and classifies various inputs"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"     * @param input is the raw user input"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"     * @throws InvalidInputException in the event that an invalid command is issued"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":"    public static void processTask(String input) throws InvalidInputException {"},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"        String[] inputData \u003d input.split(\" \");"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"        String[] taskDetails;"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"        switch (inputData[0]) {"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"            case \"done\":"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"            case \"delete\":"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"                processDoneOrDeletedTask(inputData);"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"            case \"deadline\":"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"                processDeadlineTask(inputData);"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"            case \"event\":"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"                processEventTask(inputData);"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"            case \"todo\":"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"                processTodoTask(inputData);"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"            case \"find\":"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"                processFindTask(inputData);"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"            default:"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"                throw new InvalidInputException();"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":43,"author":{"gitId":"ManikaHennedige"},"content":"    private static void processFindTask(String[] inputData) {"},{"lineNumber":44,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"ManikaHennedige"},"content":"            ArrayList\u003cTask\u003e matches \u003d Task.find(inputData[1]);"},{"lineNumber":46,"author":{"gitId":"ManikaHennedige"},"content":"            UI.tasksFound(inputData[1], matches);"},{"lineNumber":47,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"Please enter a search query\");"},{"lineNumber":49,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":50,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":52,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":54,"author":{"gitId":"ManikaHennedige"},"content":"    private static void processTodoTask(String[] inputData) {"},{"lineNumber":55,"author":{"gitId":"ManikaHennedige"},"content":"        String[] taskDetails;"},{"lineNumber":56,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"ManikaHennedige"},"content":"            taskDetails \u003d parseTaskDetails(inputData);"},{"lineNumber":58,"author":{"gitId":"ManikaHennedige"},"content":"            Todo.checkTodoInput(taskDetails);"},{"lineNumber":59,"author":{"gitId":"ManikaHennedige"},"content":"            Task.addNewTask(new Todo(taskDetails[0]));"},{"lineNumber":60,"author":{"gitId":"ManikaHennedige"},"content":"            UI.taskAddedSuccessfully();"},{"lineNumber":61,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (MissingTaskDescriptionException e) {"},{"lineNumber":62,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":63,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":64,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":67,"author":{"gitId":"ManikaHennedige"},"content":"    private static void processEventTask(String[] inputData) {"},{"lineNumber":68,"author":{"gitId":"ManikaHennedige"},"content":"        String[] taskDetails;"},{"lineNumber":69,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"ManikaHennedige"},"content":"            taskDetails \u003d parseTaskDetails(inputData);"},{"lineNumber":71,"author":{"gitId":"ManikaHennedige"},"content":"            Event.checkEventInput(taskDetails);"},{"lineNumber":72,"author":{"gitId":"ManikaHennedige"},"content":"            Task.addNewTask(new Event(taskDetails[0], taskDetails[1]));"},{"lineNumber":73,"author":{"gitId":"ManikaHennedige"},"content":"            UI.taskAddedSuccessfully();"},{"lineNumber":74,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (MissingEventDurationException e) {"},{"lineNumber":75,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":76,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":77,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (MissingTaskDescriptionException e) {"},{"lineNumber":78,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":79,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":80,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (InvalidDateTimeException e) {"},{"lineNumber":81,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":82,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":83,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":86,"author":{"gitId":"ManikaHennedige"},"content":"    private static void processDeadlineTask(String[] inputData) {"},{"lineNumber":87,"author":{"gitId":"ManikaHennedige"},"content":"        String[] taskDetails;"},{"lineNumber":88,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"ManikaHennedige"},"content":"            taskDetails \u003d parseTaskDetails(inputData);"},{"lineNumber":90,"author":{"gitId":"ManikaHennedige"},"content":"            Deadline.checkDeadlineInput(taskDetails);"},{"lineNumber":91,"author":{"gitId":"ManikaHennedige"},"content":"            Task.addNewTask(new Deadline(taskDetails[0], taskDetails[1]));"},{"lineNumber":92,"author":{"gitId":"ManikaHennedige"},"content":"            UI.taskAddedSuccessfully();"},{"lineNumber":93,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (MissingDueDateException e) {"},{"lineNumber":94,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":95,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":96,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (MissingTaskDescriptionException e) {"},{"lineNumber":97,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":98,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":99,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (InvalidDateTimeException e) {"},{"lineNumber":100,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":101,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":102,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":105,"author":{"gitId":"ManikaHennedige"},"content":"    private static void processDoneOrDeletedTask(String[] inputData) {"},{"lineNumber":106,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"ManikaHennedige"},"content":"            int taskIndex \u003d Integer.parseInt(inputData[1]);"},{"lineNumber":108,"author":{"gitId":"ManikaHennedige"},"content":"            taskIndex--;"},{"lineNumber":109,"author":{"gitId":"ManikaHennedige"},"content":"            Task.checkTaskIndex(taskIndex);"},{"lineNumber":110,"author":{"gitId":"ManikaHennedige"},"content":"            if (inputData[0].equals(\"done\")) {"},{"lineNumber":111,"author":{"gitId":"ManikaHennedige"},"content":"                Task.checkTaskComplete(taskIndex);"},{"lineNumber":112,"author":{"gitId":"ManikaHennedige"},"content":"                Task.completeTask(taskIndex);"},{"lineNumber":113,"author":{"gitId":"ManikaHennedige"},"content":"                UI.taskCompletedSuccessfully();"},{"lineNumber":114,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"ManikaHennedige"},"content":"            else {"},{"lineNumber":116,"author":{"gitId":"ManikaHennedige"},"content":"                Task.deleteTask(taskIndex);"},{"lineNumber":117,"author":{"gitId":"ManikaHennedige"},"content":"                UI.taskDeletedSuccessfully();"},{"lineNumber":118,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":120,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":121,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"That didn\u0027t work...please enter a valid number\");"},{"lineNumber":122,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":123,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (TaskAlreadyCompletedException e) {"},{"lineNumber":124,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":125,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":126,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (TaskNotExistException e) {"},{"lineNumber":127,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":128,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":129,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":130,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"Please input the correct number of the task you wish to interact with\");"},{"lineNumber":131,"author":{"gitId":"ManikaHennedige"},"content":"            UI.requestInput();"},{"lineNumber":132,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":135,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":136,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"ManikaHennedige"},"content":"     * This method seeks to separate and organize user input"},{"lineNumber":138,"author":{"gitId":"ManikaHennedige"},"content":"     * @param inputData is the raw user input data, separated by space"},{"lineNumber":139,"author":{"gitId":"ManikaHennedige"},"content":"     * @return the separated data ready to create the respective Task objects"},{"lineNumber":140,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"ManikaHennedige"},"content":"    public static String[] parseTaskDetails(String[] inputData) {"},{"lineNumber":142,"author":{"gitId":"ManikaHennedige"},"content":"        String[] parsedData \u003d new String[2];"},{"lineNumber":143,"author":{"gitId":"ManikaHennedige"},"content":"        String prefix \u003d \"\";"},{"lineNumber":144,"author":{"gitId":"ManikaHennedige"},"content":"        StringBuilder inputDueDate \u003d new StringBuilder();"},{"lineNumber":145,"author":{"gitId":"ManikaHennedige"},"content":"        StringBuilder inputDescription \u003d new StringBuilder();"},{"lineNumber":146,"author":{"gitId":"ManikaHennedige"},"content":"        int separatorIndex \u003d -1;"},{"lineNumber":147,"author":{"gitId":"ManikaHennedige"},"content":"        for (int i \u003d 1; i \u003c inputData.length; i++) {"},{"lineNumber":148,"author":{"gitId":"ManikaHennedige"},"content":"            if (inputData[i].equals(\"||\")) {"},{"lineNumber":149,"author":{"gitId":"ManikaHennedige"},"content":"                separatorIndex \u003d i;"},{"lineNumber":150,"author":{"gitId":"ManikaHennedige"},"content":"                break;"},{"lineNumber":151,"author":{"gitId":"ManikaHennedige"},"content":"            } else {"},{"lineNumber":152,"author":{"gitId":"ManikaHennedige"},"content":"                inputDescription.append(prefix).append(inputData[i]);"},{"lineNumber":153,"author":{"gitId":"ManikaHennedige"},"content":"                prefix \u003d \" \";"},{"lineNumber":154,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"ManikaHennedige"},"content":"        parsedData[0] \u003d inputDescription.toString();"},{"lineNumber":157,"author":{"gitId":"ManikaHennedige"},"content":"        if (parsedData[0].equals(\"\")) {"},{"lineNumber":158,"author":{"gitId":"ManikaHennedige"},"content":"            parsedData[0] \u003d null;"},{"lineNumber":159,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"ManikaHennedige"},"content":"        if (separatorIndex !\u003d -1) {"},{"lineNumber":161,"author":{"gitId":"ManikaHennedige"},"content":"            prefix \u003d \"\";"},{"lineNumber":162,"author":{"gitId":"ManikaHennedige"},"content":"            for (int j \u003d separatorIndex + 1; j \u003c inputData.length; j++) {"},{"lineNumber":163,"author":{"gitId":"ManikaHennedige"},"content":"                inputDueDate.append(prefix).append(inputData[j]);"},{"lineNumber":164,"author":{"gitId":"ManikaHennedige"},"content":"                prefix \u003d \" \";"},{"lineNumber":165,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"ManikaHennedige"},"content":"            parsedData[1] \u003d inputDueDate.toString();"},{"lineNumber":167,"author":{"gitId":"ManikaHennedige"},"content":"            if (parsedData[1].equals(\"\")) {"},{"lineNumber":168,"author":{"gitId":"ManikaHennedige"},"content":"                parsedData[1] \u003d null;"},{"lineNumber":169,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"ManikaHennedige"},"content":"        } else {"},{"lineNumber":171,"author":{"gitId":"ManikaHennedige"},"content":"            parsedData[1] \u003d null;"},{"lineNumber":172,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"ManikaHennedige"},"content":"        return parsedData;"},{"lineNumber":174,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":175}},{"path":"src/main/java/duke/datamanager/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.datamanager;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":" * This class handles all the file-processing activities"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"public class FileManager {"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"     * This method handles the reading and loading of saved data into Duke"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"     * @throws IOException when the file fails to be read"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"    public static void readFile() throws IOException {"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"        File data \u003d new File(\"data/savedata.txt\");"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"        Scanner sc \u003d new Scanner(data);"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"        sc.nextLine(); // skip the first introductory line"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"        while (sc.hasNext()) {"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"            String taskInput \u003d sc.nextLine();"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"            String[] taskComponents \u003d taskInput.split(\" \\\\| \");"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"            switch (taskComponents[0]){"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"                case \"E\":"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"                    Event newEvent \u003d readEvent(taskComponents);"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"                    Task.addNewTask(newEvent);"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"                    break;"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"                case \"D\":"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"                    Deadline newDeadline \u003d readDeadline(taskComponents);"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"                    Task.addNewTask(newDeadline);"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"                    break;"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"                case \"T\":"},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":"                    Todo newTask \u003d readTodo(taskComponents);"},{"lineNumber":42,"author":{"gitId":"ManikaHennedige"},"content":"                    Task.addNewTask(newTask);"},{"lineNumber":43,"author":{"gitId":"ManikaHennedige"},"content":"                    break;"},{"lineNumber":44,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":48,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"ManikaHennedige"},"content":"     * @param filePath is the file\u0027s destination path"},{"lineNumber":50,"author":{"gitId":"ManikaHennedige"},"content":"     * @param textToAppend is the contents to be added to the file\u0027s current contents"},{"lineNumber":51,"author":{"gitId":"ManikaHennedige"},"content":"     * @throws IOException if anything fails"},{"lineNumber":52,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"ManikaHennedige"},"content":"    public static void appendToFile(String filePath, String textToAppend) throws IOException {"},{"lineNumber":54,"author":{"gitId":"ManikaHennedige"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"},{"lineNumber":55,"author":{"gitId":"ManikaHennedige"},"content":"        fw.write(textToAppend + \u0027\\n\u0027);"},{"lineNumber":56,"author":{"gitId":"ManikaHennedige"},"content":"        fw.close();"},{"lineNumber":57,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":59,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"ManikaHennedige"},"content":"     * This method handles the saving of data to the file after significant operations are performed by the user"},{"lineNumber":61,"author":{"gitId":"ManikaHennedige"},"content":"     * leading to the modification of data"},{"lineNumber":62,"author":{"gitId":"ManikaHennedige"},"content":"     * @throws IOException when the file reading falls through"},{"lineNumber":63,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"ManikaHennedige"},"content":"    public static void saveToFile() throws IOException {"},{"lineNumber":65,"author":{"gitId":"ManikaHennedige"},"content":"        String filePath \u003d \"data/savedata.txt\";"},{"lineNumber":66,"author":{"gitId":"ManikaHennedige"},"content":"        FileWriter firstLineWriter \u003d new FileWriter(filePath);"},{"lineNumber":67,"author":{"gitId":"ManikaHennedige"},"content":"        firstLineWriter.write(\"Duke\u0027s Most Recent Task List\\n\");"},{"lineNumber":68,"author":{"gitId":"ManikaHennedige"},"content":"        firstLineWriter.close();"},{"lineNumber":69,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":70,"author":{"gitId":"ManikaHennedige"},"content":"        for (int i \u003d 0; i \u003c Task.getTaskCounter(); i++){"},{"lineNumber":71,"author":{"gitId":"ManikaHennedige"},"content":"            Task task \u003d Task.getTaskList().get(i);"},{"lineNumber":72,"author":{"gitId":"ManikaHennedige"},"content":"            String textToAppend \u003d \"\";"},{"lineNumber":73,"author":{"gitId":"ManikaHennedige"},"content":"            if (task instanceof Event) {"},{"lineNumber":74,"author":{"gitId":"ManikaHennedige"},"content":"                textToAppend \u003d writeEvent((Event) task);"},{"lineNumber":75,"author":{"gitId":"ManikaHennedige"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":76,"author":{"gitId":"ManikaHennedige"},"content":"                textToAppend \u003d writeDeadline((Deadline) task);"},{"lineNumber":77,"author":{"gitId":"ManikaHennedige"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"ManikaHennedige"},"content":"                textToAppend \u003d writeTodo((Todo) task);"},{"lineNumber":79,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"ManikaHennedige"},"content":"            appendToFile(filePath, textToAppend);"},{"lineNumber":81,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":84,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":85,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"ManikaHennedige"},"content":"     * @param taskComponents are the key contructor elements for a Todo"},{"lineNumber":87,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a complete, valid todo object and adds it to the main list"},{"lineNumber":88,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"ManikaHennedige"},"content":"    public static Todo readTodo(String[] taskComponents) {"},{"lineNumber":90,"author":{"gitId":"ManikaHennedige"},"content":"        Todo newTodo \u003d new Todo(taskComponents[2].trim());"},{"lineNumber":91,"author":{"gitId":"ManikaHennedige"},"content":"        boolean isDone \u003d taskComponents[1].equals(\"1\");"},{"lineNumber":92,"author":{"gitId":"ManikaHennedige"},"content":"        if (isDone) {"},{"lineNumber":93,"author":{"gitId":"ManikaHennedige"},"content":"            newTodo.markAsDone();"},{"lineNumber":94,"author":{"gitId":"ManikaHennedige"},"content":"            Task.incrementCompletedTaskCounter();"},{"lineNumber":95,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"ManikaHennedige"},"content":"        return newTodo;"},{"lineNumber":97,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":99,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"ManikaHennedige"},"content":"     * @param taskComponents are the key components in the deadline constructor"},{"lineNumber":101,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a complete, valid deadline object"},{"lineNumber":102,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"ManikaHennedige"},"content":"    public static Deadline readDeadline(String[] taskComponents) {"},{"lineNumber":104,"author":{"gitId":"ManikaHennedige"},"content":"        String[] deadlineData \u003d taskComponents[2].split(\"\\\\|\\\\|\");"},{"lineNumber":105,"author":{"gitId":"ManikaHennedige"},"content":"        Deadline newDeadline \u003d new Deadline(deadlineData[0].trim(), deadlineData[1].trim());"},{"lineNumber":106,"author":{"gitId":"ManikaHennedige"},"content":"        boolean isDone \u003d taskComponents[1].equals(\"1\");"},{"lineNumber":107,"author":{"gitId":"ManikaHennedige"},"content":"        if (isDone) {"},{"lineNumber":108,"author":{"gitId":"ManikaHennedige"},"content":"            newDeadline.markAsDone();"},{"lineNumber":109,"author":{"gitId":"ManikaHennedige"},"content":"            Task.incrementCompletedTaskCounter();"},{"lineNumber":110,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"ManikaHennedige"},"content":"        return newDeadline;"},{"lineNumber":112,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":114,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"ManikaHennedige"},"content":"     * @param taskComponents are the key components in the event constructor"},{"lineNumber":116,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a complete, valid event object"},{"lineNumber":117,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"ManikaHennedige"},"content":"    public static Event readEvent(String[] taskComponents) {"},{"lineNumber":119,"author":{"gitId":"ManikaHennedige"},"content":"        String[] eventData \u003d taskComponents[2].split(\"\\\\|\\\\|\");"},{"lineNumber":120,"author":{"gitId":"ManikaHennedige"},"content":"        Event newEvent \u003d new Event(eventData[0].trim(), eventData[1].trim());"},{"lineNumber":121,"author":{"gitId":"ManikaHennedige"},"content":"        boolean isDone \u003d taskComponents[1].equals(\"1\");"},{"lineNumber":122,"author":{"gitId":"ManikaHennedige"},"content":"        if (isDone) {"},{"lineNumber":123,"author":{"gitId":"ManikaHennedige"},"content":"            newEvent.markAsDone();"},{"lineNumber":124,"author":{"gitId":"ManikaHennedige"},"content":"            Task.incrementCompletedTaskCounter();"},{"lineNumber":125,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"ManikaHennedige"},"content":"        return newEvent;"},{"lineNumber":127,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":129,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"ManikaHennedige"},"content":"     * @param todo is the Todo object to be saved to the file"},{"lineNumber":131,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a String to be written to the file"},{"lineNumber":132,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"ManikaHennedige"},"content":"    public static String writeTodo(Todo todo) {"},{"lineNumber":134,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":135,"author":{"gitId":"ManikaHennedige"},"content":"        return \"T | \" +"},{"lineNumber":136,"author":{"gitId":"ManikaHennedige"},"content":"                isDoneWriter(todo) +"},{"lineNumber":137,"author":{"gitId":"ManikaHennedige"},"content":"                todo.getDescription();"},{"lineNumber":138,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":140,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"ManikaHennedige"},"content":"     * @param deadline is the Deadline object to be saved to the file"},{"lineNumber":142,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a String to be written to the file"},{"lineNumber":143,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"ManikaHennedige"},"content":"    public static String writeDeadline(Deadline deadline) {"},{"lineNumber":145,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":146,"author":{"gitId":"ManikaHennedige"},"content":"        return \"D | \" +"},{"lineNumber":147,"author":{"gitId":"ManikaHennedige"},"content":"                isDoneWriter(deadline) +"},{"lineNumber":148,"author":{"gitId":"ManikaHennedige"},"content":"                deadline.getDescription() +"},{"lineNumber":149,"author":{"gitId":"ManikaHennedige"},"content":"                \" || \" +"},{"lineNumber":150,"author":{"gitId":"ManikaHennedige"},"content":"                deadline.writeDateTime();"},{"lineNumber":151,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":152,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":154,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"ManikaHennedige"},"content":"     * @param event is the Event object to be saved to the file"},{"lineNumber":156,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a String to be written to the file"},{"lineNumber":157,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"ManikaHennedige"},"content":"    public static String writeEvent(Event event) {"},{"lineNumber":159,"author":{"gitId":"ManikaHennedige"},"content":"        return \"E | \" +"},{"lineNumber":160,"author":{"gitId":"ManikaHennedige"},"content":"                isDoneWriter(event) +"},{"lineNumber":161,"author":{"gitId":"ManikaHennedige"},"content":"                event.getDescription() +"},{"lineNumber":162,"author":{"gitId":"ManikaHennedige"},"content":"                \" || \" +"},{"lineNumber":163,"author":{"gitId":"ManikaHennedige"},"content":"                event.writeDateTime();"},{"lineNumber":164,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":166,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"ManikaHennedige"},"content":"     * Helper function to generate contents to be written to the file"},{"lineNumber":168,"author":{"gitId":"ManikaHennedige"},"content":"     * @param task is the task to be checked"},{"lineNumber":169,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a String element corresponding to whether the task being checked is complete or not"},{"lineNumber":170,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"ManikaHennedige"},"content":"    public static String isDoneWriter(Task task){"},{"lineNumber":172,"author":{"gitId":"ManikaHennedige"},"content":"        if (task.isDone()) {"},{"lineNumber":173,"author":{"gitId":"ManikaHennedige"},"content":"            return \"1 | \";"},{"lineNumber":174,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"ManikaHennedige"},"content":"        else {"},{"lineNumber":176,"author":{"gitId":"ManikaHennedige"},"content":"            return \"0 | \";"},{"lineNumber":177,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":180,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":180}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"public class InvalidDateTimeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Enter the due date in the form \u0027dd-mm-yyyy hh:mm a\u0027 e.g. 18-02-2021 05:00 PM\";"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"}"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":""}],"authorContributionMap":{"ManikaHennedige":9}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This is for when a user enters an incorrect input command that is not recognized by the program"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"I don\u0027t understand...please enter a valid command\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":""}],"authorContributionMap":{"ManikaHennedige":12}},{"path":"src/main/java/duke/exception/MissingDueDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This exception is thrown when a deadline is created without a valid due date"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class MissingDueDateException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Hmm...have you input the due date for the deadline?\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":11}},{"path":"src/main/java/duke/exception/MissingEventDurationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This exception is thrown when a new event is created with no corresponding duration"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class MissingEventDurationException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Hmm...have you input the duration of the event?\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":11}},{"path":"src/main/java/duke/exception/MissingTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This exception is called when the user attempts to create a task without inputting a description"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class MissingTaskDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Hmm...have you input the description of the task?\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":11}},{"path":"src/main/java/duke/exception/TaskAlreadyCompletedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This exception is thrown when a user tries to mark an already completed task as complete"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class TaskAlreadyCompletedException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"You have already marked this task as complete! Please choose an incomplete task.\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":11}},{"path":"src/main/java/duke/exception/TaskNotExistException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":" * This exception is thrown when the user attempts to select a task that is out of range of the displayed tasks"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"public class TaskNotExistException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"        return \"This task doesn\u0027t exist! Please choose a valid task!\";"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":11}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.InvalidDateTimeException;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.MissingDueDateException;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.MissingTaskDescriptionException;"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.DateTimeException;"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"    protected LocalDateTime dueDate;"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"     * Deadline constructor method"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":"     * @param task is the task description"},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"     * @param dueDate is he task due date - specific to deadlines"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"    public Deadline(String task, String dueDate) {"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"        super(task);"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"        this.dueDate \u003d parseDateTime(dueDate);"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"    public LocalDateTime parseDateTime(String dueDate){"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"        DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy hh:mm a\");"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"        return LocalDateTime.parse(dueDate, parseFormatter);"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"    public String writeDateTime() {"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"        DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy hh:mm a\");"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"        return parseFormatter.format(dueDate);"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"    public String printDateTime() {"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"        DateTimeFormatter printFormatter \u003d DateTimeFormatter.ofPattern(\"E, d MMM yyyy hh:mm a\");"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"        return printFormatter.format(dueDate);"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":42,"author":{"gitId":"ManikaHennedige"},"content":"    public String toBaseString(){"},{"lineNumber":43,"author":{"gitId":"ManikaHennedige"},"content":"        return super.toString();"},{"lineNumber":44,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":46,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"ManikaHennedige"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Deadline : \" + toBaseString() + \" || Due by: \" + this.printDateTime();"},{"lineNumber":49,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":51,"author":{"gitId":"ManikaHennedige"},"content":"    // Exceptions"},{"lineNumber":52,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":53,"author":{"gitId":"ManikaHennedige"},"content":"    public static void checkDeadlineInput(String[] taskDetails) throws MissingDueDateException, MissingTaskDescriptionException, InvalidDateTimeException {"},{"lineNumber":54,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"ManikaHennedige"},"content":"            DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy hh:mm a\");"},{"lineNumber":56,"author":{"gitId":"ManikaHennedige"},"content":"            LocalDateTime.parse(taskDetails[1], parseFormatter);"},{"lineNumber":57,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":58,"author":{"gitId":"ManikaHennedige"},"content":"            throw new InvalidDateTimeException();"},{"lineNumber":59,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"ManikaHennedige"},"content":"        if (taskDetails[0] \u003d\u003d null){"},{"lineNumber":61,"author":{"gitId":"ManikaHennedige"},"content":"            throw new MissingTaskDescriptionException();"},{"lineNumber":62,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"ManikaHennedige"},"content":"        if (taskDetails[1] \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"ManikaHennedige"},"content":"            throw new MissingDueDateException();"},{"lineNumber":65,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":67,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":68,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":69}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.InvalidDateTimeException;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.MissingEventDurationException;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.MissingTaskDescriptionException;"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.DateTimeException;"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"public class Event extends Deadline {"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"    public Event(String description, String eventDuration) {"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"        super(description, eventDuration);"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"    public String toString(){"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Event : \" + super.toBaseString() + \" || Happening on: \" + this.printDateTime();"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"    // Exceptions"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":"    public static void checkEventInput(String[] taskDetails) throws MissingEventDurationException,"},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"            MissingTaskDescriptionException, InvalidDateTimeException {"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"            DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy hh:mm a\");"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"            LocalDateTime.parse(taskDetails[1], parseFormatter);"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"            throw new InvalidDateTimeException();"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"        if (taskDetails[0] \u003d\u003d null){"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"            throw new MissingTaskDescriptionException();"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"        if (taskDetails[1] \u003d\u003d null) {"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"            throw new MissingEventDurationException();"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":41}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.TaskAlreadyCompletedException;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.TaskNotExistException;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":" * The main building block for this application"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"public class Task {"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"    private boolean isDone;"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":"    private String description;"},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"    private static int taskCounter \u003d 0;"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"    private static int completedTaskCounter \u003d 0;"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"    private static Task recentTask;"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"     * @param description main content of the Task object"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"    public Task(String description){"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"        // default status for isDone is false"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":"        isDone \u003d false;"},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"     * @param query contains the search query from user input"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a list of tasks with any match to the search query"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":"    public static ArrayList\u003cTask\u003e find(String query) {"},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"        ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"        for (Task task : tasks) {"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"            if (task.getDescription().contains(query)) {"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"                matches.add(task);"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"        return matches;"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":42,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":43,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"ManikaHennedige"},"content":"     * Accessor method"},{"lineNumber":45,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a boolean value signalling whether a task is done or not"},{"lineNumber":46,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"ManikaHennedige"},"content":"    public boolean isDone() {"},{"lineNumber":48,"author":{"gitId":"ManikaHennedige"},"content":"        return isDone;"},{"lineNumber":49,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":51,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"ManikaHennedige"},"content":"     * Accessor method"},{"lineNumber":53,"author":{"gitId":"ManikaHennedige"},"content":"     * @return the description of the Task, in a string"},{"lineNumber":54,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"ManikaHennedige"},"content":"    public String getDescription() {"},{"lineNumber":56,"author":{"gitId":"ManikaHennedige"},"content":"        return description;"},{"lineNumber":57,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":59,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"ManikaHennedige"},"content":"     * Convenient method to easily mark any task as complete without much unnecessary manipulation"},{"lineNumber":61,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ManikaHennedige"},"content":"    public void markAsDone(){"},{"lineNumber":63,"author":{"gitId":"ManikaHennedige"},"content":"        this.isDone \u003d true;"},{"lineNumber":64,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":66,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a status icon corresponding to whether a task is completed or not"},{"lineNumber":68,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"ManikaHennedige"},"content":"    public String getStatusIcon(){"},{"lineNumber":70,"author":{"gitId":"ManikaHennedige"},"content":"        return (isDone ? \"[ \\u2713 ] \" : \"[ \\u2718 ] \");"},{"lineNumber":71,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":73,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"ManikaHennedige"},"content":"     * @return an integer representing the number of tasks presently in the application"},{"lineNumber":75,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"ManikaHennedige"},"content":"    // static methods for all the Tasks"},{"lineNumber":77,"author":{"gitId":"ManikaHennedige"},"content":"    public static int getTaskCounter() {"},{"lineNumber":78,"author":{"gitId":"ManikaHennedige"},"content":"        return taskCounter;"},{"lineNumber":79,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":81,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"ManikaHennedige"},"content":"     * @return an integer indicating the number of tasks that are yet to be completed"},{"lineNumber":83,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"ManikaHennedige"},"content":"    public static int getRemainingTasks() {"},{"lineNumber":85,"author":{"gitId":"ManikaHennedige"},"content":"        return taskCounter - completedTaskCounter;"},{"lineNumber":86,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":88,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ManikaHennedige"},"content":"     * @return a complete list of tasks in the application"},{"lineNumber":90,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"ManikaHennedige"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":92,"author":{"gitId":"ManikaHennedige"},"content":"        return tasks;"},{"lineNumber":93,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":95,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"ManikaHennedige"},"content":"     * @param newTask is the task to be added"},{"lineNumber":97,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"ManikaHennedige"},"content":"    public static void addNewTask(Task newTask) {"},{"lineNumber":99,"author":{"gitId":"ManikaHennedige"},"content":"        tasks.add(newTask);"},{"lineNumber":100,"author":{"gitId":"ManikaHennedige"},"content":"        incrementTaskCounter();"},{"lineNumber":101,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":103,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"ManikaHennedige"},"content":"     * @param taskNumber is the corresponding index of the task to be deleted"},{"lineNumber":105,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"ManikaHennedige"},"content":"    public static void deleteTask(int taskNumber){"},{"lineNumber":107,"author":{"gitId":"ManikaHennedige"},"content":"        recentTask \u003d tasks.get(taskNumber);"},{"lineNumber":108,"author":{"gitId":"ManikaHennedige"},"content":"        if (tasks.get(taskNumber).isDone) {"},{"lineNumber":109,"author":{"gitId":"ManikaHennedige"},"content":"            completedTaskCounter--;"},{"lineNumber":110,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"ManikaHennedige"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":112,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"The deleted task is : \" + recentTask);"},{"lineNumber":113,"author":{"gitId":"ManikaHennedige"},"content":"        taskCounter--;"},{"lineNumber":114,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":116,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":117,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"ManikaHennedige"},"content":"     * @param taskNumber is the index of the task to be marked as completed"},{"lineNumber":119,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"ManikaHennedige"},"content":"    public static void completeTask(int taskNumber) {"},{"lineNumber":121,"author":{"gitId":"ManikaHennedige"},"content":"        tasks.get(taskNumber).markAsDone();"},{"lineNumber":122,"author":{"gitId":"ManikaHennedige"},"content":"        recentTask \u003d tasks.get(taskNumber);"},{"lineNumber":123,"author":{"gitId":"ManikaHennedige"},"content":"        completedTaskCounter -\u003d -1;"},{"lineNumber":124,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":126,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"ManikaHennedige"},"content":"     * @param manipulatedTask should be true if the task to be returned was recently deleted, otherwise it will by"},{"lineNumber":128,"author":{"gitId":"ManikaHennedige"},"content":"     * default return the task that was most recently added to the application"},{"lineNumber":129,"author":{"gitId":"ManikaHennedige"},"content":"     * @return Task depending on the above"},{"lineNumber":130,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"ManikaHennedige"},"content":"    public static Task getRecentTask(boolean manipulatedTask) {"},{"lineNumber":132,"author":{"gitId":"ManikaHennedige"},"content":"        if (manipulatedTask) {"},{"lineNumber":133,"author":{"gitId":"ManikaHennedige"},"content":"            return recentTask;"},{"lineNumber":134,"author":{"gitId":"ManikaHennedige"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"ManikaHennedige"},"content":"            return tasks.get(getTaskCounter() - 1);"},{"lineNumber":136,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":139,"author":{"gitId":"ManikaHennedige"},"content":"    public static void incrementTaskCounter(){"},{"lineNumber":140,"author":{"gitId":"ManikaHennedige"},"content":"        taskCounter++;"},{"lineNumber":141,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":143,"author":{"gitId":"ManikaHennedige"},"content":"    public static void incrementCompletedTaskCounter() {"},{"lineNumber":144,"author":{"gitId":"ManikaHennedige"},"content":"        completedTaskCounter++;"},{"lineNumber":145,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":147,"author":{"gitId":"ManikaHennedige"},"content":"    // standard string return format for all tasks subclasses expand on this format"},{"lineNumber":148,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":149,"author":{"gitId":"ManikaHennedige"},"content":"    public String toString(){"},{"lineNumber":150,"author":{"gitId":"ManikaHennedige"},"content":"        return this.getStatusIcon() + \" \" + this.getDescription();"},{"lineNumber":151,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":153,"author":{"gitId":"ManikaHennedige"},"content":"    // Check for exceptions"},{"lineNumber":154,"author":{"gitId":"ManikaHennedige"},"content":"    public static void checkTaskIndex(int queryTask) throws TaskNotExistException {"},{"lineNumber":155,"author":{"gitId":"ManikaHennedige"},"content":"        if (queryTask \u003e taskCounter - 1) {"},{"lineNumber":156,"author":{"gitId":"ManikaHennedige"},"content":"            throw new TaskNotExistException();"},{"lineNumber":157,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":160,"author":{"gitId":"ManikaHennedige"},"content":"    public static void checkTaskComplete(int queryTask) throws  TaskAlreadyCompletedException {"},{"lineNumber":161,"author":{"gitId":"ManikaHennedige"},"content":"        if (tasks.get(queryTask).isDone()) {"},{"lineNumber":162,"author":{"gitId":"ManikaHennedige"},"content":"            throw new TaskAlreadyCompletedException();"},{"lineNumber":163,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":165}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.exception.MissingTaskDescriptionException;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":" * The most basic task in this application - this class only has a description field"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"    public String toString(){"},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"        return \"Todo : \" + super.toString();"},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"    public static void checkTodoInput(String[] taskDetails) throws MissingTaskDescriptionException {"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":"        if (taskDetails[0] \u003d\u003d null) {"},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"            throw new MissingTaskDescriptionException();"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":26}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"import duke.datamanager.FileManager;"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"public class UI {"},{"lineNumber":10,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"ManikaHennedige"},"content":"     * Prints the logo for Duke"},{"lineNumber":12,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ManikaHennedige"},"content":"    public static String logo \u003d \" ____        _        \\n\""},{"lineNumber":14,"author":{"gitId":"ManikaHennedige"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"ManikaHennedige"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"ManikaHennedige"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"ManikaHennedige"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":19,"author":{"gitId":"ManikaHennedige"},"content":"    public static String divider \u003d \"-----------------------------------\";"},{"lineNumber":20,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":21,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ManikaHennedige"},"content":"     * Combines the logo and dividers to generate a complete welcome screen"},{"lineNumber":23,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ManikaHennedige"},"content":"    public static void showWelcomeScreen() {"},{"lineNumber":25,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":26,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(divider);"},{"lineNumber":27,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Hello there! I\u0027m Duke\");"},{"lineNumber":28,"author":{"gitId":"ManikaHennedige"},"content":"        showLoadDataScreen();"},{"lineNumber":29,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"I have the high ground! How may I help you?\");"},{"lineNumber":30,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(divider);"},{"lineNumber":31,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":33,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"ManikaHennedige"},"content":"     * This reads the saved data file and indicates success or failure"},{"lineNumber":35,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ManikaHennedige"},"content":"    public static void showLoadDataScreen() {"},{"lineNumber":37,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Searching for saved data...\");"},{"lineNumber":38,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"ManikaHennedige"},"content":"            FileManager.readFile();"},{"lineNumber":40,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"Loading saved data...\");"},{"lineNumber":41,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"No data found - please ensure that a directory \" +"},{"lineNumber":43,"author":{"gitId":"ManikaHennedige"},"content":"                    \"called \u0027data\u0027 is in your project directory\");"},{"lineNumber":44,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":47,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"ManikaHennedige"},"content":"     * Displays feedback that data is being saved, while performing the data saving too"},{"lineNumber":49,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"ManikaHennedige"},"content":"    public static void showSaveDataScreen() {"},{"lineNumber":51,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Saving data...\");"},{"lineNumber":52,"author":{"gitId":"ManikaHennedige"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"ManikaHennedige"},"content":"            FileManager.saveToFile();"},{"lineNumber":54,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"Data saved successfully!\");"},{"lineNumber":55,"author":{"gitId":"ManikaHennedige"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(\"Unable to save - please create a directory called \u0027data\u0027 in the project directory!\");"},{"lineNumber":57,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":60,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"ManikaHennedige"},"content":"     * A user-friendly request for input"},{"lineNumber":62,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"ManikaHennedige"},"content":"    public static void requestInput() {"},{"lineNumber":64,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(divider);"},{"lineNumber":65,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"What is thy bidding, my master?\");"},{"lineNumber":66,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(divider);"},{"lineNumber":67,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":69,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"ManikaHennedige"},"content":"     * Formats the printing of a list of all tasks"},{"lineNumber":71,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"ManikaHennedige"},"content":"    public static void showAllTasks() {"},{"lineNumber":73,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"This is your current list:\");"},{"lineNumber":74,"author":{"gitId":"ManikaHennedige"},"content":"        showTaskList();"},{"lineNumber":75,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Of these tasks, you still have \" + Task.getRemainingTasks() + \" to complete!\");"},{"lineNumber":76,"author":{"gitId":"ManikaHennedige"},"content":"        UI.requestInput();"},{"lineNumber":77,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":79,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"ManikaHennedige"},"content":"     * Generates a list of the tasks"},{"lineNumber":81,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"ManikaHennedige"},"content":"    private static void showTaskList() {"},{"lineNumber":83,"author":{"gitId":"ManikaHennedige"},"content":"        for (int i \u003d 0; i \u003c Task.getTaskCounter(); i++){"},{"lineNumber":84,"author":{"gitId":"ManikaHennedige"},"content":"            int displayedTask \u003d i + 1;"},{"lineNumber":85,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(displayedTask + \". \" + Task.getTaskList().get(i));"},{"lineNumber":86,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":89,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"ManikaHennedige"},"content":"     * Informs user that task has been added to list successfully"},{"lineNumber":91,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"ManikaHennedige"},"content":"    public static void taskAddedSuccessfully() {"},{"lineNumber":93,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Roger Roger. The following task has been added:\");"},{"lineNumber":94,"author":{"gitId":"ManikaHennedige"},"content":"        boolean getCompletedTask \u003d false;"},{"lineNumber":95,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(Task.getRecentTask(getCompletedTask));"},{"lineNumber":96,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"You now have \" + Task.getTaskCounter() + \" tasks in your list!\");"},{"lineNumber":97,"author":{"gitId":"ManikaHennedige"},"content":"        showSaveDataScreen();"},{"lineNumber":98,"author":{"gitId":"ManikaHennedige"},"content":"        UI.requestInput();"},{"lineNumber":99,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":101,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"ManikaHennedige"},"content":"     * Informs user that task has been successfully marked as completed"},{"lineNumber":103,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"ManikaHennedige"},"content":"    public static void taskCompletedSuccessfully() {"},{"lineNumber":105,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"The Force is with you! The following task has been marked as done:\");"},{"lineNumber":106,"author":{"gitId":"ManikaHennedige"},"content":"        boolean getCompletedTask \u003d true;"},{"lineNumber":107,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(Task.getRecentTask(getCompletedTask));"},{"lineNumber":108,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"You still have \" + Task.getRemainingTasks() + \" tasks to complete in your list!\");"},{"lineNumber":109,"author":{"gitId":"ManikaHennedige"},"content":"        showSaveDataScreen();"},{"lineNumber":110,"author":{"gitId":"ManikaHennedige"},"content":"        UI.requestInput();"},{"lineNumber":111,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":113,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"ManikaHennedige"},"content":"     * Informs user that task has been deleted successfully"},{"lineNumber":115,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"ManikaHennedige"},"content":"    public static void taskDeletedSuccessfully() {"},{"lineNumber":117,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"I am altering the deal. The following task has been deleted:\");"},{"lineNumber":118,"author":{"gitId":"ManikaHennedige"},"content":"        boolean getDeletedTask \u003d true;"},{"lineNumber":119,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(Task.getRecentTask(getDeletedTask));"},{"lineNumber":120,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"You still have \" + Task.getRemainingTasks() + \" tasks to complete in your list!\");"},{"lineNumber":121,"author":{"gitId":"ManikaHennedige"},"content":"        showSaveDataScreen();"},{"lineNumber":122,"author":{"gitId":"ManikaHennedige"},"content":"        UI.requestInput();"},{"lineNumber":123,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":125,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"ManikaHennedige"},"content":"     * This method seeks to match a user query with matching task (and their corresponding descriptions)"},{"lineNumber":127,"author":{"gitId":"ManikaHennedige"},"content":"     * @param query is the user input to be matched with the task description"},{"lineNumber":128,"author":{"gitId":"ManikaHennedige"},"content":"     * @param tasks is the list of tasks which match the abovementioned query"},{"lineNumber":129,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"ManikaHennedige"},"content":"    public static void tasksFound(String query, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":131,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"We found these tasks matching the query: \" + query);"},{"lineNumber":132,"author":{"gitId":"ManikaHennedige"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"ManikaHennedige"},"content":"            int displayedNumber \u003d i + 1;"},{"lineNumber":134,"author":{"gitId":"ManikaHennedige"},"content":"            System.out.println(displayedNumber + \". \" + tasks.get(i));"},{"lineNumber":135,"author":{"gitId":"ManikaHennedige"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"ManikaHennedige"},"content":"        UI.requestInput();"},{"lineNumber":137,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":138,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"ManikaHennedige"},"content":""},{"lineNumber":140,"author":{"gitId":"ManikaHennedige"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"ManikaHennedige"},"content":"     * Simple farewell screen before the application exits"},{"lineNumber":142,"author":{"gitId":"ManikaHennedige"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"ManikaHennedige"},"content":"    public static void showFarewellScreen() {"},{"lineNumber":144,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(UI.divider);"},{"lineNumber":145,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(\"Bye! Hope to hear from you again soon!\");"},{"lineNumber":146,"author":{"gitId":"ManikaHennedige"},"content":"        System.out.println(UI.divider);"},{"lineNumber":147,"author":{"gitId":"ManikaHennedige"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"ManikaHennedige"},"content":"}"}],"authorContributionMap":{"ManikaHennedige":148}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ManikaHennedige"},"content":"todo Manika Hennedige: Answer CS2113 tutorial questions"},{"lineNumber":2,"author":{"gitId":"ManikaHennedige"},"content":"deadline weekly CS2113 || Monday 9pm"},{"lineNumber":3,"author":{"gitId":"ManikaHennedige"},"content":"list"},{"lineNumber":4,"author":{"gitId":"ManikaHennedige"},"content":"event CS2113 || Friday 4-6pm"},{"lineNumber":5,"author":{"gitId":"ManikaHennedige"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"ManikaHennedige"},"content":"list"},{"lineNumber":7,"author":{"gitId":"ManikaHennedige"},"content":"deadline kill all the jedi ||"},{"lineNumber":8,"author":{"gitId":"ManikaHennedige"},"content":"event master the force"},{"lineNumber":9,"author":{"gitId":"ManikaHennedige"},"content":"event || master the Force"}],"authorContributionMap":{"ManikaHennedige":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"ManikaHennedige"},"content":"java -classpath ..\\bin duke.controller.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"ManikaHennedige":1,"-":20}}]
