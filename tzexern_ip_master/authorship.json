[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":""},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":"# Duke"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"## User Guide"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"Duke is a **desktop app for managing tasks, optimized for use via a Command "},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"Line Interface** (CLI). If you can type fast, Duke can enable task list "},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"management faster than traditional GUI apps."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"1. [Quick Start](#1-quick-start)"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"1. [Features](#2-features)\\"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"   2.1 [Adding a to-do task: `todo`](#21-adding-a-to-do-task-todo)\\"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"   2.2 [Adding a deadline: `deadline`](#22-adding-a-deadline-deadline)\\"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"   2.3 [Adding an event: `event`](#23-adding-an-event-event)\\"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"   2.4 [Listing all tasks: `list`](#24-listing-all-tasks-list)\\"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"   2.5 [Marking a task done](#25-marking-a-task-done-done)\\"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"   2.6 [Deleting a task](#26-deleting-a-task-delete)\\"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"   2.7 [Finding a task](#27-finding-a-task-find)\\"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"   2.8 [Exiting the program](#28-exiting-the-program-bye)\\"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"   2.9 [Saving the data](#29-saving-the-data)\\"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"   2.10 [Loading the date](#210-loading-the-data)\\"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"   2.11 [Editing the data file](#211-editing-the-data-file)"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"1. [Frequently Asked Questions (FAQ)](#3-faq)"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"1. [Command Summary](#4-command-summary)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"## 1. Quick Start"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"1. Download the latest `Duke.jar` from [here](https://github.com/tzexern/ip/releases/download/A-Release/Duke.jar)."},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"1. Copy the file to the folder you want to use as the *home folder* for your Duke."},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"1. For Windows users, pull up your **Command Prompt**.\\"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"   For Mac users, pull up your **Terminal**.\\"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"   Navigate to the directory containing the `Duke.jar` file.\\"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"   i.e. `cd FILEPATH`, `FILEPATH` is the address of your file."},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"1. Run the Duke.jar file by using the `java -jar Duke.jar` command."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"## 2. Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"\u003e##### Notes about the command format:"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"\u003e* Words in `UPPER_CASE` are the parameters to be supplied by the user.\\"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"  e.g. in `todo TASKNAME`, `TASKNAME` is a parameter which can be used as "},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"  `todo watch CS2102 webcast`"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"\u003e* Parameters must be in order as suggested in the respective format.\\"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"  e.g. `deadline TASKNAME /by DATE` must be used as "},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"  `deadline assignment /by 03-28-2021`. Any reordering of parameters will "},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"  result in an error."},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"\u003e* Extraneous parameters for all commands will result in an error."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"\u003e ***WARNING*** ❗️: Do not use \"|\" in the parameter `TASKNAME` as it would cause errors"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"\u003e when loading up the file. Please refer to section 2.11 for a fix if the save file is corrupted."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"### 2.1 Adding a to-do task: `todo`"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"Adds a to-do task to the task list."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"Format: `todo TASKNAME`"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"* `todo book bandroom`"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"* `todo retrieve parcel`"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"* Shows a message upon successful addition:\\"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"![todo example output](https://github.com/tzexern/ip/blob/master/docs/img/Todo%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"### 2.2 Adding a deadline: `deadline`"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"Adds a task with an associated deadline."},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"Format: `deadline TASKNAME /by DATE`"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"* `DATE` must be a **future date**."},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"* `DATE` must be of the format **MM-DD-YYYY**."},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"* `DATE` must have a **valid month, day and year**.\\"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"   e.g. `... /by 03-28-2021` where current date is 02-28-2021."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"* `deadline CS2113T Deliverables 2 /by 03-28-2021`"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"* `deadline CS3235 Quiz 4 /by 03-05-2021`"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"* Shows a message upon successful addition:\\"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"  ![deadline example output](https://github.com/tzexern/ip/blob/master/docs/img/Deadline%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"### 2.3 Adding an event: `event`"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"Adds an event with a date."},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"Format: `event TASKNAME /at DATE`"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"* `DATE` must be a **future date**."},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"* `DATE` must be of the format **MM-DD-YYYY**."},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"* `DATE` must have a **valid month, day and year**.\\"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"  e.g. `... /by 03-28-2021` where current date is 02-28-2021."},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"* `event CNY gathering /at 02-11-2021`"},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"* `event Valentines Date /at 02-14-2021`"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"* Shows a message upon successful addition:\\"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"  ![event example output](https://github.com/tzexern/ip/blob/master/docs/img/Event%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"### 2.4 Listing all tasks: `list`"},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"Shows a list of all the tasks currently saved in Duke."},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"Format: `list`"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"* Here\u0027s a sample output of an existing list of task:\\"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"  ![list example output](https://github.com/tzexern/ip/blob/master/docs/img/List%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"### 2.5 Marking a task done: `done`"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"Marks an existing task in the list as done."},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":"Format: `done INDEX`"},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":"* Marks the task specified at `INDEX` as done."},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"* The `INDEX` refers to the index number shown in the displayed list of tasks."},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"* `INDEX` must be **a positive integer** 1, 2, 3,..."},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"* `INDEX` must be referring to an existing task."},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"* `done 2`\\"},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"  ![done example output](https://github.com/tzexern/ip/blob/master/docs/img/Done%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":115,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":116,"author":{"gitId":"tzexern"},"content":"### 2.6 Deleting a task: `delete`"},{"lineNumber":117,"author":{"gitId":"tzexern"},"content":"Deletes an existing task in the list."},{"lineNumber":118,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":119,"author":{"gitId":"tzexern"},"content":"Format: `delete INDEX`"},{"lineNumber":120,"author":{"gitId":"tzexern"},"content":"* Deletes the task specified at `INDEX`.  "},{"lineNumber":121,"author":{"gitId":"tzexern"},"content":"* The `INDEX` refers to the index number shown in the displayed list of tasks."},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"* `INDEX` must be **a positive integer** 1, 2, 3,..."},{"lineNumber":123,"author":{"gitId":"tzexern"},"content":"* `INDEX` must be referring to an existing task."},{"lineNumber":124,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":125,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":126,"author":{"gitId":"tzexern"},"content":"* `delete 3`\\"},{"lineNumber":127,"author":{"gitId":"tzexern"},"content":"  ![delete example output](https://github.com/tzexern/ip/blob/master/docs/img/Delete%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":128,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":129,"author":{"gitId":"tzexern"},"content":"### 2.7 Finding a task: `find`"},{"lineNumber":130,"author":{"gitId":"tzexern"},"content":"Searches for  a task and shows a list of the search results with their corresponding"},{"lineNumber":131,"author":{"gitId":"tzexern"},"content":"index numbers in the original displayed list."},{"lineNumber":132,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":133,"author":{"gitId":"tzexern"},"content":"Format: `find SEARCH_KEYWORD`"},{"lineNumber":134,"author":{"gitId":"tzexern"},"content":"* Searches for task names that matches the `SEARCH_KEYWORD` provided."},{"lineNumber":135,"author":{"gitId":"tzexern"},"content":"* `SEARCH_KEYWORD` must not be left empty."},{"lineNumber":136,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":137,"author":{"gitId":"tzexern"},"content":"Examples: "},{"lineNumber":138,"author":{"gitId":"tzexern"},"content":"* `find CS2113T` returns the following results:\\"},{"lineNumber":139,"author":{"gitId":"tzexern"},"content":"  ![find example output](https://github.com/tzexern/ip/blob/master/docs/img/Find%20Example%20Output.png?raw\u003dtrue)"},{"lineNumber":140,"author":{"gitId":"tzexern"},"content":"  "},{"lineNumber":141,"author":{"gitId":"tzexern"},"content":"### 2.8 Exiting the program: `bye`"},{"lineNumber":142,"author":{"gitId":"tzexern"},"content":"Exits the program."},{"lineNumber":143,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":144,"author":{"gitId":"tzexern"},"content":"Format: `bye`"},{"lineNumber":145,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":146,"author":{"gitId":"tzexern"},"content":"### 2.9 Saving the data"},{"lineNumber":147,"author":{"gitId":"tzexern"},"content":"Duke data are **saved automatically** in the hard disk after any commands that modifies"},{"lineNumber":148,"author":{"gitId":"tzexern"},"content":"data. There is no need to save manually."},{"lineNumber":149,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":150,"author":{"gitId":"tzexern"},"content":"### 2.10 Loading the data"},{"lineNumber":151,"author":{"gitId":"tzexern"},"content":"The save file will be **loaded automatically** if there is an existing one.\\"},{"lineNumber":152,"author":{"gitId":"tzexern"},"content":"Save file will be **created automatically** if it does not."},{"lineNumber":153,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":154,"author":{"gitId":"tzexern"},"content":"Examples:"},{"lineNumber":155,"author":{"gitId":"tzexern"},"content":"* Here\u0027s a sample output of a save file being **loaded** successfully:\\"},{"lineNumber":156,"author":{"gitId":"tzexern"},"content":"  ![save file loaded](https://github.com/tzexern/ip/blob/master/docs/img/Save%20File%20Loaded.png?raw\u003dtrue)"},{"lineNumber":157,"author":{"gitId":"tzexern"},"content":"* Here\u0027s a sample output of a save file being **created** successfully:\\"},{"lineNumber":158,"author":{"gitId":"tzexern"},"content":"  ![save file created](https://github.com/tzexern/ip/blob/master/docs/img/Save%20File%20Created.png?raw\u003dtrue)"},{"lineNumber":159,"author":{"gitId":"tzexern"},"content":"  "},{"lineNumber":160,"author":{"gitId":"tzexern"},"content":"### 2.11 Editing the data file"},{"lineNumber":161,"author":{"gitId":"tzexern"},"content":"Duke data are saved as a text file `[JAR file location]/duke.txt`.\\"},{"lineNumber":162,"author":{"gitId":"tzexern"},"content":"Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":163,"author":{"gitId":"tzexern"},"content":"\u003e ***CAUTION*** ❗️: If your changes to the data file makes its format invalid, you"},{"lineNumber":164,"author":{"gitId":"tzexern"},"content":"\u003e will have to manually delete the `duke.txt` file for the saving mechanism to"},{"lineNumber":165,"author":{"gitId":"tzexern"},"content":"\u003e work as intended."},{"lineNumber":166,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":167,"author":{"gitId":"tzexern"},"content":"## 3. FAQ"},{"lineNumber":168,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":169,"author":{"gitId":"tzexern"},"content":"**Q**: How do I locate my duke.txt folder? I can\u0027t seem to find it.\\"},{"lineNumber":170,"author":{"gitId":"tzexern"},"content":"**A**: For Windows users, type `duke.txt` in the search panel and you should be able"},{"lineNumber":171,"author":{"gitId":"tzexern"},"content":"to find its location. For Mac users, use Spotlight or Finder for the above actions."},{"lineNumber":172,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":173,"author":{"gitId":"tzexern"},"content":"## 4. Command Summary"},{"lineNumber":174,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":175,"author":{"gitId":"tzexern"},"content":"Action | Format, Examples"},{"lineNumber":176,"author":{"gitId":"tzexern"},"content":"------ | ----------------"},{"lineNumber":177,"author":{"gitId":"tzexern"},"content":"**Add todo** | `todo TASKNAME` e.g. `todo book bandroom`"},{"lineNumber":178,"author":{"gitId":"tzexern"},"content":"**Add deadline** | `deadline TASKNAME /by DATE` e.g. `deadline CS2113T Deliverables 2 /by 03-28-2021`"},{"lineNumber":179,"author":{"gitId":"tzexern"},"content":"**Add event** | `event TASKNAME /at DATE` e.g. `event Valentines Date /at 02-14-2021`"},{"lineNumber":180,"author":{"gitId":"tzexern"},"content":"**List** | `list`"},{"lineNumber":181,"author":{"gitId":"tzexern"},"content":"**Done** | `done INDEX` e.g. `done 2`"},{"lineNumber":182,"author":{"gitId":"tzexern"},"content":"**Delete** | `delete INDEX` e.g. `delete 3`"},{"lineNumber":183,"author":{"gitId":"tzexern"},"content":"**Find** | `find SEARCH_KEYWORD` e.g. `find assignment`"},{"lineNumber":184,"author":{"gitId":"tzexern"},"content":"**Exit** | `bye` "}],"authorContributionMap":{"tzexern":173,"-":11}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"import duke.storage.Storage;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":"import duke.task.Deadline;"},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.task.Event;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import duke.task.Todo;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import duke.ui.TextUi;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"import duke.util.Util;"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":" * Represents a smart bot that creates a task"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":" * list which includes todos, deadlines and events"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    private void run(){"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"        String taskType;"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"        String taskName;"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"        ArrayList\u003cString\u003e parsedList;"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        showLogo();"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"        showWelcomeMessage();"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"        Storage.loadFile();"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"        // Scan for input"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"        Scanner userInputScanner \u003d new Scanner(System.in);"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"        String userInput \u003d userInputScanner.nextLine();"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"        parsedList \u003d Parser.parseInput(userInput);"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"        taskType \u003d Parser.parseTaskType(parsedList);"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"        taskName \u003d Parser.parseTaskName(parsedList);"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        processCommands(taskType, taskName, userInput);"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"        showByeMessage();"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"    private void processCommands(String taskType, String taskName, String userInput) {"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"        Scanner userInputScanner \u003d new Scanner(System.in);"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"        ArrayList\u003cString\u003e parsedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"        // Loop for user input until \"bye\" is inputted"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"        while(!Util.isBye(taskType)) {"},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"            switch (taskType) {"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"            case \"todo\":"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"                addTodo(taskName, userInput);"},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"                Storage.attemptSaveFile();"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"            case \"deadline\":"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"                addDeadline(taskName, userInput);"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"                Storage.attemptSaveFile();"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"            case \"event\":"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"                addEvent(taskName, userInput);"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"                Storage.attemptSaveFile();"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"            case \"list\":"},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"                list();"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"            case \"delete\":"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"                delete(userInput);"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"                Storage.attemptSaveFile();"},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"            case \"done\":"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"                done(userInput);"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"                Storage.attemptSaveFile();"},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"            case \"find\":"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"                find(taskName);"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"            default:"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"                showErrorMessage();"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"            // Scan input again"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"            userInput \u003d userInputScanner.nextLine();"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"            Parser.emptyList(parsedList);"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"            parsedList \u003d Parser.parseInput(userInput);"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"            taskType \u003d Parser.parseTaskType(parsedList);"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"            taskName \u003d Parser.parseTaskName(parsedList);"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"    private void showLogo() {"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"        TextUi.showLogo();"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"    private void showWelcomeMessage() {"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"        TextUi.showWelcomeMessage();"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"    private void showByeMessage() {"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"        TextUi.showByeMessage();"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":"    private void showErrorMessage() {"},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"        TextUi.showUnrecognizedCommandError();"},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"    private void find(String taskName) {"},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":115,"author":{"gitId":"tzexern"},"content":"        Task.findTaskWithValidation(taskName);"},{"lineNumber":116,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":117,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":119,"author":{"gitId":"tzexern"},"content":"    private void done(String userInput) {"},{"lineNumber":120,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":121,"author":{"gitId":"tzexern"},"content":"        Task.markAsDoneWithValidation(Util.getTaskIndex(userInput), userInput);"},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":123,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":125,"author":{"gitId":"tzexern"},"content":"    private void delete(String userInput) {"},{"lineNumber":126,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":127,"author":{"gitId":"tzexern"},"content":"        Task.deleteTaskWithValidation(Util.getTaskIndex(userInput), userInput);"},{"lineNumber":128,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":129,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":131,"author":{"gitId":"tzexern"},"content":"    private void list() {"},{"lineNumber":132,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":133,"author":{"gitId":"tzexern"},"content":"        Task.listTasks();"},{"lineNumber":134,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":135,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":137,"author":{"gitId":"tzexern"},"content":"    private void addEvent(String taskName, String userInput) {"},{"lineNumber":138,"author":{"gitId":"tzexern"},"content":"        String atTime;"},{"lineNumber":139,"author":{"gitId":"tzexern"},"content":"        atTime \u003d Util.extractTime(taskName);"},{"lineNumber":140,"author":{"gitId":"tzexern"},"content":"        taskName \u003d Util.extractTaskName(taskName);"},{"lineNumber":141,"author":{"gitId":"tzexern"},"content":"        Task e \u003d new Event(taskName, atTime);"},{"lineNumber":142,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":143,"author":{"gitId":"tzexern"},"content":"        Task.addTaskWithValidation(userInput, e);"},{"lineNumber":144,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":145,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":147,"author":{"gitId":"tzexern"},"content":"    private void addDeadline(String taskName, String userInput) {"},{"lineNumber":148,"author":{"gitId":"tzexern"},"content":"        String byTime;"},{"lineNumber":149,"author":{"gitId":"tzexern"},"content":"        byTime \u003d Util.extractTime(taskName);"},{"lineNumber":150,"author":{"gitId":"tzexern"},"content":"        taskName \u003d Util.extractTaskName(taskName);"},{"lineNumber":151,"author":{"gitId":"tzexern"},"content":"        Task d \u003d new Deadline(taskName, byTime);"},{"lineNumber":152,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":153,"author":{"gitId":"tzexern"},"content":"        Task.addTaskWithValidation(userInput, d);"},{"lineNumber":154,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":155,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":157,"author":{"gitId":"tzexern"},"content":"    private void addTodo(String taskName, String userInput) {"},{"lineNumber":158,"author":{"gitId":"tzexern"},"content":"        Task t \u003d new Todo(taskName);"},{"lineNumber":159,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":160,"author":{"gitId":"tzexern"},"content":"        Task.addTaskWithValidation(userInput, t);"},{"lineNumber":161,"author":{"gitId":"tzexern"},"content":"        TextUi.showDividingLine();"},{"lineNumber":162,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":165,"author":{"gitId":"tzexern"},"content":"        new Duke().run();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tzexern":163,"-":4}},{"path":"src/main/java/duke/date/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.date;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"public class Date {"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"    private static final String JAN \u003d \"01\";"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"    private static final String FEB \u003d \"02\";"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"    private static final String MAR \u003d \"03\";"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"    private static final String APR \u003d \"04\";"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"    private static final String MAY \u003d \"05\";"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"    private static final String JUN \u003d \"06\";"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    private static final String JUL \u003d \"07\";"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    private static final String AUG \u003d \"08\";"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"    private static final String SEP \u003d \"09\";"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"    private static final String OCT \u003d \"10\";"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    private static final String NOV \u003d \"11\";"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"    private static final String DEC \u003d \"12\";"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    private static String getYear(String[] splitDate) {"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        return splitDate[2];"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"    private static String getDay(String[] splitDate) {"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"        return splitDate[1];"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"    private static String getMonth(String[] splitDate) {"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"        return splitDate[0];"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"     * Returns true if the date is invalid,"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"     * false otherwise."},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"     * The date is invalid if it is in the incorrect"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"     * format, out of range or not a future date,"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"     * it\u0027s valid otherwise."},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"     * @param t Task object being validated."},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"     * @return true if date is invalid, false otherwise."},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"    public static boolean isInvalidDate(Task t) {"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"        String[] splitDate \u003d t.getDate().trim().split(\"-\");"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"        if (isIncorrectFormatDate(splitDate)) {"},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"        String month \u003d getMonth(splitDate);"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"        String day \u003d getDay(splitDate);"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"        String year \u003d getYear(splitDate);"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        String[] splitCurrentDate \u003d Parser.parseCurrentDate(currentDate.toString());"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"        String currentMonth \u003d getMonth(splitCurrentDate);"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        String currentDay \u003d getDay(splitCurrentDate);"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"        String currentYear \u003d getYear(splitCurrentDate);"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"        if (isOutOfRangeMonth(month)) {"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"            return true;"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"        if (isOutOfRangeDay(month, day, year)) {"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"        if (!isFutureYear(year, currentYear) \u0026\u0026 !isSameYear(year, currentYear)) {"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"        if (isFutureYear(year, currentYear)) {"},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"            return false;"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"        if (isSameYear(year, currentYear)) {"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"            if (!isFutureMonth(month, currentMonth) \u0026\u0026 !isSameMonth(month, currentMonth)) {"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"                return true;"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"            if (isFutureMonth(month, currentMonth)) {"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"                return false;"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"        if (isSameYear(year, currentYear) \u0026\u0026 isSameMonth(month, currentMonth)) {"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"            if (!isFutureDay(day, currentDay)) {"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"                return true;"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"        return false;"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"    private static boolean isOutOfRangeDay(String month, String day, String year) {"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"        if (Integer.parseInt(day) \u003c 1) {"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"        switch(month) {"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"        case FEB:"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"            if (isLeapYear(Integer.parseInt(year))) {"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"                if (Integer.parseInt(day) \u003e 29) {"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"                    return true;"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"            } else {"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"                if (Integer.parseInt(day) \u003e 28) {"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"                    return true;"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":"        case JAN:"},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":"        case MAR:"},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"        case MAY:"},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"        case JUL:"},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"        case AUG:"},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":"        case OCT:"},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":"        case DEC:"},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"            if (Integer.parseInt(day) \u003e 31) {"},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"                return true;"},{"lineNumber":115,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"tzexern"},"content":"        case APR:"},{"lineNumber":117,"author":{"gitId":"tzexern"},"content":"        case JUN:"},{"lineNumber":118,"author":{"gitId":"tzexern"},"content":"        case SEP:"},{"lineNumber":119,"author":{"gitId":"tzexern"},"content":"        case NOV:"},{"lineNumber":120,"author":{"gitId":"tzexern"},"content":"            if (Integer.parseInt(day) \u003e 30) {"},{"lineNumber":121,"author":{"gitId":"tzexern"},"content":"                return true;"},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"tzexern"},"content":"        return false;"},{"lineNumber":125,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":127,"author":{"gitId":"tzexern"},"content":"    public static boolean isIncompleteDate(Task t) {"},{"lineNumber":128,"author":{"gitId":"tzexern"},"content":"        return t.getDate().equals(\"\");"},{"lineNumber":129,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":131,"author":{"gitId":"tzexern"},"content":"    private static boolean isOutOfRangeMonth(String month) {"},{"lineNumber":132,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(month) \u003c 1 || Integer.parseInt(month) \u003e 12;"},{"lineNumber":133,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":135,"author":{"gitId":"tzexern"},"content":"    private static boolean isFutureYear(String year, String currentYear) {"},{"lineNumber":136,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(year) \u003e Integer.parseInt(currentYear);"},{"lineNumber":137,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":139,"author":{"gitId":"tzexern"},"content":"    private static boolean isSameYear(String year, String currentYear) {"},{"lineNumber":140,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(year) \u003d\u003d Integer.parseInt(currentYear);"},{"lineNumber":141,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":143,"author":{"gitId":"tzexern"},"content":"    private static boolean isFutureMonth(String month, String currentMonth) {"},{"lineNumber":144,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(month) \u003e Integer.parseInt(currentMonth);"},{"lineNumber":145,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":147,"author":{"gitId":"tzexern"},"content":"    private static boolean isSameMonth(String month, String currentMonth) {"},{"lineNumber":148,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(month) \u003d\u003d Integer.parseInt(currentMonth);"},{"lineNumber":149,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":151,"author":{"gitId":"tzexern"},"content":"    private static boolean isFutureDay(String day, String currentDay) {"},{"lineNumber":152,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(day) \u003e Integer.parseInt(currentDay);"},{"lineNumber":153,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":155,"author":{"gitId":"tzexern"},"content":"    private static boolean isIncorrectFormatDate(String[] splitDate) {"},{"lineNumber":156,"author":{"gitId":"tzexern"},"content":"        return splitDate.length !\u003d 3;"},{"lineNumber":157,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":159,"author":{"gitId":"tzexern"},"content":"    private static boolean isLeapYear(int year) {"},{"lineNumber":160,"author":{"gitId":"tzexern"},"content":"        return (year % 4 \u003d\u003d 0);"},{"lineNumber":161,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":162}},{"path":"src/main/java/duke/exceptions/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":" * Thrown if task name is not provided."},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class EmptyInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":7}},{"path":"src/main/java/duke/exceptions/IncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":" * Thrown if parameters of commands are incomplete or insufficient."},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class IncompleteInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":7}},{"path":"src/main/java/duke/exceptions/InvalidDateInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":" * Thrown if date is invalid."},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class InvalidDateInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":7}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":" * Thrown if user input is invalid."},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":7}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.util.Util;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import javax.lang.model.type.ArrayType;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"     * Returns an array list containing task type"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"     * and task name."},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"     * The task name is stored in index \u003d 0."},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"     * The task type is stored in index \u003d 1."},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"     * The task name is \"\" if the a one-word-command"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"     * is parsed."},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"     * @return An array list containing task type and task name."},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    public static ArrayList\u003cString\u003e parseInput(String userInput) {"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        String taskType;"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"        String taskName;"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"        Scanner splitInputScanner;"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"        ArrayList\u003cString\u003e parsedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"        // Separate taskType and taskName(may contain"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"        // dates/time) if applicable"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        userInput \u003d userInput.trim();   // removes leading and trailing spaces"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"        if(Util.isOneWord(userInput)) {"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"            taskType \u003d userInput;"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"            taskName \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"            splitInputScanner \u003d new Scanner(userInput);"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"            // Extract task type"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"            taskType \u003d splitInputScanner.next().toLowerCase();"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"            // Extract task description"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"            taskName \u003d splitInputScanner.nextLine();"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"        parsedList.add(taskName);"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"        parsedList.add(taskType);"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"        return parsedList;"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"     * Returns task name."},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"     * The task name is stored in index \u003d 0"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"     * of the parsedList."},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"     * @param parsedList Array list containing task name and task type."},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"     * @return Task name."},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"    public static String parseTaskName(ArrayList\u003cString\u003e parsedList) {"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"        return parsedList.get(0).trim();"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"     * Returns task type."},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"     * The task type is stored in index \u003d 1"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"     * of the parsedList."},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"     * @param parsedList Array list containing task name and task type."},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"     * @return Task type."},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"    public static String parseTaskType(ArrayList\u003cString\u003e parsedList) {"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"        return parsedList.get(1).trim();"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     * Returns an array of String containing the"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * current month, day and year."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     * The current date format parsed in is"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"     * YYYY-MM-DD."},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"     * The month is stored in index \u003d 0."},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"     * The day is stored in index \u003d 1."},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"     * The year is stored in index \u003d 2."},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"     * @param date Current date"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"     * @return An array of String containing the current"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"     * month, day and year."},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"    public static String[] parseCurrentDate(String date) {"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"        String[] splitDate \u003d date.trim().split(\"-\");"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"        String[] arrangedSplitDate \u003d new String[3];"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"        arrangedSplitDate[0] \u003d splitDate[1];"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"        arrangedSplitDate[1] \u003d splitDate[2];"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"        arrangedSplitDate[2] \u003d splitDate[0];"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"        return arrangedSplitDate;"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"     * Removes all contents of the array list of strings."},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"     * This method empties the array list so that it can"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"     * be reused for parsing purposes."},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"     * @param parsedList Array list to be emptied."},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"    public static void emptyList(ArrayList\u003cString\u003e parsedList) {"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"        for(String item : parsedList) {"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"            parsedList.remove(item);"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":105}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":" * Represents a storage area where you can save"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":" * and load files from."},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"     * Loads a previously saved file or creates a new save"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"     * file if it doesn\u0027t exist."},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"     * If the save file is unable to be located even though"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"     * it exists, the exception thrown will be captured."},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"     * If the save file creation failed, th exception thrown"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"     * will be captured."},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"    public static void loadFile() {"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"            File f \u003d new File(\"duke.txt\");"},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"            if (f.createNewFile()) {"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"                System.out.println(\"Save file is created: \" + f.getName());"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"            } else {"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"                try {"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"                    Storage.loadList(\"duke.txt\");"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"                } catch (FileNotFoundException e){"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"                    System.out.println(\"Save file not found.\");"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"                    e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"                System.out.println(\"Save file loaded successfully.\");"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Save file creation failed.\");"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"    // Recreate the ArrayList from save file"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"    private static void loadList(String filePath) throws FileNotFoundException {"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"        if(s.hasNext()) {"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"            s.nextLine();       // Skip the first line"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"        while (s.hasNext()) {"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"            String listEntry \u003d s.nextLine();"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"            Scanner listEntryS \u003d new Scanner(listEntry);"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"            String taskType \u003d listEntryS.next();"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"            String[] parser;"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"            String taskName;"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"            String taskStatus;"},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"            String date;"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"            switch (taskType) {"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"            case \"T\":"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"                parser \u003d listEntry.split(\"\\\\|\");"},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"                taskName \u003d parser[2].trim();"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"                Task t \u003d new Todo(taskName);"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"                t.addTaskToArrayList();"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"                taskStatus \u003d parser[1].trim();"},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"                if (taskStatus.equals(\"1\")){"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"                    t.setIsDone();"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"            case \"D\":"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"                parser \u003d listEntry.split(\"\\\\|\");"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"                taskName \u003d parser[2].trim();"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"                date \u003d parser[3].trim();"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"                Task d \u003d new Deadline(taskName, date);"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"                d.addTaskToArrayList();"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"                taskStatus \u003d parser[1].trim();"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"                if (taskStatus.equals(\"1\")){"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"                    d.setIsDone();"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"            case \"E\":"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"                parser \u003d listEntry.split(\"\\\\|\");"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"                taskName \u003d parser[2].trim();"},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"                date \u003d parser[3].trim();"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"                Task e \u003d new Event(taskName, date);"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"                e.addTaskToArrayList();"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"                taskStatus \u003d parser[1].trim();"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"                if (taskStatus.equals(\"1\")){"},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"                    e.setIsDone();"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"     * Calls the method \u003ccode\u003esaveFile\u003c/code\u003e and"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"     * attempts to save the file."},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":"     * If the file saving process fails, the exception"},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":"     * thrown will be captured."},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"    public static void attemptSaveFile() {"},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":"            Storage.saveFile(\"duke.txt\");"},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":"        } catch (IOException e){"},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Fail to save file.\");"},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"            e.printStackTrace();"},{"lineNumber":115,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":118,"author":{"gitId":"tzexern"},"content":"    private static void saveFile(String filePath) throws IOException {"},{"lineNumber":119,"author":{"gitId":"tzexern"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":120,"author":{"gitId":"tzexern"},"content":"        fw.write(\"List of tasks: \" + System.lineSeparator());"},{"lineNumber":121,"author":{"gitId":"tzexern"},"content":"        for (int i \u003d 0; i \u003c Task.getTaskCount(); i++) {"},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"            fw.write(Task.getTask(i));"},{"lineNumber":123,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"tzexern"},"content":"        fw.close();"},{"lineNumber":125,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":126}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.date.Date;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.EmptyInputException;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.IncompleteInputException;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.InvalidDateInputException;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":" * Represents a \u003ccode\u003eDeadline\u003c/code\u003e in the real world."},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":" * A Deadline object contains what a Task object has and"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":" * a date."},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    private static final String ALPHABET_D \u003d \"D\";"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    private String byTime;"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"    public Deadline(String d, String by) {"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"        super(d);"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"        this.byTime \u003d by;"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"    public String getDate() {"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"        return this.byTime;"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"    public String getTaskType() {"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        return ALPHABET_D;"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"     * Prints the date after the task information."},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"    public void printTaskInformation() {"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        super.printTaskInformation();"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        this.printTime();"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"    public void printTime() {"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"        System.out.print(\" (by:\" + this.byTime + \")\");"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"    public void printInputErrorMessage(String userInput) {"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"        super.printInputErrorMessage(userInput);"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  deadline [deadline name] /by [MM-DD-YYYY]\\n\""},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"                + \"    e.g. deadline return book /by 03-28-2021\");"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"    public void printInvalidDateInputMessage(String userInput) {"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"        super.printInvalidDateInputMessage(userInput);"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  deadline [deadline name] /by [MM-DD-YYYY]\\n\""},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"                + \"    e.g. deadline return book /by 03-28-2021\");"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please check if date is:\");"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"1. Out of range.\");"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"2. Not a future date.\");"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"3. In incorrect format.\");"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"     * Adds task to array list as per parent class."},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"     * Throws additional exceptions on incomplete and"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"     * invalid dates."},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"     * @throws EmptyInputException If task.description is empty."},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If parameter provided for date"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * is insufficient."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     * @throws InvalidDateInputException If date is in invalid format."},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"    public void addTask() throws EmptyInputException, IncompleteInputException, InvalidDateInputException {"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"        // Check if date field is valid"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        if (Date.isIncompleteDate(this)) {"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"            throw new IncompleteInputException();"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"        if (Date.isInvalidDate(this)) {"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"            throw new InvalidDateInputException();"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"        super.addTask();"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":85}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.date.Date;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.EmptyInputException;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.IncompleteInputException;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.InvalidDateInputException;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":" * Represents an \u003ccode\u003eEvent\u003c/code\u003e in the real world."},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":" * An Event object contains what a Task object has and"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":" * a date."},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    private static final String ALPHABET_E \u003d \"E\";"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    private String atTime;"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"    public Event(String d, String at) {"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"        super(d);"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"        this.atTime \u003d at;"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"    public String getDate() {"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"        return this.atTime;"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"    public String getTaskType() {"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        return ALPHABET_E;"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"     * Prints the date after the task information."},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"    public void printTaskInformation() {"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        super.printTaskInformation();"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        this.printTime();"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"    public void printTime() {"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"        System.out.print(\" (at:\" + this.atTime + \")\");"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"    public void printInputErrorMessage(String userInput) {"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"        super.printInputErrorMessage(userInput);"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  event [event name] /at [MM-DD-YYYY]\\n\""},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"                + \"    e.g. event project meeting /at 03-28-2021\");"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"    public void printInvalidDateInputMessage(String userInput) {"},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"        super.printInvalidDateInputMessage(userInput);"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  event [event name] /at [MM-DD-YYYY]\\n\""},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"                + \"    e.g. event project meeting /at 03-28-2021\");"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please check if date is:\");"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"1. Out of range.\");"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"2. Not a future date.\");"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"3. In incorrect format.\");"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"     * Adds task to array list as per parent class."},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"     * Throws additional exceptions on incomplete and"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"     * invalid dates."},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"     * @throws EmptyInputException If task.description is empty."},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If parameter provided for date"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * is insufficient."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     * @throws InvalidDateInputException If date is in invalid format."},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"    public void addTask() throws EmptyInputException, IncompleteInputException, InvalidDateInputException {"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"        // Check if date field is valid"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        if (Date.isIncompleteDate(this)) {"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"            throw new IncompleteInputException();"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"        if (Date.isInvalidDate(this)) {"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"            throw new InvalidDateInputException();"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"        super.addTask();"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":85}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.exceptions.*;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"import duke.util.Util;"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":" * Represents a task in the real world."},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":" * A \u003ccode\u003eTask\u003c/code\u003e object contains the"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":" * task name and its completion status."},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"public class Task {"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    protected String description;"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    private boolean isDone;"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"    private static int taskCount \u003d 0;"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"     * Validates the @param of \u003ccode\u003eaddTask\u003c/code\u003e method."},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"     * Input error message will be shown if the parameters"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"     * provided are insufficient."},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"     * Invalid date input error message will be shown if the"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"     * date is invalid."},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"     * @param t Task object to be added and validated."},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":"    public static void addTaskWithValidation(String userInput, Task t) {"},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"            t.addTask();"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"        } catch (EmptyInputException | IncompleteInputException e) {"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"            t.printInputErrorMessage(userInput);"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":"        } catch (InvalidDateInputException e) {"},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"            t.printInvalidDateInputMessage(userInput);"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"     * Validates the @param of \u003ccode\u003emarkAsDone\u003c/code\u003e method."},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"     * Incomplete done input error message will be shown if"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"     * the parameters provided are insufficient."},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"     * Invalid done input error message will be shown if the"},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"     * input fields are invalid."},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"     * @param i Number shown on the list of interested task."},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"    public static void markAsDoneWithValidation(String i, String userInput) {"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":"            markAsDone(i, userInput);"},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"        } catch (IncompleteInputException e) {"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":"            printIncompleteDoneInputErrorMessage(userInput);"},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"        } catch (InvalidInputException e) {"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"            printInvalidDoneInputErrorMessage(userInput);"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * @param i"},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     * @param userInput"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"    public static void deleteTaskWithValidation(String i, String userInput) {"},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"            deleteTask(i, userInput);"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        } catch (IncompleteInputException e) {"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"            printIncompleteDeleteInputErrorMessage(userInput);"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        } catch (InvalidInputException e) {"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"            printInvalidDeleteInputErrorMessage(userInput);"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"     * Validates the @param of \u003ccode\u003efindTask\u003c/code\u003e method."},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"     * Incomplete find input error message will be shown if"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"     * the parameters provided are insufficient."},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"     * @param userInput Search keyword."},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"    public static void findTaskWithValidation(String userInput) {"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"            findTask(userInput);"},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"        } catch (IncompleteInputException e) {"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"            printIncompleteFindInputErrorMessage(userInput);"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"    private String getStatusIcon() {"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"        return(this.isDone ? \"x\" : \" \");"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"    public void setIsDone() {"},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"        this.isDone \u003d true;"},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"     * Adds corresponding task object to the array list."},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":"     * Shows the task added upon successful addition to the list,"},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":"     * throws an exception otherwise."},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"     * @throws EmptyInputException If task.description is empty."},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If some fields of a command is missing."},{"lineNumber":115,"author":{"gitId":"tzexern"},"content":"     * @throws InvalidDateInputException If date is not adhering to specified format."},{"lineNumber":116,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"tzexern"},"content":"    public void addTask() throws"},{"lineNumber":118,"author":{"gitId":"tzexern"},"content":"            EmptyInputException, IncompleteInputException, InvalidDateInputException {"},{"lineNumber":119,"author":{"gitId":"tzexern"},"content":"        // Throw Exception if no valid task is detected"},{"lineNumber":120,"author":{"gitId":"tzexern"},"content":"        if (isEmpty(this)) {"},{"lineNumber":121,"author":{"gitId":"tzexern"},"content":"            throw new EmptyInputException();"},{"lineNumber":122,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":124,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Got it, I\u0027ve added this task:\");"},{"lineNumber":125,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"  \");"},{"lineNumber":126,"author":{"gitId":"tzexern"},"content":"        this.printTaskInformation();"},{"lineNumber":127,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"\");"},{"lineNumber":128,"author":{"gitId":"tzexern"},"content":"        addTaskToArrayList();"},{"lineNumber":129,"author":{"gitId":"tzexern"},"content":"        printTaskCount();"},{"lineNumber":130,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":132,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"tzexern"},"content":"     * Sets the completion status of a task object to 1."},{"lineNumber":134,"author":{"gitId":"tzexern"},"content":"     * Shows the task marked as done upon successful execution,"},{"lineNumber":135,"author":{"gitId":"tzexern"},"content":"     * throws an exception otherwise."},{"lineNumber":136,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"tzexern"},"content":"     * @param i Number shown on the list of interested task."},{"lineNumber":138,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":139,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If insufficient parameters were"},{"lineNumber":140,"author":{"gitId":"tzexern"},"content":"     * given in the command."},{"lineNumber":141,"author":{"gitId":"tzexern"},"content":"     * @throws InvalidInputException If i \u003c\u003d 0 or i \u003e taskCount."},{"lineNumber":142,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"tzexern"},"content":"    public static void markAsDone(String i, String userInput) throws"},{"lineNumber":144,"author":{"gitId":"tzexern"},"content":"            IncompleteInputException, InvalidInputException {"},{"lineNumber":145,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":146,"author":{"gitId":"tzexern"},"content":"        if (isIncompleteIndexInput(userInput)) {"},{"lineNumber":147,"author":{"gitId":"tzexern"},"content":"            throw new IncompleteInputException();"},{"lineNumber":148,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"tzexern"},"content":"        if (isInvalidIndexInput(userInput)) {"},{"lineNumber":150,"author":{"gitId":"tzexern"},"content":"            throw new InvalidInputException();"},{"lineNumber":151,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":153,"author":{"gitId":"tzexern"},"content":"        int index \u003d Integer.parseInt(i);"},{"lineNumber":154,"author":{"gitId":"tzexern"},"content":"        Task t \u003d taskList.get(index-1);"},{"lineNumber":155,"author":{"gitId":"tzexern"},"content":"        t.isDone \u003d true;"},{"lineNumber":156,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":157,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"  \");"},{"lineNumber":158,"author":{"gitId":"tzexern"},"content":"        t.printTaskInformation();"},{"lineNumber":159,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"\");"},{"lineNumber":160,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":162,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"tzexern"},"content":"     * Removes a task object from the array list"},{"lineNumber":164,"author":{"gitId":"tzexern"},"content":"     * corresponding to index \u003d i-1."},{"lineNumber":165,"author":{"gitId":"tzexern"},"content":"     * Shows the task removed upon successful deletion,"},{"lineNumber":166,"author":{"gitId":"tzexern"},"content":"     * throws an exception otherwise."},{"lineNumber":167,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"tzexern"},"content":"     * @param i Number shown on the list of interested task."},{"lineNumber":169,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":170,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If insufficient parameters were"},{"lineNumber":171,"author":{"gitId":"tzexern"},"content":"     * given in the command."},{"lineNumber":172,"author":{"gitId":"tzexern"},"content":"     * @throws InvalidInputException If i \u003c\u003d 0 or i \u003e taskCount."},{"lineNumber":173,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"tzexern"},"content":"    public static void deleteTask(String i, String userInput) throws"},{"lineNumber":175,"author":{"gitId":"tzexern"},"content":"            IncompleteInputException, InvalidInputException {"},{"lineNumber":176,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":177,"author":{"gitId":"tzexern"},"content":"        if (isIncompleteIndexInput(userInput)) {"},{"lineNumber":178,"author":{"gitId":"tzexern"},"content":"            throw new IncompleteInputException();"},{"lineNumber":179,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"tzexern"},"content":"        if (isInvalidIndexInput(userInput)) {"},{"lineNumber":181,"author":{"gitId":"tzexern"},"content":"            throw new InvalidInputException();"},{"lineNumber":182,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":184,"author":{"gitId":"tzexern"},"content":"        int index \u003d Integer.parseInt(i);"},{"lineNumber":185,"author":{"gitId":"tzexern"},"content":"        Task t \u003d taskList.get(index-1);"},{"lineNumber":186,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":187,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"  \");"},{"lineNumber":188,"author":{"gitId":"tzexern"},"content":"        t.printTaskInformation();"},{"lineNumber":189,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"\");"},{"lineNumber":190,"author":{"gitId":"tzexern"},"content":"        taskList.remove(t);"},{"lineNumber":191,"author":{"gitId":"tzexern"},"content":"        taskCount--;"},{"lineNumber":192,"author":{"gitId":"tzexern"},"content":"        printTaskCount();"},{"lineNumber":193,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":195,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"tzexern"},"content":"     * Shows a list of tasks that matches the search keyword."},{"lineNumber":197,"author":{"gitId":"tzexern"},"content":"     * Shows no match is found when no tasks matches the"},{"lineNumber":198,"author":{"gitId":"tzexern"},"content":"     * search keyword."},{"lineNumber":199,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"tzexern"},"content":"     * @param userInput Search keyword"},{"lineNumber":201,"author":{"gitId":"tzexern"},"content":"     * @throws IncompleteInputException If userInput is empty."},{"lineNumber":202,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"tzexern"},"content":"    public static void findTask(String userInput) throws"},{"lineNumber":204,"author":{"gitId":"tzexern"},"content":"            IncompleteInputException {"},{"lineNumber":205,"author":{"gitId":"tzexern"},"content":"        if (userInput.equals(\"\")) {"},{"lineNumber":206,"author":{"gitId":"tzexern"},"content":"            throw new IncompleteInputException();"},{"lineNumber":207,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"tzexern"},"content":"        int matchingTaskCount \u003d 0;"},{"lineNumber":209,"author":{"gitId":"tzexern"},"content":"        for(Task t : taskList) {"},{"lineNumber":210,"author":{"gitId":"tzexern"},"content":"            if (isMatchingTask(userInput, t)) {"},{"lineNumber":211,"author":{"gitId":"tzexern"},"content":"                matchingTaskCount++;"},{"lineNumber":212,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"tzexern"},"content":"        if(matchingTaskCount \u003d\u003d 0) {"},{"lineNumber":215,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"No match found :\u003c\");"},{"lineNumber":216,"author":{"gitId":"tzexern"},"content":"        } else if(matchingTaskCount \u003d\u003d 1) {"},{"lineNumber":217,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Here is the matching task in your list:\");"},{"lineNumber":218,"author":{"gitId":"tzexern"},"content":"        } else if(matchingTaskCount \u003e 1) {"},{"lineNumber":219,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":220,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"tzexern"},"content":"        for(Task t : taskList) {"},{"lineNumber":222,"author":{"gitId":"tzexern"},"content":"            if (isMatchingTask(userInput, t)) {"},{"lineNumber":223,"author":{"gitId":"tzexern"},"content":"                System.out.print((taskList.indexOf(t) + 1) + \". \");"},{"lineNumber":224,"author":{"gitId":"tzexern"},"content":"                t.printTaskInformation();"},{"lineNumber":225,"author":{"gitId":"tzexern"},"content":"                System.out.println(\"\");"},{"lineNumber":226,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":227,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":230,"author":{"gitId":"tzexern"},"content":"    private static boolean isMatchingTask(String userInput, Task t) {"},{"lineNumber":231,"author":{"gitId":"tzexern"},"content":"        String taskName \u003d t.description.toLowerCase();"},{"lineNumber":232,"author":{"gitId":"tzexern"},"content":"        return taskName.contains(userInput.toLowerCase());"},{"lineNumber":233,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":235,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":236,"author":{"gitId":"tzexern"},"content":"     * Adds task object to the array list."},{"lineNumber":237,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":238,"author":{"gitId":"tzexern"},"content":"     * Increments the global variable taskCount."},{"lineNumber":239,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"tzexern"},"content":"    public void addTaskToArrayList() {"},{"lineNumber":241,"author":{"gitId":"tzexern"},"content":"        taskList.add(this);"},{"lineNumber":242,"author":{"gitId":"tzexern"},"content":"        taskCount++;"},{"lineNumber":243,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":245,"author":{"gitId":"tzexern"},"content":"    private static void printSuccessfulTaskAddition() {"},{"lineNumber":246,"author":{"gitId":"tzexern"},"content":"        if(taskCount \u003d\u003d 1) {"},{"lineNumber":247,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Now you have \" + taskCount + \" task in the list.\");"},{"lineNumber":248,"author":{"gitId":"tzexern"},"content":"        } else {"},{"lineNumber":249,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"},{"lineNumber":250,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":253,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"tzexern"},"content":"     * Shows the list of tasks added and not removed."},{"lineNumber":255,"author":{"gitId":"tzexern"},"content":"     * The index number (starting from 1), task type"},{"lineNumber":256,"author":{"gitId":"tzexern"},"content":"     * symbol and task completion status symbol is shown."},{"lineNumber":257,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"tzexern"},"content":"    public static void listTasks() {"},{"lineNumber":259,"author":{"gitId":"tzexern"},"content":"        int index \u003d 1;"},{"lineNumber":260,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":261,"author":{"gitId":"tzexern"},"content":"        for(Task t : taskList){"},{"lineNumber":262,"author":{"gitId":"tzexern"},"content":"            printIndex(index);"},{"lineNumber":263,"author":{"gitId":"tzexern"},"content":"            t.printTaskInformation();"},{"lineNumber":264,"author":{"gitId":"tzexern"},"content":"            System.out.println(\"\");"},{"lineNumber":265,"author":{"gitId":"tzexern"},"content":"            index++;"},{"lineNumber":266,"author":{"gitId":"tzexern"},"content":"            if(!(taskCount \u003e index - 1)){"},{"lineNumber":267,"author":{"gitId":"tzexern"},"content":"                break;"},{"lineNumber":268,"author":{"gitId":"tzexern"},"content":"            }"},{"lineNumber":269,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":270,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":272,"author":{"gitId":"tzexern"},"content":"    private static void printIndex(int index) {"},{"lineNumber":273,"author":{"gitId":"tzexern"},"content":"        System.out.print(Integer.toString(index) + \".\");"},{"lineNumber":274,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":276,"author":{"gitId":"tzexern"},"content":"    public void printTaskInformation() {"},{"lineNumber":277,"author":{"gitId":"tzexern"},"content":"        this.printTaskType();"},{"lineNumber":278,"author":{"gitId":"tzexern"},"content":"        this.printStatusIcon();"},{"lineNumber":279,"author":{"gitId":"tzexern"},"content":"        this.printTaskName();"},{"lineNumber":280,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":282,"author":{"gitId":"tzexern"},"content":"    public String getTaskType() {"},{"lineNumber":283,"author":{"gitId":"tzexern"},"content":"        return \"N/A\";"},{"lineNumber":284,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":286,"author":{"gitId":"tzexern"},"content":"    public static int getTaskCount() {"},{"lineNumber":287,"author":{"gitId":"tzexern"},"content":"        return taskList.size();"},{"lineNumber":288,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":290,"author":{"gitId":"tzexern"},"content":"    public String getDate() {"},{"lineNumber":291,"author":{"gitId":"tzexern"},"content":"        return \"N/A\";"},{"lineNumber":292,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":294,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":295,"author":{"gitId":"tzexern"},"content":"     * Returns a task entry in a specific format to be saved"},{"lineNumber":296,"author":{"gitId":"tzexern"},"content":"     * in a file."},{"lineNumber":297,"author":{"gitId":"tzexern"},"content":"     * Task entries are formatted according to its task type."},{"lineNumber":298,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":299,"author":{"gitId":"tzexern"},"content":"     * @param i Index number of the array list."},{"lineNumber":300,"author":{"gitId":"tzexern"},"content":"     * @return Formatted entry to be saved in a file."},{"lineNumber":301,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":302,"author":{"gitId":"tzexern"},"content":"    public static String getTask(int i) {"},{"lineNumber":303,"author":{"gitId":"tzexern"},"content":"        Task t \u003d taskList.get(i);"},{"lineNumber":304,"author":{"gitId":"tzexern"},"content":"        String taskType \u003d t.getTaskType();"},{"lineNumber":305,"author":{"gitId":"tzexern"},"content":"        String statusIcon \u003d (t.getStatusIcon().equals(\"x\") ? \"1\" : \"0\");"},{"lineNumber":306,"author":{"gitId":"tzexern"},"content":"        if (t instanceof Todo) {"},{"lineNumber":307,"author":{"gitId":"tzexern"},"content":"            return taskType + \" | \" + statusIcon  + \" | \" + t.description"},{"lineNumber":308,"author":{"gitId":"tzexern"},"content":"                    + System.lineSeparator();"},{"lineNumber":309,"author":{"gitId":"tzexern"},"content":"        } else {"},{"lineNumber":310,"author":{"gitId":"tzexern"},"content":"            return taskType + \" | \" + statusIcon + \" | \" + t.description"},{"lineNumber":311,"author":{"gitId":"tzexern"},"content":"                    + \" | \" + t.getDate() + System.lineSeparator() ;"},{"lineNumber":312,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":313,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":315,"author":{"gitId":"tzexern"},"content":"    private static void printTaskCount() {"},{"lineNumber":316,"author":{"gitId":"tzexern"},"content":"        printSuccessfulTaskAddition();"},{"lineNumber":317,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":319,"author":{"gitId":"tzexern"},"content":"    private void printTaskType() {"},{"lineNumber":320,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"[\" + this.getTaskType() + \"]\");"},{"lineNumber":321,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":323,"author":{"gitId":"tzexern"},"content":"    private void printStatusIcon() {"},{"lineNumber":324,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"[\" + this.getStatusIcon() + \"] \");"},{"lineNumber":325,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":327,"author":{"gitId":"tzexern"},"content":"    private void printTaskName() {"},{"lineNumber":328,"author":{"gitId":"tzexern"},"content":"        System.out.print(this.description);"},{"lineNumber":329,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":331,"author":{"gitId":"tzexern"},"content":"    private boolean isEmpty(Task t) {"},{"lineNumber":332,"author":{"gitId":"tzexern"},"content":"        return t.description.equals(\"\");"},{"lineNumber":333,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":335,"author":{"gitId":"tzexern"},"content":"    private static boolean isIncompleteIndexInput(String userInput) {"},{"lineNumber":336,"author":{"gitId":"tzexern"},"content":"        return Util.getTaskIndex(userInput).equals(\"-1\");"},{"lineNumber":337,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":339,"author":{"gitId":"tzexern"},"content":"    private static boolean isInvalidIndexInput(String userInput) {"},{"lineNumber":340,"author":{"gitId":"tzexern"},"content":"        return Util.getTaskIndex(userInput).equals(\"0\");"},{"lineNumber":341,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":343,"author":{"gitId":"tzexern"},"content":"    public void printInputErrorMessage(String userInput) {"},{"lineNumber":344,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered is INCOMPLETE: \""},{"lineNumber":345,"author":{"gitId":"tzexern"},"content":"                + userInput + \"\\n\");"},{"lineNumber":346,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":347,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":349,"author":{"gitId":"tzexern"},"content":"    public void printInvalidDateInputMessage(String userInput) {"},{"lineNumber":350,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The date entered is INVALID: \""},{"lineNumber":351,"author":{"gitId":"tzexern"},"content":"                + userInput + \"\\n\");"},{"lineNumber":352,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":353,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":355,"author":{"gitId":"tzexern"},"content":"    private static void printIncompleteDoneInputErrorMessage(String userInput) {"},{"lineNumber":356,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered is INCOMPLETE: \" +"},{"lineNumber":357,"author":{"gitId":"tzexern"},"content":"                userInput + \"\\n\");"},{"lineNumber":358,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":359,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  done [task number]\");"},{"lineNumber":360,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"    e.g. done 3\");"},{"lineNumber":361,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":362,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":363,"author":{"gitId":"tzexern"},"content":"    private static void printInvalidDoneInputErrorMessage(String userInput) {"},{"lineNumber":364,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered is INVALID: \" +"},{"lineNumber":365,"author":{"gitId":"tzexern"},"content":"                userInput + \"\\n\");"},{"lineNumber":366,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":367,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  done [task number]\");"},{"lineNumber":368,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"    e.g. done 3\" + \"\\n\");"},{"lineNumber":369,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"[task number] field must be:\");"},{"lineNumber":370,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"1. Within range (according to number of items in the list).\");"},{"lineNumber":371,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"2. An integer greater than 0.\");"},{"lineNumber":372,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":374,"author":{"gitId":"tzexern"},"content":"    private static void printIncompleteFindInputErrorMessage(String userInput) {"},{"lineNumber":375,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered has insufficient parameters.\""},{"lineNumber":376,"author":{"gitId":"tzexern"},"content":"                + \"\\n\");"},{"lineNumber":377,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":378,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  find [search keyword]\");"},{"lineNumber":379,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"    e.g. find project\");"},{"lineNumber":380,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":382,"author":{"gitId":"tzexern"},"content":"    private static void printIncompleteDeleteInputErrorMessage(String userInput) {"},{"lineNumber":383,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered is INCOMPLETE: \" +"},{"lineNumber":384,"author":{"gitId":"tzexern"},"content":"                userInput + \"\\n\");"},{"lineNumber":385,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":386,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  delete [task number]\");"},{"lineNumber":387,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"    e.g. delete 3\");"},{"lineNumber":388,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":390,"author":{"gitId":"tzexern"},"content":"    private static void printInvalidDeleteInputErrorMessage(String userInput) {"},{"lineNumber":391,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"The command entered is INVALID: \" +"},{"lineNumber":392,"author":{"gitId":"tzexern"},"content":"                userInput + \"\\n\");"},{"lineNumber":393,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Please enter the command as follows:\");"},{"lineNumber":394,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  delete [task number]\");"},{"lineNumber":395,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"    e.g. delete 3\" + \"\\n\");"},{"lineNumber":396,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"[task number] field must be:\");"},{"lineNumber":397,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"1. Within range (according to number of items in the list).\");"},{"lineNumber":398,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"2. An integer greater than 0.\");"},{"lineNumber":399,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":400,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":400}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":" * Represents something to be done in the real world."},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":" * A Todo"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":" * object contains what a Task object has."},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"    private static final String ALPHABET_T \u003d \"T\";"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"    public Todo(String d) {"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"        super(d);"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"        return ALPHABET_T;"},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"    public void printInputErrorMessage(String userInput) {"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"        super.printInputErrorMessage(userInput);"},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"  todo [task name]\\n\""},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"                + \"    e.g. todo read book\");"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":26}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"public class TextUi {"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"    public static void showDividingLine() {"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"_____________________________________________________\");"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"    public static void showLogo() {"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":"        System.out.println(logo);"},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"    public static void showWelcomeMessage() {"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"        System.out.print(\"What can I do for you?\\n\");"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"    public static void showByeMessage() {"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Bye. Hope to see you again soon! :3\");"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"    public static void showUnrecognizedCommandError() {"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Uh oh this command is not available :\u003c\");"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":"        System.out.println(\"Refer to the user guide for more help :\u003e\");"},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":31}},{"path":"src/main/java/duke/util/Util.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"public class Util {"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"    public static boolean isEmpty(String s) {"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"        return s.equals(\"\");"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"    public static boolean isOneWord(String userInput) {"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"        return !userInput.contains(\" \");"},{"lineNumber":14,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":16,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tzexern"},"content":"     * Extracts and returns the date from the user input."},{"lineNumber":18,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tzexern"},"content":"     * Returns an empty string if s is incomplete or invalid."},{"lineNumber":20,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"tzexern"},"content":"     * @param s User input with task type removed."},{"lineNumber":22,"author":{"gitId":"tzexern"},"content":"     * @return Date from user input."},{"lineNumber":23,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"tzexern"},"content":"    public static String extractTime(String s) {"},{"lineNumber":25,"author":{"gitId":"tzexern"},"content":"        // If s is empty"},{"lineNumber":26,"author":{"gitId":"tzexern"},"content":"        if (isEmpty(s)){"},{"lineNumber":27,"author":{"gitId":"tzexern"},"content":"            return \"\";"},{"lineNumber":28,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":30,"author":{"gitId":"tzexern"},"content":"        String[] splitArray \u003d s.split(\"/\");"},{"lineNumber":31,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":32,"author":{"gitId":"tzexern"},"content":"        // If there is no date field"},{"lineNumber":33,"author":{"gitId":"tzexern"},"content":"        if (splitArray.length \u003c 2) {"},{"lineNumber":34,"author":{"gitId":"tzexern"},"content":"            return \"\";"},{"lineNumber":35,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":37,"author":{"gitId":"tzexern"},"content":"        // If s is invalid input"},{"lineNumber":38,"author":{"gitId":"tzexern"},"content":"        if (splitArray[1].trim().split(\" \").length !\u003d 2) {"},{"lineNumber":39,"author":{"gitId":"tzexern"},"content":"            return \"\";"},{"lineNumber":40,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":42,"author":{"gitId":"tzexern"},"content":"        Scanner sc \u003d new Scanner(splitArray[1]);"},{"lineNumber":43,"author":{"gitId":"tzexern"},"content":"        sc.next();              // remove \u0027by\u0027 or \u0027at\u0027"},{"lineNumber":44,"author":{"gitId":"tzexern"},"content":"        return sc.nextLine();   // extract time/date"},{"lineNumber":45,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":47,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"tzexern"},"content":"     * Extracts and returns task name from the user input."},{"lineNumber":49,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"tzexern"},"content":"     * Returns an empty string if s is incomplete."},{"lineNumber":51,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"tzexern"},"content":"     * @param s User input with task type removed."},{"lineNumber":53,"author":{"gitId":"tzexern"},"content":"     * @return Task name from user input."},{"lineNumber":54,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"tzexern"},"content":"    public static String extractTaskName(String s) {"},{"lineNumber":56,"author":{"gitId":"tzexern"},"content":"        // If s is empty"},{"lineNumber":57,"author":{"gitId":"tzexern"},"content":"        if (isEmpty(s)) {"},{"lineNumber":58,"author":{"gitId":"tzexern"},"content":"            return \"\";"},{"lineNumber":59,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":61,"author":{"gitId":"tzexern"},"content":"        String[] splitArray \u003d s.split(\"/\");"},{"lineNumber":62,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":63,"author":{"gitId":"tzexern"},"content":"        return splitArray[0];"},{"lineNumber":64,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":66,"author":{"gitId":"tzexern"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tzexern"},"content":"     * Returns the task index for done and delete methods."},{"lineNumber":68,"author":{"gitId":"tzexern"},"content":"     * If task index provided is incomplete or invalid,"},{"lineNumber":69,"author":{"gitId":"tzexern"},"content":"     * different values will be returned."},{"lineNumber":70,"author":{"gitId":"tzexern"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"tzexern"},"content":"     * @param userInput Original user input."},{"lineNumber":72,"author":{"gitId":"tzexern"},"content":"     * @return Task index for done and delete methods, -1 if"},{"lineNumber":73,"author":{"gitId":"tzexern"},"content":"     * parameter is insufficient, 0 if task index is not an"},{"lineNumber":74,"author":{"gitId":"tzexern"},"content":"     * integer, is negative or is out of range."},{"lineNumber":75,"author":{"gitId":"tzexern"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"tzexern"},"content":"    public static String getTaskIndex(String userInput) {"},{"lineNumber":77,"author":{"gitId":"tzexern"},"content":"        String[] userInputSplitted;"},{"lineNumber":78,"author":{"gitId":"tzexern"},"content":"        String taskIndex;"},{"lineNumber":79,"author":{"gitId":"tzexern"},"content":"        userInputSplitted \u003d userInput.split(\" \");"},{"lineNumber":80,"author":{"gitId":"tzexern"},"content":"        if(userInputSplitted.length \u003d\u003d 2) {"},{"lineNumber":81,"author":{"gitId":"tzexern"},"content":"            taskIndex \u003d userInputSplitted[1];"},{"lineNumber":82,"author":{"gitId":"tzexern"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"tzexern"},"content":"            return \"-1\";"},{"lineNumber":84,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"tzexern"},"content":"        if(!isInteger(taskIndex)) {"},{"lineNumber":86,"author":{"gitId":"tzexern"},"content":"            return \"0\";"},{"lineNumber":87,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"tzexern"},"content":"        if(isNegative(taskIndex) || isOutOfRange(taskIndex)) {"},{"lineNumber":89,"author":{"gitId":"tzexern"},"content":"            return \"0\";"},{"lineNumber":90,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"tzexern"},"content":"        return taskIndex;"},{"lineNumber":92,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":94,"author":{"gitId":"tzexern"},"content":"    private static boolean isNegative(String taskIndex) {"},{"lineNumber":95,"author":{"gitId":"tzexern"},"content":"        return Integer.parseInt(taskIndex) \u003c\u003d 0;"},{"lineNumber":96,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":98,"author":{"gitId":"tzexern"},"content":"    private static boolean isInteger(String taskIndex) {"},{"lineNumber":99,"author":{"gitId":"tzexern"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"tzexern"},"content":"            Integer.parseInt(taskIndex);"},{"lineNumber":101,"author":{"gitId":"tzexern"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":102,"author":{"gitId":"tzexern"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"tzexern"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"tzexern"},"content":"        return true;"},{"lineNumber":105,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":107,"author":{"gitId":"tzexern"},"content":"    private static boolean isOutOfRange(String taskIndex) {"},{"lineNumber":108,"author":{"gitId":"tzexern"},"content":"        return Task.getTaskCount() \u003c Integer.parseInt(taskIndex);"},{"lineNumber":109,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"tzexern"},"content":""},{"lineNumber":111,"author":{"gitId":"tzexern"},"content":"    public static boolean isBye(String taskType) {"},{"lineNumber":112,"author":{"gitId":"tzexern"},"content":"        return taskType.equals(\"bye\");"},{"lineNumber":113,"author":{"gitId":"tzexern"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"tzexern"},"content":"}"}],"authorContributionMap":{"tzexern":114}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tzexern"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"tzexern"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"tzexern"},"content":"event project meeting /at Monday 6-8pm"},{"lineNumber":4,"author":{"gitId":"tzexern"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"tzexern"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"tzexern"},"content":"list"},{"lineNumber":7,"author":{"gitId":"tzexern"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"tzexern"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"tzexern"},"content":"list"},{"lineNumber":10,"author":{"gitId":"tzexern"},"content":"todo wash clothes"},{"lineNumber":11,"author":{"gitId":"tzexern"},"content":"deadline group project /by April 3rd"},{"lineNumber":12,"author":{"gitId":"tzexern"},"content":"list"},{"lineNumber":13,"author":{"gitId":"tzexern"},"content":"bye"}],"authorContributionMap":{"tzexern":13}}]
