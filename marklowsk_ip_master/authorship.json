[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"### Feature 1 "},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"Description of feature."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"### `Keyword` - Describe action"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"Describe action and its outcome."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"`keyword (optional arguments)`"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"`outcome`"}],"authorContributionMap":{"marklowsk":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.io.FileIO;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.io.TextUI;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.io.Command;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    private static final String DOUBLE_SPACE_PREFIX_STRING_FORMAT \u003d \"  %s\";"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    private static final String LIST_TASK_MESSAGE \u003d \"Here are the tasks in your list:\";"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    private static final String LIST_NO_TASK_MESSAGE \u003d \"No task in record.\";"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_REMOVED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_TOTAL_TASKS_STRING_FORMAT \u003d \"Now you have %d tasks in the list.\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_MARK_AS_DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_COMMAND_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_EMPTY_DEADLINE_BY_MESSAGE \u003d \"The deadline\u0027s /by argument cannot be empty.\";"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_EMPTY_EVENT_AT_MESSAGE \u003d \"The event\u0027s /at argument cannot be empty.\";"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_WRITE_TO_FILE_MESSAGE \u003d \"Unable to write to file. :\u003c(\";"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_EMPTY_TASK_NUMBER_MESSAGE \u003d \"Missing task number,\""},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            + \"please specify a valid task number.\";"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_TASK_NUMBER_MESSAGE \u003d \"The task number you\u0027ve entered is invalid.\";"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_NOT_A_TASK_NUMBER_MESSAGE \u003d"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            \"Please enter a valid positive integer for a task number.\";"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_EMPTY_TASK_STRING_FORMAT \u003d \"The description of a %s cannot be empty.\";"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"     * Records a new Todo task into the global task array."},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description is given in {@code commandArgs}"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * Fails if task description argument value is invalid."},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * @see #validateTodoArguments(String) "},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"    private static void recordTodo(String commandArgs) {"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"            String taskDescription \u003d validateTodoArguments(commandArgs);"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            recordTask(new Todo(taskDescription));"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(e.getMessage());"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"    private static String validateTodoArguments(String commandArgs) throws DukeException {"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(ERROR_EMPTY_TASK_STRING_FORMAT, \"todo\"));"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        return taskDescription;"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"     * Records a new Deadline task into the global task array."},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and deadline-by is given in {@code commandArgs}"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid."},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description and deadline-by"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"     * @see #validateDeadlineArguments(String) "},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"    private static void recordDeadline(String commandArgs) {"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"            String[] deadlineArgValues \u003d validateDeadlineArguments(commandArgs);"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"            recordTask(new Deadline(deadlineArgValues[0], deadlineArgValues[1]));"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(e.getMessage());"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"    private static String[] validateDeadlineArguments(String commandArgs) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"        String deadlineBy \u003d parseArgument(commandArgs, Command.DEADLINE_BY_TOKEN);"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(ERROR_EMPTY_TASK_STRING_FORMAT, \"deadline\"));"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(deadlineBy)) {"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(ERROR_EMPTY_DEADLINE_BY_MESSAGE);"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"        return new String[] {taskDescription, deadlineBy};"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"     * Records a new Event task into the global task array."},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and event-at is given in {@code commandArgs}"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid."},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description and event-at"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"     * @see #validateEventArguments(String) "},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"    private static void recordEvent(String commandArgs) {"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"            String[] eventArgValues \u003d validateEventArguments(commandArgs);"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"            recordTask(new Event(eventArgValues[0], eventArgValues[1]));"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(e.getMessage());"},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"    private static String[] validateEventArguments(String commandArgs) throws DukeException {"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"        String eventAt \u003d parseArgument(commandArgs, Command.EVENT_AT_TOKEN);"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(ERROR_EMPTY_TASK_STRING_FORMAT, \"event\"));"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(eventAt)) {"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(ERROR_EMPTY_EVENT_AT_MESSAGE);"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"        return new String[] {taskDescription, eventAt};"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"     * Records the given task into the global task array."},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"     * Increments the global task count."},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"     * @param task task object to be recorded"},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"    private static void recordTask(Task task) {"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"        tasks.add(task);"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"        TextUI.printStatements(TASK_ADDED_MESSAGE,"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"                String.format(DOUBLE_SPACE_PREFIX_STRING_FORMAT, task),"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"                String.format(TASK_TOTAL_TASKS_STRING_FORMAT, tasks.size()));"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"            FileIO.writeTasksToFile(tasks);"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"        } catch (IOException e) {"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_WRITE_TO_FILE_MESSAGE);"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"     * Prints all tasks (tasks are numbered based on addition)."},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"    private static void printAllTasks() {"},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"        TextUI.printStatement(LIST_TASK_MESSAGE);"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"            TextUI.printStatement(String.format(\"%d.%s\", i + 1, task));"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"     * Lists all tasks."},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"    private static void listTasks() {"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":"            TextUI.printStatements(LIST_NO_TASK_MESSAGE);"},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"            TextUI.printHorizontalLine();"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"            printAllTasks();"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"            TextUI.printHorizontalLine();"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"     * Marks a task as done based on the order of the list."},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain the task number to mark as done"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"     * @see #validateTaskNumber(String)"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"    private static void markTaskDone(String commandArgs) {"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"            int taskNumber \u003d validateTaskNumber(commandArgs);"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"            int taskIndex \u003d taskNumber - 1;"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"            tasks.get(taskIndex).setDone(true);"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"            TextUI.printStatements(TASK_MARK_AS_DONE_MESSAGE,"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"                    String.format(DOUBLE_SPACE_PREFIX_STRING_FORMAT, task));"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"            FileIO.writeTasksToFile(tasks);"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_NOT_A_TASK_NUMBER_MESSAGE);"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(e.getMessage());"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"        } catch (IOException e) {"},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_WRITE_TO_FILE_MESSAGE);"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"    private static int validateTaskNumber(String commandArgs) throws DukeException, NumberFormatException {"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"        String argValue \u003d parseArgument(commandArgs, null);"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"        if (argValue \u003d\u003d null) {"},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(ERROR_EMPTY_TASK_NUMBER_MESSAGE);"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"        int taskNumber \u003d Integer.parseInt(argValue);"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e tasks.size()) {"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"            // Prevents the throwing of IndexOutOfBoundsException in the caller"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(ERROR_INVALID_TASK_NUMBER_MESSAGE);"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"        return taskNumber;"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"    private static void deleteTask(String commandArgs) {"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":203,"author":{"gitId":"marklowsk"},"content":"            int taskNumber \u003d validateTaskNumber(commandArgs);"},{"lineNumber":204,"author":{"gitId":"marklowsk"},"content":"            int taskIndex \u003d taskNumber - 1;"},{"lineNumber":205,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.remove(taskIndex);"},{"lineNumber":206,"author":{"gitId":"marklowsk"},"content":"            TextUI.printStatements(TASK_REMOVED_MESSAGE,"},{"lineNumber":207,"author":{"gitId":"marklowsk"},"content":"                    String.format(DOUBLE_SPACE_PREFIX_STRING_FORMAT, task),"},{"lineNumber":208,"author":{"gitId":"marklowsk"},"content":"                    String.format(TASK_TOTAL_TASKS_STRING_FORMAT, tasks.size()));"},{"lineNumber":209,"author":{"gitId":"marklowsk"},"content":"            FileIO.writeTasksToFile(tasks);"},{"lineNumber":210,"author":{"gitId":"marklowsk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":211,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_NOT_A_TASK_NUMBER_MESSAGE);"},{"lineNumber":212,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":213,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(e.getMessage());"},{"lineNumber":214,"author":{"gitId":"marklowsk"},"content":"        } catch (IOException e) {"},{"lineNumber":215,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_WRITE_TO_FILE_MESSAGE);"},{"lineNumber":216,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":219,"author":{"gitId":"marklowsk"},"content":"    private static void exitProgram() {"},{"lineNumber":220,"author":{"gitId":"marklowsk"},"content":"        TextUI.printStatements(EXIT_MESSAGE);"},{"lineNumber":221,"author":{"gitId":"marklowsk"},"content":"        System.exit(0);"},{"lineNumber":222,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":224,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"marklowsk"},"content":"     * Parses the user input and attempts to execute the command"},{"lineNumber":226,"author":{"gitId":"marklowsk"},"content":"     * with the arguments."},{"lineNumber":227,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"marklowsk"},"content":"    private static void executeCommand(String userInput) {"},{"lineNumber":229,"author":{"gitId":"marklowsk"},"content":"        String[] commandAndArgs \u003d parseCommand(userInput);"},{"lineNumber":230,"author":{"gitId":"marklowsk"},"content":"        String commandName \u003d commandAndArgs[0];"},{"lineNumber":231,"author":{"gitId":"marklowsk"},"content":"        String commandArgs \u003d commandAndArgs[1];"},{"lineNumber":232,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":233,"author":{"gitId":"marklowsk"},"content":"        switch (commandName) {"},{"lineNumber":234,"author":{"gitId":"marklowsk"},"content":"        case Command.LIST_WORD:"},{"lineNumber":235,"author":{"gitId":"marklowsk"},"content":"            listTasks();"},{"lineNumber":236,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":237,"author":{"gitId":"marklowsk"},"content":"        case Command.TODO_WORD:"},{"lineNumber":238,"author":{"gitId":"marklowsk"},"content":"            recordTodo(commandArgs);"},{"lineNumber":239,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":240,"author":{"gitId":"marklowsk"},"content":"        case Command.DEADLINE_WORD:"},{"lineNumber":241,"author":{"gitId":"marklowsk"},"content":"            recordDeadline(commandArgs);"},{"lineNumber":242,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":243,"author":{"gitId":"marklowsk"},"content":"        case Command.EVENT_WORD:"},{"lineNumber":244,"author":{"gitId":"marklowsk"},"content":"            recordEvent(commandArgs);"},{"lineNumber":245,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":246,"author":{"gitId":"marklowsk"},"content":"        case Command.DONE_WORD:"},{"lineNumber":247,"author":{"gitId":"marklowsk"},"content":"            markTaskDone(commandArgs);"},{"lineNumber":248,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":249,"author":{"gitId":"marklowsk"},"content":"        case Command.DELETE_WORD:"},{"lineNumber":250,"author":{"gitId":"marklowsk"},"content":"            deleteTask(commandArgs);"},{"lineNumber":251,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":252,"author":{"gitId":"marklowsk"},"content":"        case Command.BYE_WORD:"},{"lineNumber":253,"author":{"gitId":"marklowsk"},"content":"            // Does not fallthrough, exits program instead."},{"lineNumber":254,"author":{"gitId":"marklowsk"},"content":"            exitProgram();"},{"lineNumber":255,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":256,"author":{"gitId":"marklowsk"},"content":"            TextUI.printError(ERROR_COMMAND_MESSAGE);"},{"lineNumber":257,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":260,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"marklowsk"},"content":"     * Splits the user input into a command word and command arguments string."},{"lineNumber":262,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":263,"author":{"gitId":"marklowsk"},"content":"     * @return an array of size 2; first element is the command word"},{"lineNumber":264,"author":{"gitId":"marklowsk"},"content":"     *         and second element is the arguments string"},{"lineNumber":265,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"marklowsk"},"content":"    private static String[] parseCommand(String userInput) {"},{"lineNumber":267,"author":{"gitId":"marklowsk"},"content":"        final String[] commandAndArgs \u003d userInput.trim().split(\"\\\\s+\", 2);"},{"lineNumber":268,"author":{"gitId":"marklowsk"},"content":"        // parsedCommand\u0027s length after split will always be more than zero."},{"lineNumber":269,"author":{"gitId":"marklowsk"},"content":"        if (commandAndArgs.length \u003d\u003d 1) {"},{"lineNumber":270,"author":{"gitId":"marklowsk"},"content":"            return new String[] {commandAndArgs[0], \"\"};"},{"lineNumber":271,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"marklowsk"},"content":"        return commandAndArgs;"},{"lineNumber":273,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":275,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":276,"author":{"gitId":"marklowsk"},"content":"     * Parses an argument value after a given token."},{"lineNumber":277,"author":{"gitId":"marklowsk"},"content":"     * Reads until a next token or the end of commandArgs string."},{"lineNumber":278,"author":{"gitId":"marklowsk"},"content":"     * If token is null, read from the start of the string until"},{"lineNumber":279,"author":{"gitId":"marklowsk"},"content":"     * a next token or the end of commandArgs string."},{"lineNumber":280,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a full string of command arguments"},{"lineNumber":282,"author":{"gitId":"marklowsk"},"content":"     * @param token a string representing an option portion of an argument e.g. \"/by\""},{"lineNumber":283,"author":{"gitId":"marklowsk"},"content":"     * @return the argument value after the given token"},{"lineNumber":284,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"marklowsk"},"content":"    private static String parseArgument(String commandArgs, String token) {"},{"lineNumber":286,"author":{"gitId":"marklowsk"},"content":"        int readFromIndex \u003d 0;"},{"lineNumber":287,"author":{"gitId":"marklowsk"},"content":"        int readUntilIndex \u003d commandArgs.length();"},{"lineNumber":288,"author":{"gitId":"marklowsk"},"content":"        boolean hasToken \u003d (token !\u003d null) \u0026\u0026 (commandArgs.contains(token));"},{"lineNumber":289,"author":{"gitId":"marklowsk"},"content":"        boolean hasMissingToken \u003d (token !\u003d null) \u0026\u0026 !(commandArgs.contains(token));"},{"lineNumber":290,"author":{"gitId":"marklowsk"},"content":"        if (hasToken) {"},{"lineNumber":291,"author":{"gitId":"marklowsk"},"content":"            readFromIndex \u003d commandArgs.indexOf(token) + token.length();"},{"lineNumber":292,"author":{"gitId":"marklowsk"},"content":"        } else if (hasMissingToken) {"},{"lineNumber":293,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":294,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":295,"author":{"gitId":"marklowsk"},"content":"        int result \u003d commandArgs.indexOf(\"/\", readFromIndex);"},{"lineNumber":296,"author":{"gitId":"marklowsk"},"content":"        if (result !\u003d -1) {"},{"lineNumber":297,"author":{"gitId":"marklowsk"},"content":"            readUntilIndex \u003d result;"},{"lineNumber":298,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"marklowsk"},"content":"        return commandArgs.substring(readFromIndex, readUntilIndex).trim();"},{"lineNumber":300,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":302,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"marklowsk"},"content":"     * Checks if argument value string is empty."},{"lineNumber":304,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":305,"author":{"gitId":"marklowsk"},"content":"     * @param argValue argument value of a command argument"},{"lineNumber":306,"author":{"gitId":"marklowsk"},"content":"     * @return true if empty, false if not empty"},{"lineNumber":307,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":308,"author":{"gitId":"marklowsk"},"content":"    private static boolean isArgumentValueEmpty(String argValue) {"},{"lineNumber":309,"author":{"gitId":"marklowsk"},"content":"        return (argValue \u003d\u003d null) || (argValue.length() \u003d\u003d 0);"},{"lineNumber":310,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":312,"author":{"gitId":"marklowsk"},"content":"    public static void main(String[] args) {"},{"lineNumber":313,"author":{"gitId":"marklowsk"},"content":"        TextUI.printWelcomeMessage();"},{"lineNumber":314,"author":{"gitId":"marklowsk"},"content":"        tasks \u003d FileIO.retrieveTasksFromFile();"},{"lineNumber":315,"author":{"gitId":"marklowsk"},"content":"        while (true) {"},{"lineNumber":316,"author":{"gitId":"marklowsk"},"content":"            String userCommand \u003d TextUI.getUserInput();"},{"lineNumber":317,"author":{"gitId":"marklowsk"},"content":"            executeCommand(userCommand);"},{"lineNumber":318,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marklowsk":317,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public DukeException() {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super();"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public DukeException(String message) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":11}},{"path":"src/main/java/duke/InvalidFieldException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class InvalidFieldException extends Exception {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public InvalidFieldException() {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super();"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public InvalidFieldException(String message) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":11}},{"path":"src/main/java/duke/io/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.io;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Command {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public static final String LIST_WORD \u003d \"list\";"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"    public static final String BYE_WORD \u003d \"bye\";"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    public static final String TODO_WORD \u003d \"todo\";"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    public static final String DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public static final String DEADLINE_BY_TOKEN \u003d \"/by\";"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public static final String EVENT_WORD \u003d \"event\";"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    public static final String EVENT_AT_TOKEN \u003d \"/at\";"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public static final String DONE_WORD \u003d \"done\";"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public static final String DELETE_WORD \u003d \"delete\";"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":13}},{"path":"src/main/java/duke/io/FileIO.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.io;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.InvalidFieldException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import java.util.regex.Pattern;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"public class FileIO {"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    private static final Path DATA_DIRECTORY_PATH \u003d Paths.get(\".\", \"data\");"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private static final Path DATA_FILE_PATH \u003d DATA_DIRECTORY_PATH.resolve(\"duke.txt\");"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    private static final String TODO_REGEX_PATTERN \u003d \"[T]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s.+\";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String DEADLINE_REGEX_PATTERN \u003d \"[D]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s[^\\\\|]+\\\\s\\\\|\\\\s.+\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private static final String EVENT_REGEX_PATTERN \u003d \"[E]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s[^\\\\|]+\\\\s\\\\|\\\\s.+\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private static boolean directoryExists(Path path) {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        return Files.exists(path);"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    private static boolean fileExists(Path dirPath, Path filePath) {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        return directoryExists(dirPath) \u0026\u0026 Files.exists(filePath);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    public static void writeTasksToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        if (!directoryExists(DATA_DIRECTORY_PATH)) {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            Files.createDirectories(DATA_DIRECTORY_PATH);"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        FileWriter fw \u003d new FileWriter(DATA_FILE_PATH.toString(), false);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        for (Task t : tasks) {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"            fw.write(t.toFileEntry() + System.lineSeparator());"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        fw.close();"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    public static ArrayList\u003cTask\u003e retrieveTasksFromFile() {"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cTask\u003e tasks \u003d  new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        if (!fileExists(DATA_DIRECTORY_PATH, DATA_FILE_PATH)) {"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            File taskFile \u003d DATA_FILE_PATH.toFile();"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            Scanner sc \u003d new Scanner(taskFile);"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"                Task task \u003d parseAndMatchTask(line);"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"                if (task !\u003d null) {"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"                    tasks.add(task);"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"    private static String extractDataField(int fieldIndex, String line) throws InvalidFieldException {"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"        String[] fields \u003d line.split(\"\\\\|\");"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"        if (fieldIndex \u003e\u003d 0 \u0026\u0026 fieldIndex \u003c fields.length) {"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"            return fields[fieldIndex].trim();"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"        throw new InvalidFieldException();"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"    private static boolean extractIsDone(String line) throws InvalidFieldException {"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"        return extractDataField(1, line).equals(\"1\");"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"    private static Todo extractTodo(String line) throws InvalidFieldException {"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"        return new Todo(description, isDone);"},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"    private static Deadline extractDeadline(String line) throws InvalidFieldException {"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"        String by \u003d extractDataField(3, line);"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"        return new Deadline(description, isDone, by);"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"    private static Event extractEvent(String line) throws InvalidFieldException {"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"        String at \u003d extractDataField(3, line);"},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"        return new Event(description, isDone, at);"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"    public static Task parseAndMatchTask(String line) {"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"            if (Pattern.matches(TODO_REGEX_PATTERN, line)) {"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"                return extractTodo(line);"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"            } else if (Pattern.matches(DEADLINE_REGEX_PATTERN, line)) {"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"                return extractDeadline(line);"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"            } else if ((Pattern.matches(EVENT_REGEX_PATTERN, line))) {"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"                return extractEvent(line);"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"        } catch (InvalidFieldException e) {"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"        return null;"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":113}},{"path":"src/main/java/duke/io/TextUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.io;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"public class TextUI {"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    private static final String HORIZONTAL_LINE \u003d \"_\".repeat(65);"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    private static final String LOGO \u003d \" ____        _\\n\""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"            + \"What can I do for you?\";"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_PREFIX_MESSAGE \u003d \"ERROR: \";"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"     * Reads user input per line."},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"     * Ignores lines that contains only whitespace."},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"     * @return trimmed line string entered by the user"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    public static String getUserInput() {"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        String userInput;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        do {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"            userInput \u003d SCANNER.nextLine().trim();"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"        } while (userInput.isEmpty());"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        return userInput;"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public static void printHorizontalLine() {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        System.out.println(\"\\t\" + HORIZONTAL_LINE);"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"     * Prints a statement with a tab and spacing character."},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"     * Can print multiple lines if the statement string has line"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"     * breaks in it."},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    public static void printStatement(String statement) {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        String[] fragments \u003d statement.split(\"\\\\R\");"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"        for (String f : fragments) {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"            System.out.println(\"\\t \" + f);"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"     * Prints statements within horizontal line borders."},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"    public static void printStatements(String... statement) {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        for (String s : statement) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            printStatement(s);"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"    public static void printError(String errorDescription) {"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        printStatement(String.format(\"%s %s\", ERROR_PREFIX_MESSAGE, errorDescription));"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"        printStatements(LOGO, WELCOME_MESSAGE);"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":68}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public Deadline(String description, boolean isDone, String by) {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public String getBy() {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        return by;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public void setBy(String by) {"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s (by: %s)\", \u0027D\u0027, super.toString(), by);"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"%c %s | %s\", \u0027D\u0027, super.toFileEntry(), by);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public String getAt() {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        return at;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public void setAt(String at) {"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s (at: %s)\", \u0027E\u0027, super.toString(), at);"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"%c %s | %s\", \u0027E\u0027, super.toFileEntry(), at);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":33}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public String getDescription() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    public void setDescription(String description) {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    public boolean isDone() {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        return isDone;"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public void setDone(boolean done) {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        isDone \u003d done;"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"| %d | %s\", isDone ? 1 : 0, description);"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":46}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s\", \u0027T\u0027, super.toString());"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"%c %s\", \u0027T\u0027, super.toFileEntry());"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"blah"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"delete 4"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"todo"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"deadline"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"deadline /by"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"deadline  /by Sunday"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"deadline return book"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"deadline return book /by"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"deadline return book /by Sunday"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"event"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"event /by"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"event  /at Mon 2-4pm"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"event project meeting"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"event project meeting /at"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"todo write essay for GES"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"done done"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"done 0"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"done 5"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"done 1"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"done 4"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"done 3"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"done 2"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"done -1"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"done"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"delete 2"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"bye"}],"authorContributionMap":{"marklowsk":42}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"javac -cp ..\\src\\main\\java\\duke ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\io\\*.java  -Xlint:none -d ..\\bin"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"marklowsk":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"if ! javac -cp ..\\src\\main\\java\\duke ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\io\\*.java  -Xlint:none -d ..\\bin"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"marklowsk":2,"-":36}}]
