[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"Duke is a simple desktop app for managing tasks."},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"Instead of a Graphical User Interface (GUI), Duke is purely Command-Line Interface (CLI)."},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"## Quick Start"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"1. Duke requires Java 11 or above to run. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"2. Download the latest `Duke.jar` file from [here]."},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"3. Copy the jar file to a folder where you want to run Duke."},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"4. Open your terminal emulator or command prompt and change your working directory to that folder."},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"5. You can run Duke by entering `java -jar Duke.jar`."},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"6. Once running, you can start entering commands to Duke."},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"   Enter `help` to display the list of commands."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"   Some basic commands you can enter:"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    * `list`: lists all tasks stored in Duke."},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    * `todo HW assignment`: records a new task \"HW assignment\"."},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    * `done 1`: marks the first task in the list as done."},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    * `delete 1`: removes the first task in the list."},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    * `bye`: exits the application."},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"7. Refer to the Features below for details of each command."},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"## Features"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"Duke supports 3 types of tasks:"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"1. Todo `T` - a basic task."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"2. Deadline `D` - a task with a \"by\" description (DateTime supported)."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"3. Event `E` - a task with a \"at\" description (DateTime supported)."},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"### `help` - View help"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"Displays the list of commands and their description."},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"Format: `help`"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"### `list` - List all tasks"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"Lists all recorded tasks in Duke."},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"Format: `list`"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"\t 1.[D][X] math hw (by: Feb 27, 2021 23:59)"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] calculus qns (by: Mar 01, 2021 23:59)"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] goodwood show (at: Feb 28, 2021 09:30)"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"\t 4.[T][ ] complete GE mod work"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"### `todo` - Add a todo task"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"Adds a todo task to record."},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"Format: `todo \u003cdescription\u003e`"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"Sample command: `todo complete GE mod work`"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"### `deadline` - Add a deadline task"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"Adds a deadline task to record."},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"Format: `deadline \u003cdescription\u003e /by \u003cdatetime\u003e`"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"Note: `\u003cdatetime\u003e` not required to be a DateTime. A meaningful string is good enough."},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"Sample command 1: `deadline calculus qns /by 1/3/2021 23:59`"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"Sample command 2: `deadline calculus qns /by next Sunday`"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"deadline Homework questions /by 1/3/2021"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"\t Got it. I\u0027ve added this task:"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"\t   [D][ ] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"\t Now you have 5 tasks in the list."},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"Note: If time is not specified with the date,"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"Duke will assume the time to be the start of the day. This is similar for the `event` command."},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"### `event` - Add an event task"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"Adds an event task to record."},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"Format: `event \u003cdescription\u003e /at \u003cdatetime\u003e`"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"Note: `\u003cdatetime\u003e` not required to be a DateTime. A meaningful string is good enough."},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"Sample command 1: `event goodwood show /at 28.02.2021 0930`"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"Sample command 2: `event goodwood show /at tomorrow (Sunday)`"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"### `done` - Mark a task as done"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"Marks a task as done based on its task number in the list."},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"done 5"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"\t   [D][X] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"### `delete` - Delete a task"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"Deletes a task record based on its task number in the list."},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"delete 5"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"\t Noted. I\u0027ve removed this task:"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"\t   [D][X] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"\t Now you have 4 tasks in the list."},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"### `find` - Find tasks with a matching keyword"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"Find tasks with a specified keyword."},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"\t Here are the tasks in your list:"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"\t 1.[T][X] borrow book"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] return book (by: Sunday)"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"\t 4.[E][ ] Arts festival (at: May 03, 2021 18:00)"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"find book"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"\t Here are the task(s) in the list that match the keyword:"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"\t 1.[T][X] borrow book"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] return book (by: Sunday)"},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"### `date` - Find deadline and event tasks by date"},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"Search for deadline or event tasks that have a same specified date."},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"Format: `date \u003cdate\u003e`"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"Note: Date format if `\u003cdate\u003e` must be specified properly."},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"* Supported date formats are:"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"    * `DDMMYYYY`"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"    * `D.M.YYYY`"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"    * `D-M-YYYY`"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"    * `D/M/YYYY`"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"    * `YYYY.M.D`"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"    * `YYYY-M-D`"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"    * `YYYY/M/D`"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"\t Here are the tasks in your list:"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"\t 1.[E][ ] 5th project meeting (at: Mar 01, 2021 16:00)"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"\t 2.[E][X] HW briefing (at: Feb 28, 2021 00:00)"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] Test briefing (at: Mar 01, 2021 18:00)"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"\t 4.[D][ ] iP submission (by: Mar 05, 2021 23:59)"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"\t 5.[D][ ] HW submission (by: Mar 05, 2021 23:59)"},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"date 5/3/2021"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"\t Found 2 Deadline(s) and 0 Event(s) on the Mar 05, 2021."},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"\t Deadline(s):"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"\t 1.[D][ ] iP submission (by: Mar 05, 2021 23:59)"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] HW submission (by: Mar 05, 2021 23:59)"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"### `bye` - Exit the program"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"Exits the program."},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"Format: `bye`"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"## File storage"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"Duke stores the task list data to file."},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"Each time a task is added or modified, Duke writes to file."},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"The data file is located at `./data/duke.txt` i.e. relative to your current working directory."},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"If directory/file does not exist, duke attempts to create it."},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"An error will be printed if file operations fail."},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"On Duke\u0027s start-up, Duke will attempt to retrieve task data from the file."},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"## Command summary"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"| Command | Format |"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"| --------- | ---------------------------------------------- |"},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"| help | `help` |"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"| list | `list` |"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"| todo | `todo \u003cdescription\u003e` |"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"| deadline | `deadline \u003cdescription\u003e /by \u003cdatetime\u003e` |"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"| event | `event \u003cdescription\u003e /at \u003cdatetime\u003e` |"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"| done | `done \u003ctask number\u003e` |"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":"| delete | `delete \u003ctask number\u003e` |"},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"| find | `find \u003ckeyword\u003e` |"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"| date | `date \u003cdate\u003e` |"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"| bye | `bye` |"}],"authorContributionMap":{"marklowsk":202}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"Duke is a simple desktop app for managing tasks."},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"Instead of a Graphical User Interface (GUI), Duke is purely Command-Line Interface (CLI)."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"## Quick Start"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"1. Duke requires Java 11 or above to run. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"2. Download the latest `Duke.jar` file from [here]."},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"3. Copy the jar file to a folder where you want to run Duke."},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"4. Open your terminal emulator or command prompt and change your working directory to that folder."},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"5. You can run Duke by entering `java -jar Duke.jar`."},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"6. Once running, you can start entering commands to Duke."},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"   Enter `help` to display the list of commands."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"   Some basic commands you can enter:"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"   * `list`: lists all tasks stored in Duke."},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"   * `todo HW assignment`: records a new task \"HW assignment\"."},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"   * `done 1`: marks the first task in the list as done."},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"   * `delete 1`: removes the first task in the list."},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"   * `bye`: exits the application."},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"7. Refer to the Features below for details of each command."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"Duke supports 3 types of tasks:"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"1. Todo `T` - a basic task."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"2. Deadline `D` - a task with a \"by\" description (DateTime supported)."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"3. Event `E` - a task with a \"at\" description (DateTime supported)."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"### `help` - View help"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"Displays the list of commands and their description."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"Format: `help`"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"### `list` - List all tasks"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"Lists all recorded tasks in Duke."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"Format: `list`"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"\t 1.[D][X] math hw (by: Feb 27, 2021 23:59)"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] calculus qns (by: Mar 01, 2021 23:59)"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] goodwood show (at: Feb 28, 2021 09:30)"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"\t 4.[T][ ] complete GE mod work"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"### `todo` - Add a todo task"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"Adds a todo task to record."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"Format: `todo \u003cdescription\u003e`"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"Sample command: `todo complete GE mod work`"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"### `deadline` - Add a deadline task"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"Adds a deadline task to record."},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"Format: `deadline \u003cdescription\u003e /by \u003cdatetime\u003e`"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"Note: `\u003cdatetime\u003e` not required to be a DateTime. A meaningful string is good enough."},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"Sample command 1: `deadline calculus qns /by 1/3/2021 23:59`"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"Sample command 2: `deadline calculus qns /by next Sunday`"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"deadline Homework questions /by 1/3/2021"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"\t Got it. I\u0027ve added this task:"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"\t   [D][ ] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"\t Now you have 5 tasks in the list."},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"Note: If time is not specified with the date,"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"Duke will assume the time to be the start of the day. This is similar for the `event` command."},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"### `event` - Add an event task"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"Adds an event task to record."},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"Format: `event \u003cdescription\u003e /at \u003cdatetime\u003e`"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"Note: `\u003cdatetime\u003e` not required to be a DateTime. A meaningful string is good enough."},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"Sample command 1: `event goodwood show /at 28.02.2021 0930`"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"Sample command 2: `event goodwood show /at tomorrow (Sunday)`"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"### `done` - Mark a task as done"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"Marks a task as done based on its task number in the list."},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"done 5"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"\t   [D][X] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"### `delete` - Delete a task"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"Deletes a task record based on its task number in the list."},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"Sample output:"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"delete 5"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"\t Noted. I\u0027ve removed this task:"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"\t   [D][X] Homework questions (by: Mar 01, 2021 00:00)"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"\t Now you have 4 tasks in the list."},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"### `find` - Find tasks with a matching keyword"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"Find tasks with a specified keyword."},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"\t Here are the tasks in your list:"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"\t 1.[T][X] borrow book"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] return book (by: Sunday)"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"\t 4.[E][ ] Arts festival (at: May 03, 2021 18:00)"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"find book"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"\t Here are the task(s) in the list that match the keyword:"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"\t 1.[T][X] borrow book"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] return book (by: Sunday)"},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"### `date` - Find deadline and event tasks by date"},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"Search for deadline or event tasks that have a same specified date."},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"Format: `date \u003cdate\u003e`"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"Note: Date format if `\u003cdate\u003e` must be specified properly."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"* Supported date formats are:"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"  * `DDMMYYYY`"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"  * `D.M.YYYY`"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"  * `D-M-YYYY`"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"  * `D/M/YYYY`"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"  * `YYYY.M.D`"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"  * `YYYY-M-D`"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"  * `YYYY/M/D`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"\t Here are the tasks in your list:"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"\t 1.[E][ ] 5th project meeting (at: Mar 01, 2021 16:00)"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"\t 2.[E][X] HW briefing (at: Feb 28, 2021 00:00)"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"\t 3.[E][ ] Test briefing (at: Mar 01, 2021 18:00)"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"\t 4.[D][ ] iP submission (by: Mar 05, 2021 23:59)"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"\t 5.[D][ ] HW submission (by: Mar 05, 2021 23:59)"},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"date 5/3/2021"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"\t Found 2 Deadline(s) and 0 Event(s) on the Mar 05, 2021."},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"\t Deadline(s):"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"\t 1.[D][ ] iP submission (by: Mar 05, 2021 23:59)"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"\t 2.[D][ ] HW submission (by: Mar 05, 2021 23:59)"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"\t______________________________________________________________________"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"```"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"### `bye` - Exit the program"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"Exits the program."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"Format: `bye`"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"## File storage"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"Duke stores the task list data to file."},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"Each time a task is added or modified, Duke writes to file."},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"The data file is located at `./data/duke.txt` i.e. relative to your current working directory."},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"If directory/file does not exist, duke attempts to create it."},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"An error will be printed if file operations fail."},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"On Duke\u0027s start-up, Duke will attempt to retrieve task data from the file."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"## Command summary"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"| Command | Format |"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"| --------- | ---------------------------------------------- |"},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"| help | `help` |"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"| list | `list` |"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"| todo | `todo \u003cdescription\u003e` |"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"| deadline | `deadline \u003cdescription\u003e /by \u003cdatetime\u003e` |"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"| event | `event \u003cdescription\u003e /at \u003cdatetime\u003e` |"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"| done | `done \u003ctask number\u003e` |"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":"| delete | `delete \u003ctask number\u003e` |"},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"| find | `find \u003ckeyword\u003e` |"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"| date | `date \u003cdate\u003e` |"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"| bye | `bye` |"}],"authorContributionMap":{"marklowsk":183,"-":19}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.commands.CommandParser;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.commands.Command;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_INVALID_COMMAND;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    private TextUI ui;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public Duke() {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        storage \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        tasks \u003d new TaskList(storage.retrieveTasksFromFile());"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        ui \u003d new TextUI();"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public void run() {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        ui.printWelcomeMessage();"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        boolean isExit \u003d false;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        while (!isExit) {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"                String userInput \u003d ui.getUserInput();"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"                Command c \u003d CommandParser.parse(userInput);"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            } catch (InvalidCommandException e) {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"                // Invalid command, reflect error to user."},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"                ui.printError(MESSAGE_ERROR_INVALID_COMMAND);"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    public static void main(String[] args) {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        new Duke().run();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marklowsk":39,"-":3}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"public class ByeCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public static final String BYE_WORD \u003d \"bye\";"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public ByeCommand(String commandArgs) throws InvalidCommandException {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        if (commandArgs.length() \u003e 0) {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"            // This command is not supposed to have arguments."},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"            throw new InvalidCommandException();"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        isExit \u003d true;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        ui.printStatements(EXIT_MESSAGE);"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":24}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    protected boolean isExit;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public abstract void execute(TaskList tasks, TextUI ui, Storage storage);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public Command() {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"        isExit \u003d false;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"        return isExit;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":18}},{"path":"src/main/java/duke/commands/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"public class CommandParser {"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    private static final int COMMAND_WORD_INDEX \u003d 0;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    private static final int COMMAND_ARGUMENT_INDEX \u003d 1;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    private static final int PARSE_COMMAND_SIZE \u003d 2;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"     * Parses the user input into its command word and argument (if exists),"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"     * and creates and returns a Command object with its specified arguments."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"     * If the command word is invalid, throw InvalidCommandException."},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"     * @param userInput input from the user."},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"     * @return a Command object to be executed by caller."},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidCommandException If command word does not exist."},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    public static Command parse(String userInput) throws InvalidCommandException {"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        final String[] commandAndArgs \u003d userInput.trim().split(\"\\\\s+\", PARSE_COMMAND_SIZE);"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        String commandName \u003d commandAndArgs[COMMAND_WORD_INDEX];"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        String commandArgs \u003d (commandAndArgs.length \u003d\u003d PARSE_COMMAND_SIZE)"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"                             ? commandAndArgs[COMMAND_ARGUMENT_INDEX]"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"                             : \"\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        switch (commandName) {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"        case ListCommand.LIST_WORD:"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"            return new ListCommand(commandArgs);"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"        case TodoCommand.TODO_WORD:"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"            return new TodoCommand(commandArgs);"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        case DeadlineCommand.DEADLINE_WORD:"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            return new DeadlineCommand(commandArgs);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"        case EventCommand.EVENT_WORD:"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"            return new EventCommand(commandArgs);"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"        case DoneCommand.DONE_WORD:"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            return new DoneCommand(commandArgs);"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        case DeleteCommand.DELETE_WORD:"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            return new DeleteCommand(commandArgs);"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        case FindCommand.FIND_WORD:"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"            return new FindCommand(commandArgs);"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        case DateCommand.DATE_WORD:"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"            return new DateCommand(commandArgs);"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        case HelpCommand.HELP_WORD:"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"            return new HelpCommand(commandArgs);"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        case ByeCommand.BYE_WORD:"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            return new ByeCommand(commandArgs);"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"            throw new InvalidCommandException();"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":50}},{"path":"src/main/java/duke/commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.isArgumentValueEmpty;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseArgument;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.parseDate;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_MISSING_DATE;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_INVALID_DATE;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"public class DateCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public static final String DATE_WORD \u003d \"date\";"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    public DateCommand(String commandArgs) {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     * Searches for the matching tasks date in TaskList object and prints"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * them out."},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     * Fails if dateInput is not a parsable into a LocalDateTime."},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"     * @see #validateDateArguments(String)"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"     * @see TaskList#printTasksByDate(LocalDateTime, TextUI)"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    private void searchDate(TaskList tasks, TextUI ui) {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            String dateInput \u003d validateDateArguments(commandArgs);"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            LocalDateTime date \u003d parseDate(dateInput);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"            if (date !\u003d null) {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"                tasks.printTasksByDate(date, ui);"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"                throw new DukeException(MESSAGE_ERROR_INVALID_DATE);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            // dateInput is not a parsable, reflect error to user."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"     * Extracts the dateInput value and validates if it is not empty."},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"     * Returns the string containing the dateInput."},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"     * Throws an exception if the argument value is missing."},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a string containing the command\u0027s arguments."},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"     * @return a string containing the dateInput parsed from the commandArgs."},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If the argument is empty."},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"    private String validateDateArguments(String commandArgs) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        String dateInput \u003d parseArgument(commandArgs, null, null);"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(dateInput)) {"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_MISSING_DATE);"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"        return dateInput;"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"        searchDate(tasks, ui);"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":71}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.isArgumentValueEmpty;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseArgument;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_EMPTY_DEADLINE_BY;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_ERROR_EMPTY_DESCRIPTION;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    public static final String DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public static final String DEADLINE_BY_TOKEN \u003d \"/by\";"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    private static final int DESCRIPTION_INDEX \u003d 0;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    private static final int BY_INDEX \u003d 1;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    public DeadlineCommand(String commandArgs) {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * Records a new Deadline task into the TaskList object."},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and deadline-by is in the commandArgs string."},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid and an error message is printed."},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"     * @see #validateDeadlineArguments(String)"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    private void recordDeadline(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            String[] deadlineArgValues \u003d validateDeadlineArguments(commandArgs);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"            Deadline deadline \u003d new Deadline("},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"                    deadlineArgValues[DESCRIPTION_INDEX],"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"                    deadlineArgValues[BY_INDEX]);"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"            tasks.recordTask(deadline, ui, storage);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"            // An argument value is missing, reflect error to user."},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"     * Validates each argument for the task description and deadline-by."},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"     * Returns the extracted argument values in an array."},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"     * Throws an exception if there are missing argument values."},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a string containing the command\u0027s arguments."},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"     * @return an array of size 2; first element is the task description"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"     *         and second element is the deadline-by string."},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If any of the arguments is empty."},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"    private String[] validateDeadlineArguments(String commandArgs) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null, DEADLINE_BY_TOKEN);"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        String deadlineBy \u003d parseArgument(commandArgs, DEADLINE_BY_TOKEN, null);"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(SF_ERROR_EMPTY_DESCRIPTION, \"deadline\"));"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(deadlineBy)) {"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_EMPTY_DEADLINE_BY);"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"        return new String[] {taskDescription, deadlineBy};"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"        recordDeadline(tasks, ui, storage);"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":75}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseNumberFromArgument;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_NOT_A_TASK_NUMBER;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public static final String DELETE_WORD \u003d \"delete\";"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public DeleteCommand(String commandArgs) {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"     * Deletes a task from the TaskList object based on its task number."},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"     * Fails if the argument value is missing or is not a number."},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * @see TaskList#deleteTask(int, TextUI, Storage)"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    private void deleteTask(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            int taskNumber \u003d parseNumberFromArgument(commandArgs);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            tasks.deleteTask(taskNumber, ui, storage);"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            // taskNumber is an empty string, reflect error to user."},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            // taskNumber is not a parsable to an integer, reflect error to user."},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            ui.printError(MESSAGE_ERROR_NOT_A_TASK_NUMBER);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        deleteTask(tasks, ui, storage);"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":46}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseNumberFromArgument;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_NOT_A_TASK_NUMBER;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public static final String DONE_WORD \u003d \"done\";"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public DoneCommand(String commandArgs) {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"     * Marks a task as done in the TaskList object based on its task number."},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"     * Fails if the argument value is missing or is not a number."},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * @see TaskList#markTaskDone(int, TextUI, Storage)"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    private void markTaskDone(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            int taskNumber \u003d parseNumberFromArgument(commandArgs);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            tasks.markTaskDone(taskNumber, ui, storage);"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            // taskNumber is an empty string, reflect error to user."},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            // taskNumber is not a parsable to an integer, reflect error to user."},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            ui.printError(MESSAGE_ERROR_NOT_A_TASK_NUMBER);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        markTaskDone(tasks, ui, storage);"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":46}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Event;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.isArgumentValueEmpty;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseArgument;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_EMPTY_EVENT_AT;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_ERROR_EMPTY_DESCRIPTION;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"public class EventCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public static final String EVENT_WORD \u003d \"event\";"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public static final String EVENT_AT_TOKEN \u003d \"/at\";"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    private static final int DESCRIPTION_INDEX \u003d 0;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    private static final int BY_INDEX \u003d 1;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public EventCommand(String commandArgs) {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     * Records a new Deadline task into the TaskList object."},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and event-at is in the commandArgs string."},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid and an error message is printed."},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"     * @see #validateEventArguments(String)"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private void recordEvent(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"            String[] eventArgValues \u003d validateEventArguments(commandArgs);"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"            Event event \u003d new Event("},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"                    eventArgValues[DESCRIPTION_INDEX],"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"                    eventArgValues[BY_INDEX]);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"            tasks.recordTask(event, ui, storage);"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            // An argument value is missing, reflect error to user."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"     * Validates each argument for the task description and event-at."},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"     * Returns the extracted argument values in an array."},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"     * Throws an exception if there are missing argument values."},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a string containing the command\u0027s arguments."},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"     * @return an array of size 2; first element is the task description"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"     *         and second element is the event-at string."},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If any of the arguments is empty."},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"    private String[] validateEventArguments(String commandArgs) throws DukeException {"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null, EVENT_AT_TOKEN);"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"        String eventAt \u003d parseArgument(commandArgs, EVENT_AT_TOKEN, null);"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(SF_ERROR_EMPTY_DESCRIPTION, \"event\"));"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(eventAt)) {"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_EMPTY_EVENT_AT);"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"        return new String[] {taskDescription, eventAt};"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"        recordEvent(tasks, ui, storage);"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":76}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.isArgumentValueEmpty;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseArgument;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_MISSING_KEYWORD;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public static final String FIND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public FindCommand(String commandArgs) {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"     * Finds matches of the keyword in TaskList object and prints"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     * them out."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * Fails if keyword is an empty string."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     * @see #validateFindKeywordArguments(String)"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"     * @see TaskList#findKeyword(String, TextUI)"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    private void findKeyword(TaskList tasks, TextUI ui) {"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"            String keyword \u003d validateFindKeywordArguments(commandArgs).toLowerCase();"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            tasks.findKeyword(keyword, ui);"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            // keyword is a empty string, reflect error to user."},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * Extracts the keyword value and validates if it is not empty."},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * Returns the string containing the keyword."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * Throws an exception if the argument value is missing."},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a string containing the command\u0027s arguments."},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     * @return a string containing the keyword parsed from the commandArgs."},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If the argument is empty."},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"    private String validateFindKeywordArguments(String commandArgs) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"        String keyword \u003d parseArgument(commandArgs, null, null);"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(keyword)) {"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_MISSING_KEYWORD);"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        return keyword;"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        findKeyword(tasks, ui);"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":62}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.HELP_USAGE_MESSAGE;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public static final String HELP_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public HelpCommand(String commandArgs) throws InvalidCommandException {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        if (commandArgs.length() \u003e 0) {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"            // This command is not supposed to have arguments."},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"            throw new InvalidCommandException();"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        ui.printStatements(HELP_USAGE_MESSAGE);"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":24}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_LIST_TASK_NONE;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public static final String LIST_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public ListCommand(String commandArgs) throws InvalidCommandException {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        if (commandArgs.length() \u003e 0) {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"            // This command is not supposed to have arguments."},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"            throw new InvalidCommandException();"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"     * Lists all tasks in the TaskList object."},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private void listTasks(TaskList tasks, TextUI ui) {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"            ui.printStatements(MESSAGE_LIST_TASK_NONE);"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"            tasks.printAllTasks(ui);"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        listTasks(tasks, ui);"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":38}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Todo;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.isArgumentValueEmpty;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.commands.Utils.parseArgument;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_ERROR_EMPTY_DESCRIPTION;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public static final String TODO_WORD \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    private String commandArgs;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public TodoCommand(String commandArgs) {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     * Records a new Todo task into the TaskList object."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description is in the commandArgs string."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     * Fails if task description argument value is invalid."},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     * @param tasks the TaskList object that contains the list of tasks."},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"     * @see #validateTodoArguments(String)"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    private void recordTodo(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            String taskDescription \u003d validateTodoArguments(commandArgs);"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            tasks.recordTask(new Todo(taskDescription), ui, storage);"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            // taskDescription is a empty string, reflect error to user."},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * Validates the argument for the task description."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * Returns the extracted argument value as a string."},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * Throws an exception if the task description argument is missing."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a string containing the command\u0027s argument."},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"     * @return the task description"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If any of the arguments is empty."},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"    private String validateTodoArguments(String commandArgs) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null, null);"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(String.format(SF_ERROR_EMPTY_DESCRIPTION, \"todo\"));"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        return taskDescription;"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"    public void execute(TaskList tasks, TextUI ui, Storage storage) {"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        recordTodo(tasks, ui, storage);"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":63}},{"path":"src/main/java/duke/commands/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_EMPTY_TASK_NUMBER;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"public class Utils {"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"     * Parses an argument value after a given token."},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"     * Reads until a next token or the end of commandArgs string."},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"     * If token is null, read from the start of the commandArgs string."},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"     * If stopAtToken is null, read until the end of commandArgs string."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a full string of command arguments"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"     * @param token a string representing an option portion of an argument e.g. \"/by\""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"     * @param stopAtToken read until this token"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"     * @return the argument value after the given token"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    public static String parseArgument(String commandArgs, String token, String stopAtToken) {"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        int readFromIndex \u003d 0;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        int readUntilIndex \u003d commandArgs.length();"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"        boolean hasToken \u003d (token !\u003d null) \u0026\u0026 (commandArgs.contains(token));"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        boolean hasMissingToken \u003d (token !\u003d null) \u0026\u0026 !(commandArgs.contains(token));"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        if (hasToken) {"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"            readFromIndex \u003d commandArgs.indexOf(token) + token.length();"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        } else if (hasMissingToken) {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        if (stopAtToken !\u003d null) {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            int result \u003d commandArgs.indexOf(stopAtToken, readFromIndex);"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            if (result !\u003d -1) {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"                readUntilIndex \u003d result;"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"        return commandArgs.substring(readFromIndex, readUntilIndex).trim();"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"     * Returns an in parsed from the commandArgs string."},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a full string of command arguments."},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * @return an integer parsed from the commandArgs string."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * @throws DukeException If command argument value is empty."},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * @throws NumberFormatException If command argument value is not an integer."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"    public static int parseNumberFromArgument(String commandArgs) throws DukeException, NumberFormatException {"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"        String argValue \u003d parseArgument(commandArgs, null, null);"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        if (argValue \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_EMPTY_TASK_NUMBER);"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        int number \u003d Integer.parseInt(argValue);"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"        return number;"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"     * Checks if argument value string is empty."},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"     * @param argValue an argument value of a command argument"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"     * @return true if null or empty, false if not empty."},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"    public static boolean isArgumentValueEmpty(String argValue) {"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"        boolean isNull \u003d (argValue \u003d\u003d null);"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"        boolean isEmpty \u003d isNull || (argValue.length() \u003d\u003d 0);"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"        return isEmpty;"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":68}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Messages {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public static final String LOGO \u003d \" ____        _\\n\""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"            + \"What can I do for you?\";"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_LIST_TASK \u003d \"Here are the tasks in your list:\";"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_LIST_TASK_NONE \u003d \"No task in record.\";"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_TASK_ADDED \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_TASK_REMOVED \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_TASK_MARK_AS_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_TASK_MATCH_FOUND \u003d \"Here are the task(s) in the list that match the keyword:\";"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_NO_MATCH_FOUND \u003d \"There are no tasks that match your keyword.\";"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_PREFIX \u003d \"ERROR: \";"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_EMPTY_DEADLINE_BY \u003d \"The deadline\u0027s /by argument cannot be empty.\";"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_EMPTY_EVENT_AT \u003d \"The event\u0027s /at argument cannot be empty.\";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_WRITE_TO_FILE \u003d \"Unable to write to file. :\u003c(\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_MISSING_DATE \u003d \"Missing date, please specify a valid date.\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_INVALID_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_MISSING_KEYWORD \u003d \"Please enter a keyword to search.\";"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_INVALID_DATE \u003d \"Invalid date input. Please enter a valid date.\";"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_EMPTY_TASK_NUMBER \u003d \"Missing task number,\""},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"            + \"please specify a valid task number.\";"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_INVALID_TASK_NUMBER \u003d \"The task number you\u0027ve entered is invalid.\";"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    public static final String MESSAGE_ERROR_NOT_A_TASK_NUMBER \u003d"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            \"Please enter a valid positive integer for a task number.\";"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    // SF stands for StringFormat"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    public static final String SF_DOUBLE_SPACE_PREFIX \u003d \"  %s\";"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    public static final String SF_TASK_TOTAL_TASKS \u003d \"Now you have %d tasks in the list.\";"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    public static final String SF_FOUND_DATE_TASK \u003d \"Found %d Deadline(s) and %d Event(s) on the %s.\";"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    public static final String SF_ERROR_EMPTY_DESCRIPTION \u003d \"The description of a %s cannot be empty.\";"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    public static final String HELP_USAGE_MESSAGE \u003d \"List of commands and their description:\\n\\n\""},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"            + \"help      - displays the list of commands and their description.\\n\""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"            + \"list      - lists all the tasks (Todos, Deadlines \u0026 Events).\\n\""},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"            + \"todo \u003cdescription\u003e      - records the task name.\\n\""},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"            + \"deadline \u003cdescription\u003e /by \u003cdatetime\u003e  - records the task name and\\n\""},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"            + \"                                         datetime of deadline.\\n\""},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"            + \"event \u003cdescription\u003e /at \u003cdatetime\u003e     - records the task (event)\\n\""},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"            + \"                                         name and datetime of event.\\n\""},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"            + \"done \u003ctask number\u003e      - marks a task as done based on its task\\n\""},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"            + \"                          number in the list.\\n\""},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            + \"delete \u003ctask number\u003e    - deletes a task record based on its task\\n\""},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            + \"                          number in the list.\\n\""},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            + \"find \u003ckeyword\u003e          - find tasks with a specified keyword.\\n\""},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            + \"date \u003cdate\u003e             - search for deadlines or events that have a\\n\""},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            + \"                          date in the format of either:\\n\""},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"            + \"                          -  DDMMYYYY or DD/MM/YYYY or YYYY.MM.DD or\\n\""},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"            + \"                             DD-MM-YYYY.\\n\""},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"            + \"bye      - exits the application.\\n\";"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":58}},{"path":"src/main/java/duke/common/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"public class Utils {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public static final DateTimeFormatter OUTPUT_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd, yyyy HH:mm\");"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd, yyyy\");"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    private static final DateTimeFormatter[] POSSIBLE_DATETIME_FORMATS \u003d {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"ddMMyyyy HH:mm\"),"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d.M.yyyy HH:mm\"),"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d-M-yyyy HH:mm\"),"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\"),"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"ddMMyyyy HHmm\"),"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d.M.yyyy HHmm\"),"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\"),"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"),"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy.M.d HH:mm\"),"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-M-d HH:mm\"),"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy/M/d HH:mm\"),"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy.M.d HHmm\"),"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-M-d HHmm\"),"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy/M/d HHmm\")"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    private static final DateTimeFormatter[] POSSIBLE_DATE_FORMATS \u003d {"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.BASIC_ISO_DATE,"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"ddMMyyyy\"),"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d.M.yyyy\"),"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d-M-yyyy\"),"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy\"),"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy.M.d\"),"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-M-d\"),"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"            DateTimeFormatter.ofPattern(\"yyyy/M/d\")"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    };"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"     * Parses dateInput into a LocalDateTime object."},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * Returns null if dateInput cannot be parsed into a LocalDateTime object."},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * @param dateInput a string containing the date supplied from the user."},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * @return a LocalDateTime object or null if failed to parse dateInput."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     * @see #parseDateString(DateTimeFormatter, String)"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    public static LocalDateTime parseDate(String dateInput) {"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        for (DateTimeFormatter dtf : POSSIBLE_DATE_FORMATS) {"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            LocalDateTime dateTime \u003d parseDateString(dtf, dateInput);"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            if (dateTime !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"                return dateTime;"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        return null;"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"    private static LocalDateTime parseDateString(DateTimeFormatter format, String dateInput) {"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"            return LocalDate.parse(dateInput, format).atStartOfDay();"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"     * Parses dateTimeInput into a LocalDateTime object."},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"     * Returns null if dateTimeInput cannot be parsed into a LocalDateTime object."},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"     * @param dateTimeInput a string containing the date supplied from the user."},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"     * @return a LocalDateTime object or null if failed to parse dateTimeInput."},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"     * @see #parseDateTimeString(DateTimeFormatter, String)"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"     * @see #parseDate(String)"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"    public static LocalDateTime parseDateTime(String dateTimeInput) {"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"        for (DateTimeFormatter dtf : POSSIBLE_DATETIME_FORMATS) {"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"            LocalDateTime dateTime \u003d parseDateTimeString(dtf, dateTimeInput);"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"            if (dateTime !\u003d null) {"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"                return dateTime;"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"        return parseDate(dateTimeInput);"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"    private static LocalDateTime parseDateTimeString(DateTimeFormatter format, String dateTimeInput) {"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"            return LocalDateTime.parse(dateTimeInput, format);"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"     * Returns a datetime formatted string of the LocalDateTime object."},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"     * Example of string is \"Oct 22, 2019 18:00\"."},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"     * @param dateTime a LocalDateTime object."},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"     * @return a datetime string represented using OUTPUT_DATETIME_FORMAT"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"    public static String outputDateTime(LocalDateTime dateTime) {"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"        return dateTime.format(OUTPUT_DATETIME_FORMAT);"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":103}},{"path":"src/main/java/duke/data/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.exceptions;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":" * A general exception class for duke used to indicate input"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":" * errors made in Duke app. The method handling this exception"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":" * should print message error to the user."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"     * @param message a message to print regarding an error"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"     *                occurrence."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":17}},{"path":"src/main/java/duke/data/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.exceptions;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":" * This exception should only be raised when the user inputs"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":" * an invalid command. Handler must be able to handle this"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":" * exception gracefully."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":" * Example of invalid command:"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":" * - \"non-command word\""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":" * - list something"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":" * - bye bye"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":" */"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public InvalidCommandException() {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        super();"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public InvalidCommandException(String message) {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":20}},{"path":"src/main/java/duke/data/exceptions/InvalidFieldException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.exceptions;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":" * This exception is raised when a data field is invalid (i.e. empty)."},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":" * An example of a line containing data fields (stored in a file):"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":" * - \"D | 1 | math hw | 27-02-2021 00:50\""},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":" * - A data field is a fancy term for data segment separated by a delimiter."},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":" */"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"public class InvalidFieldException extends Exception {"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    public InvalidFieldException() {"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"        super();"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public InvalidFieldException(String message) {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":17}},{"path":"src/main/java/duke/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.parseDateTime;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.outputDateTime;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"public class Deadline extends TaskWithDateTime {"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    private static final String PRINT_STRING_FORMAT \u003d \"[D]%s (by: %s)\";"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    private static final char DEADLINE_SYMBOL \u003d \u0027D\u0027;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    private String by;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        this(description, false, by);"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public Deadline(String description, boolean isDone, String by) {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        dateTime \u003d parseDateTime(by);"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        hasDateTime \u003d dateTime !\u003d null;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public String getBy() {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        return by;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    public void setBy(String by) {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        if (hasDateTime) {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            return String.format(PRINT_STRING_FORMAT, super.toString(), outputDateTime(dateTime));"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            return String.format(PRINT_STRING_FORMAT, super.toString(), by);"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, DEADLINE_SYMBOL, super.toFileEntry(), by);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":44}},{"path":"src/main/java/duke/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.parseDateTime;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.outputDateTime;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"public class Event extends TaskWithDateTime {"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    private static final String PRINT_STRING_FORMAT \u003d \"[E]%s (at: %s)\";"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    private static final char EVENT_SYMBOL \u003d \u0027E\u0027;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    private String at;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public Event(String description, String at) {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        this(description, false, at);"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        dateTime \u003d parseDateTime(at);"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        hasDateTime \u003d dateTime !\u003d null;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public String getAt() {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        return at;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    public void setAt(String at) {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        if (hasDateTime) {"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"            return String.format(PRINT_STRING_FORMAT, super.toString(), outputDateTime(dateTime));"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"            return String.format(PRINT_STRING_FORMAT, super.toString(), at);"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, EVENT_SYMBOL, super.toFileEntry(), at);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":44}},{"path":"src/main/java/duke/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    private static final String PRINT_STRING_FORMAT \u003d \"[%s] %s\";"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"| %d | %s\";"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public Task(String description) {"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"        this(description, false);"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public String getDescription() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    public void setDescription(String description) {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    public boolean isDone() {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        return isDone;"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public void setDone(boolean done) {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        isDone \u003d done;"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"        return String.format(PRINT_STRING_FORMAT, getStatusIcon(), description);"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, isDone ? 1 : 0, description);"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":46}},{"path":"src/main/java/duke/data/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.ui.TextUI;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Utils.OUTPUT_DATE_FORMAT;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_LIST_TASK;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_TASK_ADDED;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_TASK_REMOVED;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_TASK_MARK_AS_DONE;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_TASK_MATCH_FOUND;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_WRITE_TO_FILE;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_INVALID_TASK_NUMBER;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_NO_MATCH_FOUND;"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_DOUBLE_SPACE_PREFIX;"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_TASK_TOTAL_TASKS;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.SF_FOUND_DATE_TASK;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"public class TaskList {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    public TaskList() {"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"     * Records the given task object into the task ArrayList."},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"     * Writes task object to file."},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"     * @param task task object to be recorded"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    public void recordTask(Task task, TextUI ui, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"        tasks.add(task);"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"        ui.printStatements(MESSAGE_TASK_ADDED,"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"                String.format(SF_DOUBLE_SPACE_PREFIX, task),"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"                String.format(SF_TASK_TOTAL_TASKS, tasks.size()));"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"            storage.writeTasksToFile(tasks);"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"            // Unable to write to file, reflect error to user."},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            ui.printError(MESSAGE_ERROR_WRITE_TO_FILE);"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"    private static void printTaskArray(ArrayList\u003cTask\u003e tasks, TextUI ui) {"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"            ui.printStatement(String.format(\"%d.%s\", i + 1, task));"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"     * Prints all tasks (tasks are numbered based on addition)."},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"     * @see #printTaskArray(ArrayList, TextUI)"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"    public void printAllTasks(TextUI ui) {"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"        ui.printHorizontalLine();"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"        ui.printStatement(MESSAGE_LIST_TASK);"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"        printTaskArray(tasks, ui);"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"        ui.printHorizontalLine();"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"     * Marks a task as done based on the order of the list."},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"     * Fails if taskNumber is invalid."},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"     * Writes changes to file."},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"     * @param taskNumber an integer representing a task number in the Task ArrayList."},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"     * @see #validateTaskNumber(int)"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"    public void markTaskDone(int taskNumber, TextUI ui, Storage storage) {"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"            validateTaskNumber(taskNumber);"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"            int taskIndex \u003d taskNumber - 1;"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"            tasks.get(taskIndex).setDone(true);"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"            ui.printStatements(MESSAGE_TASK_MARK_AS_DONE,"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":"                    String.format(SF_DOUBLE_SPACE_PREFIX, task));"},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"            storage.writeTasksToFile(tasks);"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"            // Invalid task number, reflect error to user."},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"            // Unable to write to file, reflect error to user."},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"            ui.printError(MESSAGE_ERROR_WRITE_TO_FILE);"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"     * Deletes a task from the Task ArrayList, based on the order of the list."},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"     * Fails if taskNumber is invalid."},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"     * Writes changes to file."},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"     * @param taskNumber an integer representing a task number in the Task ArrayList."},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"     * @param storage the Storage object that writes/retrieves to/from file."},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"     * @see #validateTaskNumber(int)"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"    public void deleteTask(int taskNumber, TextUI ui, Storage storage) {"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"            validateTaskNumber(taskNumber);"},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"            int taskIndex \u003d taskNumber - 1;"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks.remove(taskIndex);"},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"            ui.printStatements(MESSAGE_TASK_REMOVED,"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"                    String.format(SF_DOUBLE_SPACE_PREFIX, task),"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"                    String.format(SF_TASK_TOTAL_TASKS, tasks.size()));"},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":"            storage.writeTasksToFile(tasks);"},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"        } catch (DukeException e) {"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"            // Invalid task number, reflect error to user."},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"            // Unable to write to file, reflect error to user."},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"            ui.printError(MESSAGE_ERROR_WRITE_TO_FILE);"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"    private void validateTaskNumber(int taskNumber) throws DukeException {"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e tasks.size()) {"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"            // Prevents the throwing of IndexOutOfBoundsException in the caller."},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"            throw new DukeException(MESSAGE_ERROR_INVALID_TASK_NUMBER);"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"     * Prints all the task with datetime (Deadline and Events) which have the"},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"     * same date if compared. Only the Deadline/Events with proper datetime"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"     * input will be printed."},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"     * @param dateTime a LocalDateTime object to compare with."},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"     * @see #copyIfDateMatch(ArrayList, ArrayList, TaskWithDateTime, LocalDateTime)"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"     * @see #printMatchedDateTasks(ArrayList, ArrayList, TextUI, String)"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"    public void printTasksByDate(LocalDateTime dateTime, TextUI ui) {"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cTask\u003e deadlines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cTask\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"        for (Task t : tasks) {"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"            if (t instanceof TaskWithDateTime) {"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"                TaskWithDateTime dateTask \u003d (TaskWithDateTime) t;"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"                copyIfDateMatch(deadlines, events, dateTask, dateTime);"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"        printMatchedDateTasks(deadlines, events, ui, dateTime.format(OUTPUT_DATE_FORMAT));"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"     * Copies the task object into the relevant array if the date matches with"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"     * the given date from LocalDateTime object dateTime."},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"     * @param deadlines a Task ArrayList of Deadline objects."},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"     * @param events a Task ArrayList of Event objects."},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"     * @param dateTask a TaskWithDateTime object to be matched with."},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"     * @param dateTime a LocalDateTime object to match with dateTask\u0027s date."},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"    private void copyIfDateMatch(ArrayList\u003cTask\u003e deadlines, ArrayList\u003cTask\u003e events,"},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"                                 TaskWithDateTime dateTask, LocalDateTime dateTime) {"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"        boolean hasDate \u003d (dateTask.hasDateTime()) \u0026\u0026 (dateTask.getDateTime() !\u003d null);"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"        boolean dateMatched \u003d hasDate \u0026\u0026 dateTask.getDateTime()"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"                                                 .toLocalDate()"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"                                                 .isEqual(dateTime.toLocalDate());"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"        if (dateMatched) {"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"            if (dateTask instanceof Deadline) {"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"                deadlines.add(dateTask);"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"            } else if (dateTask instanceof Event) {"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"                events.add(dateTask);"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"    private void printMatchedDateTasks(ArrayList\u003cTask\u003e deadlines, ArrayList\u003cTask\u003e events,"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"                                       TextUI ui, String date) {"},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"        ui.printHorizontalLine();"},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"        ui.printStatement(String.format(SF_FOUND_DATE_TASK,"},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"                deadlines.size(), events.size(), date));"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"        if (deadlines.size() \u003e 0) {"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"            ui.printStatement(\"Deadline(s):\");"},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"            printTaskArray(deadlines, ui);"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"        if (events.size() \u003e 0) {"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"            ui.printStatement(\"Events(s):\");"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"            printTaskArray(events, ui);"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"        ui.printHorizontalLine();"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"     * Searches for tasks that matches the the keyword (non case-sensitive)."},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":"     * Prints out the tasks that has a match."},{"lineNumber":203,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"marklowsk"},"content":"     * @param keyword a string of a keyword to match with."},{"lineNumber":205,"author":{"gitId":"marklowsk"},"content":"     * @param ui the TextUI object that that engages user input and program output."},{"lineNumber":206,"author":{"gitId":"marklowsk"},"content":"     * @see #addIfKeywordMatched(String, Task, ArrayList)"},{"lineNumber":207,"author":{"gitId":"marklowsk"},"content":"     * @see #printMatchedTasks(ArrayList, TextUI)"},{"lineNumber":208,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"marklowsk"},"content":"    public void findKeyword(String keyword, TextUI ui) {"},{"lineNumber":210,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();"},{"lineNumber":211,"author":{"gitId":"marklowsk"},"content":"        for (Task t : tasks) {"},{"lineNumber":212,"author":{"gitId":"marklowsk"},"content":"            if (t.getDescription().toLowerCase().contains(keyword)) {"},{"lineNumber":213,"author":{"gitId":"marklowsk"},"content":"                matches.add(t);"},{"lineNumber":214,"author":{"gitId":"marklowsk"},"content":"            } else if (t instanceof TaskWithDateTime) {"},{"lineNumber":215,"author":{"gitId":"marklowsk"},"content":"                addIfKeywordMatched(keyword, t, matches);"},{"lineNumber":216,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"marklowsk"},"content":"        printMatchedTasks(matches, ui);"},{"lineNumber":219,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":221,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"marklowsk"},"content":"     * Searches for Deadline/Event that matches the the keyword (non case-sensitive)."},{"lineNumber":223,"author":{"gitId":"marklowsk"},"content":"     * Checks the \"by\" of the Deadline and \"at\" of the Event for any match."},{"lineNumber":224,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"marklowsk"},"content":"     * @param keyword a string of a keyword to match with."},{"lineNumber":226,"author":{"gitId":"marklowsk"},"content":"     * @param task the Task object to match with the keyword."},{"lineNumber":227,"author":{"gitId":"marklowsk"},"content":"     * @param matches a Task ArrayList of matched tasks."},{"lineNumber":228,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"marklowsk"},"content":"    private void addIfKeywordMatched(String keyword, Task task, ArrayList\u003cTask\u003e matches) {"},{"lineNumber":230,"author":{"gitId":"marklowsk"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":231,"author":{"gitId":"marklowsk"},"content":"            Deadline deadline \u003d (Deadline) task;"},{"lineNumber":232,"author":{"gitId":"marklowsk"},"content":"            if (deadline.getBy().toLowerCase().contains(keyword)) {"},{"lineNumber":233,"author":{"gitId":"marklowsk"},"content":"                matches.add(task);"},{"lineNumber":234,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"marklowsk"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":236,"author":{"gitId":"marklowsk"},"content":"            Event event \u003d (Event) task;"},{"lineNumber":237,"author":{"gitId":"marklowsk"},"content":"            if (event.getAt().toLowerCase().contains(keyword)) {"},{"lineNumber":238,"author":{"gitId":"marklowsk"},"content":"                matches.add(task);"},{"lineNumber":239,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":240,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":243,"author":{"gitId":"marklowsk"},"content":"    private void printMatchedTasks(ArrayList\u003cTask\u003e matches, TextUI ui) {"},{"lineNumber":244,"author":{"gitId":"marklowsk"},"content":"        if (matches.size() \u003e 0) {"},{"lineNumber":245,"author":{"gitId":"marklowsk"},"content":"            ui.printHorizontalLine();"},{"lineNumber":246,"author":{"gitId":"marklowsk"},"content":"            ui.printStatement(MESSAGE_TASK_MATCH_FOUND);"},{"lineNumber":247,"author":{"gitId":"marklowsk"},"content":"            printTaskArray(matches, ui);"},{"lineNumber":248,"author":{"gitId":"marklowsk"},"content":"            ui.printHorizontalLine();"},{"lineNumber":249,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":250,"author":{"gitId":"marklowsk"},"content":"            ui.printStatements(MESSAGE_NO_MATCH_FOUND);"},{"lineNumber":251,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":253,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":255,"author":{"gitId":"marklowsk"},"content":"    public boolean isEmpty() {"},{"lineNumber":256,"author":{"gitId":"marklowsk"},"content":"        return tasks.isEmpty();"},{"lineNumber":257,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":259,"author":{"gitId":"marklowsk"},"content":"    public int size() {"},{"lineNumber":260,"author":{"gitId":"marklowsk"},"content":"        return tasks.size();"},{"lineNumber":261,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":262}},{"path":"src/main/java/duke/data/task/TaskWithDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"public abstract class TaskWithDateTime extends Task {"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    protected static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%c %s | %s\";"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    protected boolean hasDateTime;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    public TaskWithDateTime(String description) {"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"        this(description, false);"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public TaskWithDateTime(String description, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"        hasDateTime \u003d false;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"        dateTime \u003d null;"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    public boolean hasDateTime() {"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"        return hasDateTime;"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    public void setHasDateTime(boolean hasDateTime) {"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"        this.hasDateTime \u003d hasDateTime;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        return dateTime;"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public void setDateTime(LocalDateTime dateTime) {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":35}},{"path":"src/main/java/duke/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.data.task;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    private static final String PRINT_STRING_FORMAT \u003d \"[T]%s\";"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"    private static final String FILE_OUTPUT_STRING_FORMAT \u003d \"%c %s\";"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    private static final char TODO_SYMBOL \u003d \u0027T\u0027;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"        this(description, false);"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"        return String.format(PRINT_STRING_FORMAT, super.toString());"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    public String toFileEntry() {"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"        return String.format(FILE_OUTPUT_STRING_FORMAT, TODO_SYMBOL, super.toFileEntry());"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":25}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import duke.data.exceptions.InvalidFieldException;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Event;"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Task;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import duke.data.task.Todo;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"import java.util.regex.Pattern;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    private static final Path DATA_DIRECTORY_PATH \u003d Paths.get(\".\", \"data\");"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    private static final Path DATA_FILE_PATH \u003d DATA_DIRECTORY_PATH.resolve(\"duke.txt\");"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private static final String TODO_REGEX_PATTERN \u003d \"[T]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s.+\";"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    private static final String DEADLINE_REGEX_PATTERN \u003d \"[D]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s.+\";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String EVENT_REGEX_PATTERN \u003d \"[E]\\\\s\\\\|\\\\s[01]\\\\s\\\\|\\\\s[^|]+\\\\s\\\\|\\\\s.+\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    private Path dataDirectoryPath;"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private Path dataFilePath;"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    public Storage() {"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        this(DATA_DIRECTORY_PATH, DATA_FILE_PATH);"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public Storage(Path dataDirectoryPath, Path dataFilePath) {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        this.dataDirectoryPath \u003d dataDirectoryPath;"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"        this.dataFilePath \u003d dataFilePath;"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private boolean directoryExists(Path path) {"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"        return Files.exists(path);"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"    private boolean fileExists(Path dirPath, Path filePath) {"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"        return directoryExists(dirPath) \u0026\u0026 Files.exists(filePath);"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     * Writes (Overwrites) all the tasks to file stored at dataFilePath."},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     * Creates a directory if directory does not exist."},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"     * @param tasks an ArrayList of Task objects"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"     * @throws Exception If file access/writing related exception occurs."},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"    public void writeTasksToFile(ArrayList\u003cTask\u003e tasks) throws Exception {"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"        if (!directoryExists(dataDirectoryPath)) {"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"            Files.createDirectories(dataDirectoryPath);"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"        FileWriter fw \u003d new FileWriter(dataFilePath.toString(), false);"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"        for (Task t : tasks) {"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"            fw.write(t.toFileEntry() + System.lineSeparator());"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"        fw.close();"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"     * Retrieve all tasks from file stored at dataFilePath."},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"     * Rejects any corrupted line in the file (line that does not"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"     * match regex pattern)."},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"     * @return a Task ArrayList retrieved from file."},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"     * @see #matchAndParseTask(String)"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"    public ArrayList\u003cTask\u003e retrieveTasksFromFile() {"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"        if (!fileExists(dataDirectoryPath, dataFilePath)) {"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"            File taskFile \u003d dataFilePath.toFile();"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"            Scanner sc \u003d new Scanner(taskFile);"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"                Task task \u003d matchAndParseTask(line);"},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"                if (task !\u003d null) {"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"                    tasks.add(task);"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"            // Scanner cannot open taskFile or if taskFile is missing."},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"            return tasks;"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"     * Extracts data from a data field based on the fieldIndex."},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"     * The line contains a set of data fields."},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"     * An example of a line is: \"D | 1 | math hw | 27-02-2021 00:50\""},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"     * Each data field is separated by the pipe symbol."},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"     * @param fieldIndex the index in the field to read from."},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"     * @param line a string containing a set of data fields."},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":"     * @return a string of data extracted from the data field."},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidFieldException If field is corrupted or missing."},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"    private String extractDataField(int fieldIndex, String line) throws InvalidFieldException {"},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"        String[] fields \u003d line.split(\"\\\\|\");"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"        if (fieldIndex \u003e\u003d 0 \u0026\u0026 fieldIndex \u003c fields.length) {"},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"            return fields[fieldIndex].trim();"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"        throw new InvalidFieldException();"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"     * Extracts the isDone boolean from the data field (index 1)."},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":"     * @param line a string containing a set of data fields."},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"     * @return the extracted boolean from the data field"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidFieldException If field is corrupted or missing."},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"    private boolean extractIsDone(String line) throws InvalidFieldException {"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"        return extractDataField(1, line).equals(\"1\");"},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"     * Extracts the information required for creating a Todo object."},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":"     * @param line a string containing a set of data fields."},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"     * @return the created Todo object"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidFieldException If field is corrupted or missing."},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"    private Todo extractTodo(String line) throws InvalidFieldException {"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"        return new Todo(description, isDone);"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"     * Extracts the information required for creating a Deadline object."},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":"     * @param line a string containing a set of data fields."},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"     * @return the created Deadline object"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidFieldException If field is corrupted or missing."},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"    private Deadline extractDeadline(String line) throws InvalidFieldException {"},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"        String by \u003d extractDataField(3, line);"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"        return new Deadline(description, isDone, by);"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"     * Extracts the information required for creating a Event object."},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"     * @param line a string containing a set of data fields."},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"     * @return the created Event object"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"     * @throws InvalidFieldException If field is corrupted or missing."},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"    private Event extractEvent(String line) throws InvalidFieldException {"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"        boolean isDone \u003d extractIsDone(line);"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"        String description \u003d extractDataField(2, line);"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"        String at \u003d extractDataField(3, line);"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"        return new Event(description, isDone, at);"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":"     * Performs a regex pattern match on the line consisting of"},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"     * data fields. Each correct match yields either a Todo object,"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"     * Deadline object or Event object. All are returned as a Task"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"     * object."},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":"     * Returns null if pattern does not match or data cannot be"},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"     * extracted."},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"     * @param line a string consisting of data fields"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"     * @return a Task object if matching and data extraction is"},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"     *         successful."},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"    public Task matchAndParseTask(String line) {"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"            if (Pattern.matches(TODO_REGEX_PATTERN, line)) {"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"                return extractTodo(line);"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"            } else if (Pattern.matches(DEADLINE_REGEX_PATTERN, line)) {"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":"                return extractDeadline(line);"},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"            } else if ((Pattern.matches(EVENT_REGEX_PATTERN, line))) {"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"                return extractEvent(line);"},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"        } catch (InvalidFieldException e) {"},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"            // line supplied is corrupted."},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"            return null;"},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"        return null;"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":191}},{"path":"src/main/java/duke/ui/TextUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"import java.io.InputStream;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_ERROR_PREFIX;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.LOGO;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"import static duke.common.Messages.MESSAGE_WELCOME;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"public class TextUI {"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    private static final String HORIZONTAL_LINE \u003d \"_\".repeat(70);"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    private final Scanner input;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    public TextUI() {"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"        this(System.in);"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public TextUI(InputStream in) {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        input \u003d new Scanner(in);"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"     * Reads user input per line."},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"     * Ignores lines that contains only whitespace."},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"     * @return trimmed line string entered by the user"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    public String getUserInput() {"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"        String userInput;"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"        do {"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"            userInput \u003d input.nextLine().trim();"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"        } while (userInput.isEmpty());"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        return userInput;"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    public void printHorizontalLine() {"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"        System.out.println(\"\\t\" + HORIZONTAL_LINE);"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"     * Prints a statement with a tab and spacing character."},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"     * Can print multiple lines if the statement string has line"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * breaks in it."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * @param statement a string containing sentence or paragraph"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     *                  of sentences."},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"    public void printStatement(String statement) {"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"        String[] fragments \u003d statement.split(\"\\\\R\");"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"        for (String f : fragments) {"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"            System.out.println(\"\\t \" + f);"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"     * Prints statements within horizontal line borders."},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"     * @param statement one or more string(s) containing sentence"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"     *                  or paragraph of sentences."},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"    public void printStatements(String... statement) {"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"        for (String s : statement) {"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"            printStatement(s);"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"     * Prints the error prefix and the subsequent error message."},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"     * @param errorDescription a description of an error or"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"     *                         message pertaining to something"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"     *                         that failed to be processed."},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"    public void printError(String errorDescription) {"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"        printStatement(String.format(\"%s %s\", MESSAGE_ERROR_PREFIX, errorDescription));"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"    public void printWelcomeMessage() {"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"        printStatements(LOGO, MESSAGE_WELCOME);"},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":85}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"blah"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"delete 4"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"todo"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"deadline"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"deadline /by"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"deadline  /by Sunday"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"deadline return book"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"deadline return book /by"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"deadline return book /by Sunday"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"event"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"event /by"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"event  /at Mon 2-4pm"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"event project meeting"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"event project meeting /at"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"todo write essay for GES"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"done done"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"done 0"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"done 5"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"done 1"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"done 4"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"done 3"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"done 2"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"done -1"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"done"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"delete 3"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"delete 2"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"event 5th project meeting /at 1/3/2021 16:00"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"event HW briefing /at 28/02/2021"},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"event Test briefing /at 1/3/2021 18:00"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"deadline iP submission /by 5/3/2021 2359"},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"deadline HW submission /by 5/3/2021 2359"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"date 11223344"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"date 01.03.1990"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"date 1.3.2021"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"find iP"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"find submission"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"find hw"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"delete 1"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"list me"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"bye me"},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"bye"}],"authorContributionMap":{"marklowsk":62}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"javac -cp ..\\src\\main\\java\\duke ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\commands\\*.java ..\\src\\main\\java\\duke\\common\\*.java ..\\src\\main\\java\\duke\\data\\exceptions\\*.java ..\\src\\main\\java\\duke\\data\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\ui\\*.java -Xlint:none -d ..\\bin"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"marklowsk":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"if ! javac -cp ..\\src\\main\\java\\duke ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\commands\\*.java ..\\src\\main\\java\\duke\\common\\*.java ..\\src\\main\\java\\duke\\data\\exceptions\\*.java ..\\src\\main\\java\\duke\\data\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\ui\\*.java -Xlint:none -d ..\\bin"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"marklowsk":2,"-":36}}]
