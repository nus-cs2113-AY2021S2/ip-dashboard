[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"### Feature 1 "},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"Description of feature."},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"### `Keyword` - Describe action"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"Describe action and its outcome."},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"`keyword (optional arguments)`"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"`outcome`"}],"authorContributionMap":{"marklowsk":20}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"    protected String by;"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public String getBy() {"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"        return by;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public void setBy(String by) {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s (by: %s)\", \u0027D\u0027, super.toString(), by);"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":21}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_LIST_WORD \u003d \"list\";"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_BYE_WORD \u003d \"bye\";"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_TODO_WORD \u003d \"todo\";"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_DEADLINE_BY_TOKEN \u003d \"/by\";"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_EVENT_WORD \u003d \"event\";"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_EVENT_AT_TOKEN \u003d \"/at\";"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"    private static final String COMMAND_DONE_WORD \u003d \"done\";"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"    private static final String DOUBLE_SPACE_PREFIX_STRING_FORMAT \u003d \"  %s\";"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    private static final String HORIZONTAL_LINE \u003d \"_\".repeat(60);"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":"            + \"What can I do for you?\";"},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"    private static final String LIST_TASK_MESSAGE \u003d \"Here are the tasks in your list:\";"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    private static final String LIST_NO_TASK_MESSAGE \u003d \"No task in record.\";"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_TOTAL_TASKS_STRING_FORMAT \u003d \"Now you have %d tasks in the list.\";"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"    private static final String TASK_MARK_AS_DONE_FORMAT \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_COMMAND_MESSAGE \u003d \"Invalid command.\";"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_DEADLINE_MESSAGE \u003d \"Invalid deadline.\";"},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_EVENT_MESSAGE \u003d \"Invalid event.\";"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_PREFIX_MESSAGE \u003d \"ERROR: \";"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_TASK_NAME_MESSAGE \u003d \"Invalid task name.\";"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    private static final String ERROR_INVALID_TASK_NUMBER_MESSAGE \u003d \"Invalid task number.\";"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":36,"author":{"gitId":"marklowsk"},"content":"    private static final int MAX_NUMBER_OF_TASKS \u003d 100;"},{"lineNumber":37,"author":{"gitId":"marklowsk"},"content":"    private static Task[] tasks \u003d new Task[MAX_NUMBER_OF_TASKS];"},{"lineNumber":38,"author":{"gitId":"marklowsk"},"content":"    private static int numberOfTasks \u003d 0;"},{"lineNumber":39,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":40,"author":{"gitId":"marklowsk"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":41,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":42,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"marklowsk"},"content":"     * Records a new Todo task into the global task array."},{"lineNumber":44,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description is given in {@code commandArgs}"},{"lineNumber":45,"author":{"gitId":"marklowsk"},"content":"     * Fails if task description argument value is invalid."},{"lineNumber":46,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description"},{"lineNumber":48,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"marklowsk"},"content":"    private static void recordTodo(String commandArgs) {"},{"lineNumber":50,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":51,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":52,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_TASK_NAME_MESSAGE);"},{"lineNumber":53,"author":{"gitId":"marklowsk"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"marklowsk"},"content":"        recordTask(new Todo(taskDescription));"},{"lineNumber":56,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":58,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"marklowsk"},"content":"     * Records a new Deadline task into the global task array."},{"lineNumber":60,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and deadline-by is given in {@code commandArgs}"},{"lineNumber":61,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid."},{"lineNumber":62,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description and deadline-by"},{"lineNumber":64,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"marklowsk"},"content":"    private static void recordDeadline(String commandArgs) {"},{"lineNumber":66,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":67,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":68,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_TASK_NAME_MESSAGE);"},{"lineNumber":69,"author":{"gitId":"marklowsk"},"content":"            return;"},{"lineNumber":70,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":72,"author":{"gitId":"marklowsk"},"content":"        String deadlineBy \u003d parseArgument(commandArgs, COMMAND_DEADLINE_BY_TOKEN);"},{"lineNumber":73,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(deadlineBy)) {"},{"lineNumber":74,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_DEADLINE_MESSAGE);"},{"lineNumber":75,"author":{"gitId":"marklowsk"},"content":"            return;"},{"lineNumber":76,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"marklowsk"},"content":"        recordTask(new Deadline(taskDescription, deadlineBy));"},{"lineNumber":78,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":80,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"marklowsk"},"content":"     * Records a new Event task into the global task array."},{"lineNumber":82,"author":{"gitId":"marklowsk"},"content":"     * Ensures the task description and event-at is given in {@code commandArgs}"},{"lineNumber":83,"author":{"gitId":"marklowsk"},"content":"     * Fails if any argument value is invalid."},{"lineNumber":84,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain task description and event-at"},{"lineNumber":86,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"marklowsk"},"content":"    private static void recordEvent(String commandArgs) {"},{"lineNumber":88,"author":{"gitId":"marklowsk"},"content":"        String taskDescription \u003d parseArgument(commandArgs, null);"},{"lineNumber":89,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(taskDescription)) {"},{"lineNumber":90,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_TASK_NAME_MESSAGE);"},{"lineNumber":91,"author":{"gitId":"marklowsk"},"content":"            return;"},{"lineNumber":92,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":94,"author":{"gitId":"marklowsk"},"content":"        String eventAt \u003d parseArgument(commandArgs, COMMAND_EVENT_AT_TOKEN);"},{"lineNumber":95,"author":{"gitId":"marklowsk"},"content":"        if (isArgumentValueEmpty(eventAt)) {"},{"lineNumber":96,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_EVENT_MESSAGE);"},{"lineNumber":97,"author":{"gitId":"marklowsk"},"content":"            return;"},{"lineNumber":98,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"marklowsk"},"content":"        recordTask(new Event(taskDescription, eventAt));"},{"lineNumber":100,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":102,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"marklowsk"},"content":"     * Records the given task into the global task array."},{"lineNumber":104,"author":{"gitId":"marklowsk"},"content":"     * Increments the global task count."},{"lineNumber":105,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"marklowsk"},"content":"     * @param task task object to be recorded"},{"lineNumber":107,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"marklowsk"},"content":"    private static void recordTask(Task task) {"},{"lineNumber":109,"author":{"gitId":"marklowsk"},"content":"        tasks[numberOfTasks] \u003d task;"},{"lineNumber":110,"author":{"gitId":"marklowsk"},"content":"        numberOfTasks++;"},{"lineNumber":111,"author":{"gitId":"marklowsk"},"content":"        printStatements(TASK_ADDED_MESSAGE,"},{"lineNumber":112,"author":{"gitId":"marklowsk"},"content":"                String.format(DOUBLE_SPACE_PREFIX_STRING_FORMAT, task),"},{"lineNumber":113,"author":{"gitId":"marklowsk"},"content":"                String.format(TASK_TOTAL_TASKS_STRING_FORMAT, numberOfTasks));"},{"lineNumber":114,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":116,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"marklowsk"},"content":"     * Prints all tasks (tasks are numbered based on addition)."},{"lineNumber":118,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"marklowsk"},"content":"    private static void printAllTasks() {"},{"lineNumber":120,"author":{"gitId":"marklowsk"},"content":"        printStatement(LIST_TASK_MESSAGE);"},{"lineNumber":121,"author":{"gitId":"marklowsk"},"content":"        for (int i \u003d 0; i \u003c numberOfTasks; i++) {"},{"lineNumber":122,"author":{"gitId":"marklowsk"},"content":"            Task task \u003d tasks[i];"},{"lineNumber":123,"author":{"gitId":"marklowsk"},"content":"            printStatement(String.format(\"%d.%s\", i + 1, task));"},{"lineNumber":124,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":127,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"marklowsk"},"content":"     * Lists all tasks."},{"lineNumber":129,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"marklowsk"},"content":"    private static void listTasks() {"},{"lineNumber":131,"author":{"gitId":"marklowsk"},"content":"        if (numberOfTasks \u003d\u003d 0) {"},{"lineNumber":132,"author":{"gitId":"marklowsk"},"content":"            printStatements(LIST_NO_TASK_MESSAGE);"},{"lineNumber":133,"author":{"gitId":"marklowsk"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"marklowsk"},"content":"            printHorizontalLine();"},{"lineNumber":135,"author":{"gitId":"marklowsk"},"content":"            printAllTasks();"},{"lineNumber":136,"author":{"gitId":"marklowsk"},"content":"            printHorizontalLine();"},{"lineNumber":137,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":140,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"marklowsk"},"content":"     * Marks a task as done based on the order of the list."},{"lineNumber":142,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs this should contain the task number to mark as done"},{"lineNumber":144,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"marklowsk"},"content":"    private static void markTaskDone(String commandArgs) {"},{"lineNumber":146,"author":{"gitId":"marklowsk"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"marklowsk"},"content":"            String argValue \u003d parseArgument(commandArgs, null);"},{"lineNumber":148,"author":{"gitId":"marklowsk"},"content":"            if (argValue \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitId":"marklowsk"},"content":"                throw new Exception(ERROR_INVALID_TASK_NUMBER_MESSAGE);"},{"lineNumber":150,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"marklowsk"},"content":"            int taskNumber \u003d Integer.parseInt(argValue);"},{"lineNumber":152,"author":{"gitId":"marklowsk"},"content":"            if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d numberOfTasks) {"},{"lineNumber":153,"author":{"gitId":"marklowsk"},"content":"                int taskIndex \u003d taskNumber - 1;"},{"lineNumber":154,"author":{"gitId":"marklowsk"},"content":"                tasks[taskIndex].setDone(true);"},{"lineNumber":155,"author":{"gitId":"marklowsk"},"content":"                Task task \u003d tasks[taskIndex];"},{"lineNumber":156,"author":{"gitId":"marklowsk"},"content":"                printStatements(TASK_MARK_AS_DONE_FORMAT,"},{"lineNumber":157,"author":{"gitId":"marklowsk"},"content":"                        String.format(DOUBLE_SPACE_PREFIX_STRING_FORMAT, task));"},{"lineNumber":158,"author":{"gitId":"marklowsk"},"content":"            } else {"},{"lineNumber":159,"author":{"gitId":"marklowsk"},"content":"                throw new Exception(ERROR_INVALID_TASK_NUMBER_MESSAGE);"},{"lineNumber":160,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"marklowsk"},"content":"        } catch (Exception e) {"},{"lineNumber":162,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_INVALID_TASK_NUMBER_MESSAGE);"},{"lineNumber":163,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":166,"author":{"gitId":"marklowsk"},"content":"    private static void printHorizontalLine() {"},{"lineNumber":167,"author":{"gitId":"marklowsk"},"content":"        System.out.println(\"\\t\" + HORIZONTAL_LINE);"},{"lineNumber":168,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":170,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"marklowsk"},"content":"     * Prints a statement with a tab and spacing character."},{"lineNumber":172,"author":{"gitId":"marklowsk"},"content":"     * Can print multiple lines if the statement string has line"},{"lineNumber":173,"author":{"gitId":"marklowsk"},"content":"     * breaks in it."},{"lineNumber":174,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"marklowsk"},"content":"    private static void printStatement(String statement) {"},{"lineNumber":176,"author":{"gitId":"marklowsk"},"content":"        String[] fragments \u003d statement.split(\"\\\\R\");"},{"lineNumber":177,"author":{"gitId":"marklowsk"},"content":"        for (String fragment : fragments) {"},{"lineNumber":178,"author":{"gitId":"marklowsk"},"content":"            System.out.println(\"\\t \" + fragment);"},{"lineNumber":179,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":182,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"marklowsk"},"content":"     * Prints statements within horizontal line borders."},{"lineNumber":184,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"marklowsk"},"content":"    private static void printStatements(String... statement) {"},{"lineNumber":186,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":187,"author":{"gitId":"marklowsk"},"content":"        for (String s : statement) {"},{"lineNumber":188,"author":{"gitId":"marklowsk"},"content":"            printStatement(s);"},{"lineNumber":189,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":191,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":193,"author":{"gitId":"marklowsk"},"content":"    private static void printError(String errorDescription) {"},{"lineNumber":194,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":195,"author":{"gitId":"marklowsk"},"content":"        printStatement(String.format(\"%s %s\", ERROR_PREFIX_MESSAGE, errorDescription));"},{"lineNumber":196,"author":{"gitId":"marklowsk"},"content":"        printHorizontalLine();"},{"lineNumber":197,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":199,"author":{"gitId":"marklowsk"},"content":"    private static void printWelcomeMessage() {"},{"lineNumber":200,"author":{"gitId":"marklowsk"},"content":"        printStatements(LOGO, WELCOME_MESSAGE);"},{"lineNumber":201,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":203,"author":{"gitId":"marklowsk"},"content":"    private static void exitProgram() {"},{"lineNumber":204,"author":{"gitId":"marklowsk"},"content":"        printStatements(EXIT_MESSAGE);"},{"lineNumber":205,"author":{"gitId":"marklowsk"},"content":"        System.exit(0);"},{"lineNumber":206,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":208,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"marklowsk"},"content":"     * Parses the user input and attempts to execute the command"},{"lineNumber":210,"author":{"gitId":"marklowsk"},"content":"     * with the arguments."},{"lineNumber":211,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"marklowsk"},"content":"    private static void executeCommand(String userInput) {"},{"lineNumber":213,"author":{"gitId":"marklowsk"},"content":"        String[] parsedCommand \u003d parseCommand(userInput);"},{"lineNumber":214,"author":{"gitId":"marklowsk"},"content":"        String commandName \u003d parsedCommand[0];"},{"lineNumber":215,"author":{"gitId":"marklowsk"},"content":"        String commandArgs \u003d parsedCommand[1];"},{"lineNumber":216,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":217,"author":{"gitId":"marklowsk"},"content":"        switch (commandName) {"},{"lineNumber":218,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_LIST_WORD:"},{"lineNumber":219,"author":{"gitId":"marklowsk"},"content":"            listTasks();"},{"lineNumber":220,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":221,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_TODO_WORD:"},{"lineNumber":222,"author":{"gitId":"marklowsk"},"content":"            recordTodo(commandArgs);"},{"lineNumber":223,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":224,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_DEADLINE_WORD:"},{"lineNumber":225,"author":{"gitId":"marklowsk"},"content":"            recordDeadline(commandArgs);"},{"lineNumber":226,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":227,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_EVENT_WORD:"},{"lineNumber":228,"author":{"gitId":"marklowsk"},"content":"            recordEvent(commandArgs);"},{"lineNumber":229,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":230,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_DONE_WORD:"},{"lineNumber":231,"author":{"gitId":"marklowsk"},"content":"            markTaskDone(commandArgs);"},{"lineNumber":232,"author":{"gitId":"marklowsk"},"content":"            break;"},{"lineNumber":233,"author":{"gitId":"marklowsk"},"content":"        case COMMAND_BYE_WORD:"},{"lineNumber":234,"author":{"gitId":"marklowsk"},"content":"            exitProgram();"},{"lineNumber":235,"author":{"gitId":"marklowsk"},"content":"        default:"},{"lineNumber":236,"author":{"gitId":"marklowsk"},"content":"            printError(ERROR_COMMAND_MESSAGE);"},{"lineNumber":237,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":240,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"marklowsk"},"content":"     * Splits the user input into a command word and command arguments string."},{"lineNumber":242,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":243,"author":{"gitId":"marklowsk"},"content":"     * @return an array of size 2; first element is the command word"},{"lineNumber":244,"author":{"gitId":"marklowsk"},"content":"     *         and second element is the arguments string"},{"lineNumber":245,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"marklowsk"},"content":"    private static String[] parseCommand(String userInput) {"},{"lineNumber":247,"author":{"gitId":"marklowsk"},"content":"        final String[] parsedCommand \u003d userInput.trim().split(\"\\\\s+\", 2);"},{"lineNumber":248,"author":{"gitId":"marklowsk"},"content":"        // parsedCommand\u0027s length after split will always be more than zero."},{"lineNumber":249,"author":{"gitId":"marklowsk"},"content":"        if (parsedCommand.length \u003d\u003d 1) {"},{"lineNumber":250,"author":{"gitId":"marklowsk"},"content":"            return new String[] {parsedCommand[0], \"\"};"},{"lineNumber":251,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"marklowsk"},"content":"        return parsedCommand;"},{"lineNumber":253,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":255,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"marklowsk"},"content":"     * Parses an argument value after a given token."},{"lineNumber":257,"author":{"gitId":"marklowsk"},"content":"     * Reads until a next token or the end of commandArgs string."},{"lineNumber":258,"author":{"gitId":"marklowsk"},"content":"     * If token is null, read from the start of the string until"},{"lineNumber":259,"author":{"gitId":"marklowsk"},"content":"     * a next token or the end of commandArgs string."},{"lineNumber":260,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":261,"author":{"gitId":"marklowsk"},"content":"     * @param commandArgs a full string of command arguments"},{"lineNumber":262,"author":{"gitId":"marklowsk"},"content":"     * @param token a string representing an option portion of an argument e.g. \"/by\""},{"lineNumber":263,"author":{"gitId":"marklowsk"},"content":"     * @return the argument value after the given token"},{"lineNumber":264,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":265,"author":{"gitId":"marklowsk"},"content":"    private static String parseArgument(String commandArgs, String token) {"},{"lineNumber":266,"author":{"gitId":"marklowsk"},"content":"        int readFromIndex \u003d 0;"},{"lineNumber":267,"author":{"gitId":"marklowsk"},"content":"        int readUntilIndex \u003d commandArgs.length();"},{"lineNumber":268,"author":{"gitId":"marklowsk"},"content":"        if (token !\u003d null) {"},{"lineNumber":269,"author":{"gitId":"marklowsk"},"content":"            if (commandArgs.contains(token)) {"},{"lineNumber":270,"author":{"gitId":"marklowsk"},"content":"                readFromIndex \u003d commandArgs.indexOf(token) + token.length();"},{"lineNumber":271,"author":{"gitId":"marklowsk"},"content":"            } else {"},{"lineNumber":272,"author":{"gitId":"marklowsk"},"content":"                return null;"},{"lineNumber":273,"author":{"gitId":"marklowsk"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"marklowsk"},"content":"        int result \u003d commandArgs.indexOf(\"/\", readFromIndex);"},{"lineNumber":276,"author":{"gitId":"marklowsk"},"content":"        if (result !\u003d -1) {"},{"lineNumber":277,"author":{"gitId":"marklowsk"},"content":"            readUntilIndex \u003d result;"},{"lineNumber":278,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"marklowsk"},"content":"        return commandArgs.substring(readFromIndex, readUntilIndex).trim();"},{"lineNumber":280,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":282,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":283,"author":{"gitId":"marklowsk"},"content":"     * Checks if argument value string is empty."},{"lineNumber":284,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":285,"author":{"gitId":"marklowsk"},"content":"     * @param argValue argument value of a command argument"},{"lineNumber":286,"author":{"gitId":"marklowsk"},"content":"     * @return true if empty, false if not empty"},{"lineNumber":287,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"marklowsk"},"content":"    private static boolean isArgumentValueEmpty(String argValue) {"},{"lineNumber":289,"author":{"gitId":"marklowsk"},"content":"        return argValue \u003d\u003d null || argValue.length() \u003d\u003d 0;"},{"lineNumber":290,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":292,"author":{"gitId":"marklowsk"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"marklowsk"},"content":"     * Reads user input per line."},{"lineNumber":294,"author":{"gitId":"marklowsk"},"content":"     * Ignores lines that contains only whitespace."},{"lineNumber":295,"author":{"gitId":"marklowsk"},"content":"     *"},{"lineNumber":296,"author":{"gitId":"marklowsk"},"content":"     * @return trimmed line string entered by the user"},{"lineNumber":297,"author":{"gitId":"marklowsk"},"content":"     */"},{"lineNumber":298,"author":{"gitId":"marklowsk"},"content":"    private static String getUserInput() {"},{"lineNumber":299,"author":{"gitId":"marklowsk"},"content":"        String userInput;"},{"lineNumber":300,"author":{"gitId":"marklowsk"},"content":"        do {"},{"lineNumber":301,"author":{"gitId":"marklowsk"},"content":"            userInput \u003d SCANNER.nextLine().trim();"},{"lineNumber":302,"author":{"gitId":"marklowsk"},"content":"        } while (userInput.isEmpty());"},{"lineNumber":303,"author":{"gitId":"marklowsk"},"content":"        return userInput;"},{"lineNumber":304,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":307,"author":{"gitId":"marklowsk"},"content":"        printWelcomeMessage();"},{"lineNumber":308,"author":{"gitId":"marklowsk"},"content":"        while (true) {"},{"lineNumber":309,"author":{"gitId":"marklowsk"},"content":"            String userCommand \u003d getUserInput();"},{"lineNumber":310,"author":{"gitId":"marklowsk"},"content":"            executeCommand(userCommand);"},{"lineNumber":311,"author":{"gitId":"marklowsk"},"content":"        }"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marklowsk":309,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"    protected String at;"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    public Event(String description, String at) {"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    public String getAt() {"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"        return at;"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    public void setAt(String at) {"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s (at: %s)\", \u0027E\u0027, super.toString(), at);"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":21}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"    protected String description;"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    protected boolean isDone;"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    public Task(String description) {"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"        this.isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"    public String getDescription() {"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"        return description;"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"    public void setDescription(String description) {"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":19,"author":{"gitId":"marklowsk"},"content":"    public boolean isDone() {"},{"lineNumber":20,"author":{"gitId":"marklowsk"},"content":"        return isDone;"},{"lineNumber":21,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":23,"author":{"gitId":"marklowsk"},"content":"    public void setDone(boolean done) {"},{"lineNumber":24,"author":{"gitId":"marklowsk"},"content":"        isDone \u003d done;"},{"lineNumber":25,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":27,"author":{"gitId":"marklowsk"},"content":"    public String getStatusIcon() {"},{"lineNumber":28,"author":{"gitId":"marklowsk"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":29,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":31,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":34,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":35}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"    public Todo(String description) {"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"        super(description);"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":""},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"        return String.format(\"[%c]%s\", \u0027T\u0027, super.toString());"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"}"}],"authorContributionMap":{"marklowsk":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":2,"author":{"gitId":"marklowsk"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"marklowsk"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"marklowsk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"marklowsk"},"content":"todo write essay for GES"},{"lineNumber":6,"author":{"gitId":"marklowsk"},"content":"done done"},{"lineNumber":7,"author":{"gitId":"marklowsk"},"content":"done 0"},{"lineNumber":8,"author":{"gitId":"marklowsk"},"content":"done 5"},{"lineNumber":9,"author":{"gitId":"marklowsk"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"marklowsk"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":12,"author":{"gitId":"marklowsk"},"content":"done 3"},{"lineNumber":13,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":14,"author":{"gitId":"marklowsk"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"marklowsk"},"content":"list"},{"lineNumber":16,"author":{"gitId":"marklowsk"},"content":"bye"}],"authorContributionMap":{"marklowsk":16}}]
