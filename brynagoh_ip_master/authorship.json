[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"import duke.Parser;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":"import duke.Storage;"},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import duke.commands.Command;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":" * Main class that will start the program."},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"    private Parser parser;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"    private Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"     * Instantiates Parser, Storage, TaskList and Ui objects."},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"     * Loads tasklist from storage if file is valid."},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"     * @param filePath Relative path from the current directory of tasklist in .txt format."},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"    public Duke(String filePath) {"},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"        this.tasks \u003d new TaskList(storage.loadTasklist());"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"     * Starts the entire Duke program."},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"        ui.displayWelcome();"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"        String input \u003d scanner.nextLine();"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"        while (!input.equals(\"bye\")) {"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"                Command command \u003d parser.parseInput(input);"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"                command.execute(tasks);"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":"                storage.saveTasklist(tasks.getTaskList());"},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"            } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":"                ui.displayError(e);"},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"            input \u003d scanner.nextLine();"},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"        ui.displayGoodbye();"},{"lineNumber":49,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"brynagoh"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"brynagoh":50,"-":4}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.commands.*;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import duke.exception.TaskType;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":" * Provides methods to parse user input and call appropriate methods."},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"    public Parser() {}"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"     * Extracts task details from user input."},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"     * @param input full user input for adding task, containing keyword."},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"     * @param keyword keyword identifying what taskType the user wants to add."},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"     * @return array of details, depending on the taskType. [description, (deadline/timeslot)]"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"    public static String[] extractDetailsFromInput(String input, String keyword) {"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"        String[] inputArray \u003d new String[2];"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"        String inputWithoutKeyword \u003d input.substring(keyword.length());"},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"        int numDetails \u003d 0;"},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"        switch(keyword) {"},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"        case \"deadline\":"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"            inputArray \u003d inputWithoutKeyword.split(\"/by\");"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"            numDetails +\u003d 2;"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"        case \"event\":"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"            inputArray \u003d inputWithoutKeyword.split(\"/at\");"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"            numDetails +\u003d 2;"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":"        case \"todo\":"},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"            inputArray[0] \u003d inputWithoutKeyword;"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":"            numDetails++;"},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":50,"author":{"gitId":"brynagoh"},"content":"        for (int i \u003d 0; i \u003c numDetails; i++) {"},{"lineNumber":51,"author":{"gitId":"brynagoh"},"content":"            inputArray[i] \u003d inputArray[i].strip();"},{"lineNumber":52,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"brynagoh"},"content":"        return inputArray;"},{"lineNumber":54,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":56,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"brynagoh"},"content":"     * Extracts indexes when multiple are given in user input."},{"lineNumber":58,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"brynagoh"},"content":"     * @param input Full user input with multiple indexes."},{"lineNumber":60,"author":{"gitId":"brynagoh"},"content":"     * @param keyword Command keyword found in input."},{"lineNumber":61,"author":{"gitId":"brynagoh"},"content":"     * @return ArrayList of indexes identified in input."},{"lineNumber":62,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"brynagoh"},"content":"    public static ArrayList\u003cInteger\u003e getInputIndexes(String input, String keyword) {"},{"lineNumber":64,"author":{"gitId":"brynagoh"},"content":"        String[] inputArray \u003d input.split(\" \");"},{"lineNumber":65,"author":{"gitId":"brynagoh"},"content":"        ArrayList\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":67,"author":{"gitId":"brynagoh"},"content":"        //completedIndex holds the index of valid integer(s) in inputArray (indicating index in tasklist)"},{"lineNumber":68,"author":{"gitId":"brynagoh"},"content":"        int completedIndex;"},{"lineNumber":69,"author":{"gitId":"brynagoh"},"content":"        for (String word: inputArray) {"},{"lineNumber":70,"author":{"gitId":"brynagoh"},"content":"            if (word.equals(keyword)) {"},{"lineNumber":71,"author":{"gitId":"brynagoh"},"content":"                continue;"},{"lineNumber":72,"author":{"gitId":"brynagoh"},"content":"            } else {"},{"lineNumber":73,"author":{"gitId":"brynagoh"},"content":"                completedIndex \u003d Integer.parseInt(word);"},{"lineNumber":74,"author":{"gitId":"brynagoh"},"content":"                //ensure that the index given is valid"},{"lineNumber":75,"author":{"gitId":"brynagoh"},"content":"                if (completedIndex \u003e 0 \u0026\u0026 completedIndex \u003c\u003d Task.taskCount){"},{"lineNumber":76,"author":{"gitId":"brynagoh"},"content":"//                    tasks.get(completedIndex - 1).markAsDone();"},{"lineNumber":77,"author":{"gitId":"brynagoh"},"content":"                    indexes.add(completedIndex-1);"},{"lineNumber":78,"author":{"gitId":"brynagoh"},"content":"                } else {"},{"lineNumber":79,"author":{"gitId":"brynagoh"},"content":"                    System.out.printf(\"Task %d does not exist! Enter \u0027list\u0027 to view tasklist :)\\n\", completedIndex);"},{"lineNumber":80,"author":{"gitId":"brynagoh"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":84,"author":{"gitId":"brynagoh"},"content":"        return indexes;"},{"lineNumber":85,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":87,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"brynagoh"},"content":"     * Parses user input by identifying command words."},{"lineNumber":89,"author":{"gitId":"brynagoh"},"content":"     * Processes input by identifying important details in input (e.g. description)."},{"lineNumber":90,"author":{"gitId":"brynagoh"},"content":"     * Returns specific new Command object depending on keyword identified (e.g. ListCommand, AddCommand)."},{"lineNumber":91,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"brynagoh"},"content":"     * @param input Full user input."},{"lineNumber":93,"author":{"gitId":"brynagoh"},"content":"     * @return new Command object."},{"lineNumber":94,"author":{"gitId":"brynagoh"},"content":"     * @throws DukeException If keyword is not identified/input is not in the right format"},{"lineNumber":95,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"brynagoh"},"content":"    public Command parseInput(String input) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"brynagoh"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":98,"author":{"gitId":"brynagoh"},"content":"            return new ListCommand();"},{"lineNumber":99,"author":{"gitId":"brynagoh"},"content":"        } else if (input.startsWith(\"done\")) {"},{"lineNumber":100,"author":{"gitId":"brynagoh"},"content":"            //this keeps track of indexes that user calls for actions on"},{"lineNumber":101,"author":{"gitId":"brynagoh"},"content":"            ArrayList\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitId":"brynagoh"},"content":"            indexes \u003d getInputIndexes(input, \"done\");"},{"lineNumber":103,"author":{"gitId":"brynagoh"},"content":"            return new MarkDoneCommand(indexes);"},{"lineNumber":104,"author":{"gitId":"brynagoh"},"content":"        } else if (input.startsWith(\"delete\")) {"},{"lineNumber":105,"author":{"gitId":"brynagoh"},"content":"            //this keeps track of indexes that user calls for actions on"},{"lineNumber":106,"author":{"gitId":"brynagoh"},"content":"            ArrayList\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitId":"brynagoh"},"content":"            indexes \u003d getInputIndexes(input, \"delete\");"},{"lineNumber":108,"author":{"gitId":"brynagoh"},"content":"            return new DeleteCommand(indexes);"},{"lineNumber":109,"author":{"gitId":"brynagoh"},"content":"        } else if (input.startsWith(\"find\")) {"},{"lineNumber":110,"author":{"gitId":"brynagoh"},"content":"            return new FindCommand(input.substring(4).strip());"},{"lineNumber":111,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"brynagoh"},"content":"            Task newTask \u003d parseNewTask(input);"},{"lineNumber":113,"author":{"gitId":"brynagoh"},"content":"            return new AddCommand(newTask);"},{"lineNumber":114,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":117,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"brynagoh"},"content":"     * Parses input to identify important Task details."},{"lineNumber":119,"author":{"gitId":"brynagoh"},"content":"     * If no valid keywords are found, INVALID DukeException will be thrown."},{"lineNumber":120,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"brynagoh"},"content":"     * @param input Full user input."},{"lineNumber":122,"author":{"gitId":"brynagoh"},"content":"     * @return new Task object, depending on keyword identified."},{"lineNumber":123,"author":{"gitId":"brynagoh"},"content":"     * @throws DukeException If input does not have any keyword/has keyword but incorrect format."},{"lineNumber":124,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"brynagoh"},"content":"    public Task parseNewTask(String input) throws DukeException {"},{"lineNumber":126,"author":{"gitId":"brynagoh"},"content":"        String[] inputArray;"},{"lineNumber":127,"author":{"gitId":"brynagoh"},"content":"        if (input.startsWith(\"deadline\")) {"},{"lineNumber":128,"author":{"gitId":"brynagoh"},"content":"            try {"},{"lineNumber":129,"author":{"gitId":"brynagoh"},"content":"                inputArray \u003d extractDetailsFromInput(input, \"deadline\");"},{"lineNumber":130,"author":{"gitId":"brynagoh"},"content":"                //parse for dates"},{"lineNumber":131,"author":{"gitId":"brynagoh"},"content":"                LocalDate deadline \u003d LocalDate.parse(inputArray[1]);"},{"lineNumber":132,"author":{"gitId":"brynagoh"},"content":"                return new Deadline(inputArray[0], deadline);//inputArray[1]);"},{"lineNumber":133,"author":{"gitId":"brynagoh"},"content":"            } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":134,"author":{"gitId":"brynagoh"},"content":"                throw new DukeException(TaskType.DEADLINE);"},{"lineNumber":135,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"brynagoh"},"content":"        } else if (input.startsWith(\"event\")) {"},{"lineNumber":137,"author":{"gitId":"brynagoh"},"content":"            try {"},{"lineNumber":138,"author":{"gitId":"brynagoh"},"content":"                inputArray \u003d extractDetailsFromInput(input, \"event\");"},{"lineNumber":139,"author":{"gitId":"brynagoh"},"content":"                return new Event(inputArray[0], inputArray[1]);"},{"lineNumber":140,"author":{"gitId":"brynagoh"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":141,"author":{"gitId":"brynagoh"},"content":"                throw new DukeException(TaskType.EVENT);"},{"lineNumber":142,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"brynagoh"},"content":"        } else if (input.startsWith(\"todo\")){"},{"lineNumber":144,"author":{"gitId":"brynagoh"},"content":"            try {"},{"lineNumber":145,"author":{"gitId":"brynagoh"},"content":"                inputArray \u003d extractDetailsFromInput(input, \"todo\");"},{"lineNumber":146,"author":{"gitId":"brynagoh"},"content":"                return new Todo(inputArray[0]);"},{"lineNumber":147,"author":{"gitId":"brynagoh"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":148,"author":{"gitId":"brynagoh"},"content":"                throw new DukeException(TaskType.TODO);"},{"lineNumber":149,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":151,"author":{"gitId":"brynagoh"},"content":"            throw new DukeException(TaskType.INVALID);"},{"lineNumber":152,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":155,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":156,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":156}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"import java.time.MonthDay;"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":" * Manages storage of data in a file at a defined filePath."},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"    String filePath;"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"     * Checks if filePath given leads to existing directories and files."},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"     * If the directory/file does not exist, new directories/files will be created."},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"     * @param filePath Relative path from current directory."},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"    public Storage(String filePath) {"},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"        String[] directories \u003d filePath.split(\"/\");"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"        // check if the directory and file exists"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"            //check all directories. (ignores file)"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"            String currentPath \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"            for (int i \u003d 0; i \u003c directories.length - 1; i++) {"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"                currentPath +\u003d directories[i] + \"/\";"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"                if (Files.notExists(Paths.get(currentPath))) {"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":"                    Files.createDirectory(Paths.get(currentPath));"},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"                }"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"            if (Files.notExists(Paths.get(filePath))) {"},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"                Files.createFile(Paths.get(filePath));"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"brynagoh"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Exception occurred when creating directory/file at given path! :(\");"},{"lineNumber":51,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":54,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"brynagoh"},"content":"     * Saves current tasklist at given filePath."},{"lineNumber":56,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"brynagoh"},"content":"     * @param tasks Current array of tasks, forming the tasklist."},{"lineNumber":58,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"brynagoh"},"content":"    public void saveTasklist(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":60,"author":{"gitId":"brynagoh"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"brynagoh"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":62,"author":{"gitId":"brynagoh"},"content":"            for (Task task : tasks) {"},{"lineNumber":63,"author":{"gitId":"brynagoh"},"content":"                fw.write(task.toString() + System.lineSeparator());"},{"lineNumber":64,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"brynagoh"},"content":"            fw.close();"},{"lineNumber":66,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"brynagoh"},"content":"        catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"brynagoh"},"content":"        System.out.println(\"Exception occurred when writing tasklist to file! :(\");"},{"lineNumber":69,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":71,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":73,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"brynagoh"},"content":"     * Returns an ArrayList of tasks, loaded from file at given filePath."},{"lineNumber":75,"author":{"gitId":"brynagoh"},"content":"     * If file at given filePath is empty, an empty ArrayList is returned."},{"lineNumber":76,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"brynagoh"},"content":"     * @return ArrayList of tasks loaded from filePath."},{"lineNumber":78,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"brynagoh"},"content":"    public ArrayList\u003cTask\u003e loadTasklist() {"},{"lineNumber":80,"author":{"gitId":"brynagoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"brynagoh"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"brynagoh"},"content":"            // check if the directory and file exists"},{"lineNumber":83,"author":{"gitId":"brynagoh"},"content":"            if (Files.exists(Paths.get(this.filePath))) {"},{"lineNumber":84,"author":{"gitId":"brynagoh"},"content":"                File f \u003d new File(filePath);"},{"lineNumber":85,"author":{"gitId":"brynagoh"},"content":"                Scanner scanner \u003d new Scanner(f);"},{"lineNumber":86,"author":{"gitId":"brynagoh"},"content":"                boolean isDone;"},{"lineNumber":87,"author":{"gitId":"brynagoh"},"content":"                while (scanner.hasNext()) {"},{"lineNumber":88,"author":{"gitId":"brynagoh"},"content":"                    String taskString \u003d scanner.nextLine();"},{"lineNumber":89,"author":{"gitId":"brynagoh"},"content":"                    if (taskString.contains(\"[X]\")) {"},{"lineNumber":90,"author":{"gitId":"brynagoh"},"content":"                        isDone \u003d true;"},{"lineNumber":91,"author":{"gitId":"brynagoh"},"content":"                    } else {"},{"lineNumber":92,"author":{"gitId":"brynagoh"},"content":"                        isDone \u003d false;"},{"lineNumber":93,"author":{"gitId":"brynagoh"},"content":"                    }"},{"lineNumber":94,"author":{"gitId":"brynagoh"},"content":"                    if (taskString.startsWith(\"[E]\")) {"},{"lineNumber":95,"author":{"gitId":"brynagoh"},"content":"                        String description \u003d taskString.substring(7, taskString.indexOf(\u0027(\u0027)-1);"},{"lineNumber":96,"author":{"gitId":"brynagoh"},"content":"                        String timing \u003d taskString.substring(taskString.indexOf(\u0027(\u0027) + 5, taskString.indexOf(\u0027)\u0027));"},{"lineNumber":97,"author":{"gitId":"brynagoh"},"content":"                        tasks.add(Task.taskCount, new Event(description, timing, isDone));"},{"lineNumber":98,"author":{"gitId":"brynagoh"},"content":"                    } else if (taskString.startsWith(\"[D]\")) {"},{"lineNumber":99,"author":{"gitId":"brynagoh"},"content":"                        String description \u003d taskString.substring(7, taskString.indexOf(\u0027(\u0027)-1);"},{"lineNumber":100,"author":{"gitId":"brynagoh"},"content":"                        String timing \u003d taskString.substring(taskString.indexOf(\u0027(\u0027) + 5, taskString.indexOf(\u0027)\u0027));"},{"lineNumber":101,"author":{"gitId":"brynagoh"},"content":"                        MonthDay monthDay \u003d MonthDay.parse(timing, DateTimeFormatter.ofPattern(\"d MMM YYYY\"));"},{"lineNumber":102,"author":{"gitId":"brynagoh"},"content":"                        LocalDate deadline \u003d monthDay.atYear(Integer.parseInt(timing.split(\" \")[2]));"},{"lineNumber":103,"author":{"gitId":"brynagoh"},"content":"                        tasks.add(Task.taskCount, new Deadline(description, deadline, isDone));"},{"lineNumber":104,"author":{"gitId":"brynagoh"},"content":"                    } else if (taskString.startsWith(\"[T]\")) {"},{"lineNumber":105,"author":{"gitId":"brynagoh"},"content":"                        String description \u003d taskString.substring(7);"},{"lineNumber":106,"author":{"gitId":"brynagoh"},"content":"                        tasks.add(Task.taskCount, new Todo(description, isDone));"},{"lineNumber":107,"author":{"gitId":"brynagoh"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":109,"author":{"gitId":"brynagoh"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"brynagoh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":112,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Tasklist file not found! :(\");"},{"lineNumber":113,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"brynagoh"},"content":"        return tasks;"},{"lineNumber":115,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":117,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":118,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":119,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":119}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" * Stores an array of tasks, provides methods to edit tasks in the tasklist."},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"     * Constructor for TaskList objects, can be initialised with existing array retrieved from Storage."},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"     * @param tasks Existing array of tasks, parsed from storage file."},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"        if (tasks.size() \u003e 0) {"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"            this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"            this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"        return tasks;"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"     * Prints out numbered tasks in the following format: [taskType][done/not done] description (at/by: deadline/timeslot)."},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"    public void listTasks(){"},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"        if (Task.taskCount \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"No tasks yet!\");"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"            for (int i \u003d 0; i \u003c Task.taskCount; i++) {"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"                System.out.printf(\"%d.%s\\n\", i+1, tasks.get(i).toString());"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":"     * Returns current number of tasks in the tasklist."},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"     * @return number of tasks."},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"    public int getTaskCount() {"},{"lineNumber":49,"author":{"gitId":"brynagoh"},"content":"        return Task.taskCount;"},{"lineNumber":50,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":52,"author":{"gitId":"brynagoh"},"content":"    public void printNumTasks() {"},{"lineNumber":53,"author":{"gitId":"brynagoh"},"content":"        if (getTaskCount() \u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"No tasks yet!\");"},{"lineNumber":55,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"You now have \" + getTaskCount() + \" tasks in your tasklist.\");"},{"lineNumber":57,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":60,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"brynagoh"},"content":"     * Deletes tasks given an ArrayList of task indexes."},{"lineNumber":62,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"brynagoh"},"content":"     * @param indexes ArrayList of indexes extracted from user input."},{"lineNumber":64,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"brynagoh"},"content":"    public void deleteTasks(ArrayList\u003cInteger\u003e indexes) {"},{"lineNumber":66,"author":{"gitId":"brynagoh"},"content":"        if (indexes.size() \u003d\u003d 0) {"},{"lineNumber":67,"author":{"gitId":"brynagoh"},"content":"            return;"},{"lineNumber":68,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"brynagoh"},"content":"        if (indexes.size() \u003e 1) {"},{"lineNumber":70,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Okay, I\u0027ve deleted these tasks:\");"},{"lineNumber":71,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Okay, I\u0027ve deleted this task:\");"},{"lineNumber":73,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"brynagoh"},"content":"        for (Integer index : indexes) {"},{"lineNumber":75,"author":{"gitId":"brynagoh"},"content":"            System.out.println(tasks.get(index).toString());"},{"lineNumber":76,"author":{"gitId":"brynagoh"},"content":"            Task.taskCount -\u003d 1;"},{"lineNumber":77,"author":{"gitId":"brynagoh"},"content":"            tasks.remove(index.intValue());"},{"lineNumber":78,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"brynagoh"},"content":"        printNumTasks();"},{"lineNumber":80,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":82,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"brynagoh"},"content":"     * Marks tasks at the given indexes as done."},{"lineNumber":84,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"brynagoh"},"content":"     * @param indexes ArrayList of indexes extracted from user input."},{"lineNumber":86,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"brynagoh"},"content":"    public void markTasksAsDone(ArrayList\u003cInteger\u003e indexes) {"},{"lineNumber":88,"author":{"gitId":"brynagoh"},"content":"        for (Integer index : indexes) {"},{"lineNumber":89,"author":{"gitId":"brynagoh"},"content":"            tasks.get(index).markAsDone();"},{"lineNumber":90,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":93,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"brynagoh"},"content":"     * Adds new task object to the TaskList."},{"lineNumber":95,"author":{"gitId":"brynagoh"},"content":"     * Prints the task added and the new number of tasks in the tasklist."},{"lineNumber":96,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"brynagoh"},"content":"     * @param newTask Instantiated task."},{"lineNumber":98,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"brynagoh"},"content":"    public void addTask(Task newTask) {"},{"lineNumber":100,"author":{"gitId":"brynagoh"},"content":"        tasks.add(Task.taskCount-1, newTask); //taskCount was incremented before adding to tasklist"},{"lineNumber":101,"author":{"gitId":"brynagoh"},"content":"        System.out.println(\"I have added this task:\" );"},{"lineNumber":102,"author":{"gitId":"brynagoh"},"content":"        System.out.println(tasks.get(Task.taskCount-1).toString());"},{"lineNumber":103,"author":{"gitId":"brynagoh"},"content":"        printNumTasks();"},{"lineNumber":104,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":105}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.exception.TaskType;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":" * Provides methods for general/repeating UI displays."},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    public Ui() {}"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"    public void displayWelcome() {"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"        System.out.println(\"Hello! I am\\n\" + logo);"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"        System.out.println(\"What can I do for you today?\");"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"    public void displayGoodbye() {"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"        System.out.println(\"Goodbye. See you again soon :)\");"},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"     * Prints appropriate error message depending on the TaskType causing the exception."},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"     * @param exception TaskType of exception is defined based on the input that caused the exception."},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"    public void displayError(DukeException e) {"},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"        TaskType taskType \u003d e.getTaskType();"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"        switch (taskType) {"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"        case DEADLINE:"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Please input deadline tasks in the correct format. (e.g deadline \u003ctask description\u003e /by YYYY-MM-DD)\");"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"        case EVENT:"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Please input event tasks in the correct format. (e.g. event \u003ctask description\u003e /at \u003ctiming\u003e)\");"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":"        case TODO:"},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Please input todo tasks in the correct format. (e.g. todo \u003ctask description\u003e)\");"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":"        case INVALID:"},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Please input a valid command! (e.g. deadline..., done..., list)\");"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":50}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":" * Adds new Task object to the TaskList"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"public class AddCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    Task newTask;"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    public AddCommand(Task newTask) {"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"        tasks.addTask(newTask);"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":19}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":" * Interface for all Commands."},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":" * Abstract method ensures that all classes implementing Command can be executed."},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"public interface Command {"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks);"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":13}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":" * Deletes tasks from the tasklist, based on their indexes."},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":" * To prevent deletion of one task affect the index of other tasks,"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":" * deletion occurs from the largest index to smallest index."},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    ArrayList\u003cInteger\u003e indexes;"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"    public DeleteCommand(ArrayList\u003cInteger\u003e indexes) {"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"        this.indexes \u003d indexes;"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"        //sort indexes in descending order so deletion will not affect index"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"        Collections.sort(indexes, Collections.reverseOrder());"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"        tasks.deleteTasks(indexes);"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":25}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"public class FindCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"    String keyword;"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"        if (tasks.getTaskCount() \u003d\u003d 0) {"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"            tasks.printNumTasks();"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"            return;"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"        int i \u003d 0;"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"        for (Task task : tasks.getTaskList()) {"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"            if (task.getDescription().contains(this.keyword)) {"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"                i++;"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"                if (i \u003d\u003d 1) {"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"                    System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"                }"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"                System.out.println(i + \".\" + task.toString());"},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"        if (i \u003d\u003d 0) {"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"\u0027\" + this.keyword + \"\u0027 is not found in the description of any of your tasks!\");"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":32}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":" * Displays all the tasks currently in the tasklist."},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"public class ListCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    public ListCommand() {};"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"        tasks.listTasks();"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":15}},{"path":"src/main/java/duke/commands/MarkDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" * Marks a task as done, given the index of the task in the TaskList."},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"public class MarkDoneCommand implements Command{"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    ArrayList\u003cInteger\u003e indexes;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"    public MarkDoneCommand(ArrayList\u003cInteger\u003e indexes) {"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"        this.indexes \u003d indexes;"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"        tasks.markTasksAsDone(indexes);"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":21}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":" * Keeps track of the TaskType causing the exception."},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":" * Different TaskTypes will have different exception messages."},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"    private TaskType taskType;"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    public DukeException(TaskType taskType) {"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    public TaskType getTaskType() {"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"        return this.taskType;"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":17}},{"path":"src/main/java/duke/exception/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"    DEADLINE, EVENT, TODO, INVALID"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":5}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":" * Represents a type of Task, with description and a deadline."},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    private String description;"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"//    private String by;"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    private LocalDate by;"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"        this.by \u003d by;"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"    public Deadline(String description, LocalDate by, boolean isDone) {"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"        super(description, isDone);"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"     * Returns String representation of a Deadline task."},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"     * [D] represents Deadline, [X] represents the task is done."},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"     * @return [D][X/ ] task description (at: deadline)"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"d MMM YYYY\")) + \")\";"},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":32}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":" * Represents a type of Task, with description and a timeslot."},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"    private String timeSlot;"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    public Event(String description, String timeSlot) {"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"        this.timeSlot \u003d timeSlot;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"    public Event(String description, String timeSlot, boolean isDone) {"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"        super(description, isDone);"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"        this.timeSlot \u003d timeSlot;"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"     * Returns String representation of a Event task."},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"     * [E] represents Event, [X] represents the task is done."},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"     * @return [E][X/ ] task description (at: timeSlot)"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.timeSlot + \")\";"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":" * Represents a task, with a description and done status."},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    public static int taskCount \u003d 0;"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"        taskCount++;"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"        taskCount++;"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":25,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":27,"author":{"gitId":"brynagoh"},"content":"    public String getDescription() {"},{"lineNumber":28,"author":{"gitId":"brynagoh"},"content":"        return this.description;"},{"lineNumber":29,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":31,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"brynagoh"},"content":"     * Checks if a task is done, marks task as done if it is not."},{"lineNumber":33,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"brynagoh"},"content":"    public void markAsDone(){"},{"lineNumber":35,"author":{"gitId":"brynagoh"},"content":"        if (!this.isDone) {"},{"lineNumber":36,"author":{"gitId":"brynagoh"},"content":"            this.isDone \u003d true;"},{"lineNumber":37,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"Great! I\u0027ve marked this task as done:\");"},{"lineNumber":38,"author":{"gitId":"brynagoh"},"content":"            System.out.println(this.toString());"},{"lineNumber":39,"author":{"gitId":"brynagoh"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"brynagoh"},"content":"            System.out.println(\"You already completed this task previously:\");"},{"lineNumber":41,"author":{"gitId":"brynagoh"},"content":"            System.out.println(this.toString());"},{"lineNumber":42,"author":{"gitId":"brynagoh"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":45,"author":{"gitId":"brynagoh"},"content":"    public String toString(){"},{"lineNumber":46,"author":{"gitId":"brynagoh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":47,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":48}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":" * Represents a type of Task, with only description."},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"        super(description, isDone);"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":""},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"     * Returns String representation of a Todo task."},{"lineNumber":17,"author":{"gitId":"brynagoh"},"content":"     * [T] represents Todo, [X] represents the task is done."},{"lineNumber":18,"author":{"gitId":"brynagoh"},"content":"     * @return [T][X/ ] task description"},{"lineNumber":19,"author":{"gitId":"brynagoh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"brynagoh"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"brynagoh"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"brynagoh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"brynagoh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"brynagoh"},"content":"}"}],"authorContributionMap":{"brynagoh":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brynagoh"},"content":"list"},{"lineNumber":2,"author":{"gitId":"brynagoh"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"brynagoh"},"content":"list"},{"lineNumber":4,"author":{"gitId":"brynagoh"},"content":"deadline return book /by Sunday"},{"lineNumber":5,"author":{"gitId":"brynagoh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":6,"author":{"gitId":"brynagoh"},"content":"list"},{"lineNumber":7,"author":{"gitId":"brynagoh"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"brynagoh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"brynagoh"},"content":"done 6"},{"lineNumber":10,"author":{"gitId":"brynagoh"},"content":"delete 6"},{"lineNumber":11,"author":{"gitId":"brynagoh"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"brynagoh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"brynagoh"},"content":"find hello"},{"lineNumber":14,"author":{"gitId":"brynagoh"},"content":"find book"},{"lineNumber":15,"author":{"gitId":"brynagoh"},"content":"find return"},{"lineNumber":16,"author":{"gitId":"brynagoh"},"content":"bye"}],"authorContributionMap":{"brynagoh":16}}]
