[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"wjchoi0712":2,"-":24}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"**Duke** is a desktop application which helps the user to **manage their tasks**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"using the Command Line Interface(CLI)."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"* Viewing help: `help`"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"* Adding a task:"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"  * Adding todo task: `todo`"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"  * Adding deadline task: `deadline`"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"  * Adding event task: `event`"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"* Marking a task as done: `done`"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"* Deleting a task: `delete`"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"* Clearing all entries: `clear`"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"* Listing all tasks: `list`"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"* Searching tasks by keyword: `find`"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"* Exiting the program: `bye`"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"* Saving the data"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"---"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"### Viewing help: `help`"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"Shows a message explaining how to each feature is used."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `help`"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"### Adding todo task: `todo`"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"Adds a todo task to the task list."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `todo DESCRIPTION`"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"* Description of the task cannot be empty."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"* `todo CS2113T Homework`"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"### Adding deadline task: `deadline`"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"Adds a deadline task to the task list."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `deadline DESCRIPTION /by DUE DATE`"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"* Description and due date of the task cannot be empty."},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"* When due date is inserted in YYYY-MM-DD format, Duke treats it as an actual"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"  date variable rather than treating it as just a String."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"* `deadline CS2113T Homework /by 2021-3-5`"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"### Adding event task: `event`"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"Adds an event task to the task list."},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `event DESCRIPTION /at EVENT DATE`"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":"* Description and event date of the task cannot be empty."},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"* When event date is inserted in YYYY-MM-DD format, Duke treats it as an actual"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"  date variable rather than treating it as just a String."},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":"  "},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":"* `event CS2113T Homework /at 2021-3-5`"},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":67,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":68,"author":{"gitId":"wjchoi0712"},"content":"### Marking a task as done: `done`"},{"lineNumber":69,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":70,"author":{"gitId":"wjchoi0712"},"content":"Marks a specific task as done."},{"lineNumber":71,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":72,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `done INDEX`"},{"lineNumber":73,"author":{"gitId":"wjchoi0712"},"content":"* Marks the task at the specified INDEX as done."},{"lineNumber":74,"author":{"gitId":"wjchoi0712"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":75,"author":{"gitId":"wjchoi0712"},"content":"* The index must be a positive integer."},{"lineNumber":76,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":77,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":78,"author":{"gitId":"wjchoi0712"},"content":"* `done 2`"},{"lineNumber":79,"author":{"gitId":"wjchoi0712"},"content":"* Above command marks the second task in the task list as done."},{"lineNumber":80,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":81,"author":{"gitId":"wjchoi0712"},"content":"**Expected outcome:**"},{"lineNumber":82,"author":{"gitId":"wjchoi0712"},"content":"\u003eNice! I\u0027ve marked this task as done:\\"},{"lineNumber":83,"author":{"gitId":"wjchoi0712"},"content":"\u003e\\[T]\\[X] CS2113T Homework "},{"lineNumber":84,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":85,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e"},{"lineNumber":86,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":87,"author":{"gitId":"wjchoi0712"},"content":"### Deleting a task: `delete`"},{"lineNumber":88,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":89,"author":{"gitId":"wjchoi0712"},"content":"Deletes a specific task from the task list."},{"lineNumber":90,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":91,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `delete INDEX`"},{"lineNumber":92,"author":{"gitId":"wjchoi0712"},"content":"* Deletes the task at the specified INDEX."},{"lineNumber":93,"author":{"gitId":"wjchoi0712"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":94,"author":{"gitId":"wjchoi0712"},"content":"* The index must be a positive integer."},{"lineNumber":95,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":96,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":97,"author":{"gitId":"wjchoi0712"},"content":"* `delete 2`"},{"lineNumber":98,"author":{"gitId":"wjchoi0712"},"content":"* Above command deletes the second task in the task list."},{"lineNumber":99,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":100,"author":{"gitId":"wjchoi0712"},"content":"  "},{"lineNumber":101,"author":{"gitId":"wjchoi0712"},"content":"### Clearing all entries: `clear`"},{"lineNumber":102,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":103,"author":{"gitId":"wjchoi0712"},"content":"Deletes all the tasks in the task list."},{"lineNumber":104,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":105,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `clear`"},{"lineNumber":106,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":107,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":108,"author":{"gitId":"wjchoi0712"},"content":"### Listing all tasks: `list`"},{"lineNumber":109,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":110,"author":{"gitId":"wjchoi0712"},"content":"Prints out all the tasks in the task list."},{"lineNumber":111,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":112,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `list`"},{"lineNumber":113,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":114,"author":{"gitId":"wjchoi0712"},"content":"**Expected outcome:**"},{"lineNumber":115,"author":{"gitId":"wjchoi0712"},"content":"\u003eHere are the tasks in your list:\\"},{"lineNumber":116,"author":{"gitId":"wjchoi0712"},"content":"\u003e1.\\[T]\\[ ] CS2113T Homework\\"},{"lineNumber":117,"author":{"gitId":"wjchoi0712"},"content":"\u003e2.\\[D]\\[ ] CS2113T IP (by: MAR 6 2021)"},{"lineNumber":118,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":119,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e"},{"lineNumber":120,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":121,"author":{"gitId":"wjchoi0712"},"content":"### Searching tasks by keyword: `find`"},{"lineNumber":122,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":123,"author":{"gitId":"wjchoi0712"},"content":"Prints out all the tasks with description that matches the keyword."},{"lineNumber":124,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":125,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `find INDEX`"},{"lineNumber":126,"author":{"gitId":"wjchoi0712"},"content":"* The search is case-sensitive"},{"lineNumber":127,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":128,"author":{"gitId":"wjchoi0712"},"content":"**Example of usage:**"},{"lineNumber":129,"author":{"gitId":"wjchoi0712"},"content":"* `find Homework`"},{"lineNumber":130,"author":{"gitId":"wjchoi0712"},"content":"* Above command finds all the tasks with \u0027Homework\u0027 in their description."},{"lineNumber":131,"author":{"gitId":"wjchoi0712"},"content":"  "},{"lineNumber":132,"author":{"gitId":"wjchoi0712"},"content":"**Expected outcome:**"},{"lineNumber":133,"author":{"gitId":"wjchoi0712"},"content":"\u003eHere are the matching tasks in your list:\\"},{"lineNumber":134,"author":{"gitId":"wjchoi0712"},"content":"\u003e1.\\[T][ ] CS2113T Homework"},{"lineNumber":135,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":136,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e"},{"lineNumber":137,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":138,"author":{"gitId":"wjchoi0712"},"content":"### Exiting the program: `bye`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"wjchoi0712"},"content":"Prints out the terminating message and exits the program."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"wjchoi0712"},"content":"**Format**: `bye`"},{"lineNumber":143,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e \u003cbr /\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"wjchoi0712"},"content":"### Saving the data"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"wjchoi0712"},"content":"The task list is automatically saved in `/data/task.txt` and is "},{"lineNumber":148,"author":{"gitId":"wjchoi0712"},"content":"automatically loaded in subsequence usage."},{"lineNumber":149,"author":{"gitId":"wjchoi0712"},"content":"\u003cbr /\u003e\u003cbr /\u003e"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"wjchoi0712"},"content":"---"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"wjchoi0712"},"content":"## Command Summary"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"wjchoi0712"},"content":"Action | Format"},{"lineNumber":156,"author":{"gitId":"wjchoi0712"},"content":"------ | ---------------"},{"lineNumber":157,"author":{"gitId":"wjchoi0712"},"content":"Help | `help`"},{"lineNumber":158,"author":{"gitId":"wjchoi0712"},"content":"Add | `todo DESCRIPTION` \u003cbr /\u003e `deadline DESCRIPTION /by DUE DATE` \u003cbr /\u003e `event DESCRIPTION /at EVENT DATE`"},{"lineNumber":159,"author":{"gitId":"wjchoi0712"},"content":"Done | `done INDEX`"},{"lineNumber":160,"author":{"gitId":"wjchoi0712"},"content":"Delete | `delete INDEX`"},{"lineNumber":161,"author":{"gitId":"wjchoi0712"},"content":"Clear | `clear`"},{"lineNumber":162,"author":{"gitId":"wjchoi0712"},"content":"List | `list`"},{"lineNumber":163,"author":{"gitId":"wjchoi0712"},"content":"Find | `find KEYWORD`"},{"lineNumber":164,"author":{"gitId":"wjchoi0712"},"content":"Bye | `bye`"}],"authorContributionMap":{"wjchoi0712":145,"-":19}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.InvalidFilePathException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.StorageOperationException;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":" * Entry point of the Duke application."},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":" * Initializes the application and starts the interaction with the user."},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    private static TextUi ui;"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"    private static Storage storage;"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    private static TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        new Duke().run();"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /** Sets up and run the program */"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    private void run() {"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"            this.ui \u003d new TextUi();"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"            this.storage \u003d initializeStorage(\"data/tasks.txt\");"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"            this.tasks \u003d storage.loadData();"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"            ui.showGreetingMessage();"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"            runCommandLoopUntilExitCommand();"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"        } catch(StorageOperationException e) {"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"    /** Creates new directory and file according to the {@code filepath} if it does not already exists. */"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    private Storage initializeStorage(String filePath) throws InvalidFilePathException {"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        Storage storage \u003d new Storage(filePath);"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"        storage.createDirectory();"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"        storage.createFile();"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"        return storage;"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"    /** Reads the user command and executes it, until the user issues the bye command. */"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    private static void runCommandLoopUntilExitCommand() throws SaveDataOperationException {"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"        boolean isExit \u003d false;"},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"        while (!isExit) {"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"                String userInput \u003d ui.getUserCommand();"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"                Command command \u003d Parser.prepareForCommandExecution(userInput);"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"                command.execute(tasks, ui, storage);"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"            } catch (InvalidCommandException ice) {"},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"                ui.showToUser(ice.getMessage());"},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wjchoi0712":58,"-":3}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.DescriptionException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":" * Adds a {@link Task} into the {@link TaskList}."},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- todo/ deadline/ event: Adds a task to the task list.\" + LS"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"            + \" Parameters:\" + LS"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"            + \"  For todo: DESCRIPTION\" + LS"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"            + \"  For deadline: DESCRIPTION /by DUEDATE\" + LS"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"            + \"  For event: DESCRIPTION /by EVENTDATE\" + LS"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: \" + LS"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"            + \"  todo smile\" + LS"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"            + \"  deadline submit hw /by 2021-12-01\" + LS"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"            + \"  event watch netflix /at 2021-12-01\" + LS;"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" Got it. I\u0027ve added this task:\";"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"    protected String commandType;"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    public AddCommand(String userInput, String commandType) {"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"     * Adds a new {@link Task} into the {@link TaskList} and prints out a message showing that"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"     * the command has been successfully executed."},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list where the new task is added"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"     * @param ui user interface to print out message"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"     * @param storage data file where the edited task list is saved"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"     * @throws SaveDataOperationException if error occurs while encoding/saving the task list"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"            tasks.addTask(commandType, userInput);"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"            ui.showAddResponse(tasks);"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"            storage.saveData(tasks);"},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"        } catch (DescriptionException de) {"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(de.getMessage());"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":54}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":" * Terminates the program"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    private static final String LS \u003d System.lineSeparator();"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- bye: Terminates the program.\" + LS"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: bye\";"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    public ByeCommand(String userInput) {"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    /** Overrides the {@link Command#isExit()} method to terminate the program */"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        return true;"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /** Prints out the ending message */"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage){"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"        ui.showEndingMessage();"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":31}},{"path":"src/main/java/duke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.ClearTaskException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":" * Clears the {@link TaskList}."},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"public class ClearCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- clear: Deletes all the tasks in the task list.\" + LS"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: clear\" + LS;"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" Noted. I\u0027ve cleared %d tasks in the list.\";"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    public ClearCommand(String userInput) {"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    /** Deletes all the {@link Task} in the {@link TaskList} */"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"            ui.showClearResponse(tasks);"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"            tasks.clearTaskList();"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"            storage.saveData(tasks);"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        } catch (ClearTaskException e) {"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(e.getMessage());"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":36}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":" * Represents an executable command."},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"public class Command {"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"    protected String userInput;"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs a command object to be processed."},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full command of the user"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    public Command(String userInput) {"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    /** Checks whether application should be closed */"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":31}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.InvalidTaskNoException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":" * Deletes a specific {@link Task} from the {@link TaskList}."},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- delete: Delete a chosen task from the task list.\" + LS"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"            + \" Parameters: INDEX\" + LS"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: delete 1\" + LS;"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" Noted. I\u0027ve removed this task:\";"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public DeleteCommand(String userInput) {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"     * Deletes a {@link Task} from the {@link TaskList} and prints out a message showing that"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"     * the command has been successfully executed."},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list containing the task to be marked as done"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"     * @param ui user interface to print out message"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"     * @param storage data file where the edited task list is saved"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"     * @throws SaveDataOperationException if error occurs while encoding/saving the task list"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"            int deletedTaskNo \u003d new Parser().prepareForDelete(tasks, userInput);"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"            ui.showDeleteResponse(tasks, deletedTaskNo);"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"            tasks.deleteTask(deletedTaskNo);"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"            storage.saveData(tasks);"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"        } catch (InvalidTaskNoException e) {"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":46}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.DoneTaskException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.InvalidTaskNoException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":" * Marks a specific {@link Task} in the {@link TaskList} as done."},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"public class DoneCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- done: Marks the chosen task as done.\" + LS"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"            + \" Parameters: INDEX\" + LS"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: done 1\" + LS;"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    public DoneCommand(String userInput) {"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"     * Marks a {@link Task} from the {@link TaskList} as done and prints out a message showing that"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"     * the command has been successfully executed."},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list containing the task to be deleted"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"     * @param ui user interface to print out message"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"     * @param storage data file where the edited task list is saved"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"     * @throws SaveDataOperationException if error occurs while encoding/saving the task list"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"            int completedTaskNo \u003d new Parser().prepareForDone(tasks, userInput);"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"            tasks.completeTask(completedTaskNo);"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"            ui.showDoneResponse(tasks, completedTaskNo);"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"            storage.saveData(tasks);"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"        } catch (InvalidTaskNoException | DoneTaskException e) {"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(e.getMessage());"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":47}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.NoMatchingTaskException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":" * Prints out all the {@link Task} which has the user\u0027s keyword in its description."},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- find: Find all the task containing the keyword.\" + LS"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"            + \" Parameters: KEYWORD\" + LS"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: find book\" + LS;"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" Here are the matching tasks in your list:\";"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public FindCommand(String userInput) {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /** Generates and prints out a {@link TaskList} of matching {@link Task} */"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"            TaskList matchingTasks \u003d new Parser().prepareForFind(tasks, userInput);"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"            ui.showFindResponse(matchingTasks);"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        } catch (NoMatchingTaskException e) {"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(e.getMessage());"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":36}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public HelpCommand(String userInput) {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) throws SaveDataOperationException {"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"        ui.showHelpResponse();"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":18}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.EmptyListException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.ui.TextUi;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":" * Prints out all the {@link Task} in the {@link TaskList}."},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"    public static final String LS \u003d System.lineSeparator();"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_USAGE \u003d \"- list: Shows all the tasks in the task list.\" + LS"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"            + \" Example: list\" + LS;"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" Here are the tasks in your list:\";"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"    public ListCommand(String userInput) {"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"        super(userInput);"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    /** Prints out the {@link Task} in the {@link TaskList} */"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    public void execute(TaskList tasks, TextUi ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"            ui.showListResponse(tasks);"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"        } catch (EmptyListException ele) {"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"            ui.showToUser(ele.getMessage());"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":32}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that an error occurred while running duke"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":7}},{"path":"src/main/java/duke/exception/action/ClearTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that there are no {@link duke.task.Task} to clear in {@link duke.task.TaskList}"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class ClearTaskException extends DukeException{"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"        public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"            return \" Your task list is already empty!\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/action/DoneTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the {@link duke.task.Task} has already been marked as done"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class DoneTaskException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        return \" This task has already been marked as done!\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/action/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the {@link duke.task.TaskList} is empty"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        return \" Hurray! You currently have no tasks :)\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/action/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the user\u0027s command is not one of the command type that the program can execute"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! I\u0027m sorry but I don\u0027t understand your command :(\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/action/InvalidTaskNoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the task number that user inputted is out of bound or is not an integer"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidTaskNoException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! You must enter an \\\"integer\\\" that is \\\"within the bound\\\" :(\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/action/NoMatchingTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.action;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that there are no {@link duke.task.Task} with description that matches the user\u0027s keyword"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class NoMatchingTaskException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! There are no tasks which matches your keyword :(\";"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":13}},{"path":"src/main/java/duke/exception/data/InvalidFilePathException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.data;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the filepath is invalid"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidFilePathException extends  StorageOperationException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Error occurred while creating directory or file :(\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/exception/data/LoadDataOperationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.data;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that an error occurred while loading or decoding the data"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class LoadDataOperationException extends StorageOperationException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Error occurred while trying to load previous task list :(\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/exception/data/SaveDataOperationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.data;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that an error occurred while saving or encoding the data"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class SaveDataOperationException extends StorageOperationException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Error occurred while trying to save current task list :(\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/exception/data/StorageOperationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.data;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that an error occurred while creating directory/file or saving/loading data"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class StorageOperationException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":9}},{"path":"src/main/java/duke/exception/description/DescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.description;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the {@link duke.task.Task} description in the user input is invalid"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"public class DescriptionException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":9}},{"path":"src/main/java/duke/exception/description/InvalidDeadlineDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.description;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that description of {@link duke.task.Deadline} given by the user is invalid"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidDeadlineDescriptionException extends DescriptionException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Description of Deadline task should be in \\\"deadline [description] /by [due date]\\\" format\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/exception/description/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.description;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the description and time component cannot be empty for"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" * {@link duke.task.Deadline} and {@link duke.task.Event}"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidDescriptionException extends DescriptionException {"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! DEADLINE and EVENT tasks requires both task description and task time :(\";"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":12}},{"path":"src/main/java/duke/exception/description/InvalidEventDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.description;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that description of {@link duke.task.Event} given by the user is invalid"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class InvalidEventDescriptionException extends DescriptionException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Description of Event task should be in \\\"event [description] /at [event date]\\\" format\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/exception/description/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.exception.description;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Signals that the user did not input task description"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class NoDescriptionException extends DescriptionException {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"        return \" OOPS! Description of a task cannot be empty:(\";"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.command.*;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.DoneTaskException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.InvalidTaskNoException;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDeadlineDescriptionException;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDescriptionException;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidEventDescriptionException;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.NoDescriptionException;"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":" * Parses user input."},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into command for execution."},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full user input string"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"     * @return the command based on the user input"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidCommandException if user command is not one of the command type that the program can execute"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    public static Command prepareForCommandExecution(String userInput) throws InvalidCommandException {"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        Command command;"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"        String strippedUserInput \u003d userInput.strip();"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"        if (strippedUserInput.equals(\"bye\")) {"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new ByeCommand(strippedUserInput);"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"todo\")) {"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new AddCommand(strippedUserInput, \"todo\");"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"deadline\")) {"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new AddCommand(strippedUserInput, \"deadline\");"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"event\")) {"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new AddCommand(strippedUserInput, \"event\");"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"done\")) {"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new DoneCommand(strippedUserInput);"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"delete\")) {"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new DeleteCommand(strippedUserInput);"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.equals(\"list\")) {"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new ListCommand(strippedUserInput);"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.startsWith(\"find\")) {"},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new FindCommand(strippedUserInput);"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.equals(\"clear\")) {"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new ClearCommand(strippedUserInput);"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"        } else if (strippedUserInput.equals(\"help\")) {"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"            command \u003d new HelpCommand(strippedUserInput);"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidCommandException();"},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"        return command;"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into task description for {@link duke.task.ToDo} task"},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full user input string"},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task description"},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"     * @throws NoDescriptionException if user input does not contain task description"},{"lineNumber":67,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"wjchoi0712"},"content":"    public String prepareForAddTodo(String userInput) throws NoDescriptionException {"},{"lineNumber":69,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"wjchoi0712"},"content":"            String taskDescription \u003d userInput.substring(userInput.indexOf(\" \"));"},{"lineNumber":71,"author":{"gitId":"wjchoi0712"},"content":"            if (taskDescription.isBlank()) {"},{"lineNumber":72,"author":{"gitId":"wjchoi0712"},"content":"                throw new NoDescriptionException();"},{"lineNumber":73,"author":{"gitId":"wjchoi0712"},"content":"            } else {"},{"lineNumber":74,"author":{"gitId":"wjchoi0712"},"content":"                return taskDescription.strip();"},{"lineNumber":75,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"wjchoi0712"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":77,"author":{"gitId":"wjchoi0712"},"content":"            throw new NoDescriptionException();"},{"lineNumber":78,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":81,"author":{"gitId":"wjchoi0712"},"content":"    private static final String CONDITION_FOR_DEADLINE \u003d \"/by\";"},{"lineNumber":82,"author":{"gitId":"wjchoi0712"},"content":"    private static final String CONDITION_FOR_EVENT \u003d \"/at\";"},{"lineNumber":83,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":84,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into task description and due date for {@link duke.task.Deadline} task"},{"lineNumber":86,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full user input string"},{"lineNumber":88,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task description and due date"},{"lineNumber":89,"author":{"gitId":"wjchoi0712"},"content":"     * @throws NoDescriptionException if user input does not contain task description"},{"lineNumber":90,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDescriptionException if user input does not contain task description or due date"},{"lineNumber":91,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDeadlineDescriptionException if user input does not contain {@code CONDITION_FOR_DEADLINE}"},{"lineNumber":92,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"wjchoi0712"},"content":"    public String[] prepareForAddDeadline(String userInput) throws InvalidDescriptionException,"},{"lineNumber":94,"author":{"gitId":"wjchoi0712"},"content":"            NoDescriptionException, InvalidDeadlineDescriptionException {"},{"lineNumber":95,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":96,"author":{"gitId":"wjchoi0712"},"content":"        String taskDescriptionAndDate \u003d prepareForAddTodo(userInput);"},{"lineNumber":97,"author":{"gitId":"wjchoi0712"},"content":"        if (userInput.contains(CONDITION_FOR_DEADLINE)) {"},{"lineNumber":98,"author":{"gitId":"wjchoi0712"},"content":"            return separateDescriptionAndDate(taskDescriptionAndDate);"},{"lineNumber":99,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidDeadlineDescriptionException();"},{"lineNumber":101,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":104,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into task description and event date for {@link duke.task.Event} task"},{"lineNumber":106,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full user input string"},{"lineNumber":108,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task description and event date"},{"lineNumber":109,"author":{"gitId":"wjchoi0712"},"content":"     * @throws NoDescriptionException if user input does not contain task description"},{"lineNumber":110,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDescriptionException if user input does not contain task description or event date"},{"lineNumber":111,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidEventDescriptionException if user input does not contain {@code CONDITION_FOR_EVENT}"},{"lineNumber":112,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"wjchoi0712"},"content":"    public String[] prepareForAddEvent(String userInput) throws InvalidDescriptionException,"},{"lineNumber":114,"author":{"gitId":"wjchoi0712"},"content":"            NoDescriptionException, InvalidEventDescriptionException {"},{"lineNumber":115,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":116,"author":{"gitId":"wjchoi0712"},"content":"        String taskDescriptionAndDate \u003d prepareForAddTodo(userInput);"},{"lineNumber":117,"author":{"gitId":"wjchoi0712"},"content":"        if (userInput.contains(CONDITION_FOR_EVENT)) {"},{"lineNumber":118,"author":{"gitId":"wjchoi0712"},"content":"            return separateDescriptionAndDate(taskDescriptionAndDate);"},{"lineNumber":119,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidEventDescriptionException();"},{"lineNumber":121,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":124,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"wjchoi0712"},"content":"     * Separates the user input into task description and date component."},{"lineNumber":126,"author":{"gitId":"wjchoi0712"},"content":"     * Also parse the date into MMM D YYY format if date input by user is in YYYY-MM-DD format."},{"lineNumber":127,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"wjchoi0712"},"content":"     * @param descriptionAndDate a String containing both task description and task date"},{"lineNumber":129,"author":{"gitId":"wjchoi0712"},"content":"     * @return the {@code taskComponents} containing task description and date as elements"},{"lineNumber":130,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDescriptionException if user input does not contain task description or date"},{"lineNumber":131,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"wjchoi0712"},"content":"    public String[] separateDescriptionAndDate(String descriptionAndDate) throws InvalidDescriptionException {"},{"lineNumber":133,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":134,"author":{"gitId":"wjchoi0712"},"content":"        //Container to carry the task description and date"},{"lineNumber":135,"author":{"gitId":"wjchoi0712"},"content":"        String[] taskComponents \u003d new String[2];"},{"lineNumber":136,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":137,"author":{"gitId":"wjchoi0712"},"content":"        boolean isDescriptionEmpty \u003d (descriptionAndDate.indexOf(\"/\") \u003d\u003d 0);"},{"lineNumber":138,"author":{"gitId":"wjchoi0712"},"content":"        boolean isDateEmpty \u003d (descriptionAndDate.indexOf(\"/\") + 4 \u003d\u003d descriptionAndDate.length() + 1);"},{"lineNumber":139,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":140,"author":{"gitId":"wjchoi0712"},"content":"        if (!isDescriptionEmpty \u0026\u0026 !isDateEmpty) {"},{"lineNumber":141,"author":{"gitId":"wjchoi0712"},"content":"            taskComponents[0] \u003d descriptionAndDate.substring(0, descriptionAndDate.indexOf(\"/\") - 1);"},{"lineNumber":142,"author":{"gitId":"wjchoi0712"},"content":"            String date \u003d descriptionAndDate.substring(descriptionAndDate.indexOf(\"/\") + 4);"},{"lineNumber":143,"author":{"gitId":"wjchoi0712"},"content":"            try {"},{"lineNumber":144,"author":{"gitId":"wjchoi0712"},"content":"                LocalDate dueDate \u003d LocalDate.parse(date);"},{"lineNumber":145,"author":{"gitId":"wjchoi0712"},"content":"                taskComponents[1] \u003d dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":146,"author":{"gitId":"wjchoi0712"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":147,"author":{"gitId":"wjchoi0712"},"content":"                //When date input by the user is not in YYYY-MM-DD format, just store date as String"},{"lineNumber":148,"author":{"gitId":"wjchoi0712"},"content":"                taskComponents[1] \u003d date;"},{"lineNumber":149,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":151,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidDescriptionException();"},{"lineNumber":152,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"wjchoi0712"},"content":"        return taskComponents;"},{"lineNumber":154,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":156,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into task number to mark as done"},{"lineNumber":158,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":159,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list containing the task to be mark as done"},{"lineNumber":160,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task number to be marked as done"},{"lineNumber":161,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidTaskNoException if task number is out of bound or is not an integer"},{"lineNumber":162,"author":{"gitId":"wjchoi0712"},"content":"     * @throws DoneTaskException if the task is already marked as done"},{"lineNumber":163,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"wjchoi0712"},"content":"    public int prepareForDone(TaskList tasks, String userInput) throws InvalidTaskNoException, DoneTaskException {"},{"lineNumber":165,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":166,"author":{"gitId":"wjchoi0712"},"content":"            int taskNo \u003d Integer.parseInt(userInput.replace(\"done \", \"\"));"},{"lineNumber":167,"author":{"gitId":"wjchoi0712"},"content":"            if (isWithinBound(tasks, taskNo)) {"},{"lineNumber":168,"author":{"gitId":"wjchoi0712"},"content":"                if (tasks.getTask(taskNo - 1).isDone()) {"},{"lineNumber":169,"author":{"gitId":"wjchoi0712"},"content":"                    throw new DoneTaskException();"},{"lineNumber":170,"author":{"gitId":"wjchoi0712"},"content":"                } else {"},{"lineNumber":171,"author":{"gitId":"wjchoi0712"},"content":"                    return taskNo;"},{"lineNumber":172,"author":{"gitId":"wjchoi0712"},"content":"                }"},{"lineNumber":173,"author":{"gitId":"wjchoi0712"},"content":"            } else {"},{"lineNumber":174,"author":{"gitId":"wjchoi0712"},"content":"                throw new InvalidTaskNoException();"},{"lineNumber":175,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"wjchoi0712"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":177,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidTaskNoException();"},{"lineNumber":178,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":181,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"wjchoi0712"},"content":"     * Parses user input into task number to delete"},{"lineNumber":183,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list containing the task to be deleted"},{"lineNumber":185,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task number to be deleted"},{"lineNumber":186,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidTaskNoException if task number is out of bound or is not an integer"},{"lineNumber":187,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"wjchoi0712"},"content":"    public int prepareForDelete(TaskList tasks, String userInput) throws InvalidTaskNoException {"},{"lineNumber":189,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":190,"author":{"gitId":"wjchoi0712"},"content":"            int taskNo \u003d Integer.parseInt(userInput.replace(\"delete \", \"\"));"},{"lineNumber":191,"author":{"gitId":"wjchoi0712"},"content":"            if (isWithinBound(tasks, taskNo)) {"},{"lineNumber":192,"author":{"gitId":"wjchoi0712"},"content":"                return taskNo;"},{"lineNumber":193,"author":{"gitId":"wjchoi0712"},"content":"            } else {"},{"lineNumber":194,"author":{"gitId":"wjchoi0712"},"content":"                throw new InvalidTaskNoException();"},{"lineNumber":195,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"wjchoi0712"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":197,"author":{"gitId":"wjchoi0712"},"content":"            throw new InvalidTaskNoException();"},{"lineNumber":198,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":201,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns true when the task number is an integer number that is within bound of the {@link TaskList} */"},{"lineNumber":202,"author":{"gitId":"wjchoi0712"},"content":"    public boolean isWithinBound(TaskList tasks, int taskNo) {"},{"lineNumber":203,"author":{"gitId":"wjchoi0712"},"content":"        return (taskNo \u003c\u003d tasks.getTotalNoOfTasks() \u0026\u0026 taskNo \u003e 0);"},{"lineNumber":204,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":206,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"wjchoi0712"},"content":"     * Select out the {@link Task} which contains the user\u0027s keyword in its description"},{"lineNumber":208,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list to search for keyword"},{"lineNumber":210,"author":{"gitId":"wjchoi0712"},"content":"     * @return the list of matching tasks"},{"lineNumber":211,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"wjchoi0712"},"content":"    public TaskList prepareForFind(TaskList tasks, String userInput) {"},{"lineNumber":213,"author":{"gitId":"wjchoi0712"},"content":"        TaskList matchingTasks \u003d new TaskList();"},{"lineNumber":214,"author":{"gitId":"wjchoi0712"},"content":"        String keyword \u003d userInput.replace(\"find \", \"\");"},{"lineNumber":215,"author":{"gitId":"wjchoi0712"},"content":"        for (int i \u003d 0; i \u003c tasks.getTotalNoOfTasks(); i++) {"},{"lineNumber":216,"author":{"gitId":"wjchoi0712"},"content":"            Task currentTask \u003d tasks.getTask(i);"},{"lineNumber":217,"author":{"gitId":"wjchoi0712"},"content":"            if (currentTask.getDescription().contains(keyword)) {"},{"lineNumber":218,"author":{"gitId":"wjchoi0712"},"content":"                matchingTasks.addTask(currentTask);"},{"lineNumber":219,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"wjchoi0712"},"content":"        return matchingTasks;"},{"lineNumber":222,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":223}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.InvalidFilePathException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.LoadDataOperationException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.data.SaveDataOperationException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDeadlineDescriptionException;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDescriptionException;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidEventDescriptionException;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.NoDescriptionException;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"import java.nio.file.Files;"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"import java.nio.file.Paths;"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":" * Represents the file used to store {@link TaskList}."},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    protected final Path path;"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs a storage by setting path of the data storage as the String input from the user"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"     * @param filePath path of the data storage"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    public Storage(String filePath) {"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"     * Creates a new directory if there is no existing directory"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidFilePathException if the file path is invalid"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    public void createDirectory() throws InvalidFilePathException {"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        if (!Files.exists(path.getParent())) {"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"            try {"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"                Files.createDirectory(path.getParent());"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"            } catch (IOException ioe) {"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"                throw new InvalidFilePathException();"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"     * Creates a new text file to store the data of task if there is no existing file"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidFilePathException if the file path is invalid"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"    public void createFile() throws InvalidFilePathException {"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"                Files.createFile(path);"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"            } catch (IOException ioe) {"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":"                throw new InvalidFilePathException();"},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"     * Saves the encoded {@link TaskList} data into the storage file"},{"lineNumber":67,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list to be saved"},{"lineNumber":69,"author":{"gitId":"wjchoi0712"},"content":"     * @throws SaveDataOperationException if there is error while encoding/ storing the data to file."},{"lineNumber":70,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"wjchoi0712"},"content":"    public void saveData(TaskList tasks) throws SaveDataOperationException {"},{"lineNumber":72,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"wjchoi0712"},"content":"            ArrayList\u003cString\u003e encodedTaskList \u003d new TaskFileEncoder().encodeTaskData(tasks);"},{"lineNumber":74,"author":{"gitId":"wjchoi0712"},"content":"            Files.write(path, encodedTaskList);"},{"lineNumber":75,"author":{"gitId":"wjchoi0712"},"content":"        } catch (IOException ioe) {"},{"lineNumber":76,"author":{"gitId":"wjchoi0712"},"content":"            throw new SaveDataOperationException();"},{"lineNumber":77,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":80,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"wjchoi0712"},"content":"     * Decodes and returns the {@link TaskList} that is encoded in the storage file"},{"lineNumber":82,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"wjchoi0712"},"content":"     * @return the list that has been decoded"},{"lineNumber":84,"author":{"gitId":"wjchoi0712"},"content":"     * @throws LoadDataOperationException if there is error while reading/ decoding the saved data"},{"lineNumber":85,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"wjchoi0712"},"content":"    public TaskList loadData() throws LoadDataOperationException {"},{"lineNumber":87,"author":{"gitId":"wjchoi0712"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":88,"author":{"gitId":"wjchoi0712"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"wjchoi0712"},"content":"            Scanner s \u003d new Scanner(path);"},{"lineNumber":90,"author":{"gitId":"wjchoi0712"},"content":"            while (s.hasNext()) {"},{"lineNumber":91,"author":{"gitId":"wjchoi0712"},"content":"                String data \u003d s.nextLine();"},{"lineNumber":92,"author":{"gitId":"wjchoi0712"},"content":"                tasks.addTask(new TaskFileDecoder().decodeTaskData(data));"},{"lineNumber":93,"author":{"gitId":"wjchoi0712"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"wjchoi0712"},"content":"        } catch (IOException | InvalidDescriptionException | NoDescriptionException |"},{"lineNumber":95,"author":{"gitId":"wjchoi0712"},"content":"                InvalidDeadlineDescriptionException | InvalidEventDescriptionException e) {"},{"lineNumber":96,"author":{"gitId":"wjchoi0712"},"content":"            throw new LoadDataOperationException();"},{"lineNumber":97,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"wjchoi0712"},"content":"        return tasks;"},{"lineNumber":99,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":100}},{"path":"src/main/java/duke/storage/TaskFileDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDeadlineDescriptionException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDescriptionException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidEventDescriptionException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.NoDescriptionException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.ToDo;"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":" * Decodes the encoded task list data in the storage file"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"public class TaskFileDecoder {"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"     * Decodes stored data and returns the decoded {@link Task}"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"     * The methods in {@link Parser} are used to decode the data."},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public Task decodeTaskData(String data) throws InvalidDescriptionException, InvalidDeadlineDescriptionException,"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"            NoDescriptionException, InvalidEventDescriptionException {"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"        String[] taskDescriptionAndStatus \u003d separateTaskDescriptionAndStatus(data);"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        boolean isDone \u003d taskDescriptionAndStatus[1].equals(\"X\");"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"        Task decodedTask;"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"        //Container to carry task description and task time"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"        String[] taskComponents;"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"        if (data.startsWith(\"todo\")) {"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"            String taskDescription \u003d new Parser().prepareForAddTodo(taskDescriptionAndStatus[0]);"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"            decodedTask \u003d new ToDo(taskDescription);"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"        } else if (data.startsWith(\"deadline\")) {"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"            taskComponents \u003d new Parser().prepareForAddDeadline(taskDescriptionAndStatus[0]);"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"            decodedTask \u003d new Deadline(taskComponents[0],taskComponents[1]);"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"        } else { //if data starts with \"event\""},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"            taskComponents \u003d new Parser().prepareForAddEvent(taskDescriptionAndStatus[0]);"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"            decodedTask \u003d new Event(taskComponents[0], taskComponents[1]);"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"        if (isDone) {"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"            decodedTask.markAsDone();"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"        return decodedTask;"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"     * Separates and returns the task description and task status."},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"     * The first element of the {@code taskDescriptionAndStatus} contains the task description"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"     * and the second element contains task status"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"    public String[] separateTaskDescriptionAndStatus(String data) {"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"        String[] taskDescriptionAndStatus \u003d new String[2];"},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"        //Extract out just the task description"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"        taskDescriptionAndStatus[0] \u003d data.substring(0, data.indexOf(\u0027[\u0027) - 1);"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"        //Extract out just the task status"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"        taskDescriptionAndStatus[1] \u003d data.substring(data.indexOf(\u0027[\u0027) + 1, data.indexOf(\u0027]\u0027));"},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":"        return taskDescriptionAndStatus;"},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":66}},{"path":"src/main/java/duke/storage/TaskFileEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":" * Encodes the {@link TaskList} object into a data file for storage"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"public class TaskFileEncoder {"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"    private static final String SPACING \u003d \" \";"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"     * Encodes all the {@link Task} in the {@link TaskList} into a list of String"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list to be encoded"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"     * @return the task list that has been encoded"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    public ArrayList\u003cString\u003e encodeTaskData(TaskList tasks) {"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"        ArrayList\u003cString\u003e encodedTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        for (int i \u003d 0; i \u003c tasks.getTotalNoOfTasks(); i++) {"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"            encodedTaskList.add(encodeTaskToString(tasks.getTask(i)));"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        return encodedTaskList;"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"     * Encodes the {@link Task} into a format for storage"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"     * @param task task to be encoded"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"    public String encodeTaskToString(Task task) {"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"        StringBuilder encodedTask \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"        String taskType \u003d task.getType();"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"        encodedTask.append(taskType).append(SPACING);"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"        String taskDescription \u003d task.getDescription();"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        encodedTask.append(taskDescription).append(SPACING);"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"        String taskStatus \u003d task.getStatusIcon();"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"        encodedTask.append(taskStatus);"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"        return encodedTask.toString();"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":48}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Represents an Deadline type task with description and an indicator of whether the task has been completed or not."},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" * Unlike ToDo type, Deadline task has an extra component of time, which represents the due date of the task."},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    protected String dueDate;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs an Deadline task from a String of description and the due date of the task."},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"     * Also sets the boolean variable which represents whether the task has be completed to false."},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"     * @param description description of the task"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"     * @param dueDate date when the task must be completed by"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    public Deadline(String description, String dueDate) {"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns the task description and the due date of the task */"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        return super.getDescription() + \" /by \" + dueDate;"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a String representation of the task type */"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    public String getType() {"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        return \"deadline\";"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"     * Returns a String representation of the deadline task which includes"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"     * the status of the task, task description and due date."},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":43}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Represents an Event type task with description and an indicator of whether the task has been completed or not."},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" * Like Deadline type, Event task has an extra component of time, which represents the event date of the task."},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    protected String eventDate;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs an Event task from a String of description and the date of the event."},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"     * Also sets the boolean variable which represents whether the task has be completed to false."},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"     * @param description description of the task"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"     * @param eventDate date when the event is to take place"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    public Event(String description, String eventDate) {"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns the task description and the date of the event */"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"        return super.getDescription() + \" /at \" + eventDate;"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a String representation of the task type */"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    public String getType() {"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"        return \"event\";"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"     * Returns a String representation of the event which includes"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"     * the status of the task, task description and date of the event."},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + eventDate + \")\";"},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Represents a task with description and an indicator of whether the task has been completed or not."},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs a task from a String of description and sets the boolean"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"     * variable which represents whether the task has be completed to false."},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"     * @param description description of the task"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"        isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    public String getDescription() {"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"        return description;"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns true when the task has been completed */"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"    public boolean isDone() {"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"        return isDone;"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a String representation of the task type */"},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"    public String getType() {"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"        return \"task\";"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"    public void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"        isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":"     * Returns a tick mark(\\u2705) with brackets surrounding it when the task has been marked as done."},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"     * Else return a blank space with brackets when the task is incomplete."},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"    public String getStatusIcon() {"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"     * Returns a String representation of the task which includes"},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"     * the status of the task and the task description."},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"        return getStatusIcon() + \" \" + description;"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":56}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDeadlineDescriptionException;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidDescriptionException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.InvalidEventDescriptionException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.description.NoDescriptionException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":" * Represents a list of {@link Task}"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    protected ArrayList\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"        this(new ArrayList\u003cTask\u003e());"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"     * Constructs a list of tasks"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks list of ToDo, Event, Deadline tasks"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns true when the task list is empty */"},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"    public boolean isEmpty() {"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":"        return tasks.size() \u003d\u003d 0;"},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a task at a specific index */"},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"    public Task getTask(int index) {"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"        return tasks.get(index);"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns the last task in the task list */"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"    public Task getLastTaskInTheList() {"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":"        return tasks.get(tasks.size() - 1);"},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns the total number of tasks in the task list */"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    public int getTotalNoOfTasks() {"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":"        return tasks.size();"},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"    /** Adds a new task into task list */"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":"    public void addTask(Task newTask) {"},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"        tasks.add(newTask);"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"     * Adds a new task into the task list by receiving command from user Input"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":"     * @param commandType type task to add"},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"     * @param userInput full user input String"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"     * @throws NoDescriptionException if task description is empty"},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDescriptionException if no time description is given for Deadline and event task"},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidDeadlineDescriptionException if \"/by\" is not included in the user input for deadline task"},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":"     * @throws InvalidEventDescriptionException if \"/at\" is not included in the user input for deadline task"},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"wjchoi0712"},"content":"    public void addTask(String commandType, String userInput) throws NoDescriptionException,"},{"lineNumber":68,"author":{"gitId":"wjchoi0712"},"content":"            InvalidDescriptionException, InvalidDeadlineDescriptionException, InvalidEventDescriptionException {"},{"lineNumber":69,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":70,"author":{"gitId":"wjchoi0712"},"content":"        //Container to carry task description and task time"},{"lineNumber":71,"author":{"gitId":"wjchoi0712"},"content":"        String[] taskComponents;"},{"lineNumber":72,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":73,"author":{"gitId":"wjchoi0712"},"content":"        switch (commandType) {"},{"lineNumber":74,"author":{"gitId":"wjchoi0712"},"content":"        case \"todo\":"},{"lineNumber":75,"author":{"gitId":"wjchoi0712"},"content":"            String taskDescription \u003d new Parser().prepareForAddTodo(userInput);"},{"lineNumber":76,"author":{"gitId":"wjchoi0712"},"content":"            tasks.add(new ToDo(taskDescription));"},{"lineNumber":77,"author":{"gitId":"wjchoi0712"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"wjchoi0712"},"content":"        case \"deadline\":"},{"lineNumber":79,"author":{"gitId":"wjchoi0712"},"content":"            taskComponents \u003d new Parser().prepareForAddDeadline(userInput);"},{"lineNumber":80,"author":{"gitId":"wjchoi0712"},"content":"            tasks.add(new Deadline(taskComponents[0], taskComponents[1]));"},{"lineNumber":81,"author":{"gitId":"wjchoi0712"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"wjchoi0712"},"content":"        case \"event\":"},{"lineNumber":83,"author":{"gitId":"wjchoi0712"},"content":"            taskComponents \u003d new Parser().prepareForAddEvent(userInput);"},{"lineNumber":84,"author":{"gitId":"wjchoi0712"},"content":"            tasks.add(new Event(taskComponents[0], taskComponents[1]));"},{"lineNumber":85,"author":{"gitId":"wjchoi0712"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":89,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"wjchoi0712"},"content":"     * Marks a specific task in the list as done"},{"lineNumber":91,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"wjchoi0712"},"content":"     * @param completedTaskNo task number to be marked as done"},{"lineNumber":93,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"wjchoi0712"},"content":"    public void completeTask(int completedTaskNo) {"},{"lineNumber":95,"author":{"gitId":"wjchoi0712"},"content":"        tasks.get(completedTaskNo - 1).markAsDone();"},{"lineNumber":96,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":98,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"wjchoi0712"},"content":"     * Deletes a specific task in the list"},{"lineNumber":100,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"wjchoi0712"},"content":"     * @param deletedTaskNo task number to be deleted"},{"lineNumber":102,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"wjchoi0712"},"content":"    public void deleteTask(int deletedTaskNo) {"},{"lineNumber":104,"author":{"gitId":"wjchoi0712"},"content":"        tasks.remove(tasks.get(deletedTaskNo - 1));"},{"lineNumber":105,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":107,"author":{"gitId":"wjchoi0712"},"content":"    /** Deletes all the tasks in the task list */"},{"lineNumber":108,"author":{"gitId":"wjchoi0712"},"content":"    public void clearTaskList() {"},{"lineNumber":109,"author":{"gitId":"wjchoi0712"},"content":"        tasks.clear();"},{"lineNumber":110,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":112,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":113,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a full list of tasks as String */"},{"lineNumber":114,"author":{"gitId":"wjchoi0712"},"content":"    public String getTaskListAsString() {"},{"lineNumber":115,"author":{"gitId":"wjchoi0712"},"content":"        StringBuilder fullTaskList \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitId":"wjchoi0712"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":117,"author":{"gitId":"wjchoi0712"},"content":"            fullTaskList.append(\" \" + (i + 1) + \". \" + tasks.get(i).toString());"},{"lineNumber":118,"author":{"gitId":"wjchoi0712"},"content":"            fullTaskList.append(System.lineSeparator());"},{"lineNumber":119,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"wjchoi0712"},"content":"        return fullTaskList.deleteCharAt(fullTaskList.lastIndexOf(System.lineSeparator())).toString();"},{"lineNumber":121,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":122}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":" * Represents a ToDo type task with description and an indicator of whether the task has been completed or not."},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"    public ToDo(String description) {"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":"        return super.getDescription();"},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns a String representation of the task type */"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"    public String getType() {"},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"        return \"todo\";"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":26}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.ClearTaskException;"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.EmptyListException;"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"import duke.exception.action.NoMatchingTaskException;"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"import java.io.InputStream;"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"import java.io.PrintStream;"},{"lineNumber":12,"author":{"gitId":"wjchoi0712"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":14,"author":{"gitId":"wjchoi0712"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"wjchoi0712"},"content":" * TextUi of the application"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":" */"},{"lineNumber":17,"author":{"gitId":"wjchoi0712"},"content":"public class TextUi {"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":19,"author":{"gitId":"wjchoi0712"},"content":"    /** A decorative prefix added to the beginning of lines printed by task list */"},{"lineNumber":20,"author":{"gitId":"wjchoi0712"},"content":"    private static final String LINE_PREFIX \u003d \"   \";"},{"lineNumber":21,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":22,"author":{"gitId":"wjchoi0712"},"content":"    /** A platform independent line separator. */"},{"lineNumber":23,"author":{"gitId":"wjchoi0712"},"content":"    private static final String LS \u003d System.lineSeparator();"},{"lineNumber":24,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":25,"author":{"gitId":"wjchoi0712"},"content":"    /** A decorative line that surrounds all messages shown to the user */"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":27,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":28,"author":{"gitId":"wjchoi0712"},"content":"    /** A decorative logo of the application that is shown in the welcome message */"},{"lineNumber":29,"author":{"gitId":"wjchoi0712"},"content":"    private static final String LOGO \u003d \" ____        _\\n\""},{"lineNumber":30,"author":{"gitId":"wjchoi0712"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":31,"author":{"gitId":"wjchoi0712"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":32,"author":{"gitId":"wjchoi0712"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":33,"author":{"gitId":"wjchoi0712"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":34,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":35,"author":{"gitId":"wjchoi0712"},"content":"    /** Offset required to convert between 1-indexing and 0-indexing.  */"},{"lineNumber":36,"author":{"gitId":"wjchoi0712"},"content":"    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"},{"lineNumber":37,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":38,"author":{"gitId":"wjchoi0712"},"content":"    private static final String MESSAGE_GREETING \u003d \" Hello! I\u0027m Duke\" + \"\\n What can I do for you?\";"},{"lineNumber":39,"author":{"gitId":"wjchoi0712"},"content":"    private static final String MESSAGE_ENDING \u003d \" Bye. Hope to see you again soon :)\";"},{"lineNumber":40,"author":{"gitId":"wjchoi0712"},"content":"    private static final String MESSAGE_REMAININGTASK \u003d \" Now you have %d tasks in the list.\";"},{"lineNumber":41,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":42,"author":{"gitId":"wjchoi0712"},"content":"    private final Scanner in;"},{"lineNumber":43,"author":{"gitId":"wjchoi0712"},"content":"    private final PrintStream out;"},{"lineNumber":44,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":45,"author":{"gitId":"wjchoi0712"},"content":"    public TextUi(InputStream in, PrintStream out) {"},{"lineNumber":46,"author":{"gitId":"wjchoi0712"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":47,"author":{"gitId":"wjchoi0712"},"content":"        this.out \u003d out;"},{"lineNumber":48,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":50,"author":{"gitId":"wjchoi0712"},"content":"    public TextUi() {"},{"lineNumber":51,"author":{"gitId":"wjchoi0712"},"content":"        this(System.in, System.out);"},{"lineNumber":52,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":54,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"wjchoi0712"},"content":"     * Prints the messages that is to be delivered to the user"},{"lineNumber":56,"author":{"gitId":"wjchoi0712"},"content":"     * (Note: All messages are surrounded by a decorative Divider)"},{"lineNumber":57,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"wjchoi0712"},"content":"    public void showToUser(String... message) {"},{"lineNumber":59,"author":{"gitId":"wjchoi0712"},"content":"        out.println(DIVIDER);"},{"lineNumber":60,"author":{"gitId":"wjchoi0712"},"content":"        for (String m : message) {"},{"lineNumber":61,"author":{"gitId":"wjchoi0712"},"content":"            out.println(m);"},{"lineNumber":62,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"wjchoi0712"},"content":"        out.println(DIVIDER);"},{"lineNumber":64,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":66,"author":{"gitId":"wjchoi0712"},"content":"    /** Generates and prints the welcome message upon the start of the application. */"},{"lineNumber":67,"author":{"gitId":"wjchoi0712"},"content":"    public void showGreetingMessage() {"},{"lineNumber":68,"author":{"gitId":"wjchoi0712"},"content":"        showToUser(LOGO, MESSAGE_GREETING);"},{"lineNumber":69,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":71,"author":{"gitId":"wjchoi0712"},"content":"    /** Generates and prints the terminating message upon receiving bye command from the user. */"},{"lineNumber":72,"author":{"gitId":"wjchoi0712"},"content":"    public void showEndingMessage() {"},{"lineNumber":73,"author":{"gitId":"wjchoi0712"},"content":"        showToUser(MESSAGE_ENDING);"},{"lineNumber":74,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":76,"author":{"gitId":"wjchoi0712"},"content":"    /** Returns the full command input by the user */"},{"lineNumber":77,"author":{"gitId":"wjchoi0712"},"content":"    public String getUserCommand() {"},{"lineNumber":78,"author":{"gitId":"wjchoi0712"},"content":"        return in.nextLine();"},{"lineNumber":79,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":81,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out a message showing that the {@link Task} has been successfully"},{"lineNumber":83,"author":{"gitId":"wjchoi0712"},"content":"     * added to {@link TaskList}"},{"lineNumber":84,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list where the new task has been added"},{"lineNumber":86,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"wjchoi0712"},"content":"    public void showAddResponse(TaskList tasks) {"},{"lineNumber":88,"author":{"gitId":"wjchoi0712"},"content":"        String addedTask \u003d LINE_PREFIX + tasks.getLastTaskInTheList().toString();"},{"lineNumber":89,"author":{"gitId":"wjchoi0712"},"content":"        showToUser("},{"lineNumber":90,"author":{"gitId":"wjchoi0712"},"content":"                AddCommand.MESSAGE_SUCCESS,"},{"lineNumber":91,"author":{"gitId":"wjchoi0712"},"content":"                addedTask,"},{"lineNumber":92,"author":{"gitId":"wjchoi0712"},"content":"                String.format(MESSAGE_REMAININGTASK, tasks.getTotalNoOfTasks()));"},{"lineNumber":93,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":95,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out a message showing that the {@link Task} has been successfully marked as done"},{"lineNumber":97,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list where the completed task belongs to"},{"lineNumber":99,"author":{"gitId":"wjchoi0712"},"content":"     * @param taskNo task number that has been completed"},{"lineNumber":100,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"wjchoi0712"},"content":"    public void showDoneResponse(TaskList tasks, int taskNo) {"},{"lineNumber":102,"author":{"gitId":"wjchoi0712"},"content":"        String completedTask \u003d LINE_PREFIX + tasks.getTask(taskNo - DISPLAYED_INDEX_OFFSET).toString();"},{"lineNumber":103,"author":{"gitId":"wjchoi0712"},"content":"        showToUser("},{"lineNumber":104,"author":{"gitId":"wjchoi0712"},"content":"                DoneCommand.MESSAGE_SUCCESS,"},{"lineNumber":105,"author":{"gitId":"wjchoi0712"},"content":"                completedTask);"},{"lineNumber":106,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":108,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out a message showing that the {@link Task} has been successfully"},{"lineNumber":110,"author":{"gitId":"wjchoi0712"},"content":"     * deleted from the {@link TaskList}"},{"lineNumber":111,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list where the deleted task belongs to"},{"lineNumber":113,"author":{"gitId":"wjchoi0712"},"content":"     * @param taskNo task number that has been deleted"},{"lineNumber":114,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"wjchoi0712"},"content":"    public void showDeleteResponse(TaskList tasks, int taskNo) {"},{"lineNumber":116,"author":{"gitId":"wjchoi0712"},"content":"        String deletedTask \u003d LINE_PREFIX + tasks.getTask(taskNo - 1).toString();"},{"lineNumber":117,"author":{"gitId":"wjchoi0712"},"content":"        showToUser("},{"lineNumber":118,"author":{"gitId":"wjchoi0712"},"content":"                DeleteCommand.MESSAGE_SUCCESS,"},{"lineNumber":119,"author":{"gitId":"wjchoi0712"},"content":"                deletedTask,"},{"lineNumber":120,"author":{"gitId":"wjchoi0712"},"content":"                String.format(MESSAGE_REMAININGTASK, tasks.getTotalNoOfTasks() - DISPLAYED_INDEX_OFFSET));"},{"lineNumber":121,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":123,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out the full {@link TaskList}"},{"lineNumber":125,"author":{"gitId":"wjchoi0712"},"content":"     * The {@link TaskList#getTaskListAsString()} method is used to generate the String of {@link TaskList}"},{"lineNumber":126,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks list of task to be shown to the user"},{"lineNumber":128,"author":{"gitId":"wjchoi0712"},"content":"     * @throws EmptyListException if the task list is empty"},{"lineNumber":129,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"wjchoi0712"},"content":"    public void showListResponse(TaskList tasks) throws EmptyListException {"},{"lineNumber":131,"author":{"gitId":"wjchoi0712"},"content":"        if (!tasks.isEmpty()) {"},{"lineNumber":132,"author":{"gitId":"wjchoi0712"},"content":"            showToUser(ListCommand.MESSAGE_SUCCESS, tasks.getTaskListAsString());"},{"lineNumber":133,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"wjchoi0712"},"content":"            throw new EmptyListException();"},{"lineNumber":135,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":138,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out the {@link TaskList} that contains all {@link Task} that"},{"lineNumber":140,"author":{"gitId":"wjchoi0712"},"content":"     * matches the keyword input by the user"},{"lineNumber":141,"author":{"gitId":"wjchoi0712"},"content":"     * The {@link TaskList#getTaskListAsString()} method is used to generate the String of {@link TaskList}"},{"lineNumber":142,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"wjchoi0712"},"content":"     * @param matchingTasks task list which contains the keyword in the description"},{"lineNumber":144,"author":{"gitId":"wjchoi0712"},"content":"     * @throws NoMatchingTaskException if there are no tasks that matches the keyword"},{"lineNumber":145,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"wjchoi0712"},"content":"    public void showFindResponse(TaskList matchingTasks) throws NoMatchingTaskException {"},{"lineNumber":147,"author":{"gitId":"wjchoi0712"},"content":"        if (!matchingTasks.isEmpty()) {"},{"lineNumber":148,"author":{"gitId":"wjchoi0712"},"content":"            showToUser(FindCommand.MESSAGE_SUCCESS, matchingTasks.getTaskListAsString());"},{"lineNumber":149,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":150,"author":{"gitId":"wjchoi0712"},"content":"            throw new NoMatchingTaskException();"},{"lineNumber":151,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":154,"author":{"gitId":"wjchoi0712"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"wjchoi0712"},"content":"     * Generates and prints out a message showing the {@link TaskList} has been cleared"},{"lineNumber":156,"author":{"gitId":"wjchoi0712"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"wjchoi0712"},"content":"     * @param tasks task list to be cleared"},{"lineNumber":158,"author":{"gitId":"wjchoi0712"},"content":"     * @throws ClearTaskException if the task list is already empty"},{"lineNumber":159,"author":{"gitId":"wjchoi0712"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"wjchoi0712"},"content":"    public void showClearResponse(TaskList tasks) throws ClearTaskException {"},{"lineNumber":161,"author":{"gitId":"wjchoi0712"},"content":"        if (!tasks.isEmpty()) {"},{"lineNumber":162,"author":{"gitId":"wjchoi0712"},"content":"            showToUser(String.format(ClearCommand.MESSAGE_SUCCESS, tasks.getTotalNoOfTasks()));"},{"lineNumber":163,"author":{"gitId":"wjchoi0712"},"content":"        } else {"},{"lineNumber":164,"author":{"gitId":"wjchoi0712"},"content":"            throw new ClearTaskException();"},{"lineNumber":165,"author":{"gitId":"wjchoi0712"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"wjchoi0712"},"content":""},{"lineNumber":168,"author":{"gitId":"wjchoi0712"},"content":"    /** Generates and prints out a message explaining how each command works */"},{"lineNumber":169,"author":{"gitId":"wjchoi0712"},"content":"    public void showHelpResponse() {"},{"lineNumber":170,"author":{"gitId":"wjchoi0712"},"content":"        showToUser("},{"lineNumber":171,"author":{"gitId":"wjchoi0712"},"content":"                \"Commands:\" + LS"},{"lineNumber":172,"author":{"gitId":"wjchoi0712"},"content":"                        + AddCommand.MESSAGE_USAGE + LS"},{"lineNumber":173,"author":{"gitId":"wjchoi0712"},"content":"                        + DoneCommand.MESSAGE_USAGE + LS"},{"lineNumber":174,"author":{"gitId":"wjchoi0712"},"content":"                        + DeleteCommand.MESSAGE_USAGE + LS"},{"lineNumber":175,"author":{"gitId":"wjchoi0712"},"content":"                        + ClearCommand.MESSAGE_USAGE + LS"},{"lineNumber":176,"author":{"gitId":"wjchoi0712"},"content":"                        + ListCommand.MESSAGE_USAGE + LS"},{"lineNumber":177,"author":{"gitId":"wjchoi0712"},"content":"                        + FindCommand.MESSAGE_USAGE + LS"},{"lineNumber":178,"author":{"gitId":"wjchoi0712"},"content":"                        + ByeCommand.MESSAGE_USAGE"},{"lineNumber":179,"author":{"gitId":"wjchoi0712"},"content":"        );"},{"lineNumber":180,"author":{"gitId":"wjchoi0712"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"wjchoi0712"},"content":"}"}],"authorContributionMap":{"wjchoi0712":181}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wjchoi0712"},"content":"todo play"},{"lineNumber":2,"author":{"gitId":"wjchoi0712"},"content":"todo watch video"},{"lineNumber":3,"author":{"gitId":"wjchoi0712"},"content":"deadline finish homework /by 11th NOV"},{"lineNumber":4,"author":{"gitId":"wjchoi0712"},"content":"list"},{"lineNumber":5,"author":{"gitId":"wjchoi0712"},"content":"event attend lecture /at 2pm Tues"},{"lineNumber":6,"author":{"gitId":"wjchoi0712"},"content":"list"},{"lineNumber":7,"author":{"gitId":"wjchoi0712"},"content":"deadline clean up /by not sure"},{"lineNumber":8,"author":{"gitId":"wjchoi0712"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"wjchoi0712"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"wjchoi0712"},"content":"list"},{"lineNumber":11,"author":{"gitId":"wjchoi0712"},"content":"bye"}],"authorContributionMap":{"wjchoi0712":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"wjchoi0712"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"wjchoi0712":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"wjchoi0712"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"wjchoi0712"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"wjchoi0712":2,"-":32}}]
