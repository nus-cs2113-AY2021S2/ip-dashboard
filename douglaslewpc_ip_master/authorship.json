[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":"A brief User Guide for CS2113T IP Project. "},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"This user guide explains briefly how to use the commands to interact with the program."},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"As a task manager, the functionality of the program includes adding, deleting and searching(to name a few features) "},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"a task(either a todo, deadline or event) to the list. Do take note that the list is saved into a text file whenever the "},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"list is modified and the list will be automatically loaded from the text file when the program starts up."},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"## How to use this User Guide"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"The User Guide has two main sections as well as a \"Misc\" section. The first section \"features\" lists the features "},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"available while the second section \"Usage\" explains how the command can be used. "},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"The sample usage and expected output are included as well in the usage section for the purpose of clarity. "},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"The last section \"Misc\" shows the \"welcome screen\" generated when the program is opened and the"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"\"end screen\" generated when the program is terminated."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"### `Todo`"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"Adds a todo to the list."},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"### `Deadline`"},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"Adds a deadline to the list."},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"### `Event`"},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"Adds an event to the list."},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":"### `Mark Task as Done`"},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"Marks a task as completed on the list."},{"lineNumber":30,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaslewpc"},"content":"### `Delete`"},{"lineNumber":32,"author":{"gitId":"douglaslewpc"},"content":"Deletes a task from the list."},{"lineNumber":33,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":34,"author":{"gitId":"douglaslewpc"},"content":"### `Find`"},{"lineNumber":35,"author":{"gitId":"douglaslewpc"},"content":"Finds an item on the list."},{"lineNumber":36,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":37,"author":{"gitId":"douglaslewpc"},"content":"### `Show current list`"},{"lineNumber":38,"author":{"gitId":"douglaslewpc"},"content":"Views the current list."},{"lineNumber":39,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"douglaslewpc"},"content":"### `todo task` - adds a todo task to the list"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"douglaslewpc"},"content":"Adds a task that is categorized as todo to the list."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"douglaslewpc"},"content":"`todo read book`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":54,"author":{"gitId":"douglaslewpc"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":55,"author":{"gitId":"douglaslewpc"},"content":"      [T] [ ] read book"},{"lineNumber":56,"author":{"gitId":"douglaslewpc"},"content":"    Now you have 1 tasks in the list."},{"lineNumber":57,"author":{"gitId":"douglaslewpc"},"content":" "},{"lineNumber":58,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":59,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":60,"author":{"gitId":"douglaslewpc"},"content":"### `deadline task /by date` - adds a deadline task to the list"},{"lineNumber":61,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":62,"author":{"gitId":"douglaslewpc"},"content":"Adds a task that is categorized as a deadline to the list."},{"lineNumber":63,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":64,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":65,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":66,"author":{"gitId":"douglaslewpc"},"content":"`deadline return book /by June 6th`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":71,"author":{"gitId":"douglaslewpc"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":72,"author":{"gitId":"douglaslewpc"},"content":"      [D] [ ] return book (by: June 6th)"},{"lineNumber":73,"author":{"gitId":"douglaslewpc"},"content":"    Now you have 2 tasks in the list."},{"lineNumber":74,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":75,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":76,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":77,"author":{"gitId":"douglaslewpc"},"content":"### `event task /at location` - adds an event task to the list"},{"lineNumber":78,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":79,"author":{"gitId":"douglaslewpc"},"content":"Adds a task that is categorized as an event to the list."},{"lineNumber":80,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":81,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":82,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":83,"author":{"gitId":"douglaslewpc"},"content":"`event go to the library /at town`"},{"lineNumber":84,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":85,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":86,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":87,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":88,"author":{"gitId":"douglaslewpc"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":89,"author":{"gitId":"douglaslewpc"},"content":"      [E] [ ] go to the library (at: town)"},{"lineNumber":90,"author":{"gitId":"douglaslewpc"},"content":"    Now you have 3 tasks in the list."},{"lineNumber":91,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":92,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":93,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":94,"author":{"gitId":"douglaslewpc"},"content":"### `done task_number` - marks a task on the list as done"},{"lineNumber":95,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":96,"author":{"gitId":"douglaslewpc"},"content":"Marks a task that has been added to the list as done."},{"lineNumber":97,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":98,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":99,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":100,"author":{"gitId":"douglaslewpc"},"content":"`done 1`"},{"lineNumber":101,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":102,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":103,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":104,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":105,"author":{"gitId":"douglaslewpc"},"content":"    Nice! I\u0027ve marked this task as done:"},{"lineNumber":106,"author":{"gitId":"douglaslewpc"},"content":"      [T] [X] read book"},{"lineNumber":107,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":108,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":109,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":110,"author":{"gitId":"douglaslewpc"},"content":"### `delete task_number` - deletes a task from the list"},{"lineNumber":111,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":112,"author":{"gitId":"douglaslewpc"},"content":"Deletes a task on the list."},{"lineNumber":113,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":114,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":115,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":116,"author":{"gitId":"douglaslewpc"},"content":"`delete 1`"},{"lineNumber":117,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":118,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":119,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":120,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":121,"author":{"gitId":"douglaslewpc"},"content":"    Noted. I\u0027ve removed this task:"},{"lineNumber":122,"author":{"gitId":"douglaslewpc"},"content":"      [T] [X] read book"},{"lineNumber":123,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":124,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":125,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":126,"author":{"gitId":"douglaslewpc"},"content":"### `find keyword` - searches for a task on the list"},{"lineNumber":127,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":128,"author":{"gitId":"douglaslewpc"},"content":"Searches for a task on the list."},{"lineNumber":129,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":130,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":131,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":132,"author":{"gitId":"douglaslewpc"},"content":"`find library`"},{"lineNumber":133,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":134,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":135,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":136,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":137,"author":{"gitId":"douglaslewpc"},"content":"    Here are the matching tasks in your list:"},{"lineNumber":138,"author":{"gitId":"douglaslewpc"},"content":"    1. [E] [ ] go to the library (at: town)"},{"lineNumber":139,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":140,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":141,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":142,"author":{"gitId":"douglaslewpc"},"content":"### `list` - Displays the current list"},{"lineNumber":143,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":144,"author":{"gitId":"douglaslewpc"},"content":"Displays the current list."},{"lineNumber":145,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":146,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":147,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":148,"author":{"gitId":"douglaslewpc"},"content":"`list`"},{"lineNumber":149,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":150,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":151,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":152,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":153,"author":{"gitId":"douglaslewpc"},"content":"    Here are the tasks in your list:"},{"lineNumber":154,"author":{"gitId":"douglaslewpc"},"content":"    1. [D] [ ] return book (by: June 6th)"},{"lineNumber":155,"author":{"gitId":"douglaslewpc"},"content":"    2. [E] [ ] go to the library (at: town)"},{"lineNumber":156,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":157,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":158,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":159,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":160,"author":{"gitId":"douglaslewpc"},"content":"## Misc"},{"lineNumber":161,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":162,"author":{"gitId":"douglaslewpc"},"content":"### Welcome screen"},{"lineNumber":163,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":164,"author":{"gitId":"douglaslewpc"},"content":"The text that is shown when the program runs for the first time. The program will scan the contents of the text file "},{"lineNumber":165,"author":{"gitId":"douglaslewpc"},"content":"called \"duke.txt\" and load the list into the program. If no text file called \"duke.txt\" is found or if the contents of the "},{"lineNumber":166,"author":{"gitId":"douglaslewpc"},"content":"text file is empty, \"The list is empty\" will be displayed."},{"lineNumber":167,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":168,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":169,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":170,"author":{"gitId":"douglaslewpc"},"content":"    Hello from"},{"lineNumber":171,"author":{"gitId":"douglaslewpc"},"content":"    ____        _"},{"lineNumber":172,"author":{"gitId":"douglaslewpc"},"content":"    |  _ \\ _   _| | _____"},{"lineNumber":173,"author":{"gitId":"douglaslewpc"},"content":"    | | | | | | | |/ / _ \\"},{"lineNumber":174,"author":{"gitId":"douglaslewpc"},"content":"    | |_| | |_| |   \u003c  __/"},{"lineNumber":175,"author":{"gitId":"douglaslewpc"},"content":"    |____/ \\__,_|_|\\_\\___|"},{"lineNumber":176,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":177,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":178,"author":{"gitId":"douglaslewpc"},"content":"    Hello! I\u0027m Duke"},{"lineNumber":179,"author":{"gitId":"douglaslewpc"},"content":"    What can I do for you?"},{"lineNumber":180,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":181,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":182,"author":{"gitId":"douglaslewpc"},"content":"        -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":183,"author":{"gitId":"douglaslewpc"},"content":"        Here are the tasks in your list:"},{"lineNumber":184,"author":{"gitId":"douglaslewpc"},"content":"        1. [D] [ ] return book (by: June 6th)"},{"lineNumber":185,"author":{"gitId":"douglaslewpc"},"content":"        2. [E] [ ] go to the library (at: town)"},{"lineNumber":186,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":187,"author":{"gitId":"douglaslewpc"},"content":"        -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":188,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":189,"author":{"gitId":"douglaslewpc"},"content":"### End screen"},{"lineNumber":190,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":191,"author":{"gitId":"douglaslewpc"},"content":"The display that is shown when the program is terminated. The display shows the tasks that have been added to the list, which "},{"lineNumber":192,"author":{"gitId":"douglaslewpc"},"content":"is the content that has been written to the text file \"duke.txt\"(the content of the list is saved to the text file whenever "},{"lineNumber":193,"author":{"gitId":"douglaslewpc"},"content":"a command is called). If the contents of the list is empty, \"The list is empty\" will be shown and the text file will be blank."},{"lineNumber":194,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":195,"author":{"gitId":"douglaslewpc"},"content":"Example of usage:"},{"lineNumber":196,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":197,"author":{"gitId":"douglaslewpc"},"content":"`bye`"},{"lineNumber":198,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":199,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":200,"author":{"gitId":"douglaslewpc"},"content":"Expected outcome:"},{"lineNumber":201,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":202,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":203,"author":{"gitId":"douglaslewpc"},"content":"    Here are the tasks in your list:"},{"lineNumber":204,"author":{"gitId":"douglaslewpc"},"content":"    1. [D] [ ] return book (by: June 6th)"},{"lineNumber":205,"author":{"gitId":"douglaslewpc"},"content":"    2. [E] [ ] go to the library (at: town)"},{"lineNumber":206,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":207,"author":{"gitId":"douglaslewpc"},"content":"    -------------------------------------------------------------------------------------------------------------------------------"},{"lineNumber":208,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":209,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":210,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":211,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":212,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":213,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":214,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":215,"author":{"gitId":"douglaslewpc"},"content":""}],"authorContributionMap":{"douglaslewpc":197,"-":18}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"import tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"import ui.Ui;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"import constants.Constants;"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"    private static TaskList tasks \u003d new TaskList();"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"    private static final Ui ui \u003d new Ui();"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"    private static Constants constants \u003d new Constants();"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"        ui.programStartUp(tasks);"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":"        boolean isProgramRunning \u003d true;"},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"        while (isProgramRunning \u0026\u0026 in.hasNextLine()) {"},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"            String line \u003d in.nextLine();"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"            String[] inputs \u003d line.split(\" \");"},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"            isProgramRunning \u003d ui.userInterface(tasks, inputs);"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(constants.byeMessage);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"douglaslewpc":19,"-":4}},{"path":"src/main/java/commands/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"        return \"[D] \" + super.toString() + \"(by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":16}},{"path":"src/main/java/commands/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"    protected String at;"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"    public Event(String description, String at) {"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"        this.at \u003d at;"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"        return \"[E] \" + super.toString() + \"(at: \" + at + \")\";"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":16}},{"path":"src/main/java/commands/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"    public void markAsDone() {"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"        isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"    public String getTask() {"},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"        return description;"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"        if (isDone) {"},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"            return \"[X] \" + description;"},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"            return \"[ ] \" + description;"},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":29}},{"path":"src/main/java/commands/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"    public Todo(String description) {"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":13}},{"path":"src/main/java/constants/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package constants;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class Constants {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"    public static final String border \u003d \"------------------------------------------------------------\";"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"    public static final String logo \u003d \" ____        _        \\n\""},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"    public static final String welcomeMessage \u003d \"Hello from\\n\" + logo"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"            + border + \"\\n\""},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"            + \"Hello! I\u0027m Duke\\n\""},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"            + \"What can I do for you?\\n\""},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":"            + border + \"\\n\";"},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"    public static final String dukeExceptionMessage \u003d border + \"\\n\""},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"            + \"OOPS!! I\u0027m sorry, but I don\u0027t know what that means.\" + \"\\n\""},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"            + border + \"\\n\";"},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"    public static final String indexOutOfBoundsMessage \u003d border + \"\\n\""},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"            + \"Index out of range\" + \"\\n\""},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"            + border + \"\\n\";"},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"    public static final String byeMessage \u003d border + \"\\n\""},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"            + \"Bye. Hope to see you again soon!\" + \"\\n\""},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"            + border + \"\\n\";"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":25}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"    public DukeException(String s) {"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"        super(s);"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":8}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":" * The Parser class deals with making sense of the user input"},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":" * */"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"package parser;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"import commands.Deadline;"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"import commands.Event;"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"import commands.Todo;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"import constants.Constants;"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"import exceptions.DukeException;"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"import tasklist.TaskList;"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"    private static Constants constants \u003d new Constants();"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"    public static final List\u003cString\u003e commands \u003d Arrays.asList(\"event\", \"deadline\","},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"            \"todo\", \"list\", \"done\", \"delete\", \"bye\", \"find\");"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"     * The processUserCommand method checks if the userInput begins with a valid command"},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"     * @params userCommand takes in the userInput as a String"},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"    public String processUserCommand(String userCommand) {"},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"        if (commands.contains(userCommand)) {"},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":"            return userCommand;"},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"            return \"invalid_user_input\";"},{"lineNumber":30,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":33,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":34,"author":{"gitId":"douglaslewpc"},"content":"     * The processTodo method within the Parser class processes the user input into the required format"},{"lineNumber":35,"author":{"gitId":"douglaslewpc"},"content":"     * @params userInput is a String[] that stores the user input"},{"lineNumber":36,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":37,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":38,"author":{"gitId":"douglaslewpc"},"content":"    public String processTodo(String[] userInput) {"},{"lineNumber":39,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d \"\";"},{"lineNumber":40,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"douglaslewpc"},"content":"            int wordsCount \u003d userInput.length;"},{"lineNumber":42,"author":{"gitId":"douglaslewpc"},"content":"            if (userInput.length \u003d\u003d 1) {"},{"lineNumber":43,"author":{"gitId":"douglaslewpc"},"content":"                throw new DukeException(\"missing_parameter\");"},{"lineNumber":44,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"douglaslewpc"},"content":"            for (String word : userInput) {"},{"lineNumber":46,"author":{"gitId":"douglaslewpc"},"content":"                wordsCount--;"},{"lineNumber":47,"author":{"gitId":"douglaslewpc"},"content":"                if (word.equals(\"todo\")) {"},{"lineNumber":48,"author":{"gitId":"douglaslewpc"},"content":"                    continue;"},{"lineNumber":49,"author":{"gitId":"douglaslewpc"},"content":"                } else if (wordsCount \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"douglaslewpc"},"content":"                    description \u003d description + word;"},{"lineNumber":51,"author":{"gitId":"douglaslewpc"},"content":"                } else {"},{"lineNumber":52,"author":{"gitId":"douglaslewpc"},"content":"                    description \u003d description + word + \" \";"},{"lineNumber":53,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"douglaslewpc"},"content":"        } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":57,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"OOPS!! The description of the todo cannot be empty.\");"},{"lineNumber":58,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":59,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"douglaslewpc"},"content":"        return description;"},{"lineNumber":61,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":63,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":64,"author":{"gitId":"douglaslewpc"},"content":"     * The processEvent method within the Parser class processes the user input into the required format"},{"lineNumber":65,"author":{"gitId":"douglaslewpc"},"content":"     * @params userInput is a String[] that stores the user input"},{"lineNumber":66,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":67,"author":{"gitId":"douglaslewpc"},"content":"    public String[] processEvent(String[] userInput) {"},{"lineNumber":68,"author":{"gitId":"douglaslewpc"},"content":"        String[] information \u003d new String[2];"},{"lineNumber":69,"author":{"gitId":"douglaslewpc"},"content":"        information[0] \u003d \"\";"},{"lineNumber":70,"author":{"gitId":"douglaslewpc"},"content":"        information[1] \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"douglaslewpc"},"content":"            boolean atFlag \u003d false;"},{"lineNumber":73,"author":{"gitId":"douglaslewpc"},"content":"            int wordsCount \u003d userInput.length;"},{"lineNumber":74,"author":{"gitId":"douglaslewpc"},"content":"            if (wordsCount \u003d\u003d 1) {"},{"lineNumber":75,"author":{"gitId":"douglaslewpc"},"content":"                throw new DukeException(\"missing_parameter\");"},{"lineNumber":76,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"douglaslewpc"},"content":"            for (String word : userInput) {"},{"lineNumber":78,"author":{"gitId":"douglaslewpc"},"content":"                wordsCount--;"},{"lineNumber":79,"author":{"gitId":"douglaslewpc"},"content":"                if (word.equals(\"/at\")) {"},{"lineNumber":80,"author":{"gitId":"douglaslewpc"},"content":"                    atFlag \u003d true;"},{"lineNumber":81,"author":{"gitId":"douglaslewpc"},"content":"                    continue;"},{"lineNumber":82,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"douglaslewpc"},"content":"                if (word.equals(\"event\")) {"},{"lineNumber":84,"author":{"gitId":"douglaslewpc"},"content":"                    continue;"},{"lineNumber":85,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"douglaslewpc"},"content":"                if (atFlag \u0026\u0026 (wordsCount \u003d\u003d 0)) {"},{"lineNumber":87,"author":{"gitId":"douglaslewpc"},"content":"                    information[1] \u003d information[1] + word;"},{"lineNumber":88,"author":{"gitId":"douglaslewpc"},"content":"                } else if (atFlag) {"},{"lineNumber":89,"author":{"gitId":"douglaslewpc"},"content":"                    information[1] \u003d information[1] + word + \" \";"},{"lineNumber":90,"author":{"gitId":"douglaslewpc"},"content":"                } else {"},{"lineNumber":91,"author":{"gitId":"douglaslewpc"},"content":"                    information[0] \u003d information[0] + word + \" \";"},{"lineNumber":92,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"douglaslewpc"},"content":"        } catch (DukeException e) {"},{"lineNumber":95,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":96,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"OOPS!! The description of the event cannot be empty.\");"},{"lineNumber":97,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":98,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"douglaslewpc"},"content":"        return information;"},{"lineNumber":100,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":102,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":103,"author":{"gitId":"douglaslewpc"},"content":"     * The processDeadline method within the Parser class processes the user input into the required format"},{"lineNumber":104,"author":{"gitId":"douglaslewpc"},"content":"     * @params userInput is a String[] that stores the user input"},{"lineNumber":105,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":106,"author":{"gitId":"douglaslewpc"},"content":"    public String[] processDeadline(String[] userInput) {"},{"lineNumber":107,"author":{"gitId":"douglaslewpc"},"content":"        String[] information \u003d new String[2];"},{"lineNumber":108,"author":{"gitId":"douglaslewpc"},"content":"        information[0] \u003d \"\";"},{"lineNumber":109,"author":{"gitId":"douglaslewpc"},"content":"        information[1] \u003d \"\";"},{"lineNumber":110,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"douglaslewpc"},"content":"            boolean byFlag \u003d false;"},{"lineNumber":112,"author":{"gitId":"douglaslewpc"},"content":"            int wordsCount \u003d userInput.length;"},{"lineNumber":113,"author":{"gitId":"douglaslewpc"},"content":"            if (wordsCount \u003d\u003d 1) {"},{"lineNumber":114,"author":{"gitId":"douglaslewpc"},"content":"                throw new DukeException(\"missing_parameter\");"},{"lineNumber":115,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"douglaslewpc"},"content":"            for (String word : userInput) {"},{"lineNumber":117,"author":{"gitId":"douglaslewpc"},"content":"                wordsCount--;"},{"lineNumber":118,"author":{"gitId":"douglaslewpc"},"content":"                if (word.equals(\"/by\")) {"},{"lineNumber":119,"author":{"gitId":"douglaslewpc"},"content":"                    byFlag \u003d true;"},{"lineNumber":120,"author":{"gitId":"douglaslewpc"},"content":"                    continue;"},{"lineNumber":121,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":122,"author":{"gitId":"douglaslewpc"},"content":"                if (word.equals(\"deadline\")) {"},{"lineNumber":123,"author":{"gitId":"douglaslewpc"},"content":"                    continue;"},{"lineNumber":124,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":125,"author":{"gitId":"douglaslewpc"},"content":"                if (byFlag \u0026\u0026 (wordsCount \u003d\u003d 0)) {"},{"lineNumber":126,"author":{"gitId":"douglaslewpc"},"content":"                    information[1] \u003d information[1] + word;"},{"lineNumber":127,"author":{"gitId":"douglaslewpc"},"content":"                } else if (byFlag) {"},{"lineNumber":128,"author":{"gitId":"douglaslewpc"},"content":"                    information[1] \u003d information[1] + word + \" \";"},{"lineNumber":129,"author":{"gitId":"douglaslewpc"},"content":"                } else {"},{"lineNumber":130,"author":{"gitId":"douglaslewpc"},"content":"                    information[0] \u003d information[0] + word + \" \";"},{"lineNumber":131,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":132,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"douglaslewpc"},"content":"        } catch (DukeException e) {"},{"lineNumber":134,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":135,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"OOPS!! The description of the deadline cannot be empty.\");"},{"lineNumber":136,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":137,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"douglaslewpc"},"content":"        return information;"},{"lineNumber":139,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":141,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":142,"author":{"gitId":"douglaslewpc"},"content":"     * The loadTodo method loads tasks of type \"Todo\" into a tasklist"},{"lineNumber":143,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Todo\" task to."},{"lineNumber":144,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Todo\" task"},{"lineNumber":145,"author":{"gitId":"douglaslewpc"},"content":"     * @params startingIndex specifies which index the String[] inputs should start to be read from"},{"lineNumber":146,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":147,"author":{"gitId":"douglaslewpc"},"content":"    public void loadTodo(TaskList tasks, String[] inputs, int startingIndex) {"},{"lineNumber":148,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d \"\";"},{"lineNumber":149,"author":{"gitId":"douglaslewpc"},"content":"        for (int i \u003d startingIndex; i \u003c inputs.length; i++) {"},{"lineNumber":150,"author":{"gitId":"douglaslewpc"},"content":"            description \u003d description + inputs[i] + \" \";"},{"lineNumber":151,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"douglaslewpc"},"content":"        Todo todo \u003d new Todo(description);"},{"lineNumber":153,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(todo);"},{"lineNumber":154,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs[1].equals(\"[X]\")) {"},{"lineNumber":155,"author":{"gitId":"douglaslewpc"},"content":"            tasks.markTaskAsDone(tasks.getTaskCount() - 1);"},{"lineNumber":156,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":159,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":160,"author":{"gitId":"douglaslewpc"},"content":"     * The loadDeadline method loads tasks of type \"Deadline\" into a tasklist"},{"lineNumber":161,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Deadline\" task to."},{"lineNumber":162,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Deadline\" task"},{"lineNumber":163,"author":{"gitId":"douglaslewpc"},"content":"     * @params startingIndex specifies which index the String[] inputs should start to be read from"},{"lineNumber":164,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":165,"author":{"gitId":"douglaslewpc"},"content":"    public void loadDeadline(TaskList tasks, String[] inputs, int startingIndex) {"},{"lineNumber":166,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d \"\";"},{"lineNumber":167,"author":{"gitId":"douglaslewpc"},"content":"        String by \u003d \"\";"},{"lineNumber":168,"author":{"gitId":"douglaslewpc"},"content":"        boolean byFlag \u003d false;"},{"lineNumber":169,"author":{"gitId":"douglaslewpc"},"content":"        for (int i \u003d startingIndex; i \u003c inputs.length; i++) {"},{"lineNumber":170,"author":{"gitId":"douglaslewpc"},"content":"            if (inputs[i].equals(\"(by:\")) {"},{"lineNumber":171,"author":{"gitId":"douglaslewpc"},"content":"                byFlag \u003d true;"},{"lineNumber":172,"author":{"gitId":"douglaslewpc"},"content":"            } else if (!byFlag) {"},{"lineNumber":173,"author":{"gitId":"douglaslewpc"},"content":"                description \u003d description + inputs[i] + \" \";"},{"lineNumber":174,"author":{"gitId":"douglaslewpc"},"content":"            } else {"},{"lineNumber":175,"author":{"gitId":"douglaslewpc"},"content":"                by \u003d by + inputs[i] + \" \";"},{"lineNumber":176,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"douglaslewpc"},"content":"        by \u003d by.stripTrailing();"},{"lineNumber":179,"author":{"gitId":"douglaslewpc"},"content":"        by \u003d by.replace(\")\", \"\");"},{"lineNumber":180,"author":{"gitId":"douglaslewpc"},"content":"        Deadline deadline \u003d new Deadline(description, by);"},{"lineNumber":181,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(deadline);"},{"lineNumber":182,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs[1].equals(\"[X]\")) {"},{"lineNumber":183,"author":{"gitId":"douglaslewpc"},"content":"            tasks.markTaskAsDone(tasks.getTaskCount() - 1);"},{"lineNumber":184,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":187,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":188,"author":{"gitId":"douglaslewpc"},"content":"     * The loadEvent method loads tasks of type \"Event\" into a tasklist"},{"lineNumber":189,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Event\" task to."},{"lineNumber":190,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Event\" task"},{"lineNumber":191,"author":{"gitId":"douglaslewpc"},"content":"     * @params startingIndex specifies which index the String[] inputs should start to be read from"},{"lineNumber":192,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":193,"author":{"gitId":"douglaslewpc"},"content":"    public void loadEvent(TaskList tasks, String[] inputs, int startingIndex) {"},{"lineNumber":194,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d \"\";"},{"lineNumber":195,"author":{"gitId":"douglaslewpc"},"content":"        String at \u003d \"\";"},{"lineNumber":196,"author":{"gitId":"douglaslewpc"},"content":"        boolean atFlag \u003d false;"},{"lineNumber":197,"author":{"gitId":"douglaslewpc"},"content":"        for (int i \u003d startingIndex; i \u003c inputs.length; i++) {"},{"lineNumber":198,"author":{"gitId":"douglaslewpc"},"content":"            if (inputs[i].equals(\"(at:\")) {"},{"lineNumber":199,"author":{"gitId":"douglaslewpc"},"content":"                atFlag \u003d true;"},{"lineNumber":200,"author":{"gitId":"douglaslewpc"},"content":"            } else if (!atFlag) {"},{"lineNumber":201,"author":{"gitId":"douglaslewpc"},"content":"                description \u003d description + inputs[i] + \" \";"},{"lineNumber":202,"author":{"gitId":"douglaslewpc"},"content":"            } else {"},{"lineNumber":203,"author":{"gitId":"douglaslewpc"},"content":"                at \u003d at + inputs[i] + \" \";"},{"lineNumber":204,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"douglaslewpc"},"content":"        at \u003d at.stripTrailing();"},{"lineNumber":207,"author":{"gitId":"douglaslewpc"},"content":"        at \u003d at.replace(\")\", \"\");"},{"lineNumber":208,"author":{"gitId":"douglaslewpc"},"content":"        Event event \u003d new Event(description, at);"},{"lineNumber":209,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(event);"},{"lineNumber":210,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs[1].equals(\"[X]\")) {"},{"lineNumber":211,"author":{"gitId":"douglaslewpc"},"content":"            tasks.markTaskAsDone(tasks.getTaskCount() - 1);"},{"lineNumber":212,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":214}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":" * The Storage class deals with saving tasks into files and loading tasks from files."},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":" * */"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"package storage;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"import parser.Parser;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"import tasklist.TaskList;"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"    private static Parser parser \u003d new Parser();"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"     * The loadFile method loads the contents of a text file."},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"     * If the text file \"duke.txt\" cannot be found, a FileNotFoundException is thrown"},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to which the tasks from the text file \"duke.txt\" are added to."},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"    public static void loadFile(TaskList tasks) throws FileNotFoundException {"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"        File filePath \u003d new File(\"duke.txt\");"},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"        if (!filePath.exists()) {"},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":"            throw new FileNotFoundException();"},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"        Scanner s \u003d new Scanner(filePath);"},{"lineNumber":30,"author":{"gitId":"douglaslewpc"},"content":"        if (filePath.length() !\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"douglaslewpc"},"content":"            while (s.hasNext()) {"},{"lineNumber":32,"author":{"gitId":"douglaslewpc"},"content":"                String currentLine \u003d s.nextLine();"},{"lineNumber":33,"author":{"gitId":"douglaslewpc"},"content":"                String[] inputs \u003d currentLine.split(\" \");"},{"lineNumber":34,"author":{"gitId":"douglaslewpc"},"content":"                int startingIndex \u003d 2;"},{"lineNumber":35,"author":{"gitId":"douglaslewpc"},"content":"                if (inputs[1].equals(\"[\")) {"},{"lineNumber":36,"author":{"gitId":"douglaslewpc"},"content":"                    startingIndex \u003d 3;"},{"lineNumber":37,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"douglaslewpc"},"content":"                if (inputs[0].equals(\"[T]\")) {"},{"lineNumber":39,"author":{"gitId":"douglaslewpc"},"content":"                    parser.loadTodo(tasks, inputs, startingIndex);"},{"lineNumber":40,"author":{"gitId":"douglaslewpc"},"content":"                } else if (inputs[0].equals(\"[D]\")) {"},{"lineNumber":41,"author":{"gitId":"douglaslewpc"},"content":"                    parser.loadDeadline(tasks, inputs, startingIndex);"},{"lineNumber":42,"author":{"gitId":"douglaslewpc"},"content":"                } else if (inputs[0].equals(\"[E]\")) {"},{"lineNumber":43,"author":{"gitId":"douglaslewpc"},"content":"                    parser.loadEvent(tasks, inputs, startingIndex);"},{"lineNumber":44,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":49,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":50,"author":{"gitId":"douglaslewpc"},"content":"     * The saveFile method saves the contents of the list into a text file \"duke.txt\"."},{"lineNumber":51,"author":{"gitId":"douglaslewpc"},"content":"     * If an error is encountered when creating a new file \"duke.txt\", an IOException is thrown"},{"lineNumber":52,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist from which the tasks to be written onto the text file \"duke.txt\""},{"lineNumber":53,"author":{"gitId":"douglaslewpc"},"content":"     * are retrieved from."},{"lineNumber":54,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":55,"author":{"gitId":"douglaslewpc"},"content":"    public static void saveFile(TaskList tasks) throws IOException {"},{"lineNumber":56,"author":{"gitId":"douglaslewpc"},"content":"        File filePath \u003d new File(\"duke.txt\");"},{"lineNumber":57,"author":{"gitId":"douglaslewpc"},"content":"        if (!filePath.exists()) {"},{"lineNumber":58,"author":{"gitId":"douglaslewpc"},"content":"            if (filePath.createNewFile()) {"},{"lineNumber":59,"author":{"gitId":"douglaslewpc"},"content":"                throw new IOException();"},{"lineNumber":60,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"douglaslewpc"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":63,"author":{"gitId":"douglaslewpc"},"content":"        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"},{"lineNumber":64,"author":{"gitId":"douglaslewpc"},"content":"            String task \u003d tasks.getCurrentTask(i).toString() + \"\\n\";"},{"lineNumber":65,"author":{"gitId":"douglaslewpc"},"content":"            fileWriter.write(task);"},{"lineNumber":66,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"douglaslewpc"},"content":"        fileWriter.close();"},{"lineNumber":68,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":69}},{"path":"src/main/java/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":" * The TaskListStores the task list and has operations to add/delete tasks"},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":" */"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"package tasklist;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"import commands.Task;"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"import constants.Constants;"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"import ui.Ui;"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":"    private static Constants constants \u003d new Constants();"},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"    private int taskCount \u003d 0;"},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"     * The add task method adds a task to the list"},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"     * @params task contains information of the task to be added to the list"},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":"    public void addTask(Task task) {"},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"        tasks.add(task);"},{"lineNumber":30,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(constants.border);"},{"lineNumber":31,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":32,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(getMostRecentTaskAdded());"},{"lineNumber":33,"author":{"gitId":"douglaslewpc"},"content":"        taskCount++;"},{"lineNumber":34,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"},{"lineNumber":35,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(constants.border);"},{"lineNumber":36,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":38,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":39,"author":{"gitId":"douglaslewpc"},"content":"    The deleteTask method deletes a task from the list"},{"lineNumber":40,"author":{"gitId":"douglaslewpc"},"content":"    * @params taskNum specifies the task number of the task to be deleted"},{"lineNumber":41,"author":{"gitId":"douglaslewpc"},"content":"    * */"},{"lineNumber":42,"author":{"gitId":"douglaslewpc"},"content":"    public void deleteTask(int taskNum) {"},{"lineNumber":43,"author":{"gitId":"douglaslewpc"},"content":"        if (taskNum \u003c taskCount \u0026\u0026 taskNum \u003e\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":45,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":46,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(tasks.get(taskNum));"},{"lineNumber":47,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":48,"author":{"gitId":"douglaslewpc"},"content":"            tasks.remove(taskNum);"},{"lineNumber":49,"author":{"gitId":"douglaslewpc"},"content":"            taskCount--;"},{"lineNumber":50,"author":{"gitId":"douglaslewpc"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":52,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Index out of range\");"},{"lineNumber":53,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":54,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":57,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":58,"author":{"gitId":"douglaslewpc"},"content":"     * The getTaskCount method retrieves the current total number of tasks on the list"},{"lineNumber":59,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":60,"author":{"gitId":"douglaslewpc"},"content":"    public int getTaskCount() {"},{"lineNumber":61,"author":{"gitId":"douglaslewpc"},"content":"        return taskCount;"},{"lineNumber":62,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":64,"author":{"gitId":"douglaslewpc"},"content":"    public Task getMostRecentTaskAdded() {"},{"lineNumber":65,"author":{"gitId":"douglaslewpc"},"content":"        Task task \u003d tasks.get(taskCount);"},{"lineNumber":66,"author":{"gitId":"douglaslewpc"},"content":"        return task;"},{"lineNumber":67,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":69,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":70,"author":{"gitId":"douglaslewpc"},"content":"     * The markTaskAsDone method marks a task on the list as done"},{"lineNumber":71,"author":{"gitId":"douglaslewpc"},"content":"     * @params taskNum of the task to be marked as done"},{"lineNumber":72,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":73,"author":{"gitId":"douglaslewpc"},"content":"    public void markTaskAsDone(int taskNum) {"},{"lineNumber":74,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"douglaslewpc"},"content":"            tasks.get(taskNum).markAsDone();"},{"lineNumber":76,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":77,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":78,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(tasks.get(taskNum));"},{"lineNumber":79,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":80,"author":{"gitId":"douglaslewpc"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":81,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.indexOutOfBoundsMessage);"},{"lineNumber":82,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":85,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":86,"author":{"gitId":"douglaslewpc"},"content":"     * The showList method displays the current list"},{"lineNumber":87,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":88,"author":{"gitId":"douglaslewpc"},"content":"    public void showList() {"},{"lineNumber":89,"author":{"gitId":"douglaslewpc"},"content":"        if (taskCount \u003e 0) {"},{"lineNumber":90,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":91,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":92,"author":{"gitId":"douglaslewpc"},"content":"            for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":93,"author":{"gitId":"douglaslewpc"},"content":"                System.out.println((i + 1) + \". \" + tasks.get(i));"},{"lineNumber":94,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":96,"author":{"gitId":"douglaslewpc"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":98,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"The list is empty\");"},{"lineNumber":99,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":100,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":103,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":104,"author":{"gitId":"douglaslewpc"},"content":"     * The find method searches for a keyword in the list of tasks"},{"lineNumber":105,"author":{"gitId":"douglaslewpc"},"content":"     * @params keyword takes in a string as the keyword to be searched for in the list of tasks"},{"lineNumber":106,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":107,"author":{"gitId":"douglaslewpc"},"content":"    public void find(String keyword) {"},{"lineNumber":108,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"douglaslewpc"},"content":"            int currentListNumber \u003d 1;"},{"lineNumber":110,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":111,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":112,"author":{"gitId":"douglaslewpc"},"content":"            for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":113,"author":{"gitId":"douglaslewpc"},"content":"                if ((tasks.get(i).getTask()).contains(keyword)) {"},{"lineNumber":114,"author":{"gitId":"douglaslewpc"},"content":"                    System.out.println(\"    \" + currentListNumber + \". \" + tasks.get(i));"},{"lineNumber":115,"author":{"gitId":"douglaslewpc"},"content":"                    currentListNumber++;"},{"lineNumber":116,"author":{"gitId":"douglaslewpc"},"content":"                }"},{"lineNumber":117,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.border);"},{"lineNumber":119,"author":{"gitId":"douglaslewpc"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":120,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please specify a keyword to find\");"},{"lineNumber":121,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":124,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":125,"author":{"gitId":"douglaslewpc"},"content":"     * The getCurrentTask method returns a specific task from the list of tasks"},{"lineNumber":126,"author":{"gitId":"douglaslewpc"},"content":"     * @params taskNum specifies the task number of the task to be returned from the list of tasks"},{"lineNumber":127,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":128,"author":{"gitId":"douglaslewpc"},"content":"    public Task getCurrentTask(int taskNum) {"},{"lineNumber":129,"author":{"gitId":"douglaslewpc"},"content":"        return tasks.get(taskNum);"},{"lineNumber":130,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":131}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"import commands.Deadline;"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"import commands.Event;"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"import commands.Todo;"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"import constants.Constants;"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"import exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"import parser.Parser;"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"import storage.Storage;"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"import tasklist.TaskList;"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"douglaslewpc"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":15,"author":{"gitId":"douglaslewpc"},"content":"public class Ui {"},{"lineNumber":16,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaslewpc"},"content":"    private static Constants constants \u003d new Constants();"},{"lineNumber":18,"author":{"gitId":"douglaslewpc"},"content":"    private static Storage storage \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"douglaslewpc"},"content":"    private static Parser parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"douglaslewpc"},"content":"    private static int maxTaskCount \u003d 100;"},{"lineNumber":21,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":23,"author":{"gitId":"douglaslewpc"},"content":"     * The saveTaskList method saves the contents of the tasklist into a text file \"duke.txt\""},{"lineNumber":24,"author":{"gitId":"douglaslewpc"},"content":"     *  If an error is encountered when creating a new file \"duke.txt\", an IOException is thrown"},{"lineNumber":25,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist from which the tasks to be written onto the text file \"duke.txt\""},{"lineNumber":26,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":27,"author":{"gitId":"douglaslewpc"},"content":"    public void saveTaskList(TaskList tasks) {"},{"lineNumber":28,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"douglaslewpc"},"content":"            storage.saveFile(tasks);"},{"lineNumber":30,"author":{"gitId":"douglaslewpc"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Unable to save the current list as a text file\");"},{"lineNumber":32,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":35,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":36,"author":{"gitId":"douglaslewpc"},"content":"     * The programStartUp method loads the file \"duke.txt\""},{"lineNumber":37,"author":{"gitId":"douglaslewpc"},"content":"     * If the text file \"duke.txt\" cannot be found, a FileNotFoundException is thrown"},{"lineNumber":38,"author":{"gitId":"douglaslewpc"},"content":"     * The method also prints the welcomeMessage and displays the current list"},{"lineNumber":39,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to which the tasks from the text file \"duke.txt\" are added to."},{"lineNumber":40,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":41,"author":{"gitId":"douglaslewpc"},"content":"    public void programStartUp(TaskList tasks) {"},{"lineNumber":42,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"douglaslewpc"},"content":"            storage.loadFile(tasks);"},{"lineNumber":44,"author":{"gitId":"douglaslewpc"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":45,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"No saved file found\");"},{"lineNumber":46,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"douglaslewpc"},"content":"        System.out.println(constants.welcomeMessage);"},{"lineNumber":48,"author":{"gitId":"douglaslewpc"},"content":"        tasks.showList();"},{"lineNumber":49,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":51,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"douglaslewpc"},"content":"     * The userInterface method processes the userInput"},{"lineNumber":53,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to be modified(depending on the type of userInput)"},{"lineNumber":54,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be used to modify the tasklist"},{"lineNumber":55,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":56,"author":{"gitId":"douglaslewpc"},"content":"    public boolean userInterface(TaskList tasks, String[] inputs) {"},{"lineNumber":57,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"douglaslewpc"},"content":"            String taskType \u003d parser.processUserCommand(inputs[0]);"},{"lineNumber":59,"author":{"gitId":"douglaslewpc"},"content":"            if (taskType.equals(\"bye\")) {"},{"lineNumber":60,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":61,"author":{"gitId":"douglaslewpc"},"content":"                tasks.showList();"},{"lineNumber":62,"author":{"gitId":"douglaslewpc"},"content":"                return false;"},{"lineNumber":63,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"todo\")) {"},{"lineNumber":64,"author":{"gitId":"douglaslewpc"},"content":"                addTodo(tasks, inputs);"},{"lineNumber":65,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":66,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"deadline\")) {"},{"lineNumber":67,"author":{"gitId":"douglaslewpc"},"content":"                addDeadline(tasks, inputs);"},{"lineNumber":68,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":69,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"event\")) {"},{"lineNumber":70,"author":{"gitId":"douglaslewpc"},"content":"                addEvent(tasks, inputs);"},{"lineNumber":71,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":72,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"done\")) {"},{"lineNumber":73,"author":{"gitId":"douglaslewpc"},"content":"                markTaskAsDoneGivenUserInputs(tasks, inputs);"},{"lineNumber":74,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":75,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"list\")) {"},{"lineNumber":76,"author":{"gitId":"douglaslewpc"},"content":"                tasks.showList();"},{"lineNumber":77,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"delete\")) {"},{"lineNumber":78,"author":{"gitId":"douglaslewpc"},"content":"                deleteTask(tasks, inputs);"},{"lineNumber":79,"author":{"gitId":"douglaslewpc"},"content":"                saveTaskList(tasks);"},{"lineNumber":80,"author":{"gitId":"douglaslewpc"},"content":"            } else if (taskType.equals(\"find\")) {"},{"lineNumber":81,"author":{"gitId":"douglaslewpc"},"content":"                findTask(tasks, inputs);"},{"lineNumber":82,"author":{"gitId":"douglaslewpc"},"content":"            } else {"},{"lineNumber":83,"author":{"gitId":"douglaslewpc"},"content":"                throw new DukeException(\"unrecognized_input\");"},{"lineNumber":84,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"douglaslewpc"},"content":"        } catch (DukeException e) {"},{"lineNumber":86,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.dukeExceptionMessage);"},{"lineNumber":87,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"douglaslewpc"},"content":"        return true;"},{"lineNumber":89,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":91,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":92,"author":{"gitId":"douglaslewpc"},"content":"     * The addTodo method adds a task of type \"Todo\" into a tasklist"},{"lineNumber":93,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Todo\" task to."},{"lineNumber":94,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Todo\" task"},{"lineNumber":95,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":96,"author":{"gitId":"douglaslewpc"},"content":"    public void addTodo(TaskList tasks, String[] inputs) {"},{"lineNumber":97,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d parser.processTodo(inputs);"},{"lineNumber":98,"author":{"gitId":"douglaslewpc"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":99,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please enter a valid input\");"},{"lineNumber":100,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":101,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"douglaslewpc"},"content":"        Todo todo \u003d new Todo(description);"},{"lineNumber":103,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(todo);"},{"lineNumber":104,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":106,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":107,"author":{"gitId":"douglaslewpc"},"content":"     * The addDeadline method adds a task of type \"Deadline\" into a tasklist"},{"lineNumber":108,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Deadline\" task to."},{"lineNumber":109,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Deadline\" task"},{"lineNumber":110,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":111,"author":{"gitId":"douglaslewpc"},"content":"    public void addDeadline(TaskList tasks, String[] inputs) {"},{"lineNumber":112,"author":{"gitId":"douglaslewpc"},"content":"        String[] information \u003d parser.processDeadline(inputs);"},{"lineNumber":113,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d information[0];"},{"lineNumber":114,"author":{"gitId":"douglaslewpc"},"content":"        String by \u003d information[1];"},{"lineNumber":115,"author":{"gitId":"douglaslewpc"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":116,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please enter a valid input\");"},{"lineNumber":117,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":118,"author":{"gitId":"douglaslewpc"},"content":"        } else if (by.isEmpty()) {"},{"lineNumber":119,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"The /by field cannot be empty\");"},{"lineNumber":120,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":121,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"douglaslewpc"},"content":"        Deadline deadline \u003d new Deadline(description, by);"},{"lineNumber":123,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(deadline);"},{"lineNumber":124,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":126,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":127,"author":{"gitId":"douglaslewpc"},"content":"     * The addEvent method adds a task of type \"Event\" into a tasklist"},{"lineNumber":128,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist to add the \"Event\" task to."},{"lineNumber":129,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs specifies the content to be added to the \"Event\" task"},{"lineNumber":130,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":131,"author":{"gitId":"douglaslewpc"},"content":"    public void addEvent(TaskList tasks, String[] inputs) {"},{"lineNumber":132,"author":{"gitId":"douglaslewpc"},"content":"        String[] information \u003d parser.processEvent(inputs);"},{"lineNumber":133,"author":{"gitId":"douglaslewpc"},"content":"        String description \u003d information[0];"},{"lineNumber":134,"author":{"gitId":"douglaslewpc"},"content":"        String at \u003d information[1];"},{"lineNumber":135,"author":{"gitId":"douglaslewpc"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":136,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please enter a valid input\");"},{"lineNumber":137,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":138,"author":{"gitId":"douglaslewpc"},"content":"        } else if (at.isEmpty()) {"},{"lineNumber":139,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"The /at field cannot be empty\");"},{"lineNumber":140,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":141,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"douglaslewpc"},"content":"        Event event \u003d new Event(description, at);"},{"lineNumber":143,"author":{"gitId":"douglaslewpc"},"content":"        tasks.addTask(event);"},{"lineNumber":144,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":146,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":147,"author":{"gitId":"douglaslewpc"},"content":"     * The markTaskAsDoneGivenUserInputs method marks a task on the list as done based on the userInput"},{"lineNumber":148,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist from which the tasks to be marked as done is retrieved from."},{"lineNumber":149,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs is parsed to obtain the task number of the task to be marked as done"},{"lineNumber":150,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":151,"author":{"gitId":"douglaslewpc"},"content":"    public void markTaskAsDoneGivenUserInputs(TaskList tasks, String[] inputs) {"},{"lineNumber":152,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs.length \u003d\u003d 1) {"},{"lineNumber":153,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please specify the index of the task to be marked as done\");"},{"lineNumber":154,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":155,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"douglaslewpc"},"content":"        int taskNum \u003d maxTaskCount + 1;"},{"lineNumber":157,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"douglaslewpc"},"content":"            taskNum \u003d Integer.parseInt(inputs[1]) - 1;"},{"lineNumber":159,"author":{"gitId":"douglaslewpc"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":160,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"The index format is not recognized. Please enter an index from the list\");"},{"lineNumber":161,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"douglaslewpc"},"content":"        if (taskNum \u003d\u003d (maxTaskCount + 1)) {"},{"lineNumber":163,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":164,"author":{"gitId":"douglaslewpc"},"content":"        } else {"},{"lineNumber":165,"author":{"gitId":"douglaslewpc"},"content":"            tasks.markTaskAsDone(taskNum);"},{"lineNumber":166,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":169,"author":{"gitId":"douglaslewpc"},"content":"    public void findTask(TaskList tasks, String[] inputs) {"},{"lineNumber":170,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs.length \u003d\u003d 1) {"},{"lineNumber":171,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please specify a keyword to find\");"},{"lineNumber":172,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":173,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"douglaslewpc"},"content":"        String keyword \u003d inputs[1];"},{"lineNumber":175,"author":{"gitId":"douglaslewpc"},"content":"        tasks.find(keyword);"},{"lineNumber":176,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"douglaslewpc"},"content":""},{"lineNumber":178,"author":{"gitId":"douglaslewpc"},"content":"    /*"},{"lineNumber":179,"author":{"gitId":"douglaslewpc"},"content":"     * The deleteTask method deletes a task on the list"},{"lineNumber":180,"author":{"gitId":"douglaslewpc"},"content":"     * @params tasks specifies the tasklist from which the tasks to be marked as done is retrieved from."},{"lineNumber":181,"author":{"gitId":"douglaslewpc"},"content":"     * @params inputs is parsed to obtain the task number of the task to be deleted."},{"lineNumber":182,"author":{"gitId":"douglaslewpc"},"content":"     * */"},{"lineNumber":183,"author":{"gitId":"douglaslewpc"},"content":"    public void deleteTask(TaskList tasks, String[] inputs) {"},{"lineNumber":184,"author":{"gitId":"douglaslewpc"},"content":"        if (inputs.length \u003d\u003d 1) {"},{"lineNumber":185,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"Please specify the index of the task to be deleted\");"},{"lineNumber":186,"author":{"gitId":"douglaslewpc"},"content":"            return;"},{"lineNumber":187,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"douglaslewpc"},"content":"        int taskNum \u003d maxTaskCount + 1;"},{"lineNumber":189,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":190,"author":{"gitId":"douglaslewpc"},"content":"            taskNum \u003d Integer.parseInt(inputs[1]) - 1;"},{"lineNumber":191,"author":{"gitId":"douglaslewpc"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":192,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(\"The index format is not recognized. Please enter an index from the list\");"},{"lineNumber":193,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"douglaslewpc"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"douglaslewpc"},"content":"            if (taskNum \u003d\u003d (maxTaskCount + 1)) {"},{"lineNumber":196,"author":{"gitId":"douglaslewpc"},"content":"                return;"},{"lineNumber":197,"author":{"gitId":"douglaslewpc"},"content":"            } else {"},{"lineNumber":198,"author":{"gitId":"douglaslewpc"},"content":"                tasks.deleteTask(taskNum);"},{"lineNumber":199,"author":{"gitId":"douglaslewpc"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"douglaslewpc"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":201,"author":{"gitId":"douglaslewpc"},"content":"            System.out.println(constants.indexOutOfBoundsMessage);"},{"lineNumber":202,"author":{"gitId":"douglaslewpc"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"douglaslewpc"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"douglaslewpc"},"content":"}"}],"authorContributionMap":{"douglaslewpc":204}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"douglaslewpc"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"douglaslewpc"},"content":"list"},{"lineNumber":3,"author":{"gitId":"douglaslewpc"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"douglaslewpc"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"douglaslewpc"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"douglaslewpc"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"douglaslewpc"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"douglaslewpc"},"content":"todo borrow book"},{"lineNumber":9,"author":{"gitId":"douglaslewpc"},"content":"list"},{"lineNumber":10,"author":{"gitId":"douglaslewpc"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"douglaslewpc"},"content":"event projects meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"douglaslewpc"},"content":"list"}],"authorContributionMap":{"douglaslewpc":12}}]
