[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"[T][ ]    jkfew"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"[T][✘]   hjdhkj"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"[T][ ]  hahah"}],"authorContributionMap":{"violinyap":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"## Features"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"### View tasks in list: `list`"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"Lists down the tasks that has been added."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"#### Format: `list`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"Expected outcome:"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"Here are the tasks in your list:"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"1.[T][ ]  run"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"2.[D][ ]  return book (by: Sunday)"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"3.[E][ ]  attend lecture (at: 5pm)"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"### Mark task as completed: `done`"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"Marks a task at a specific index as completed"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"#### Format: `done INDEX`"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"Expected outcome:"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"[T][✘]  run"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"### Add a todo task: `todo`"},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"Add a todo task to the task list"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"#### Format: `todo DESCRIPTION`"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"[T][ ]  run"},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"Now you have 1 tasks in the list."},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"### Add a deadline task: `deadline`"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"Add a deadline task to the task list"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":"#### Format: `deadline DESCRIPTION /by TIME`"},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":"Expected outcome:"},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":"[D][ ]  submit assignment (by: Sunday 2359)"},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"Now you have 4 tasks in the list."},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":"### Add an event task: `event`"},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":"Add an event task to the task list"},{"lineNumber":51,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":52,"author":{"gitId":"violinyap"},"content":"#### Format: `event DESCRIPTION /at TIME`"},{"lineNumber":53,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":54,"author":{"gitId":"violinyap"},"content":"Expected outcome:"},{"lineNumber":55,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":56,"author":{"gitId":"violinyap"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":57,"author":{"gitId":"violinyap"},"content":"[E][ ]  attend tutorial (at: Monday 1430)"},{"lineNumber":58,"author":{"gitId":"violinyap"},"content":"Now you have 5 tasks in the list."},{"lineNumber":59,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":60,"author":{"gitId":"violinyap"},"content":"### Find a task: `find`"},{"lineNumber":61,"author":{"gitId":"violinyap"},"content":"Find a task from the task list"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"violinyap"},"content":"#### Format: `find DESCRIPTION`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":66,"author":{"gitId":"violinyap"},"content":"```text"},{"lineNumber":67,"author":{"gitId":"violinyap"},"content":"Here are the matching tasks in your list: "},{"lineNumber":68,"author":{"gitId":"violinyap"},"content":"1.[D][ ]  submit assignment (by: Sunday 2359)"},{"lineNumber":69,"author":{"gitId":"violinyap"},"content":"```"},{"lineNumber":70,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"violinyap":55,"-":15}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"T | 0 | hfewi"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"D | 0 | hafhoh | jioqfwejqij"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"T | 0 | hello"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"T | 0 | ah"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"D | 0 | ai | by"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"E | 0 | hjfekw | today"}],"authorContributionMap":{"violinyap":6}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"import duke.exception.DukeException;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"import duke.storage.Storage;"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":" * A task manager."},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"     * Duke constructor."},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"     * @param filepath the path of storage"},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"    public Duke(String filepath){"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"        storage \u003d new Storage(filepath);"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"        tasks \u003d new TaskList(storage.load());"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"     * Get Duke\u0027s responses"},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"    public void run() {"},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"        Ui.helloMessage();"},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"        boolean isContinue \u003d true;"},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"        while(isContinue){"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"            String fullcommand \u003d ui.readCommand();"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"            if (fullcommand.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"                Ui.byeMessage();"},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"                Parser.parse(fullcommand);"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"violinyap"},"content":"            Ui.showLine();"},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"     * executes the program Duke"},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"    public static void main(String[] args){"},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":51,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":52,"author":{"gitId":"violinyap"},"content":"}"},{"lineNumber":53,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":54,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":55,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":56,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":57,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":58,"author":{"gitId":"violinyap"},"content":" * import java.util.ArrayList;"},{"lineNumber":59,"author":{"gitId":"violinyap"},"content":"import java.util.Scanner;"},{"lineNumber":60,"author":{"gitId":"violinyap"},"content":"import java.io.File;"},{"lineNumber":61,"author":{"gitId":"violinyap"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":62,"author":{"gitId":"violinyap"},"content":"import java.io.FileWriter;"},{"lineNumber":63,"author":{"gitId":"violinyap"},"content":"import java.io.IOException;"},{"lineNumber":64,"author":{"gitId":"violinyap"},"content":"// git add ."},{"lineNumber":65,"author":{"gitId":"violinyap"},"content":"// git tag level-3"},{"lineNumber":66,"author":{"gitId":"violinyap"},"content":"// git commit -m \"\""},{"lineNumber":67,"author":{"gitId":"violinyap"},"content":"// git push origin --tags"},{"lineNumber":68,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":70,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":71,"author":{"gitId":"violinyap"},"content":"    private Ui ui;"},{"lineNumber":72,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":73,"author":{"gitId":"violinyap"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"violinyap"},"content":"    public static boolean isContinue \u003d true;"},{"lineNumber":75,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":76,"author":{"gitId":"violinyap"},"content":"    public static void saveFile() throws IOException {"},{"lineNumber":77,"author":{"gitId":"violinyap"},"content":"        File path \u003d new File(\"duke.txt\");"},{"lineNumber":78,"author":{"gitId":"violinyap"},"content":"        if (!path.exists() \u0026\u0026 !path.createNewFile()) {"},{"lineNumber":79,"author":{"gitId":"violinyap"},"content":"            throw new IOException();"},{"lineNumber":80,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"violinyap"},"content":"            FileWriter fileWriter \u003d new FileWriter(path);"},{"lineNumber":83,"author":{"gitId":"violinyap"},"content":"            for (int i \u003d 0; i \u003c numberOfTask(); i++) {"},{"lineNumber":84,"author":{"gitId":"violinyap"},"content":"                fileWriter.write(tasks.get(i).formatData() + \"\\n\");"},{"lineNumber":85,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"violinyap"},"content":"            fileWriter.flush();"},{"lineNumber":87,"author":{"gitId":"violinyap"},"content":"            fileWriter.close();"},{"lineNumber":88,"author":{"gitId":"violinyap"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Failed to save the file\");"},{"lineNumber":90,"author":{"gitId":"violinyap"},"content":"            tasks.clear();"},{"lineNumber":91,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":94,"author":{"gitId":"violinyap"},"content":"    public static void loadFile() throws FileNotFoundException {"},{"lineNumber":95,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"violinyap"},"content":"            File path \u003d new File(\"duke.txt\");"},{"lineNumber":97,"author":{"gitId":"violinyap"},"content":"            if (!path.exists()) {"},{"lineNumber":98,"author":{"gitId":"violinyap"},"content":"                throw new FileNotFoundException();"},{"lineNumber":99,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"violinyap"},"content":"            Scanner scanner \u003d new Scanner(path);"},{"lineNumber":101,"author":{"gitId":"violinyap"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":102,"author":{"gitId":"violinyap"},"content":"                String input \u003d scanner.nextLine();"},{"lineNumber":103,"author":{"gitId":"violinyap"},"content":"                String[] data \u003d input.split(\"\\\\s+|\\\\s+\");"},{"lineNumber":104,"author":{"gitId":"violinyap"},"content":"                String addCommand \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"violinyap"},"content":"                switch (data[0]) {"},{"lineNumber":106,"author":{"gitId":"violinyap"},"content":"                    case \"T\":"},{"lineNumber":107,"author":{"gitId":"violinyap"},"content":"                        addCommand \u003d \"todo \" + data[4];"},{"lineNumber":108,"author":{"gitId":"violinyap"},"content":"                        break;"},{"lineNumber":109,"author":{"gitId":"violinyap"},"content":"                    case \"D\":"},{"lineNumber":110,"author":{"gitId":"violinyap"},"content":"                        addCommand \u003d \"deadline \" + data[4] + \" /by \" + data[6];"},{"lineNumber":111,"author":{"gitId":"violinyap"},"content":"                        break;"},{"lineNumber":112,"author":{"gitId":"violinyap"},"content":"                    case \"E\":"},{"lineNumber":113,"author":{"gitId":"violinyap"},"content":"                        addCommand \u003d \"event \" + data[4] + \" /at \" + data[6];"},{"lineNumber":114,"author":{"gitId":"violinyap"},"content":"                        break;"},{"lineNumber":115,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"violinyap"},"content":"                loadCommand(addCommand);"},{"lineNumber":117,"author":{"gitId":"violinyap"},"content":"                if (data[2].equals(1)) {"},{"lineNumber":118,"author":{"gitId":"violinyap"},"content":"                    loadCommand(\"done \" + tasks.size());"},{"lineNumber":119,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"violinyap"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":122,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Failed to load the file\");"},{"lineNumber":123,"author":{"gitId":"violinyap"},"content":"            tasks.clear();"},{"lineNumber":124,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":126,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":128,"author":{"gitId":"violinyap"},"content":"    public static Integer numberOfTask() {"},{"lineNumber":129,"author":{"gitId":"violinyap"},"content":"        return tasks.size();"},{"lineNumber":130,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":132,"author":{"gitId":"violinyap"},"content":"    public static void loadCommand(String input) {"},{"lineNumber":133,"author":{"gitId":"violinyap"},"content":"        String[] splittedCommand \u003d input.split(\"\\\\s+\",2);"},{"lineNumber":134,"author":{"gitId":"violinyap"},"content":"        String commandType \u003d splittedCommand[0].toUpperCase();"},{"lineNumber":135,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":136,"author":{"gitId":"violinyap"},"content":"        switch (commandType) {"},{"lineNumber":137,"author":{"gitId":"violinyap"},"content":"            case \"DONE\":"},{"lineNumber":138,"author":{"gitId":"violinyap"},"content":"                int taskIndex \u003dInteger.parseInt(splittedCommand[1]) ;"},{"lineNumber":139,"author":{"gitId":"violinyap"},"content":"                taskIndex--;"},{"lineNumber":140,"author":{"gitId":"violinyap"},"content":"                tasks.get(taskIndex).setDone(true);"},{"lineNumber":141,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":142,"author":{"gitId":"violinyap"},"content":"            case \"TODO\":"},{"lineNumber":143,"author":{"gitId":"violinyap"},"content":"                String description \u003d splittedCommand[1];"},{"lineNumber":144,"author":{"gitId":"violinyap"},"content":"                if(description.equals(\"\")){"},{"lineNumber":145,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":146,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":147,"author":{"gitId":"violinyap"},"content":"                Todo newTodo \u003d new Todo(description);"},{"lineNumber":148,"author":{"gitId":"violinyap"},"content":"                tasks.add(newTodo);"},{"lineNumber":149,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":150,"author":{"gitId":"violinyap"},"content":"            case \"DEADLINE\":"},{"lineNumber":151,"author":{"gitId":"violinyap"},"content":"                String deadlineDescription \u003d splittedCommand[1];"},{"lineNumber":152,"author":{"gitId":"violinyap"},"content":"                if(deadlineDescription.equals(\"\")){"},{"lineNumber":153,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":154,"author":{"gitId":"violinyap"},"content":"                    break;"},{"lineNumber":155,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":156,"author":{"gitId":"violinyap"},"content":"                String[] deadline \u003d deadlineDescription.split(\" /by \", 2);"},{"lineNumber":157,"author":{"gitId":"violinyap"},"content":"                if(deadline.length \u003c 2){"},{"lineNumber":158,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":159,"author":{"gitId":"violinyap"},"content":"                    break;"},{"lineNumber":160,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":161,"author":{"gitId":"violinyap"},"content":"                Deadline newDeadline \u003d new Deadline(deadline[0], deadline[1]);"},{"lineNumber":162,"author":{"gitId":"violinyap"},"content":"                tasks.add(newDeadline);"},{"lineNumber":163,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":164,"author":{"gitId":"violinyap"},"content":"            case \"EVENT\":"},{"lineNumber":165,"author":{"gitId":"violinyap"},"content":"                String[] eventDescription \u003d splittedCommand[1].split(\" /at \", 2);"},{"lineNumber":166,"author":{"gitId":"violinyap"},"content":"                Event newEvent \u003d new Event(eventDescription[0], eventDescription[1]);"},{"lineNumber":167,"author":{"gitId":"violinyap"},"content":"                tasks.add(newEvent);"},{"lineNumber":168,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":169,"author":{"gitId":"violinyap"},"content":"            default:"},{"lineNumber":170,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":171,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":174,"author":{"gitId":"violinyap"},"content":"    public static void command(String input) {"},{"lineNumber":175,"author":{"gitId":"violinyap"},"content":"        String[] splittedCommand \u003d input.split(\"\\\\s+\",2);"},{"lineNumber":176,"author":{"gitId":"violinyap"},"content":"        String commandType \u003d splittedCommand[0].toUpperCase();"},{"lineNumber":177,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":178,"author":{"gitId":"violinyap"},"content":"        switch (commandType) {"},{"lineNumber":179,"author":{"gitId":"violinyap"},"content":"            case \"BYE\":"},{"lineNumber":180,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":181,"author":{"gitId":"violinyap"},"content":"                isContinue \u003d false;"},{"lineNumber":182,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":183,"author":{"gitId":"violinyap"},"content":"            case \"LIST\":"},{"lineNumber":184,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":185,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":186,"author":{"gitId":"violinyap"},"content":"                for (int i \u003d 0; i \u003c numberOfTask(); i++){"},{"lineNumber":187,"author":{"gitId":"violinyap"},"content":"                    int number \u003d i+1;"},{"lineNumber":188,"author":{"gitId":"violinyap"},"content":"                    System.out.println( number + \".\" + tasks.get(i));"},{"lineNumber":189,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":190,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":191,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":192,"author":{"gitId":"violinyap"},"content":"            case \"FIND\":"},{"lineNumber":193,"author":{"gitId":"violinyap"},"content":"                String findDescription \u003d splittedCommand[1];"},{"lineNumber":194,"author":{"gitId":"violinyap"},"content":"                ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":195,"author":{"gitId":"violinyap"},"content":"                for (Task task : tasks) {"},{"lineNumber":196,"author":{"gitId":"violinyap"},"content":"                    if (task.getDescription().contains(findDescription)) {"},{"lineNumber":197,"author":{"gitId":"violinyap"},"content":"                        foundTasks.add(task);"},{"lineNumber":198,"author":{"gitId":"violinyap"},"content":"                    }"},{"lineNumber":199,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":200,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":201,"author":{"gitId":"violinyap"},"content":"                if (foundTasks.size() \u003e 0) {"},{"lineNumber":202,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"____________________________________________________________\");"},{"lineNumber":203,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"Here are the matching task in your list:\");"},{"lineNumber":204,"author":{"gitId":"violinyap"},"content":"                    for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"},{"lineNumber":205,"author":{"gitId":"violinyap"},"content":"                        int number \u003d i + 1;"},{"lineNumber":206,"author":{"gitId":"violinyap"},"content":"                        System.out.println(number + \".\" + foundTasks.get(i));"},{"lineNumber":207,"author":{"gitId":"violinyap"},"content":"                    }"},{"lineNumber":208,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"____________________________________________________________\");"},{"lineNumber":209,"author":{"gitId":"violinyap"},"content":"                } else {"},{"lineNumber":210,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! I cannot find the word \" + findDescription + \" in the list\");"},{"lineNumber":211,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":212,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":213,"author":{"gitId":"violinyap"},"content":"            case \"DONE\":"},{"lineNumber":214,"author":{"gitId":"violinyap"},"content":"                int taskIndex \u003dInteger.parseInt(splittedCommand[1]) ;"},{"lineNumber":215,"author":{"gitId":"violinyap"},"content":"                taskIndex--;"},{"lineNumber":216,"author":{"gitId":"violinyap"},"content":"                tasks.get(taskIndex).setDone(true);"},{"lineNumber":217,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":218,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":219,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"I\u0027ve marked this as done: \" + tasks.get(taskIndex));"},{"lineNumber":220,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":221,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":222,"author":{"gitId":"violinyap"},"content":"            case \"TODO\":"},{"lineNumber":223,"author":{"gitId":"violinyap"},"content":"                String description \u003d splittedCommand[1];"},{"lineNumber":224,"author":{"gitId":"violinyap"},"content":"                if(description.equals(\"\")){"},{"lineNumber":225,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":226,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":227,"author":{"gitId":"violinyap"},"content":"                Todo newTodo \u003d new Todo(description);"},{"lineNumber":228,"author":{"gitId":"violinyap"},"content":"                tasks.add(newTodo);"},{"lineNumber":229,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":230,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":231,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":232,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":233,"author":{"gitId":"violinyap"},"content":"                System.out.println(tasks.get(numberOfTask() - 1));"},{"lineNumber":234,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Now you have \" + numberOfTask() + \" tasks in the list.\");"},{"lineNumber":235,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":236,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":237,"author":{"gitId":"violinyap"},"content":"            case \"DEADLINE\":"},{"lineNumber":238,"author":{"gitId":"violinyap"},"content":"                String deadlineDescription \u003d splittedCommand[1];"},{"lineNumber":239,"author":{"gitId":"violinyap"},"content":"                if(deadlineDescription.equals(\"\")){"},{"lineNumber":240,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":241,"author":{"gitId":"violinyap"},"content":"                    break;"},{"lineNumber":242,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":243,"author":{"gitId":"violinyap"},"content":"                String[] deadline \u003d deadlineDescription.split(\" /by \", 2);"},{"lineNumber":244,"author":{"gitId":"violinyap"},"content":"                if(deadline.length \u003c 2){"},{"lineNumber":245,"author":{"gitId":"violinyap"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":246,"author":{"gitId":"violinyap"},"content":"                    break;"},{"lineNumber":247,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":248,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":249,"author":{"gitId":"violinyap"},"content":"                Deadline newDeadline \u003d new Deadline(deadline[0], deadline[1]);"},{"lineNumber":250,"author":{"gitId":"violinyap"},"content":"                tasks.add(newDeadline);"},{"lineNumber":251,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":252,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":253,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Got it. I\u0027ve added this task: \" + splittedCommand[1]);"},{"lineNumber":254,"author":{"gitId":"violinyap"},"content":"                System.out.println(tasks.get(numberOfTask() - 1));"},{"lineNumber":255,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Now you have \" + numberOfTask() + \" tasks in the list.\");"},{"lineNumber":256,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":257,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":258,"author":{"gitId":"violinyap"},"content":"            case \"EVENT\":"},{"lineNumber":259,"author":{"gitId":"violinyap"},"content":"                String[] eventDescription \u003d splittedCommand[1].split(\" /at \", 2);"},{"lineNumber":260,"author":{"gitId":"violinyap"},"content":"                Event newEvent \u003d new Event(eventDescription[0], eventDescription[1]);"},{"lineNumber":261,"author":{"gitId":"violinyap"},"content":"                tasks.add(newEvent);"},{"lineNumber":262,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":263,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":264,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Got it. I\u0027ve added this task: \" + splittedCommand[1]);"},{"lineNumber":265,"author":{"gitId":"violinyap"},"content":"                System.out.println(tasks.get(numberOfTask() - 1));"},{"lineNumber":266,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Now you have \" + numberOfTask() + \" tasks in the list.\");"},{"lineNumber":267,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":268,"author":{"gitId":"violinyap"},"content":"                break;"},{"lineNumber":269,"author":{"gitId":"violinyap"},"content":"            default:"},{"lineNumber":270,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":271,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":275,"author":{"gitId":"violinyap"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":276,"author":{"gitId":"violinyap"},"content":"        System.out.println(ui.getWelcome());"},{"lineNumber":277,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":278,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":279,"author":{"gitId":"violinyap"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":280,"author":{"gitId":"violinyap"},"content":"        String input;"},{"lineNumber":281,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":282,"author":{"gitId":"violinyap"},"content":"            loadFile();"},{"lineNumber":283,"author":{"gitId":"violinyap"},"content":"        }  catch (FileNotFoundException e) {"},{"lineNumber":284,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Failed to load the file\");"},{"lineNumber":285,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":286,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":287,"author":{"gitId":"violinyap"},"content":"        while (isContinue) {"},{"lineNumber":288,"author":{"gitId":"violinyap"},"content":"            input \u003d scanner.nextLine();"},{"lineNumber":289,"author":{"gitId":"violinyap"},"content":"            command(input);"},{"lineNumber":290,"author":{"gitId":"violinyap"},"content":"            try {"},{"lineNumber":291,"author":{"gitId":"violinyap"},"content":"                saveFile();"},{"lineNumber":292,"author":{"gitId":"violinyap"},"content":"            }  catch (IOException e) {"},{"lineNumber":293,"author":{"gitId":"violinyap"},"content":"                System.out.println(\"Failed to load the file\");"},{"lineNumber":294,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":297,"author":{"gitId":"violinyap"},"content":"        scanner.close();"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":300,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":301,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"}"},{"lineNumber":303,"author":{"gitId":"violinyap"},"content":"**/"}],"authorContributionMap":{"violinyap":298,"-":5}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":" * Exception when there are invalid inputs."},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":8}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":" * Handles users\u0027 input."},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"    private static final int EVENT_LENGTH \u003d 5;"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    private static final int DEADLINE_LENGTH \u003d 8;"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"     * Determines user\u0027s input and carry out the program."},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"     * @param input User\u0027s input."},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"     * if user\u0027s input is not recognised in the program, an error message is printed."},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"    public static void parse(String input){"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"        if(input.equalsIgnoreCase(\"list\")){"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"            Ui.printList();"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"        } else if(input.startsWith(\"done\")) {"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"            TaskList.markTaskAsDone(input);"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"        } else if(input.startsWith(\"todo\")){"},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"            TaskList.addTodo(input);"},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"        } else if(input.startsWith(\"deadline\")){"},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"            input \u003d input.substring(DEADLINE_LENGTH);"},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"            TaskList.addDeadline(input);"},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"        } else if(input.startsWith(\"event\")){"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"            input \u003d input.substring(EVENT_LENGTH);"},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"            TaskList.addEvent(input);"},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"        } else if(input.startsWith(\"delete\")){"},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"            TaskList.deleteTask(input);"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":40,"author":{"gitId":"violinyap"},"content":"        } else if (input.startsWith(\"find\")) {"},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":"            TaskList.find(input);"},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":"            Storage.writeFile();"},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":50}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"import duke.task.Deadline;"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"import duke.task.Event;"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":" * Handles data from text file."},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"    private static String filePath \u003d \"data/tasks.txt\";"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"    public Storage(String filepath) {"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"        this.filePath \u003d filepath;"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"     * @return an arraylist of tasks."},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"     * loads the saved text file."},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"     * Error message is printed if file is not found."},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"    public ArrayList \u003cTask\u003e load() {"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"            if (Files.exists(Paths.get(filePath))) {"},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"                File f \u003d new File(filePath);"},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"                Scanner sc \u003d new Scanner(f);"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"                while (sc.hasNext()) {"},{"lineNumber":40,"author":{"gitId":"violinyap"},"content":"                    String text \u003d sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":"                    if (text.startsWith(\"[T]\")) {"},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":"                        String getDescription \u003d text.substring(7);"},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":"                        tasks.add(TaskList.tasksCount, new Todo(getDescription));"},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"                        TaskList.tasksCount++;"},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"                        if (text.substring(4, 5).compareTo(\"\\u2718\") \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":"                            tasks.get(TaskList.tasksCount - 1).markAsDone();"},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"                        }"},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":"                    } else if (text.startsWith(\"[E]\")) {"},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":"                        String getDescription \u003d text.substring(7, text.indexOf(\"(\") - 1);"},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":"                        String event \u003d text.substring(text.indexOf(\"(\") + 5, text.indexOf(\")\"));"},{"lineNumber":51,"author":{"gitId":"violinyap"},"content":"                        tasks.add(TaskList.tasksCount, new Event(getDescription, event));"},{"lineNumber":52,"author":{"gitId":"violinyap"},"content":"                        TaskList.tasksCount++;"},{"lineNumber":53,"author":{"gitId":"violinyap"},"content":"                        if (text.substring(4, 5).compareTo(\"\\u2718\") \u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitId":"violinyap"},"content":"                            tasks.get(TaskList.tasksCount - 1).markAsDone();"},{"lineNumber":55,"author":{"gitId":"violinyap"},"content":"                        }"},{"lineNumber":56,"author":{"gitId":"violinyap"},"content":"                    } else if (text.startsWith(\"[D]\")) {"},{"lineNumber":57,"author":{"gitId":"violinyap"},"content":"                        String description \u003d text.substring(7, text.indexOf(\"(\") - 1);"},{"lineNumber":58,"author":{"gitId":"violinyap"},"content":"                        String deadline \u003d text.substring(text.indexOf(\"(\") + 5, text.indexOf(\")\"));"},{"lineNumber":59,"author":{"gitId":"violinyap"},"content":"                        tasks.add(TaskList.tasksCount, new Deadline(description, deadline));"},{"lineNumber":60,"author":{"gitId":"violinyap"},"content":"                        TaskList.tasksCount++;"},{"lineNumber":61,"author":{"gitId":"violinyap"},"content":"                        if (text.substring(4, 5).compareTo(\"\\u2718\") \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitId":"violinyap"},"content":"                            tasks.get(TaskList.tasksCount - 1).markAsDone();"},{"lineNumber":63,"author":{"gitId":"violinyap"},"content":"                        }"},{"lineNumber":64,"author":{"gitId":"violinyap"},"content":"                    }"},{"lineNumber":65,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":66,"author":{"gitId":"violinyap"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"violinyap"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":69,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Error! File not found!\");"},{"lineNumber":70,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"violinyap"},"content":"        return tasks;"},{"lineNumber":72,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":74,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"violinyap"},"content":"     * writes user\u0027s input onto a text file"},{"lineNumber":76,"author":{"gitId":"violinyap"},"content":"     * An error message is printed if file is unable to be written"},{"lineNumber":77,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"violinyap"},"content":"    public static void writeFile() {"},{"lineNumber":79,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"violinyap"},"content":"            if (Files.notExists(Paths.get(\"data/\"))) {"},{"lineNumber":81,"author":{"gitId":"violinyap"},"content":"                Files.createDirectory(Paths.get(\"data/\"));"},{"lineNumber":82,"author":{"gitId":"violinyap"},"content":"            } else if (Files.notExists(Paths.get(filePath))) {"},{"lineNumber":83,"author":{"gitId":"violinyap"},"content":"                Files.createFile(Paths.get(filePath));"},{"lineNumber":84,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"violinyap"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":86,"author":{"gitId":"violinyap"},"content":"            for (int i \u003d 0; i \u003c TaskList.tasksCount; i++) {"},{"lineNumber":87,"author":{"gitId":"violinyap"},"content":"                fw.write(TaskList.get(i).toString() + System.lineSeparator());"},{"lineNumber":88,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"violinyap"},"content":"            fw.close();"},{"lineNumber":90,"author":{"gitId":"violinyap"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Error! Unable to write to file\");"},{"lineNumber":92,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":94,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":95,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":96}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"package duke.task;"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":" * Task type is deadline."},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"     * @param description is the details of what the task is."},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"     * @param by is the time by which the the task should be done by."},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"        this.by \u003d by;"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"     * @return the deadline description and status."},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"        return \"[D]\" + super.toString() + description + \" (by:\" + by + \")\";"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":26}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":" * task type is event."},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"     * @param description is the description of the event."},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"     * @param at is the time which the event will be held."},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    public Event(String description, String at) {"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"        this.at \u003d at;"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"     * @return the event description and status."},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"        return \"[E]\" + super.toString() + description + \" (at:\" + at + \")\";"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":25}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":" * A parent class."},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":" * Represents a task."},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"     * @return the status of the task, X if task is done and blank if it is not"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"        return (isDone ? \"\\u2718\" : \" \"); //return blank or X symbols"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"     * sets tasks as done"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"    public void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"     * @return the task status"},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"        return \"[\" + getStatusIcon() + \"] \";"},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":38}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"import static duke.ui.Ui.showLine;"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":" * Contains the task list and commands function for task."},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"    private static final int DONE_LENGTH \u003d 5;"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    private static final int TODO_LENGTH \u003d 5;"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"    private static final int DELETE_LENGTH \u003d 7;"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"    private static final int FIND_LENGTH \u003d 5;"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"    public static int tasksCount \u003d0;"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"     * @param tasks is the arraylist of tasks."},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"     * constructor for TaskList."},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"     * @return arraylist of tasks."},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"    public static ArrayList\u003cTask\u003e getTasks(){"},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"        return tasks;"},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":"     * @param i index of tasks."},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"     * @return returns the task at the given index."},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"    public static Task get(int i){"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"        return tasks.get(i);"},{"lineNumber":40,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"     * @param input user\u0027s input."},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"     * marks task as done."},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":"     * if task number is invalid, error message is printed."},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":"    public static void markTaskAsDone(String input) {"},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":"            int newNum \u003d Integer.parseInt(input.substring(DONE_LENGTH));"},{"lineNumber":51,"author":{"gitId":"violinyap"},"content":"            if (newNum \u003e tasks.size()|| newNum \u003c 0) {"},{"lineNumber":52,"author":{"gitId":"violinyap"},"content":"                throw new DukeException();"},{"lineNumber":53,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":55,"author":{"gitId":"violinyap"},"content":"            tasks.get(newNum - 1).markAsDone();"},{"lineNumber":56,"author":{"gitId":"violinyap"},"content":"            System.out.println(tasks.get(newNum - 1).toString());"},{"lineNumber":57,"author":{"gitId":"violinyap"},"content":"        } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! The task number is invalid!\");"},{"lineNumber":59,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":61,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":63,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"violinyap"},"content":"     * @param input user\u0027s input."},{"lineNumber":65,"author":{"gitId":"violinyap"},"content":"     * deletes tasks."},{"lineNumber":66,"author":{"gitId":"violinyap"},"content":"     * if task number is invalid, an error message is printed."},{"lineNumber":67,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"violinyap"},"content":"    public static void deleteTask(String input){"},{"lineNumber":69,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"violinyap"},"content":"            int newNum \u003d Integer.parseInt(input.substring(DELETE_LENGTH));"},{"lineNumber":71,"author":{"gitId":"violinyap"},"content":"            if (newNum \u003e tasks.size() || newNum \u003c 0) {"},{"lineNumber":72,"author":{"gitId":"violinyap"},"content":"                throw new ArrayIndexOutOfBoundsException();"},{"lineNumber":73,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":75,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\" + \"\\n\"+ tasks.get(newNum-1).toString());"},{"lineNumber":76,"author":{"gitId":"violinyap"},"content":"            tasks.remove(newNum-1);"},{"lineNumber":77,"author":{"gitId":"violinyap"},"content":"            tasksCount--;"},{"lineNumber":78,"author":{"gitId":"violinyap"},"content":"            printTotalTasks();"},{"lineNumber":79,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":80,"author":{"gitId":"violinyap"},"content":"        }catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":81,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! The task number is invalid!\");"},{"lineNumber":82,"author":{"gitId":"violinyap"},"content":"            showLine();"},{"lineNumber":83,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":86,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"violinyap"},"content":"     * @param newTask user\u0027s input."},{"lineNumber":88,"author":{"gitId":"violinyap"},"content":"     *  adds a todo task."},{"lineNumber":89,"author":{"gitId":"violinyap"},"content":"     *  if description is empty, error message is printed."},{"lineNumber":90,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"violinyap"},"content":"    public static void addTodo(String newTask) {"},{"lineNumber":92,"author":{"gitId":"violinyap"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"violinyap"},"content":"            newTask \u003d newTask.substring(TODO_LENGTH);"},{"lineNumber":94,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":95,"author":{"gitId":"violinyap"},"content":"            Todo todo \u003d new Todo(newTask);"},{"lineNumber":96,"author":{"gitId":"violinyap"},"content":"            tasks.add(todo);"},{"lineNumber":97,"author":{"gitId":"violinyap"},"content":"            tasksCount++;"},{"lineNumber":98,"author":{"gitId":"violinyap"},"content":"            System.out.println(todo.toString());"},{"lineNumber":99,"author":{"gitId":"violinyap"},"content":"            printTotalTasks();"},{"lineNumber":100,"author":{"gitId":"violinyap"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":101,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":102,"author":{"gitId":"violinyap"},"content":"            showLine();"},{"lineNumber":103,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":106,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"violinyap"},"content":"     * @param input user\u0027s input."},{"lineNumber":108,"author":{"gitId":"violinyap"},"content":"     * adds a deadline."},{"lineNumber":109,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"violinyap"},"content":"    public static void addDeadline(String input){"},{"lineNumber":111,"author":{"gitId":"violinyap"},"content":"        try{"},{"lineNumber":112,"author":{"gitId":"violinyap"},"content":"            String[] split \u003d input.split(\" /by\");"},{"lineNumber":113,"author":{"gitId":"violinyap"},"content":"            Deadline deadline \u003d new Deadline(split[0], split[1]);"},{"lineNumber":114,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":115,"author":{"gitId":"violinyap"},"content":"            tasks.add(deadline);"},{"lineNumber":116,"author":{"gitId":"violinyap"},"content":"            tasksCount++;"},{"lineNumber":117,"author":{"gitId":"violinyap"},"content":"            System.out.println(deadline.toString());"},{"lineNumber":118,"author":{"gitId":"violinyap"},"content":"            printTotalTasks();"},{"lineNumber":119,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":120,"author":{"gitId":"violinyap"},"content":"        } catch(ArrayIndexOutOfBoundsException e){"},{"lineNumber":121,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":122,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":125,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"violinyap"},"content":"     * prints a message that describes the number of tasks in the list."},{"lineNumber":127,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"violinyap"},"content":"    public static void printTotalTasks(){"},{"lineNumber":129,"author":{"gitId":"violinyap"},"content":"        System.out.println(\"Now you have \"+ tasksCount+ \" tasks in the list.\");"},{"lineNumber":130,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":132,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"violinyap"},"content":"     * @param input user\u0027s input."},{"lineNumber":134,"author":{"gitId":"violinyap"},"content":"     * adds an event."},{"lineNumber":135,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"violinyap"},"content":"    public static void addEvent(String input) {"},{"lineNumber":137,"author":{"gitId":"violinyap"},"content":"        try{"},{"lineNumber":138,"author":{"gitId":"violinyap"},"content":"            String[] split \u003d input.split(\" /at\");"},{"lineNumber":139,"author":{"gitId":"violinyap"},"content":"            Event event \u003d new Event(split[0], split[1]);"},{"lineNumber":140,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":141,"author":{"gitId":"violinyap"},"content":"            tasks.add(event);"},{"lineNumber":142,"author":{"gitId":"violinyap"},"content":"            tasksCount++;"},{"lineNumber":143,"author":{"gitId":"violinyap"},"content":"            System.out.println(event.toString());"},{"lineNumber":144,"author":{"gitId":"violinyap"},"content":"            printTotalTasks();"},{"lineNumber":145,"author":{"gitId":"violinyap"},"content":"        } catch(ArrayIndexOutOfBoundsException e){"},{"lineNumber":146,"author":{"gitId":"violinyap"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":147,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":149,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":151,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"violinyap"},"content":"     * @param input user\u0027s input."},{"lineNumber":153,"author":{"gitId":"violinyap"},"content":"     * finds if the description entered by the user is already in database."},{"lineNumber":154,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"violinyap"},"content":"    public static void find(String input){"},{"lineNumber":156,"author":{"gitId":"violinyap"},"content":"        input \u003d input.substring(FIND_LENGTH);"},{"lineNumber":157,"author":{"gitId":"violinyap"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":158,"author":{"gitId":"violinyap"},"content":"        System.out.println(\"Here are the matching tasks in your list: \");"},{"lineNumber":159,"author":{"gitId":"violinyap"},"content":"        int foundCount \u003d0;"},{"lineNumber":160,"author":{"gitId":"violinyap"},"content":"        for(Task t:tasks){"},{"lineNumber":161,"author":{"gitId":"violinyap"},"content":"            if(t.description.contains(input)){"},{"lineNumber":162,"author":{"gitId":"violinyap"},"content":"                foundTasks.add(t);"},{"lineNumber":163,"author":{"gitId":"violinyap"},"content":"                System.out.println((foundCount+1)+\".\"+t.toString());"},{"lineNumber":164,"author":{"gitId":"violinyap"},"content":"                foundCount++;"},{"lineNumber":165,"author":{"gitId":"violinyap"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":168}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":" * Represents a todo task."},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":"     * @param description is the description of the todo task."},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":"     * Constructor of todo."},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"     * @return the todo description and status."},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"        return \"[T]\" + super.toString() + \" \"+ description;"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":25}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"violinyap"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":3,"author":{"gitId":"violinyap"},"content":"//import duke classes"},{"lineNumber":4,"author":{"gitId":"violinyap"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"violinyap"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":7,"author":{"gitId":"violinyap"},"content":"//import java utils"},{"lineNumber":8,"author":{"gitId":"violinyap"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"violinyap"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":11,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":12,"author":{"gitId":"violinyap"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"violinyap"},"content":" * Interacts with users."},{"lineNumber":14,"author":{"gitId":"violinyap"},"content":" */"},{"lineNumber":15,"author":{"gitId":"violinyap"},"content":"public class Ui {"},{"lineNumber":16,"author":{"gitId":"violinyap"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":18,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"violinyap"},"content":"     * Greets the user when user first run the application."},{"lineNumber":20,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"violinyap"},"content":"    public static void helloMessage() {"},{"lineNumber":22,"author":{"gitId":"violinyap"},"content":"        String logo \u003d"},{"lineNumber":23,"author":{"gitId":"violinyap"},"content":"                \"\\n\""},{"lineNumber":24,"author":{"gitId":"violinyap"},"content":"                        + \"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\\n\""},{"lineNumber":25,"author":{"gitId":"violinyap"},"content":"                        + \"░░░████████░░░░░░░░░░░█░░█░░░░░░░░░░░░\\n\""},{"lineNumber":26,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░░░██░░░░░░░░░█░░█░░░░░░░░░░░░\\n\""},{"lineNumber":27,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░░░░█░░█░░░█░░█░█░░██████░░░░░\\n\""},{"lineNumber":28,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░░░░█░░█░░░█░░██░░░█░░░░░░░░░░\\n\""},{"lineNumber":29,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░░░░█░░█░░░█░░█░█░░█████░░░░░░\\n\""},{"lineNumber":30,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░░░██░░██░██░░█░█░░█░░░░░░░░░░\\n\""},{"lineNumber":31,"author":{"gitId":"violinyap"},"content":"                        + \"░░░█░░░░░██░░░░░███░░░█░░█░█████░░░░░░\\n\""},{"lineNumber":32,"author":{"gitId":"violinyap"},"content":"                        + \"░░░███████░░░░░░░░░░░░█░░█░░░░░░░░░░░░\\n\""},{"lineNumber":33,"author":{"gitId":"violinyap"},"content":"                        + \"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\\n\";"},{"lineNumber":34,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":35,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":36,"author":{"gitId":"violinyap"},"content":"        String greetings \u003d \"\\n(¯`·._.·(¯`·._.· HI I\u0027M DUKE ·._.·´¯)·._.·´¯)\\n\""},{"lineNumber":37,"author":{"gitId":"violinyap"},"content":"                            + \"How can I help you?\\n\""},{"lineNumber":38,"author":{"gitId":"violinyap"},"content":"                            + \"(¯`·._.·(¯`·._.· (^ v ^) ·._.·´¯)·._.·´¯)\\n\";"},{"lineNumber":39,"author":{"gitId":"violinyap"},"content":"        System.out.println(logo + greetings);"},{"lineNumber":40,"author":{"gitId":"violinyap"},"content":"        showLine();"},{"lineNumber":41,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":43,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"violinyap"},"content":"     * Print all tasks in the list."},{"lineNumber":45,"author":{"gitId":"violinyap"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"violinyap"},"content":"     * @param tasks arraylist of tasks."},{"lineNumber":47,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"violinyap"},"content":"    public static void printTasks(ArrayList \u003cTask\u003e tasks){"},{"lineNumber":49,"author":{"gitId":"violinyap"},"content":"        for (int i \u003d 0; i \u003ctasks.size(); i++) {"},{"lineNumber":50,"author":{"gitId":"violinyap"},"content":"            System.out.printf(\"%d.%s\\n\", i + 1, tasks.get(i).toString());"},{"lineNumber":51,"author":{"gitId":"violinyap"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":54,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"violinyap"},"content":"     * Prints all task in the list after a command is done."},{"lineNumber":56,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"violinyap"},"content":"    public static void printList() {"},{"lineNumber":58,"author":{"gitId":"violinyap"},"content":"        System.out.println(\"Here are the tasks in your list: \");"},{"lineNumber":59,"author":{"gitId":"violinyap"},"content":"        printTasks(TaskList.getTasks());"},{"lineNumber":60,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":61,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":63,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"violinyap"},"content":"     * Sets response to be Duke\u0027s goodbye."},{"lineNumber":65,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"violinyap"},"content":"    public static void byeMessage() {"},{"lineNumber":67,"author":{"gitId":"violinyap"},"content":"        System.out.println(\"Bye:( Hope to see you again soon!\");"},{"lineNumber":68,"author":{"gitId":"violinyap"},"content":"        System.exit(0);"},{"lineNumber":69,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":71,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":72,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"violinyap"},"content":"     * Get user\u0027s input"},{"lineNumber":74,"author":{"gitId":"violinyap"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"violinyap"},"content":"     * @return user\u0027s input"},{"lineNumber":76,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"violinyap"},"content":"    public static String readCommand(){"},{"lineNumber":78,"author":{"gitId":"violinyap"},"content":"        String input \u003d scanner.nextLine();"},{"lineNumber":79,"author":{"gitId":"violinyap"},"content":"        return input;"},{"lineNumber":80,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":82,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":83,"author":{"gitId":"violinyap"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"violinyap"},"content":"     * Prints a line as separator"},{"lineNumber":85,"author":{"gitId":"violinyap"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"violinyap"},"content":"    public static void showLine(){"},{"lineNumber":87,"author":{"gitId":"violinyap"},"content":"        String line \u003d \"____________________________________________________________\";"},{"lineNumber":88,"author":{"gitId":"violinyap"},"content":"        System.out.println(line);"},{"lineNumber":89,"author":{"gitId":"violinyap"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":91,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":92,"author":{"gitId":"violinyap"},"content":""},{"lineNumber":93,"author":{"gitId":"violinyap"},"content":"}"}],"authorContributionMap":{"violinyap":93}}]
