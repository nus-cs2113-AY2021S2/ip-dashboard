[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":" Duke is a desktop app for keeping track of and managing your tasks,"},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"it is intended for use via a Command Line Interface (CLI) and is optimized"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"for users who can type fast."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"- [Quick start](#quick-start)"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"- [Commands](#commands)"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"- [Adding a todo: `todo`](#adding-a-todo-todo)"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"- [Adding an event: `event`](#adding-a-event-event)"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"- [Adding a deadline: `deadline`](#adding-a-deadline-deadline)"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"- [Listing tasks: `list`](#listing-tasks-list)"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"- [Finding tasks by name: `find`](#finding-tasks-by-name-find)"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"- [Deleting tasks: `delete`](#delete-a-task-delete)"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"- [Marking tasks as done: `done`](#marking-a-task-as-done-done)"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"- [Exiting the program: `bye`](#exiting-the-program-bye)"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"- [FAQ](#faq)"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"- [Command Summary](#command-summary)"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"- [Contributors](#contributors)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    "},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"***"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"## Quick Start"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"1. Ensure that you have Java `11` JDK installed on your computer."},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"1. Download the latest `ip.jar` from [here](https://github.com/seangoats/ip/releases)!"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"1. Copy the file to a folder you want to use as home folder for Duke."},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"1. From a command line, run Duke by entering the following command:"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"```bash"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"java -jar ip.jar"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"```"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"***  "},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"## Commands"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"### Adding a Todo: `todo` "},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"Adds a Todo task to Duke."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"- Adds a Todo with the specified description."},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"- Description of Todo must be given by user."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"Examples: "},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"- `todo read book` adds a Todo with the description of read book"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":"![img.png](screenshots/img.png)"},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"- `todo ` will cause Duke to produce an error message that the description cannot be empty  "},{"lineNumber":43,"author":{"gitId":"seangoats"},"content":"![img_1.png](screenshots/img_1.png)"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"seangoats"},"content":"### Adding a Event: `event`"},{"lineNumber":46,"author":{"gitId":"seangoats"},"content":"Adds a Todo task to Duke."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"seangoats"},"content":"Format: `event DESCRIPTION /at TIME`"},{"lineNumber":49,"author":{"gitId":"seangoats"},"content":"- Adds a Event with the specified description and time."},{"lineNumber":50,"author":{"gitId":"seangoats"},"content":"- Description and time of Event must be given by user."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"seangoats"},"content":"Examples:"},{"lineNumber":54,"author":{"gitId":"seangoats"},"content":"- `event meeting /at 2pm` adds a Event with the description of meeting and time of 2pm."},{"lineNumber":55,"author":{"gitId":"seangoats"},"content":"  ![img_2.png](screenshots/img_2.png)"},{"lineNumber":56,"author":{"gitId":"seangoats"},"content":"- `event ` will cause Duke to produce an error message that the description and /at cannot be empty  "},{"lineNumber":57,"author":{"gitId":"seangoats"},"content":"  ![img_3.png](screenshots/img_3.png)"},{"lineNumber":58,"author":{"gitId":"seangoats"},"content":"- `event meeting` will cause Duke to produce an error message to give the correct form."},{"lineNumber":59,"author":{"gitId":"seangoats"},"content":"  ![img_4.png](screenshots/img_4.png)"},{"lineNumber":60,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":61,"author":{"gitId":"seangoats"},"content":"### Adding a Deadline: `deadline`"},{"lineNumber":62,"author":{"gitId":"seangoats"},"content":"Adds a Todo task to Duke."},{"lineNumber":63,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":64,"author":{"gitId":"seangoats"},"content":"Format: `deadline DESCRIPTION /by TIME`"},{"lineNumber":65,"author":{"gitId":"seangoats"},"content":"- Adds a Deadline with the specified description and time."},{"lineNumber":66,"author":{"gitId":"seangoats"},"content":"- Description and time of Deadline must be given by user."},{"lineNumber":67,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":68,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":69,"author":{"gitId":"seangoats"},"content":"Examples:"},{"lineNumber":70,"author":{"gitId":"seangoats"},"content":"- `deadline report /by 4 March` adds a Deadline with the description of meeting and time of 4 March.  "},{"lineNumber":71,"author":{"gitId":"seangoats"},"content":"  ![img_5.png](screenshots/img_5.png)"},{"lineNumber":72,"author":{"gitId":"seangoats"},"content":"- `deadline` will cause Duke to produce an error message that the description and /by cannot be empty  "},{"lineNumber":73,"author":{"gitId":"seangoats"},"content":"  ![img_6.png](screenshots/img_6.png)"},{"lineNumber":74,"author":{"gitId":"seangoats"},"content":"- `deadline report` will cause Duke to produce an error message to give the correct input format."},{"lineNumber":75,"author":{"gitId":"seangoats"},"content":"  ![img_7.png](screenshots/img_7.png)"},{"lineNumber":76,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":77,"author":{"gitId":"seangoats"},"content":"### Listing tasks: `list`"},{"lineNumber":78,"author":{"gitId":"seangoats"},"content":"Lists all tasks tracked by Duke."},{"lineNumber":79,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":80,"author":{"gitId":"seangoats"},"content":"Format: `list`"},{"lineNumber":81,"author":{"gitId":"seangoats"},"content":"- Lists all the tasks."},{"lineNumber":82,"author":{"gitId":"seangoats"},"content":"- The command must be only `list`, any additional input will not be known."},{"lineNumber":83,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":84,"author":{"gitId":"seangoats"},"content":"Examples:"},{"lineNumber":85,"author":{"gitId":"seangoats"},"content":"- `list this` will not be recognized by Duke.  "},{"lineNumber":86,"author":{"gitId":"seangoats"},"content":"  ![img_8.png](screenshots/img_8.png)"},{"lineNumber":87,"author":{"gitId":"seangoats"},"content":"- `list` will show all tasks in the list.  "},{"lineNumber":88,"author":{"gitId":"seangoats"},"content":"  ![img_9.png](screenshots/img_9.png)"},{"lineNumber":89,"author":{"gitId":"seangoats"},"content":"  "},{"lineNumber":90,"author":{"gitId":"seangoats"},"content":"### Finding tasks by name: `find`"},{"lineNumber":91,"author":{"gitId":"seangoats"},"content":"Finds and returns a list of tasks that match with a search term."},{"lineNumber":92,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":93,"author":{"gitId":"seangoats"},"content":"Format: `find SEARCH_TERM`"},{"lineNumber":94,"author":{"gitId":"seangoats"},"content":"- Finds and lists all tasks that match with the search term."},{"lineNumber":95,"author":{"gitId":"seangoats"},"content":"- Search term must be provided, otherwise error message occurs."},{"lineNumber":96,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":97,"author":{"gitId":"seangoats"},"content":"Examples:"},{"lineNumber":98,"author":{"gitId":"seangoats"},"content":"- `find book` returns all the tasks that match with \"book\".  "},{"lineNumber":99,"author":{"gitId":"seangoats"},"content":"  ![img_10.png](screenshots/img_10.png)  "},{"lineNumber":100,"author":{"gitId":"seangoats"},"content":"- `find` returns an error message to say the search term cannot be empty.  "},{"lineNumber":101,"author":{"gitId":"seangoats"},"content":"  ![img_11.png](screenshots/img_11.png)  "},{"lineNumber":102,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":103,"author":{"gitId":"seangoats"},"content":"### Delete a task: `delete`"},{"lineNumber":104,"author":{"gitId":"seangoats"},"content":"Deletes a task based on the index provided."},{"lineNumber":105,"author":{"gitId":"seangoats"},"content":"Format: `delete INDEX`"},{"lineNumber":106,"author":{"gitId":"seangoats"},"content":"- Deletes a task from the task list based on the index provided."},{"lineNumber":107,"author":{"gitId":"seangoats"},"content":"- Index provided is based on index in list from `list` command."},{"lineNumber":108,"author":{"gitId":"seangoats"},"content":"- Index must be provided."},{"lineNumber":109,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":110,"author":{"gitId":"seangoats"},"content":"Examples:  "},{"lineNumber":111,"author":{"gitId":"seangoats"},"content":"![img_12.png](screenshots/img_12.png)"},{"lineNumber":112,"author":{"gitId":"seangoats"},"content":"- `delete 2` will delete the task `[T][✘] this` from the task list."},{"lineNumber":113,"author":{"gitId":"seangoats"},"content":"  ![img_13.png](screenshots/img_13.png)"},{"lineNumber":114,"author":{"gitId":"seangoats"},"content":"- `delete` returns an invalid format error message as no index is provided."},{"lineNumber":115,"author":{"gitId":"seangoats"},"content":"  ![img_14.png](screenshots/img_14.png)"},{"lineNumber":116,"author":{"gitId":"seangoats"},"content":"- `delete 4` returns an error message to tell the user the index provided is out of bounds."},{"lineNumber":117,"author":{"gitId":"seangoats"},"content":"  ![img_15.png](screenshots/img_15.png)"},{"lineNumber":118,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":119,"author":{"gitId":"seangoats"},"content":"### Marking a task as done: `done`"},{"lineNumber":120,"author":{"gitId":"seangoats"},"content":"Marks a task as done based on the index provided."},{"lineNumber":121,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":122,"author":{"gitId":"seangoats"},"content":"Format: `done INDEX`"},{"lineNumber":123,"author":{"gitId":"seangoats"},"content":"- Marks a task as done from the task list based on the index provided."},{"lineNumber":124,"author":{"gitId":"seangoats"},"content":"- Index provided is based on index in list from `list` command."},{"lineNumber":125,"author":{"gitId":"seangoats"},"content":"- Index must be provided."},{"lineNumber":126,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":127,"author":{"gitId":"seangoats"},"content":"Examples:  "},{"lineNumber":128,"author":{"gitId":"seangoats"},"content":"![img_12.png](screenshots/img_12.png)"},{"lineNumber":129,"author":{"gitId":"seangoats"},"content":"- `done 2` will mark the task `[T][✘] this` as done from the task list."},{"lineNumber":130,"author":{"gitId":"seangoats"},"content":"  ![img_16.png](screenshots/img_16.png)![img_13.png](screenshots/img_13.png)"},{"lineNumber":131,"author":{"gitId":"seangoats"},"content":"- `done this` returns an invalid format error message as no index is provided."},{"lineNumber":132,"author":{"gitId":"seangoats"},"content":"  ![img_17.png](screenshots/img_17.png)"},{"lineNumber":133,"author":{"gitId":"seangoats"},"content":"- `done 4` returns an error message to tell the user the index provided is out of bounds."},{"lineNumber":134,"author":{"gitId":"seangoats"},"content":"  ![img_18.png](screenshots/img_18.png)"},{"lineNumber":135,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":136,"author":{"gitId":"seangoats"},"content":"### Exiting the program: `bye`"},{"lineNumber":137,"author":{"gitId":"seangoats"},"content":"Exits the program"},{"lineNumber":138,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":139,"author":{"gitId":"seangoats"},"content":"Format: `bye`"},{"lineNumber":140,"author":{"gitId":"seangoats"},"content":"- Exits the program"},{"lineNumber":141,"author":{"gitId":"seangoats"},"content":"- Data is saved to the storage text file before program terminates."},{"lineNumber":142,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":143,"author":{"gitId":"seangoats"},"content":"Examples:"},{"lineNumber":144,"author":{"gitId":"seangoats"},"content":"- `bye` prints an exit message and exits the program.  "},{"lineNumber":145,"author":{"gitId":"seangoats"},"content":"  ![img_19.png](screenshots/img_19.png)"},{"lineNumber":146,"author":{"gitId":"seangoats"},"content":"  "},{"lineNumber":147,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":148,"author":{"gitId":"seangoats"},"content":"## FAQ"},{"lineNumber":149,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":150,"author":{"gitId":"seangoats"},"content":"**Q**: How to transfer my data to another computer?  "},{"lineNumber":151,"author":{"gitId":"seangoats"},"content":"**A**: Place the storage text file in the same folder as `ip.jar` when running on another computer"},{"lineNumber":152,"author":{"gitId":"seangoats"},"content":"  "},{"lineNumber":153,"author":{"gitId":"seangoats"},"content":"## Command Summary:  "},{"lineNumber":154,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":155,"author":{"gitId":"seangoats"},"content":"Command | Format, Examples|"},{"lineNumber":156,"author":{"gitId":"seangoats"},"content":"--------|------------------|"},{"lineNumber":157,"author":{"gitId":"seangoats"},"content":"**Add Todo** |`todo DESCRIPTION` \u003cbr/\u003ee.g. `todo read book`|"},{"lineNumber":158,"author":{"gitId":"seangoats"},"content":"**Add Event** | `event DESCRIPTION /at TIME` \u003cbr/\u003ee.g. `event meeting /at 4pm`|"},{"lineNumber":159,"author":{"gitId":"seangoats"},"content":"**Add Deadline** | `deadline DESCRIPTION /by TIME` \u003cbr/\u003e e.g. `return book /by Sunday`|"},{"lineNumber":160,"author":{"gitId":"seangoats"},"content":"**List** | `list`|"},{"lineNumber":161,"author":{"gitId":"seangoats"},"content":"**Find** | `find SEARCH_TERM` \u003cbr/\u003e e.g `find book`|"},{"lineNumber":162,"author":{"gitId":"seangoats"},"content":"**Delete** | `delete INDEX` \u003cbr/\u003e e.g. `delete 2`|"},{"lineNumber":163,"author":{"gitId":"seangoats"},"content":"**Done** | `done INDEX` \u003cbr/\u003e e.g. `done 1`|"},{"lineNumber":164,"author":{"gitId":"seangoats"},"content":"**Exit** | `bye`|"},{"lineNumber":165,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":166,"author":{"gitId":"seangoats"},"content":"## Contributors:"},{"lineNumber":167,"author":{"gitId":"seangoats"},"content":"Feel free to contact the developers if you want to contribute or if there are any issues or"},{"lineNumber":168,"author":{"gitId":"seangoats"},"content":"bugs that you would like to report. Alternatively, you can use GitHub Issues for this as well!"},{"lineNumber":169,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":170,"author":{"gitId":"seangoats"},"content":"Name | Role| Contact:|"},{"lineNumber":171,"author":{"gitId":"seangoats"},"content":"----| ---- | ----|"},{"lineNumber":172,"author":{"gitId":"seangoats"},"content":"Sean | Main Developer | [@seangoats](https://www.github.com/seangoats)|"},{"lineNumber":173,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"seangoats":162,"-":11}},{"path":"src/main/java/command/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import exception.UnknownCommandException;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import parser.TaskParser;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":" * Represents the add command, has static methods that are called to add a new task to task list."},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"public class AddTask {"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     * Checks whether the task can be added successfully to the task list and does so if so."},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * @param input The full entered by the user."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    public static void addNewTask(String input) {"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"            Task taskToAdd \u003d TaskParser.parse(input);"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"            if (taskToAdd !\u003d null) {"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"                addTaskSuccessful(taskToAdd);"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        } catch (UnknownCommandException e) {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"     * Adds a task to the task list"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"     * @param taskToAdd The task to add to the task list"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"    public static void addTaskSuccessful(Task taskToAdd) {"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"        TaskList.addTask(taskToAdd);"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"        Printer.addTaskSuccessfulMessage(taskToAdd, TaskList.getTaskCount());"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":38}},{"path":"src/main/java/command/DeleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" * Represents the delete command, static method is called to delete task from task list."},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"public class DeleteTask {"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"     * Checks whether the task can be deleted from the task list successfully and does so if so."},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     * @param input The full input entered by the user."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"    public static void deleteTask(String input) {"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"        String substr \u003d input.substring(Constants.DELETE_STRING_LENGTH).trim();"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"            int taskIndex \u003d Integer.parseInt(substr) - 1;"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"            Task taskToDelete \u003d TaskList.getTask(taskIndex);"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"            TaskList.removeTask(taskToDelete);"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"            Printer.deleteTaskSuccessfulMessage(taskToDelete, TaskList.getTaskCount());"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"            Printer.taskIndexOutOfBoundsMessage();"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"            Printer.invalidDeleteFormatMessage();"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":31}},{"path":"src/main/java/command/DoneTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":" * Represents the done command, static method is called to mark a task as done in the task list."},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"public class DoneTask {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"     * Checks whether the task index is valid, marks the task as done if so."},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     * @param input The full input the user has entered."},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"    public static void markTaskDone(String input) {"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"        String[] parts \u003d input.split(\" \");"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"            int taskIndex \u003d Integer.parseInt(parts[1]) - 1;"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"            Task taskToMarkDone \u003d TaskList.getTask(taskIndex);"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"            taskToMarkDone.markDone();"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"            Printer.taskMarkedAsDoneMessage(taskToMarkDone);"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"            Printer.taskIndexOutOfBoundsMessage();"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            Printer.invalidDoneFormatMessage();"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":29}},{"path":"src/main/java/command/FindTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":" * Represents the find command, static method is called to find tasks that match the keyword."},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"public class FindTask {"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     * Finds the matching tasks in the task list, and calls on Printer to print them."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * If no matching tasks are found, call on Printer to print message indicating so."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @param input The full input the user has entered."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public static void findTask(String input) {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        String keyword \u003d input.substring(Constants.FIND_STRING_LENGTH).trim();"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        if (keyword.isBlank()) {"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"            Printer.keyWordCannotBeEmptyMessage();"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"            return;"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"        for (Task task : TaskList.getTasks()) {"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"                matchingTasks.add(task);"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"        if (matchingTasks.isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"            Printer.printNoMatchingTasks(keyword);"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"            Printer.printMatchingTaskList(matchingTasks);"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":38}},{"path":"src/main/java/constant/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package constant;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a class containing all the constants used by other classes."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class Constants {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"    public static final int EVENT_STRING_LENGTH \u003d 5;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    public static final int DEADLINE_STRING_LENGTH \u003d 8;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"    public static final int TODO_STRING_LENGTH \u003d 4;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"    public static final int DELETE_STRING_LENGTH \u003d 6;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    public static final int FIND_STRING_LENGTH \u003d 4;"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_COMMAND_BYE \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_COMMAND_LIST \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_COMMAND_DONE \u003d \"done\";"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_COMMAND_DELETE \u003d \"delete\";"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_COMMAND_FIND \u003d \"find\";"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_TASK_TODO \u003d \"todo\";"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_TASK_EVENT \u003d \"event\";"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_TASK_DEADLINE \u003d \"deadline\";"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_SEPARATOR_AT \u003d \"/at\";"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"    public static final String STRING_SEPARATOR_BY \u003d \"/by\";"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import parser.CommandParser;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import storage.DukeReader;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import storage.DukeWriter;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":" * Represents the main class, which is the entry point of the program."},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"    public static void main(String[] args) {"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"        DukeReader.readFromFile();"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"        Printer.printStartUpMessage();"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        TaskList.loadTasks();"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        CommandParser.parse(scanner);"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        DukeWriter.writeToFile(TaskList.getTasks());"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        Printer.printExitMessage();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seangoats":23,"-":3}},{"path":"src/main/java/exception/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":" * Represents a custom checked exception that occurs when the description of the command is empty."},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"public class EmptyCommandException extends Throwable {"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"    private final String command;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    public EmptyCommandException(String command) {"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"        this.command \u003d command;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"    public String getMessage() {"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"        if (command.equals(Constants.STRING_TASK_DEADLINE)) {"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"            return \"____________________________________________________________\\n\" +"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"                    \"The description and /by of a \" + command + \" cannot be empty!\\n\" +"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"                    \"____________________________________________________________\\n\";"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        } else if (command.equals(Constants.STRING_TASK_EVENT)) {"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"            return \"____________________________________________________________\\n\" +"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"                    \"The description and /at of a \" + command + \" cannot be empty!\\n\" +"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"                    \"____________________________________________________________\\n\";"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            return \"____________________________________________________________\\n\" +"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"                    \"The description of a \" + command + \" cannot be empty!\\n\" +"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"                    \"____________________________________________________________\\n\";"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":31}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a custom checked exception that occurs when the command is invalid due to invalid description."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class InvalidCommandException extends Throwable {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"    private final String command;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"    public InvalidCommandException(String command) {"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"        this.command \u003d command;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"        if (command.equals(\"deadline\")) {"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"            return \"____________________________________________________________\\n\" +"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"                    \"The description of a \" + command + \" must be in the form \u0027deadline /by time\u0027\\n\" +"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"                    \"____________________________________________________________\\n\";"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"        } else if (command.equals(\"event\")) {"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"            return \"____________________________________________________________\\n\" +"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"                    \"The description of a \" + command + \" must be in the form \u0027event /at time!\\n\" +"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"                    \"____________________________________________________________\\n\";"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"            return super.getMessage();"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":27}},{"path":"src/main/java/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a custom checked exception that occurs when the command that was input is unknown."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class UnknownCommandException extends Throwable {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    public String getMessage() {"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"        return \"____________________________________________________________\\n\" +"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"                \"I\u0027m sorry, but I don\u0027t know what that means. :(\\n\" +"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"                \"Please enter a valid command. :)\\n\" +"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"                \"____________________________________________________________\\n\";"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":14}},{"path":"src/main/java/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import command.AddTask;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import command.DeleteTask;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import command.DoneTask;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import command.FindTask;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"import storage.DukeReader;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"import task.TaskList;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"import ui.Printer;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":" * Represents a class that parses the input by the user so that a command can be performed."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"public class CommandParser implements Parser {"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     * Runs the command parser indefinitely, calls on other classes to perform the"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"     * command, ends when the command is bye."},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"     * @param scanner The Scanner object to be used for all user input."},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    public static void parse(Scanner scanner) {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        while (true) {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            String input \u003d scanner.nextLine();"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"            if (input.equals(Constants.STRING_COMMAND_BYE)) {"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"                return;"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"            } else if (input.equals(Constants.STRING_COMMAND_LIST)) {"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"                Printer.printTaskList(TaskList.getTasks());"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"            } else if (input.contains(Constants.STRING_COMMAND_DONE)) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"                DoneTask.markTaskDone(input);"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"            } else if (input.contains(Constants.STRING_COMMAND_DELETE)) {"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"                DeleteTask.deleteTask(input);"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"            } else if (input.contains(Constants.STRING_COMMAND_FIND)) {"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"                FindTask.findTask(input);"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"                AddTask.addNewTask(input);"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":42}},{"path":"src/main/java/parser/DeadlineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import exception.EmptyCommandException;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import exception.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.Deadline;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" * Represents a class that parses user input to a valid DeadLine object."},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"public class DeadlineParser implements Parser {"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"     * Parses the user input to return a valid DeadLine object."},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     * @param input The full input entered by the user."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * @return A Deadline object parsed from the user input."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     * @throws EmptyCommandException   If the description of the deadline is empty."},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @throws InvalidCommandException If the format of the deadline is invalid."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public static Deadline parse(String input) throws EmptyCommandException, InvalidCommandException {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        String substr \u003d input.substring(Constants.DEADLINE_STRING_LENGTH);"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        if (substr.isBlank()) {"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"            throw new EmptyCommandException(Constants.STRING_TASK_DEADLINE);"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        String[] parts \u003d substr.split(Constants.STRING_SEPARATOR_BY);"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        if (parts.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"            throw new InvalidCommandException(Constants.STRING_TASK_DEADLINE);"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"        String description \u003d parts[0].trim();"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"        String by \u003d parts[1].trim();"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"        if (description.isBlank() || by.isBlank()) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"            throw new EmptyCommandException(Constants.STRING_TASK_DEADLINE);"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        return new Deadline(description, by);"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":36}},{"path":"src/main/java/parser/EventParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import exception.EmptyCommandException;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import exception.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.Event;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" * Represents a class that parses user input to a valid Event object."},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"public class EventParser implements Parser {"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"     * Parses the user input to return a valid Event Object."},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     * @param input The full input the user has entered."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * @return A Event Object parsed from the user input."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     * @throws EmptyCommandException   If the description of the event is empty."},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @throws InvalidCommandException If the description of the event is invalid."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public static Event parse(String input) throws EmptyCommandException, InvalidCommandException {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        String substr \u003d input.substring(Constants.EVENT_STRING_LENGTH);"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        if (substr.isBlank()) {"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"            throw new EmptyCommandException(Constants.STRING_TASK_EVENT);"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        String[] parts \u003d substr.split(Constants.STRING_SEPARATOR_AT);"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        if (parts.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"            throw new InvalidCommandException(Constants.STRING_TASK_EVENT);"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"        String description \u003d parts[0].trim();"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"        String at \u003d parts[1].trim();"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"        if (description.isBlank() || at.isBlank()) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"            throw new EmptyCommandException(Constants.STRING_TASK_EVENT);"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        return new Event(description, at);"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":36}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"public interface Parser {"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"    public static void parse() {"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    ;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":9}},{"path":"src/main/java/parser/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import exception.EmptyCommandException;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import exception.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import exception.UnknownCommandException;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":" * Represents a class that parses the input to get a Task subclass."},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"public class TaskParser implements Parser {"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     * Processes the input, and calls the relevant parser to return the relevant Task subclass Object."},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * @param input The full input entered by the user."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     * @return Task subclass Object, either DeadLine, Event or ToDo."},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @throws UnknownCommandException If the input does not contain the string corresponding to any of the tasks."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public static Task parse(String input) throws UnknownCommandException {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"            if (input.contains(Constants.STRING_TASK_TODO)) {"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"                return ToDoParser.parse(input);"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"            } else if (input.contains(Constants.STRING_TASK_DEADLINE)) {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"                return DeadlineParser.parse(input);"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            } else if (input.contains(Constants.STRING_TASK_EVENT)) {"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"                return EventParser.parse(input);"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"            } else {"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"                throw new UnknownCommandException();"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"        } catch (EmptyCommandException e) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"            return null;"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"            return null;"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":40}},{"path":"src/main/java/parser/ToDoParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import constant.Constants;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import exception.EmptyCommandException;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.ToDo;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":" * Represents a class that parses the input to a valid ToDo object."},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"public class ToDoParser implements Parser {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"     * Parses the user input to return a valid ToDo object."},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"     * @param input The full input entered by the user."},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"     * @return A ToDo object parsed from the user input."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * @throws EmptyCommandException If the description of the ToDo is empty."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    public static ToDo parse(String input) throws EmptyCommandException {"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"        String substr \u003d input.substring(Constants.TODO_STRING_LENGTH);"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"        if (substr.isBlank()) {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"            throw new EmptyCommandException(Constants.STRING_TASK_TODO);"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        return new ToDo(substr.trim());"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":25}},{"path":"src/main/java/storage/DukeReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import task.Event;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.ToDo;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"import java.util.regex.Pattern;"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":" * Represents a class that reads in the data storage text file and loads it if it exists and has existing data."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"public class DukeReader {"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"     * Reads the data in the text file and creates tasks to add to the task list if data is present."},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    public static void readFromFile() {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            File f \u003d new File(\"duke.txt\");"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"            if (!f.exists()) {"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"                f.createNewFile();"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"            Scanner scanner \u003d new Scanner(f);"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"                createTask(scanner.nextLine());"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"            System.out.println(\"File not found\");"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":"     * Reads the input from the text file and creates a Task subclass to add to the task list."},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"seangoats"},"content":"     * @param input A line of input read from the text file."},{"lineNumber":44,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"seangoats"},"content":"    private static void createTask(String input) {"},{"lineNumber":46,"author":{"gitId":"seangoats"},"content":"        String[] parts \u003d input.split(Pattern.quote(\" | \"));"},{"lineNumber":47,"author":{"gitId":"seangoats"},"content":"        String type \u003d parts[0];"},{"lineNumber":48,"author":{"gitId":"seangoats"},"content":"        boolean isDone \u003d Integer.parseInt(parts[1]) \u003d\u003d 1;"},{"lineNumber":49,"author":{"gitId":"seangoats"},"content":"        String description \u003d parts[2];"},{"lineNumber":50,"author":{"gitId":"seangoats"},"content":"        switch (type) {"},{"lineNumber":51,"author":{"gitId":"seangoats"},"content":"        case \"T\":"},{"lineNumber":52,"author":{"gitId":"seangoats"},"content":"            createToDo(isDone, description);"},{"lineNumber":53,"author":{"gitId":"seangoats"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"seangoats"},"content":"        case \"D\":"},{"lineNumber":55,"author":{"gitId":"seangoats"},"content":"            String by \u003d parts[3];"},{"lineNumber":56,"author":{"gitId":"seangoats"},"content":"            createDeadline(isDone, description, by);"},{"lineNumber":57,"author":{"gitId":"seangoats"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"seangoats"},"content":"        case \"E\":"},{"lineNumber":59,"author":{"gitId":"seangoats"},"content":"            String at \u003d parts[3];"},{"lineNumber":60,"author":{"gitId":"seangoats"},"content":"            createEvent(isDone, description, at);"},{"lineNumber":61,"author":{"gitId":"seangoats"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":65,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"seangoats"},"content":"     * Reads the input from the text file and creates a Event to add to the task list"},{"lineNumber":67,"author":{"gitId":"seangoats"},"content":"     * with corresponding description and done status."},{"lineNumber":68,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"seangoats"},"content":"     * @param input A line of input read from the text file."},{"lineNumber":70,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"seangoats"},"content":"    private static void createEvent(boolean isDone, String description, String at) {"},{"lineNumber":72,"author":{"gitId":"seangoats"},"content":"        Event event \u003d new Event(description, at);"},{"lineNumber":73,"author":{"gitId":"seangoats"},"content":"        if (isDone) {"},{"lineNumber":74,"author":{"gitId":"seangoats"},"content":"            event.markDone();"},{"lineNumber":75,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"seangoats"},"content":"        tasks.add(event);"},{"lineNumber":77,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":79,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"seangoats"},"content":"     * Reads the input from the text file and creates a DeadLine to add to the task list"},{"lineNumber":81,"author":{"gitId":"seangoats"},"content":"     * with corresponding description and done status."},{"lineNumber":82,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"seangoats"},"content":"     * @param input A line of input read from the text file."},{"lineNumber":84,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"seangoats"},"content":"    private static void createDeadline(boolean isDone, String description, String by) {"},{"lineNumber":86,"author":{"gitId":"seangoats"},"content":"        Deadline deadline \u003d new Deadline(description, by);"},{"lineNumber":87,"author":{"gitId":"seangoats"},"content":"        if (isDone) {"},{"lineNumber":88,"author":{"gitId":"seangoats"},"content":"            deadline.markDone();"},{"lineNumber":89,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"seangoats"},"content":"        tasks.add(deadline);"},{"lineNumber":91,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":93,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"seangoats"},"content":"     * Reads the input from the text file and creates a ToDo to add to the task list"},{"lineNumber":95,"author":{"gitId":"seangoats"},"content":"     * with corresponding description and done status."},{"lineNumber":96,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"seangoats"},"content":"     * @param input A line of input read from the text file."},{"lineNumber":98,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"seangoats"},"content":"    private static void createToDo(boolean isDone, String description) {"},{"lineNumber":100,"author":{"gitId":"seangoats"},"content":"        ToDo todo \u003d new ToDo(description);"},{"lineNumber":101,"author":{"gitId":"seangoats"},"content":"        if (isDone) {"},{"lineNumber":102,"author":{"gitId":"seangoats"},"content":"            todo.markDone();"},{"lineNumber":103,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"seangoats"},"content":"        tasks.add(todo);"},{"lineNumber":105,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":107,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"seangoats"},"content":"     * Returns the task list loaded from reading the file."},{"lineNumber":109,"author":{"gitId":"seangoats"},"content":"     * If no file exists, the task list returned is empty."},{"lineNumber":110,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"seangoats"},"content":"     * @return The task list loaded from reading the file."},{"lineNumber":112,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"seangoats"},"content":"    public static ArrayList\u003cTask\u003e getTaskListFromFile() {"},{"lineNumber":114,"author":{"gitId":"seangoats"},"content":"        return tasks;"},{"lineNumber":115,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":116}},{"path":"src/main/java/storage/DukeWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":"import task.Event;"},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"import task.ToDo;"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":" * Represents a class that writes to the data storage text file."},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"public class DukeWriter {"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     * Writes the tasks in the task list to the storage text file."},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"     * @param tasks The task list."},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"            java.io.FileWriter fw \u003d new java.io.FileWriter(\"duke.txt\");"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"            for (Task task : tasks) {"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"                fw.write(getTaskAsWritableStr(task));"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"                fw.write(System.lineSeparator());"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"            fw.close();"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"            System.out.println(\"File not found!\");"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"     * Returns a writable String based on the Task subclass identified based"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"     * so that it can be written to the storage text file."},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":"     * @param task The Task subclass to be identified."},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"     * @return The writable String."},{"lineNumber":43,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"seangoats"},"content":"    private static String getTaskAsWritableStr(Task task) {"},{"lineNumber":45,"author":{"gitId":"seangoats"},"content":"        String writable \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"seangoats"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":47,"author":{"gitId":"seangoats"},"content":"            writable \u003d getWritableTodo(task);"},{"lineNumber":48,"author":{"gitId":"seangoats"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":49,"author":{"gitId":"seangoats"},"content":"            writable \u003d getWritableDeadline(task);"},{"lineNumber":50,"author":{"gitId":"seangoats"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":51,"author":{"gitId":"seangoats"},"content":"            writable \u003d getWritableEvent(task);"},{"lineNumber":52,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"seangoats"},"content":"        return writable;"},{"lineNumber":54,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":56,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"seangoats"},"content":"     * Returns a writable String based"},{"lineNumber":58,"author":{"gitId":"seangoats"},"content":"     * on the provided task identified as a ToDo."},{"lineNumber":59,"author":{"gitId":"seangoats"},"content":"     * so that it can be written to the storage text file."},{"lineNumber":60,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"seangoats"},"content":"     * @param task The ToDo identified."},{"lineNumber":62,"author":{"gitId":"seangoats"},"content":"     * @return The writable String."},{"lineNumber":63,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"seangoats"},"content":"    private static String getWritableTodo(Task task) {"},{"lineNumber":65,"author":{"gitId":"seangoats"},"content":"        String writable;"},{"lineNumber":66,"author":{"gitId":"seangoats"},"content":"        String type \u003d \"T\";"},{"lineNumber":67,"author":{"gitId":"seangoats"},"content":"        String isDone \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":68,"author":{"gitId":"seangoats"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":69,"author":{"gitId":"seangoats"},"content":"        writable \u003d String.join(\" | \", type, isDone, description);"},{"lineNumber":70,"author":{"gitId":"seangoats"},"content":"        return writable;"},{"lineNumber":71,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":73,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"seangoats"},"content":"     * Returns a writable String based"},{"lineNumber":75,"author":{"gitId":"seangoats"},"content":"     * on the provided task identified as a DeadLine."},{"lineNumber":76,"author":{"gitId":"seangoats"},"content":"     * so that it can be written to the storage text file."},{"lineNumber":77,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"seangoats"},"content":"     * @param task The DeadLine identified."},{"lineNumber":79,"author":{"gitId":"seangoats"},"content":"     * @return The writable String."},{"lineNumber":80,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"seangoats"},"content":"    private static String getWritableDeadline(Task task) {"},{"lineNumber":82,"author":{"gitId":"seangoats"},"content":"        String writable;"},{"lineNumber":83,"author":{"gitId":"seangoats"},"content":"        String type \u003d \"D\";"},{"lineNumber":84,"author":{"gitId":"seangoats"},"content":"        String isDone \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":85,"author":{"gitId":"seangoats"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":86,"author":{"gitId":"seangoats"},"content":"        String by \u003d ((Deadline) task).getBy();"},{"lineNumber":87,"author":{"gitId":"seangoats"},"content":"        writable \u003d String.join(\" | \", type, isDone, description, by);"},{"lineNumber":88,"author":{"gitId":"seangoats"},"content":"        return writable;"},{"lineNumber":89,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":91,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"seangoats"},"content":"     * Returns a writable String based"},{"lineNumber":93,"author":{"gitId":"seangoats"},"content":"     * on the provided task identified as a Event."},{"lineNumber":94,"author":{"gitId":"seangoats"},"content":"     * so that it can be written to the storage text file."},{"lineNumber":95,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"seangoats"},"content":"     * @param task The Event identified."},{"lineNumber":97,"author":{"gitId":"seangoats"},"content":"     * @return The writable String."},{"lineNumber":98,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"seangoats"},"content":"    private static String getWritableEvent(Task task) {"},{"lineNumber":100,"author":{"gitId":"seangoats"},"content":"        String writable;"},{"lineNumber":101,"author":{"gitId":"seangoats"},"content":"        String type \u003d \"E\";"},{"lineNumber":102,"author":{"gitId":"seangoats"},"content":"        String isDone \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":103,"author":{"gitId":"seangoats"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":104,"author":{"gitId":"seangoats"},"content":"        String at \u003d ((Event) task).getAt();"},{"lineNumber":105,"author":{"gitId":"seangoats"},"content":"        writable \u003d String.join(\" | \", type, isDone, description, at);"},{"lineNumber":106,"author":{"gitId":"seangoats"},"content":"        return writable;"},{"lineNumber":107,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":108}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a DeadLine that contains a description, and a date or time to complete it by."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"        this.by \u003d by;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * Returns the date or time to complete the DeadLine by."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @return The date or time to complete the DeadLine by."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public String getBy() {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        return by;"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":28}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a Event that contains a description, and the date or time it is conducted at."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    protected String at;"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"    public Event(String description, String at) {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"     * Returns the date or time the Event is conducted at."},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * @return The date or time the Event is conducted at."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"    public String getAt() {"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"        return at;"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":28}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a Task in the task list."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"    public static final String CHECK_MARK \u003d \"\\u2713\";"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    public static final String X_MARK \u003d \"\\u2718\";"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"     * Returns the status icon of the task based on its done status."},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"     * @return The status icon of the task based on its done status."},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"    public String getStatusIcon() {"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        return (isDone ? CHECK_MARK : X_MARK);"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"     * Returns the description of the task."},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"     * @return The description of the task."},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"     * Marks the task as done."},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"    public void markDone() {"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"        this.isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"seangoats"},"content":"     * Returns the done status of the task."},{"lineNumber":44,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"seangoats"},"content":"     * @return The done status of the task."},{"lineNumber":46,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"seangoats"},"content":"    public boolean isDone() {"},{"lineNumber":48,"author":{"gitId":"seangoats"},"content":"        return isDone;"},{"lineNumber":49,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":51,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"seangoats"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"seangoats"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"},{"lineNumber":54,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":55}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import storage.DukeReader;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":" * Represents a class containing the task list and the number of tasks in the list."},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":"    private static int taskCount \u003d 0;"},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"    public static void addTask(Task task) {"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"        tasks.add(task);"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"        taskCount++;"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"    public static int getTaskCount() {"},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"        return taskCount;"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"    public static ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        return tasks;"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"    public static Task getTask(int index) {"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":"        return tasks.get(index);"},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"    public static void removeTask(Task task) {"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"        tasks.remove(task);"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"        taskCount--;"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"    public static void loadTasks() {"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":"        tasks \u003d DukeReader.getTaskListFromFile();"},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"        taskCount \u003d tasks.size();"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":40}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":" * Represents a ToDo that contains a description."},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":16}},{"path":"src/main/java/ui/Printer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seangoats"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":3,"author":{"gitId":"seangoats"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":5,"author":{"gitId":"seangoats"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":7,"author":{"gitId":"seangoats"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"seangoats"},"content":" * Represents a class that handles the printing of output to the console."},{"lineNumber":9,"author":{"gitId":"seangoats"},"content":" */"},{"lineNumber":10,"author":{"gitId":"seangoats"},"content":"public class Printer {"},{"lineNumber":11,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":12,"author":{"gitId":"seangoats"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"seangoats"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"seangoats"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"seangoats"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"seangoats"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":18,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"seangoats"},"content":"     * Prints the message when Duke is started up."},{"lineNumber":20,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"seangoats"},"content":"    public static void printStartUpMessage() {"},{"lineNumber":22,"author":{"gitId":"seangoats"},"content":"        System.out.println(LOGO);"},{"lineNumber":23,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":24,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Hello I\u0027m Duke\");"},{"lineNumber":25,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":26,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":27,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":29,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"seangoats"},"content":"     * Prints the exit message when the bye command is issued and Duke is exiting."},{"lineNumber":31,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"seangoats"},"content":"    public static void printExitMessage() {"},{"lineNumber":33,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":34,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":36,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":38,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"seangoats"},"content":"     * Prints the tasks in the task list."},{"lineNumber":40,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"seangoats"},"content":"     * @param tasks The task list."},{"lineNumber":42,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"seangoats"},"content":"    public static void printTaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":44,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":45,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":46,"author":{"gitId":"seangoats"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":47,"author":{"gitId":"seangoats"},"content":"            System.out.printf(\"%d. %s%n\", i + 1, tasks.get(i));"},{"lineNumber":48,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":50,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":52,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user the task has been added successfully to the task list."},{"lineNumber":54,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"seangoats"},"content":"     * @param taskToAdd The task that to be added."},{"lineNumber":56,"author":{"gitId":"seangoats"},"content":"     * @param taskCount The number of tasks in the task list."},{"lineNumber":57,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"seangoats"},"content":"    public static void addTaskSuccessfulMessage(Task taskToAdd, int taskCount) {"},{"lineNumber":59,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":60,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":61,"author":{"gitId":"seangoats"},"content":"        System.out.println(taskToAdd);"},{"lineNumber":62,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"},{"lineNumber":63,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":64,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":66,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user the task has been marked as done successfully in the task list."},{"lineNumber":68,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"seangoats"},"content":"     * @param taskToMarkDone The task to be marked as done."},{"lineNumber":70,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"seangoats"},"content":"    public static void taskMarkedAsDoneMessage(Task taskToMarkDone) {"},{"lineNumber":72,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":73,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":74,"author":{"gitId":"seangoats"},"content":"        System.out.println(taskToMarkDone);"},{"lineNumber":75,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":76,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":78,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user the task has been deleted successfully from the task list."},{"lineNumber":80,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"seangoats"},"content":"     * @param taskToDelete The task to be deleted from the task list."},{"lineNumber":82,"author":{"gitId":"seangoats"},"content":"     * @param taskCount    The number of tasks in the task list."},{"lineNumber":83,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"seangoats"},"content":"    public static void deleteTaskSuccessfulMessage(Task taskToDelete, int taskCount) {"},{"lineNumber":85,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":86,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task.\");"},{"lineNumber":87,"author":{"gitId":"seangoats"},"content":"        System.out.println(taskToDelete);"},{"lineNumber":88,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"},{"lineNumber":89,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":90,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":92,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user the index they have entered is out of bounds of the task list size."},{"lineNumber":94,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"seangoats"},"content":"    public static void taskIndexOutOfBoundsMessage() {"},{"lineNumber":96,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":97,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"The index you entered is out of bounds, please enter a valid index.\");"},{"lineNumber":98,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":99,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":101,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user that the find command must contain a keyword."},{"lineNumber":103,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"seangoats"},"content":"    public static void keyWordCannotBeEmptyMessage() {"},{"lineNumber":105,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":106,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Keyword for find command cannot be empty\");"},{"lineNumber":107,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":108,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":110,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"seangoats"},"content":"     * Prints a message to tell the user that no matching tasks with the given keyword are found in the task list."},{"lineNumber":112,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"seangoats"},"content":"     * @param keyword The keyword to be matched."},{"lineNumber":114,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"seangoats"},"content":"    public static void printNoMatchingTasks(String keyword) {"},{"lineNumber":116,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":117,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"No tasks matching with \" + keyword + \" was found in your task list.\");"},{"lineNumber":118,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":119,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":121,"author":{"gitId":"seangoats"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"seangoats"},"content":"     * Prints the matching tasks in the task list that match the keyword."},{"lineNumber":123,"author":{"gitId":"seangoats"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"seangoats"},"content":"     * @param matchingTasks A list containing the tasks in the task list that match with they keyword."},{"lineNumber":125,"author":{"gitId":"seangoats"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"seangoats"},"content":"    public static void printMatchingTaskList(ArrayList\u003cTask\u003e matchingTasks) {"},{"lineNumber":127,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":128,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":129,"author":{"gitId":"seangoats"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"},{"lineNumber":130,"author":{"gitId":"seangoats"},"content":"            System.out.printf(\"%d. %s%n\", i + 1, matchingTasks.get(i));"},{"lineNumber":131,"author":{"gitId":"seangoats"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":133,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":135,"author":{"gitId":"seangoats"},"content":"    public static void invalidDeleteFormatMessage() {"},{"lineNumber":136,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":137,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Invalid format! Format the delete command like this \\\"delete [index]\\\"\");"},{"lineNumber":138,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":139,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"seangoats"},"content":""},{"lineNumber":141,"author":{"gitId":"seangoats"},"content":"    public static void invalidDoneFormatMessage() {"},{"lineNumber":142,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":143,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"Invalid format! Format the done command like this \\\"done [index]\\\"\");"},{"lineNumber":144,"author":{"gitId":"seangoats"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":145,"author":{"gitId":"seangoats"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"seangoats"},"content":"}"}],"authorContributionMap":{"seangoats":146}}]
