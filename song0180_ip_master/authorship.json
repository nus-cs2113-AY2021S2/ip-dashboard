[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":""},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"song0180"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"     * A divider (horizontal line)."},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"    public static final String DIVIDER_LINE_ONLY \u003d \"__________________________________________\";"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"     * A divider (horizontal line) with line break at the end."},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"    public static final String DIVIDER \u003d \"__________________________________________\\n\";"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":""},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"     * Prints greetings when the program starts."},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"    public static void printGreetings() {"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"                        + \" Welcome.\\n\""},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"                        + \" I am your assistant Friday. ✧ʕ̢̣̣̣̣̩̩̩̩·͡˔·ོɁ̡̣̣̣̣̩̩̩̩✧\\n\""},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"                        + \" Just FYI, I am developed by Song Yu.\\n\""},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"                        + \" May I know what I can help you?\\n\""},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":""},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"     * Prints greetings when the program ends."},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"    public static void printExitGreetings() {"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"        System.out.print("},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"                        + \" Thank you for getting in touch.\\n\""},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"                        + \" See you next time.\\n\""},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"                        + \"✧( ु•⌄• )◞ᴴᴬᵛᴱ ᴬ ᴳᴼᴼᴰ ᵀᴵᴹᴱ\\n\""},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":""},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"     * Prints the error message when user\u0027s input does not match any command."},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    public static void printNotCommand() {"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"                        + \" Sorry, your command is not recognized\\n\""},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"                        + \" See \u0027help\u0027. \\n\""},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":""},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"     * Prints the help message."},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"    public static void printHelp() {"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"        String helpMessage \u003d \" \u0027help\u0027     : Display tips on using this application\\n\""},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"                + \" \u0027exit\u0027     : Exit the application\\n\""},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"                + \" \u0027bye\u0027      : Exit the application\\n\""},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"                + \" \u0027list\u0027     : List all type of tasks you added to your task list\\n\""},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"                + \" \u0027done\u0027     : Mark a task as done\\n\\t\""},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027done 2\u0027 will mark the second task as done\\n\""},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"                + \" \u0027todo\u0027     : Add a new todo task\\n\\t\""},{"lineNumber":71,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027todo read book\u0027 will add \\\"read book\\\" to your task list\\n\""},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"                + \" \u0027deadline\u0027 : Add a new deadline task\\n\\t\""},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027deadline read book /by Sunday\u0027 will\""},{"lineNumber":74,"author":{"gitId":"song0180"},"content":"                + \" add \\\"read book\\\" to your task list with deadline \\\"Sunday\\\"\\n\""},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"                + \" \u0027event\u0027 : Add a new event task\\n\\t\""},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027event read book /at Mon 2-4pm\u0027 will\""},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"                + \" add \\\"read book\\\" to your task list with period  \\\"Mon 2-4pm\\\"\\n\";"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":""},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":80,"author":{"gitId":"song0180"},"content":"                DIVIDER_LINE_ONLY + DIVIDER"},{"lineNumber":81,"author":{"gitId":"song0180"},"content":"                        + helpMessage"},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY + DIVIDER_LINE_ONLY"},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"song0180"},"content":""},{"lineNumber":86,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"song0180"},"content":"     * Gets command from user input."},{"lineNumber":88,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"song0180"},"content":"     * @param userInput user\u0027s input."},{"lineNumber":90,"author":{"gitId":"song0180"},"content":"     * @return command."},{"lineNumber":91,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"song0180"},"content":"    private static String getCommand(String userInput) {"},{"lineNumber":93,"author":{"gitId":"song0180"},"content":"        String[] inputWords \u003d userInput.split(\" \");"},{"lineNumber":94,"author":{"gitId":"song0180"},"content":"        return inputWords[0];"},{"lineNumber":95,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"song0180"},"content":""},{"lineNumber":97,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"song0180"},"content":"     * Gets user input and execute corresponding command until the loop is exit."},{"lineNumber":99,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"song0180"},"content":"     * @param sc       Java Scanner to get user input."},{"lineNumber":101,"author":{"gitId":"song0180"},"content":"     * @param taskList The list of Task objects."},{"lineNumber":102,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"song0180"},"content":"    private static void operateMainLoop(Scanner sc, TaskList taskList) {"},{"lineNumber":104,"author":{"gitId":"song0180"},"content":"        String userInput;"},{"lineNumber":105,"author":{"gitId":"song0180"},"content":"        while (true) {"},{"lineNumber":106,"author":{"gitId":"song0180"},"content":"            userInput \u003d sc.nextLine();"},{"lineNumber":107,"author":{"gitId":"song0180"},"content":"            String userCommand \u003d getCommand(userInput);"},{"lineNumber":108,"author":{"gitId":"song0180"},"content":"            switch (userCommand) {"},{"lineNumber":109,"author":{"gitId":"song0180"},"content":"            case \"help\":"},{"lineNumber":110,"author":{"gitId":"song0180"},"content":"                printHelp();"},{"lineNumber":111,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":112,"author":{"gitId":"song0180"},"content":"            case \"list\":"},{"lineNumber":113,"author":{"gitId":"song0180"},"content":"                taskList.printCurrentList();"},{"lineNumber":114,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":115,"author":{"gitId":"song0180"},"content":"            case \"todo\":"},{"lineNumber":116,"author":{"gitId":"song0180"},"content":"                addTodoTaskToList(taskList, userInput);"},{"lineNumber":117,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":118,"author":{"gitId":"song0180"},"content":"            case \"deadline\":"},{"lineNumber":119,"author":{"gitId":"song0180"},"content":"                addDeadlineTaskToList(taskList, userInput);"},{"lineNumber":120,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":121,"author":{"gitId":"song0180"},"content":"            case \"event\":"},{"lineNumber":122,"author":{"gitId":"song0180"},"content":"                addEventTaskToList(taskList, userInput);"},{"lineNumber":123,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":124,"author":{"gitId":"song0180"},"content":"            case \"done\":"},{"lineNumber":125,"author":{"gitId":"song0180"},"content":"                handleDoneTask(taskList, userInput);"},{"lineNumber":126,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":127,"author":{"gitId":"song0180"},"content":"            case \"exit\":"},{"lineNumber":128,"author":{"gitId":"song0180"},"content":"                //FALL-THROUGH"},{"lineNumber":129,"author":{"gitId":"song0180"},"content":"            case \"bye\":"},{"lineNumber":130,"author":{"gitId":"song0180"},"content":"                printExitGreetings();"},{"lineNumber":131,"author":{"gitId":"song0180"},"content":"                return;"},{"lineNumber":132,"author":{"gitId":"song0180"},"content":"            default:"},{"lineNumber":133,"author":{"gitId":"song0180"},"content":"                printNotCommand();"},{"lineNumber":134,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":135,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"song0180"},"content":""},{"lineNumber":139,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"song0180"},"content":"     * Marks a task with a given integer index as done, if the index is not out of range."},{"lineNumber":141,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":143,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":144,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"song0180"},"content":"    private static void handleDoneTask(TaskList taskList, String userInput) {"},{"lineNumber":146,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"song0180"},"content":"            String taskIndexString \u003d getTaskIndexString(userInput);"},{"lineNumber":148,"author":{"gitId":"song0180"},"content":"            int itemIndex \u003d Integer.parseInt(taskIndexString);"},{"lineNumber":149,"author":{"gitId":"song0180"},"content":"            if (isItemIndexOutOfRange(taskList, itemIndex)) {"},{"lineNumber":150,"author":{"gitId":"song0180"},"content":"                return;"},{"lineNumber":151,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"song0180"},"content":"            setTaskAsDone(taskList, itemIndex);"},{"lineNumber":153,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":154,"author":{"gitId":"song0180"},"content":"            printInvalidIntegerWarning();"},{"lineNumber":155,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"song0180"},"content":""},{"lineNumber":158,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"song0180"},"content":"     * Prints a warning that the input is not a valid integer."},{"lineNumber":160,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"song0180"},"content":"    private static void printInvalidIntegerWarning() {"},{"lineNumber":162,"author":{"gitId":"song0180"},"content":"        System.out.println(DIVIDER"},{"lineNumber":163,"author":{"gitId":"song0180"},"content":"                + \"Invalid input!\\n\""},{"lineNumber":164,"author":{"gitId":"song0180"},"content":"                + \"The item number should be a valid integer!\\n\""},{"lineNumber":165,"author":{"gitId":"song0180"},"content":"                + DIVIDER"},{"lineNumber":166,"author":{"gitId":"song0180"},"content":"                + \"Try again:\""},{"lineNumber":167,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":168,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"song0180"},"content":""},{"lineNumber":170,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"song0180"},"content":"     * Returns the task index in integer."},{"lineNumber":172,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":174,"author":{"gitId":"song0180"},"content":"     * @return an integer task index."},{"lineNumber":175,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"song0180"},"content":"    private static String getTaskIndexString(String userInput) {"},{"lineNumber":177,"author":{"gitId":"song0180"},"content":"        return userInput.split(\" \")[1];"},{"lineNumber":178,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"song0180"},"content":""},{"lineNumber":180,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"song0180"},"content":"     * Sets the status of a Task object as done."},{"lineNumber":182,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":184,"author":{"gitId":"song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":185,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"song0180"},"content":"    private static void setTaskAsDone(TaskList taskList, int itemIndex) {"},{"lineNumber":187,"author":{"gitId":"song0180"},"content":"        taskList.updateTaskStatus(itemIndex - 1, true);"},{"lineNumber":188,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"song0180"},"content":""},{"lineNumber":190,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"song0180"},"content":"     * Returns true if the index of the task is out of range, false if in range."},{"lineNumber":192,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":194,"author":{"gitId":"song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":195,"author":{"gitId":"song0180"},"content":"     * @return true if the index of the task is out of range."},{"lineNumber":196,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"song0180"},"content":"    private static boolean isItemIndexOutOfRange(TaskList taskList, int itemIndex) {"},{"lineNumber":198,"author":{"gitId":"song0180"},"content":"        if (!taskList.isIndexInRange(itemIndex - 1)) {"},{"lineNumber":199,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER"},{"lineNumber":200,"author":{"gitId":"song0180"},"content":"                    + \"The task index input is out of range!\\n\""},{"lineNumber":201,"author":{"gitId":"song0180"},"content":"                    + DIVIDER"},{"lineNumber":202,"author":{"gitId":"song0180"},"content":"                    + \"Try again:\""},{"lineNumber":203,"author":{"gitId":"song0180"},"content":"            );"},{"lineNumber":204,"author":{"gitId":"song0180"},"content":"            return true;"},{"lineNumber":205,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"song0180"},"content":"        return false;"},{"lineNumber":207,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"song0180"},"content":""},{"lineNumber":209,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"song0180"},"content":"     * Adds an event type task into the taskList."},{"lineNumber":211,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":213,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":214,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"song0180"},"content":"    private static void addEventTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":216,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":217,"author":{"gitId":"song0180"},"content":"            Event.isCommandValid(userInput);"},{"lineNumber":218,"author":{"gitId":"song0180"},"content":"            String[] parseResult \u003d Event.parseTaskContent(userInput);"},{"lineNumber":219,"author":{"gitId":"song0180"},"content":"            String taskContent \u003d parseResult[0];"},{"lineNumber":220,"author":{"gitId":"song0180"},"content":"            String taskPeriod \u003d parseResult[1];"},{"lineNumber":221,"author":{"gitId":"song0180"},"content":"            taskList.addEventTask(taskContent, taskPeriod);"},{"lineNumber":222,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":223,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":224,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"song0180"},"content":""},{"lineNumber":227,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"song0180"},"content":"     * Adds a deadline type task into the taskList."},{"lineNumber":229,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":231,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":232,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"song0180"},"content":"    private static void addDeadlineTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":234,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":235,"author":{"gitId":"song0180"},"content":"            Deadline.isCommandValid(userInput);"},{"lineNumber":236,"author":{"gitId":"song0180"},"content":"            String[] parseResult \u003d Deadline.parseTaskContent(userInput);"},{"lineNumber":237,"author":{"gitId":"song0180"},"content":"            String taskContent \u003d parseResult[0];"},{"lineNumber":238,"author":{"gitId":"song0180"},"content":"            String taskDeadline \u003d parseResult[1];"},{"lineNumber":239,"author":{"gitId":"song0180"},"content":"            taskList.addDeadlineTask(taskContent, taskDeadline);"},{"lineNumber":240,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":241,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":242,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"song0180"},"content":""},{"lineNumber":245,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"song0180"},"content":"     * Adds a to-do type task into the taskList."},{"lineNumber":247,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":249,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":250,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"song0180"},"content":"    private static void addTodoTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":252,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":253,"author":{"gitId":"song0180"},"content":"            String[] parseResult \u003d Todo.parseTaskContent(userInput);"},{"lineNumber":254,"author":{"gitId":"song0180"},"content":"            taskList.addTodoTask(parseResult[0]);"},{"lineNumber":255,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":256,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":257,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"song0180"},"content":""},{"lineNumber":260,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"song0180"},"content":"     * The main method that drives the application."},{"lineNumber":262,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":263,"author":{"gitId":"song0180"},"content":"     * @param args Commandline arguments."},{"lineNumber":264,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":265,"author":{"gitId":"song0180"},"content":"    public static void main(String[] args) {"},{"lineNumber":266,"author":{"gitId":"song0180"},"content":"        printGreetings();"},{"lineNumber":267,"author":{"gitId":"song0180"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":268,"author":{"gitId":"song0180"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":269,"author":{"gitId":"song0180"},"content":"        operateMainLoop(sc, taskList);"},{"lineNumber":270,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"song0180":268}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    private String deadline;"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"    public Deadline(String content, String deadline) {"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.DEADLINE;"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":""},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    public static void isCommandValid(String userInput) throws Exception {"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"        if (!userInput.contains(\"/by\")) {"},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"            throw new Exception(\"Invalid deadline command. Check \u0027help\u0027.\\n\");"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":""},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) throws Exception {"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"        int byIndex \u003d 0;"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"            if (words[i].equals(\"/by\")) {"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"                byIndex \u003d i;"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":""},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"        return parseContentAndTime(words, byIndex);"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":""},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"    public static String[] parseContentAndTime(String[] words, int byIndex) throws Exception {"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"        String content \u003d getTaskContentString(words, byIndex);"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"        String deadline \u003d getTaskDeadlineString(words, byIndex);"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"        String[] parseResult \u003d new String[2];"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"        parseResult[0] \u003d content;"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"        parseResult[1] \u003d deadline;"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"        return parseResult;"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":""},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"    private static String getTaskDeadlineString(String[] words, int byIndex) throws Exception {"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"        StringBuilder deadlineBuilder \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"        for (int k \u003d (byIndex + 1); k \u003c words.length; k++) {"},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"            String deadlineWord \u003d words[k] + \" \";"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"            deadlineBuilder.append(deadlineWord);"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"        String deadline \u003d deadlineBuilder.toString().trim();"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"        if (deadline.length() \u003c 1) {"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"            throw new Exception(\"Time limit must be input! Check \u0027help\u0027.\\n\");"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"        return deadline;"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":""},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"    private static String getTaskContentString(String[] words, int byIndex) throws Exception {"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"        StringBuilder contentBuilder \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"        for (int j \u003d 1; j \u003c byIndex; j++) {"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"            String contentWord \u003d words[j] + \" \";"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"            contentBuilder.append(contentWord);"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"        String contentStr \u003d contentBuilder.toString().trim();"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        if (contentStr.length() \u003c 1) {"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"            throw new Exception(\"Task content must be input! Check \u0027help\u0027.\\n\");"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"        return contentStr;"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"song0180"},"content":""},{"lineNumber":66,"author":{"gitId":"song0180"},"content":""},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"    public String getDeadline() {"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"        return deadline;"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"song0180"},"content":""},{"lineNumber":71,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"        return \"(by: \" + deadline + \")\";"},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"song0180"},"content":""},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"    public void setDeadline(String deadline) {"},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":78}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    private String startTime, endTime, period;"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":""},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"    public Event(String content, String startTime, String endTime) {"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.EVENT;"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"    public Event(String listContent, String period) {"},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"        super(listContent);"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.EVENT;"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"        this.period \u003d period;"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":""},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"    public static void isCommandValid(String userInput) throws Exception {"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"        if (!userInput.contains(\"/at\")) {"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"            throw new Exception(\"Invalid event command. Check \u0027help\u0027.\\n\");"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":""},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) throws Exception {"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"        int atIndex \u003d 0;"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"            if (words[i].equals(\"/at\")) {"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"                atIndex \u003d i;"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":""},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"        return Deadline.parseContentAndTime(words, atIndex);"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":""},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"    private boolean checkValidPeriod(String startTime, String endTime) {"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"        // WIP: return startTime \u003c endTime;"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"        return true;"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    public String getStartTime() {"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"        return startTime;"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":""},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"    public void setStartTime(String startTime) {"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":""},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    public String getEndTime() {"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"        return endTime;"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"    public void setEndTime(String endTime) {"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"    public String getPeriod() {"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        return period;"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"        return \"(at: \" + period + \")\";"},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":""},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"    public void setPeriod(String period) {"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"        this.period \u003d period;"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":70}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"     * The status of the task."},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"     * The content of the task."},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"    protected String taskContent;"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"     * The type of the task."},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"    protected TaskType taskType;"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     * Initializes the task object with given parameter as content."},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"     * @param taskContent The content of the task."},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"    public Task(String taskContent) {"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"        this.isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"        this.taskContent \u003d taskContent;"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":""},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"     * Returns the status of the task."},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"     * @return the status of the task."},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"    public boolean isDone() {"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":""},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"     * Sets a new status of the task."},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"     * @param done the new status of the task."},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    public void setDone(boolean done) {"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"        isDone \u003d done;"},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":""},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"     * Returns the content of the task."},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"     * @return the content of the task."},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"    public String getTaskContent() {"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"        return taskContent;"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":""},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"     * Sets a new content of the task."},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"     * @param taskContent the new content of the task."},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"    public void setTaskContent(String taskContent) {"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        this.taskContent \u003d taskContent;"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"     * Returns the type of the task."},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"     * @return the type of the task."},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"    public TaskType getTaskType() {"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"        return taskType;"},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"song0180"},"content":""},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"     * Sets a new type of the task."},{"lineNumber":74,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"     * @param taskType the new type of the task."},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"    public void setTaskType(TaskType taskType) {"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"song0180"},"content":""},{"lineNumber":81,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"     * Gets a String of time limit of a Task object, if applicable."},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"     * @return The time limit of a Task in String."},{"lineNumber":85,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"song0180"},"content":"    public abstract String getTimeLimitString();"},{"lineNumber":87,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":87}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":""},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":""},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"     * Total number of task object in current list."},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"    private static int numOfTasks \u003d 0;"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"     * The collection of task object in current list."},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"    private ArrayList\u003cTask\u003e Tasks;"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     * Initializes a to-do-list object with an empty array list that stores task item."},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"        this.Tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":""},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"     * Returns the total number of task object."},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"     * @return the total number of task object."},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"    public static int getNumOfTasks() {"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"        return numOfTasks;"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":""},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"     * Returns a string message about the number of task objects in the list."},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"     * @return a string of the number of task objects in the list."},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"    private String getNumOfTasksString() {"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"        int numOfTasks \u003d getNumOfTasks();"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"        return \"Now you have \" + numOfTasks + (numOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"     * Prints the current list with dividers."},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"    public void printCurrentList() {"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER);"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"        printList();"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER_LINE_ONLY);"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":""},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"     * Prints the current list (without dividers)."},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"    private void printList() {"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"        int listSize \u003d Tasks.size();"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"        System.out.println(\"This is your current task list:\");"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"        if (listSize \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"            printListEmptyWarning();"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"            for (int i \u003d 0; i \u003c listSize; i++) {"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"                Task currentItem \u003d Tasks.get(i);"},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"                String timeString \u003d currentItem.getTimeLimitString();"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"                System.out.println((i + 1) + \". \""},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"                        + \"[\" + convertTaskType(currentItem.getTaskType()) + \"] \""},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"                        + \"[\" + (currentItem.isDone() ? \"☑️\" : \"✖️\") + \"] \""},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"                        + currentItem.getTaskContent()"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"                        + (currentItem.getTaskType() \u003d\u003d TaskType.TODO ? \"\" : \" \")"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"                        + timeString"},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"                );"},{"lineNumber":71,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"song0180"},"content":""},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"     * Prints warning message if the list is empty."},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":"    private void printListEmptyWarning() {"},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"        System.out.println(\" - The list is empty!\");"},{"lineNumber":80,"author":{"gitId":"song0180"},"content":"        System.out.println(\" - You can try add task object by input what\\n\""},{"lineNumber":81,"author":{"gitId":"song0180"},"content":"                + \"   you want to do.\\n\""},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"                + \" - check \u0027help\u0027 for more.\""},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"song0180"},"content":""},{"lineNumber":86,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"song0180"},"content":"     * Converts the enum type to string."},{"lineNumber":88,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"song0180"},"content":"     * @param type the type of the task."},{"lineNumber":90,"author":{"gitId":"song0180"},"content":"     * @return the type of the task in string."},{"lineNumber":91,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"song0180"},"content":"    private String convertTaskType(TaskType type) {"},{"lineNumber":93,"author":{"gitId":"song0180"},"content":"        switch (type) {"},{"lineNumber":94,"author":{"gitId":"song0180"},"content":"        case TODO:"},{"lineNumber":95,"author":{"gitId":"song0180"},"content":"            return \"T\";"},{"lineNumber":96,"author":{"gitId":"song0180"},"content":"        case EVENT:"},{"lineNumber":97,"author":{"gitId":"song0180"},"content":"            return \"E\";"},{"lineNumber":98,"author":{"gitId":"song0180"},"content":"        case DEADLINE:"},{"lineNumber":99,"author":{"gitId":"song0180"},"content":"            return \"D\";"},{"lineNumber":100,"author":{"gitId":"song0180"},"content":"        default:"},{"lineNumber":101,"author":{"gitId":"song0180"},"content":"            return \"Unknown task type\";"},{"lineNumber":102,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"song0180"},"content":""},{"lineNumber":105,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"song0180"},"content":"     * Adds a new to-do task to the current task list."},{"lineNumber":107,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":108,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"song0180"},"content":"     * @param content the content of the new task object."},{"lineNumber":110,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"song0180"},"content":"    public void addTodoTask(String content) {"},{"lineNumber":112,"author":{"gitId":"song0180"},"content":"        Todo newTask \u003d new Todo(content);"},{"lineNumber":113,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":114,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":115,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":116,"author":{"gitId":"song0180"},"content":"                + \"A new to-do task is added:\\n\""},{"lineNumber":117,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":118,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":119,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":120,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":121,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"song0180"},"content":""},{"lineNumber":123,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"song0180"},"content":"     * Adds a new deadline task to the current task list."},{"lineNumber":125,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":126,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"song0180"},"content":"     * @param content  the content of the new deadline task object."},{"lineNumber":128,"author":{"gitId":"song0180"},"content":"     * @param deadline the deadline of the new deadline task object."},{"lineNumber":129,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"song0180"},"content":"    public void addDeadlineTask(String content, String deadline) {"},{"lineNumber":131,"author":{"gitId":"song0180"},"content":"        Deadline newTask \u003d new Deadline(content, deadline);"},{"lineNumber":132,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":133,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":134,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":135,"author":{"gitId":"song0180"},"content":"                + \"A new deadline task is added:\\n\""},{"lineNumber":136,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":137,"author":{"gitId":"song0180"},"content":"                + \"Task deadline :\" + newTask.getDeadline() + \"\\n\""},{"lineNumber":138,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":139,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":140,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":141,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"song0180"},"content":""},{"lineNumber":143,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"song0180"},"content":"     * Adds a new event task to the current task list."},{"lineNumber":145,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":146,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"song0180"},"content":"     * @param content the content of the new event task object."},{"lineNumber":148,"author":{"gitId":"song0180"},"content":"     * @param period  the period of the new event task object."},{"lineNumber":149,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"song0180"},"content":"    public void addEventTask(String content, String period) {"},{"lineNumber":151,"author":{"gitId":"song0180"},"content":"        Event newTask \u003d new Event(content, period);"},{"lineNumber":152,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":153,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":154,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":155,"author":{"gitId":"song0180"},"content":"                + \"A new event task is added:\\n\""},{"lineNumber":156,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":157,"author":{"gitId":"song0180"},"content":"                + \"Task period   :\" + newTask.getPeriod() + \"\\n\""},{"lineNumber":158,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":159,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":160,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":161,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"song0180"},"content":""},{"lineNumber":163,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"song0180"},"content":"     * Updates the content of a given task object."},{"lineNumber":165,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"song0180"},"content":"     * @param itemIndex  the index of the task object in the array list."},{"lineNumber":167,"author":{"gitId":"song0180"},"content":"     * @param newContent the new content to be updated."},{"lineNumber":168,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"song0180"},"content":"    public void updateTaskContent(int itemIndex, String newContent) {"},{"lineNumber":170,"author":{"gitId":"song0180"},"content":"        Task itemToUpdate \u003d Tasks.get(itemIndex);"},{"lineNumber":171,"author":{"gitId":"song0180"},"content":"        itemToUpdate.setTaskContent(newContent);"},{"lineNumber":172,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"song0180"},"content":""},{"lineNumber":174,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"song0180"},"content":"     * Removes a given task object from the current task list."},{"lineNumber":176,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":178,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"song0180"},"content":"    public void removeTaskFromList(int itemIndex) {"},{"lineNumber":180,"author":{"gitId":"song0180"},"content":"        String itemContent \u003d Tasks.get(itemIndex).getTaskContent();"},{"lineNumber":181,"author":{"gitId":"song0180"},"content":"        Tasks.remove(itemIndex);"},{"lineNumber":182,"author":{"gitId":"song0180"},"content":"        numOfTasks--;"},{"lineNumber":183,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":184,"author":{"gitId":"song0180"},"content":"                + \"A task object is removed: \""},{"lineNumber":185,"author":{"gitId":"song0180"},"content":"                + itemContent + \"\\n\""},{"lineNumber":186,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":187,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":188,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"song0180"},"content":""},{"lineNumber":190,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"song0180"},"content":"     * Prints the task object with content and status."},{"lineNumber":192,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":194,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"song0180"},"content":"    public void printTask(int itemIndex) {"},{"lineNumber":196,"author":{"gitId":"song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":197,"author":{"gitId":"song0180"},"content":"        boolean isItemDone \u003d currentItem.isDone();"},{"lineNumber":198,"author":{"gitId":"song0180"},"content":"        System.out.println(\"Item content: \" + currentItem.getTaskContent());"},{"lineNumber":199,"author":{"gitId":"song0180"},"content":"        System.out.println(\"Item status: \" + (isItemDone ? \"Done\" : \"Undone\"));"},{"lineNumber":200,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"song0180"},"content":""},{"lineNumber":202,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"song0180"},"content":"     * Updates the status of a given task object."},{"lineNumber":204,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":205,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":206,"author":{"gitId":"song0180"},"content":"     * @param isDone    the new status of the task object."},{"lineNumber":207,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"song0180"},"content":"    public void updateTaskStatus(int itemIndex, boolean isDone) {"},{"lineNumber":209,"author":{"gitId":"song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":210,"author":{"gitId":"song0180"},"content":"        currentItem.setDone(isDone);"},{"lineNumber":211,"author":{"gitId":"song0180"},"content":"        printUpdatedTaskStatus(isDone, currentItem);"},{"lineNumber":212,"author":{"gitId":"song0180"},"content":"        printList();"},{"lineNumber":213,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER_LINE_ONLY);"},{"lineNumber":214,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"song0180"},"content":""},{"lineNumber":216,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"song0180"},"content":"     * Prints the updated status of a Task object."},{"lineNumber":218,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":219,"author":{"gitId":"song0180"},"content":"     * @param isDone      The status of the Task object."},{"lineNumber":220,"author":{"gitId":"song0180"},"content":"     * @param currentTask The current Task object whose status is updated."},{"lineNumber":221,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"song0180"},"content":"    private void printUpdatedTaskStatus(boolean isDone, Task currentTask) {"},{"lineNumber":223,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":224,"author":{"gitId":"song0180"},"content":"                + \"The task object: \\n\""},{"lineNumber":225,"author":{"gitId":"song0180"},"content":"                + \" | \" + currentTask.getTaskContent() + \" |\\n\""},{"lineNumber":226,"author":{"gitId":"song0180"},"content":"                + \"is marked as \""},{"lineNumber":227,"author":{"gitId":"song0180"},"content":"                + (isDone ? \"done\" : \"undone\") + \".\\n\""},{"lineNumber":228,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":229,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"song0180"},"content":""},{"lineNumber":231,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"song0180"},"content":"     * Checks if the index of a given task is in the range of the list;"},{"lineNumber":233,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"song0180"},"content":"     * @param index the index of the task object."},{"lineNumber":235,"author":{"gitId":"song0180"},"content":"     * @return true if in range, false otherwise."},{"lineNumber":236,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"song0180"},"content":"    public boolean isIndexInRange(int index) {"},{"lineNumber":238,"author":{"gitId":"song0180"},"content":"        return !(index \u003c 0 || index \u003e\u003d numOfTasks);"},{"lineNumber":239,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":240}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":5}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) throws Exception {"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"        String[] parseResult \u003d new String[1];"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"        String contentStr \u003d userInput.substring(5).trim();"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"        if (contentStr.length() \u003c 1) {"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"            throw new Exception(\"Invalid todo command! Check \u0027help\u0027.\\n\");"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"        parseResult[0] \u003d contentStr;"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"        return parseResult;"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":""},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"     * Initializes a To-do type of Task object."},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"     * @param content The content of the To-do Task."},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"    public Todo(String content) {"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.TODO;"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":""},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"     * Gets the time limit of the task, if applicable."},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"     * @return \"\"."},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"        return \"\";"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"list"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"deadline do homework /by no idea :)"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"list"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"bye"}],"authorContributionMap":{"song0180":7}}]
