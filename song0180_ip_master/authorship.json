[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":""},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"song0180"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":17,"song0180":9}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"    private String deadline;"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":""},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    public Deadline(String content, String deadline) {"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.DEADLINE;"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":""},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"    public static boolean isCommandValid(String userInput) {"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"        return userInput.contains(\"/by\");"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":""},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) {"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"        int byIndex \u003d 0;"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"            if (words[i].equals(\"/by\")) {"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"                byIndex \u003d i;"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":""},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"        return parseContentAndTime(words, byIndex);"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":""},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"    public static String[] parseContentAndTime(String[] words, int byIndex) {"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"        String content \u003d getTaskContentString(words, byIndex);"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"        String deadline \u003d getTaskDeadlineString(words, byIndex);"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"        String[] parseResult \u003d new String[2];"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"        parseResult[0] \u003d content;"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"        parseResult[1] \u003d deadline;"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"        return parseResult;"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":""},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"    private static String getTaskDeadlineString(String[] words, int byIndex) {"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"        StringBuilder deadlineBuilder \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"        for (int k \u003d (byIndex + 1); k \u003c words.length; k++) {"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"            String deadlineWord \u003d words[k] + \" \";"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"            deadlineBuilder.append(deadlineWord);"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"        return deadlineBuilder.toString().trim();"},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":""},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"    private static String getTaskContentString(String[] words, int byIndex) {"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"        StringBuilder contentBuilder \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"        for (int j \u003d 1; j \u003c byIndex; j++) {"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"            String contentWord \u003d words[j] + \" \";"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"            contentBuilder.append(contentWord);"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"        return contentBuilder.toString().trim();"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":""},{"lineNumber":54,"author":{"gitId":"song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"    public String getDeadline() {"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"        return deadline;"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        return \"(by: \" + deadline + \")\";"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"    public void setDeadline(String deadline) {"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":66}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"     * A divider (horizontal line)."},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    public static final String DIVIDER_LINE_ONLY \u003d \"__________________________________________\";"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"     * A divider (horizontal line) with line break at the end."},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    public static final String DIVIDER \u003d \"__________________________________________\\n\";"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":""},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"     * Prints greetings when the program starts."},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"    public static void printGreetings() {"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"                        + \" Welcome.\\n\""},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"                        + \" I am your assistant Friday. ✧ʕ̢̣̣̣̣̩̩̩̩·͡˔·ོɁ̡̣̣̣̣̩̩̩̩✧\\n\""},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"                        + \" Just FYI, I am developed by Song Yu.\\n\""},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"                        + \" May I know what I can help you?\\n\""},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":""},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"     * Prints greetings when the program ends."},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"    public static void printExitGreetings() {"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"        System.out.print("},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"                        + \" Thank you for getting in touch.\\n\""},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"                        + \" See you next time.\\n\""},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"                        + \"✧( ु•⌄• )◞ᴴᴬᵛᴱ ᴬ ᴳᴼᴼᴰ ᵀᴵᴹᴱ\\n\""},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":""},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"     * Prints the error message when user\u0027s input does not match any command."},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"    public static void printNotCommand() {"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"                DIVIDER"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"                        + \" Sorry, your command is not recognized\\n\""},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"                        + \" See \u0027help\u0027. \\n\""},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":""},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"     * Prints the help message."},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"    public static void printHelp() {"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"        String helpMessage \u003d \" \u0027help\u0027     : Display tips on using this application\\n\""},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"                + \" \u0027exit\u0027     : Exit the application\\n\""},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"                + \" \u0027bye\u0027      : Exit the application\\n\""},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"                + \" \u0027list\u0027     : List all type of tasks you added to your task list\\n\""},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"                + \" \u0027done\u0027     : Mark a task as done\\n\\t\""},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027done 2\u0027 will mark the second task as done\\n\""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"                + \" \u0027todo\u0027     : Add a new todo task\\n\\t\""},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027todo read book\u0027 will add \\\"read book\\\" to your task list\\n\""},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"                + \" \u0027deadline\u0027 : Add a new deadline task\\n\\t\""},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027deadline read book /by Sunday\u0027 will\""},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"                + \" add \\\"read book\\\" to your task list with deadline \\\"Sunday\\\"\\n\""},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"                + \" \u0027event\u0027 : Add a new event task\\n\\t\""},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"                + \" e.g. \u0027event read book /at Mon 2-4pm\u0027 will\""},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"                + \" add \\\"read book\\\" to your task list with period  \\\"Mon 2-4pm\\\"\\n\";"},{"lineNumber":71,"author":{"gitId":"song0180"},"content":""},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"        System.out.println("},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"                DIVIDER_LINE_ONLY + DIVIDER"},{"lineNumber":74,"author":{"gitId":"song0180"},"content":"                        + helpMessage"},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"                        + DIVIDER_LINE_ONLY + DIVIDER_LINE_ONLY"},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":""},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"song0180"},"content":"     * Gets command from user input."},{"lineNumber":81,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"     * @param userInput user\u0027s input."},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"     * @return command."},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"song0180"},"content":"    private static String getCommand(String userInput) {"},{"lineNumber":86,"author":{"gitId":"song0180"},"content":"        String[] inputWords \u003d userInput.split(\" \");"},{"lineNumber":87,"author":{"gitId":"song0180"},"content":"        return inputWords[0];"},{"lineNumber":88,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"song0180"},"content":""},{"lineNumber":90,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"song0180"},"content":"     * Gets user input and execute corresponding command until the loop is exit."},{"lineNumber":92,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"song0180"},"content":"     * @param sc       Java Scanner to get user input."},{"lineNumber":94,"author":{"gitId":"song0180"},"content":"     * @param taskList The list of Task objects."},{"lineNumber":95,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"song0180"},"content":"    private static void loopOperation(Scanner sc, TaskList taskList) {"},{"lineNumber":97,"author":{"gitId":"song0180"},"content":"        String userInput;"},{"lineNumber":98,"author":{"gitId":"song0180"},"content":"        while (true) {"},{"lineNumber":99,"author":{"gitId":"song0180"},"content":"            userInput \u003d sc.nextLine();"},{"lineNumber":100,"author":{"gitId":"song0180"},"content":"            String userCommand \u003d getCommand(userInput);"},{"lineNumber":101,"author":{"gitId":"song0180"},"content":"            switch (userCommand) {"},{"lineNumber":102,"author":{"gitId":"song0180"},"content":"            case \"help\":"},{"lineNumber":103,"author":{"gitId":"song0180"},"content":"                printHelp();"},{"lineNumber":104,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":105,"author":{"gitId":"song0180"},"content":"            case \"list\":"},{"lineNumber":106,"author":{"gitId":"song0180"},"content":"                taskList.printCurrentList();"},{"lineNumber":107,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":108,"author":{"gitId":"song0180"},"content":"            case \"todo\":"},{"lineNumber":109,"author":{"gitId":"song0180"},"content":"                addTodoTaskToList(taskList, userInput);"},{"lineNumber":110,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":111,"author":{"gitId":"song0180"},"content":"            case \"deadline\":"},{"lineNumber":112,"author":{"gitId":"song0180"},"content":"                addDeadlineTaskToList(taskList, userInput);"},{"lineNumber":113,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":114,"author":{"gitId":"song0180"},"content":"            case \"event\":"},{"lineNumber":115,"author":{"gitId":"song0180"},"content":"                addEventTaskToList(taskList, userInput);"},{"lineNumber":116,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":117,"author":{"gitId":"song0180"},"content":"            case \"done\":"},{"lineNumber":118,"author":{"gitId":"song0180"},"content":"                handleDoneTask(taskList, userInput);"},{"lineNumber":119,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":120,"author":{"gitId":"song0180"},"content":"            case \"exit\":"},{"lineNumber":121,"author":{"gitId":"song0180"},"content":"            case \"bye\":"},{"lineNumber":122,"author":{"gitId":"song0180"},"content":"                printExitGreetings();"},{"lineNumber":123,"author":{"gitId":"song0180"},"content":"                return;"},{"lineNumber":124,"author":{"gitId":"song0180"},"content":"            default:"},{"lineNumber":125,"author":{"gitId":"song0180"},"content":"                printNotCommand();"},{"lineNumber":126,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":127,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"song0180"},"content":""},{"lineNumber":131,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"song0180"},"content":"     * Marks a task with a given integer index as done, if the index is not out of range."},{"lineNumber":133,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":135,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":136,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"song0180"},"content":"    private static void handleDoneTask(TaskList taskList, String userInput) {"},{"lineNumber":138,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"song0180"},"content":"            String taskIndexString \u003d getTaskIndexString(userInput);"},{"lineNumber":140,"author":{"gitId":"song0180"},"content":"            int itemIndex \u003d Integer.parseInt(taskIndexString);"},{"lineNumber":141,"author":{"gitId":"song0180"},"content":"            if (isItemIndexOutOfRange(taskList, itemIndex)) {"},{"lineNumber":142,"author":{"gitId":"song0180"},"content":"                return;"},{"lineNumber":143,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"song0180"},"content":"            setTaskAsDone(taskList, itemIndex);"},{"lineNumber":145,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":146,"author":{"gitId":"song0180"},"content":"            printInvalidIntegerWarning();"},{"lineNumber":147,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"song0180"},"content":""},{"lineNumber":150,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"song0180"},"content":"     * Prints a warning that the input is not a valid integer."},{"lineNumber":152,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"song0180"},"content":"    private static void printInvalidIntegerWarning() {"},{"lineNumber":154,"author":{"gitId":"song0180"},"content":"        System.out.println(DIVIDER"},{"lineNumber":155,"author":{"gitId":"song0180"},"content":"                + \"Invalid input!\\n\""},{"lineNumber":156,"author":{"gitId":"song0180"},"content":"                + \"The item number should be a valid integer!\\n\""},{"lineNumber":157,"author":{"gitId":"song0180"},"content":"                + DIVIDER"},{"lineNumber":158,"author":{"gitId":"song0180"},"content":"                + \"Try again:\""},{"lineNumber":159,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":160,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"song0180"},"content":""},{"lineNumber":162,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"song0180"},"content":"     * Returns the task index in integer."},{"lineNumber":164,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":166,"author":{"gitId":"song0180"},"content":"     * @return an integer task index."},{"lineNumber":167,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"song0180"},"content":"    private static String getTaskIndexString(String userInput) {"},{"lineNumber":169,"author":{"gitId":"song0180"},"content":"        return userInput.split(\" \")[1];"},{"lineNumber":170,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"song0180"},"content":""},{"lineNumber":172,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"song0180"},"content":"     * Sets the status of a Task object as done."},{"lineNumber":174,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":176,"author":{"gitId":"song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":177,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"song0180"},"content":"    private static void setTaskAsDone(TaskList taskList, int itemIndex) {"},{"lineNumber":179,"author":{"gitId":"song0180"},"content":"        taskList.updateTaskStatus(itemIndex - 1, true);"},{"lineNumber":180,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"song0180"},"content":""},{"lineNumber":182,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"song0180"},"content":"     * Returns true if the index of the task is out of range, false if in range."},{"lineNumber":184,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":186,"author":{"gitId":"song0180"},"content":"     * @param itemIndex The index of the task object in the task list."},{"lineNumber":187,"author":{"gitId":"song0180"},"content":"     * @return true if the index of the task is out of range."},{"lineNumber":188,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"song0180"},"content":"    private static boolean isItemIndexOutOfRange(TaskList taskList, int itemIndex) {"},{"lineNumber":190,"author":{"gitId":"song0180"},"content":"        if (!taskList.isIndexInRange(itemIndex - 1)) {"},{"lineNumber":191,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER"},{"lineNumber":192,"author":{"gitId":"song0180"},"content":"                    + \"The task index input is out of range!\\n\""},{"lineNumber":193,"author":{"gitId":"song0180"},"content":"                    + DIVIDER"},{"lineNumber":194,"author":{"gitId":"song0180"},"content":"                    + \"Try again:\""},{"lineNumber":195,"author":{"gitId":"song0180"},"content":"            );"},{"lineNumber":196,"author":{"gitId":"song0180"},"content":"            return true;"},{"lineNumber":197,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"song0180"},"content":"        return false;"},{"lineNumber":199,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"song0180"},"content":""},{"lineNumber":201,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"song0180"},"content":"     * Adds an event type task into the taskList."},{"lineNumber":203,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":205,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":206,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"song0180"},"content":"    private static void addEventTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":208,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":209,"author":{"gitId":"song0180"},"content":"            if (Event.isCommandValid(userInput)) {"},{"lineNumber":210,"author":{"gitId":"song0180"},"content":"                String[] parseResult \u003d Event.parseTaskContent(userInput);"},{"lineNumber":211,"author":{"gitId":"song0180"},"content":"                String taskContent \u003d parseResult[0];"},{"lineNumber":212,"author":{"gitId":"song0180"},"content":"                String taskPeriod \u003d parseResult[1];"},{"lineNumber":213,"author":{"gitId":"song0180"},"content":"                taskList.addEventTask(taskContent, taskPeriod);"},{"lineNumber":214,"author":{"gitId":"song0180"},"content":"            } else {"},{"lineNumber":215,"author":{"gitId":"song0180"},"content":"                throw new Exception(\"Invalid event command. Check \u0027help\u0027.\\n\");"},{"lineNumber":216,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":218,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":219,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"song0180"},"content":""},{"lineNumber":222,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"song0180"},"content":"     * Adds a deadline type task into the taskList."},{"lineNumber":224,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":226,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":227,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"song0180"},"content":"    private static void addDeadlineTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":229,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":230,"author":{"gitId":"song0180"},"content":"            if (Deadline.isCommandValid(userInput)) {"},{"lineNumber":231,"author":{"gitId":"song0180"},"content":"                String[] parseResult \u003d Deadline.parseTaskContent(userInput);"},{"lineNumber":232,"author":{"gitId":"song0180"},"content":"                String taskContent \u003d parseResult[0];"},{"lineNumber":233,"author":{"gitId":"song0180"},"content":"                String taskDeadline \u003d parseResult[1];"},{"lineNumber":234,"author":{"gitId":"song0180"},"content":"                taskList.addDeadlineTask(taskContent, taskDeadline);"},{"lineNumber":235,"author":{"gitId":"song0180"},"content":"            } else {"},{"lineNumber":236,"author":{"gitId":"song0180"},"content":"                throw new Exception(\"Invalid deadline command. Check \u0027help\u0027.\\n\");"},{"lineNumber":237,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":238,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":239,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":240,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"song0180"},"content":""},{"lineNumber":243,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":244,"author":{"gitId":"song0180"},"content":"     * Adds a to-do type task into the taskList."},{"lineNumber":245,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":246,"author":{"gitId":"song0180"},"content":"     * @param taskList  The list that stores Task objects."},{"lineNumber":247,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":248,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"song0180"},"content":"    private static void addTodoTaskToList(TaskList taskList, String userInput) {"},{"lineNumber":250,"author":{"gitId":"song0180"},"content":"        try {"},{"lineNumber":251,"author":{"gitId":"song0180"},"content":"            String[] parseResult \u003d Todo.parseTaskContent(userInput);"},{"lineNumber":252,"author":{"gitId":"song0180"},"content":"            taskList.addTodoTask(parseResult[0]);"},{"lineNumber":253,"author":{"gitId":"song0180"},"content":"        } catch (Exception e) {"},{"lineNumber":254,"author":{"gitId":"song0180"},"content":"            System.out.println(DIVIDER + e.getMessage() + DIVIDER_LINE_ONLY);"},{"lineNumber":255,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"song0180"},"content":""},{"lineNumber":258,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":259,"author":{"gitId":"song0180"},"content":"     * The main method that drives the application."},{"lineNumber":260,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":261,"author":{"gitId":"song0180"},"content":"     * @param args Commandline arguments."},{"lineNumber":262,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":264,"author":{"gitId":"song0180"},"content":"        printGreetings();"},{"lineNumber":265,"author":{"gitId":"song0180"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":266,"author":{"gitId":"song0180"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":267,"author":{"gitId":"song0180"},"content":"        loopOperation(sc, taskList);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":5,"song0180":264}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"    private String startTime, endTime, period;"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":""},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    public Event(String content, String startTime, String endTime) {"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.EVENT;"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":""},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"    public Event(String listContent, String period) {"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"        super(listContent);"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.EVENT;"},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"        this.period \u003d period;"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":""},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"    public static boolean isCommandValid(String userInput) {"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"        return userInput.contains(\"/at\");"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":""},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) {"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"        int atIndex \u003d 0;"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"            if (words[i].equals(\"/at\")) {"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"                atIndex \u003d i;"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"                break;"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":""},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"        return Deadline.parseContentAndTime(words, atIndex);"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":""},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"    private boolean checkValidPeriod(String startTime, String endTime) {"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"        // WIP: return startTime \u003c endTime;"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"        return true;"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":""},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"    public String getStartTime() {"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"        return startTime;"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    public void setStartTime(String startTime) {"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":""},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"    public String getEndTime() {"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"        return endTime;"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":""},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    public void setEndTime(String endTime) {"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":""},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"    public String getPeriod() {"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"        return period;"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":""},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"        return \"(at: \" + period + \")\";"},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"    public void setPeriod(String period) {"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"        this.period \u003d period;"},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":66}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"     * The status of the task."},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"     * The content of the task."},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"    protected String taskContent;"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"     * The type of the task."},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"    protected TaskType taskType;"},{"lineNumber":14,"author":{"gitId":"song0180"},"content":""},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"     * Initializes the task object with given parameter as content."},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     * @param taskContent The content of the task."},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"    public Task(String taskContent) {"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"        this.taskContent \u003d taskContent;"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"song0180"},"content":""},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"     * Returns the status of the task."},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"     * @return the status of the task."},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"    public boolean isDone() {"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"        return isDone;"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"song0180"},"content":""},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"     * Sets a new status of the task."},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"     * @param done the new status of the task."},{"lineNumber":38,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"    public void setDone(boolean done) {"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"        isDone \u003d done;"},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":""},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"     * Returns the content of the task."},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"     * @return the content of the task."},{"lineNumber":47,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"    public String getTaskContent() {"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"        return taskContent;"},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":""},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"     * Sets a new content of the task."},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"     * @param taskContent the new content of the task."},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"    public void setTaskContent(String taskContent) {"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"        this.taskContent \u003d taskContent;"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":""},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"     * Returns the type of the task."},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"     * @return the type of the task."},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"    public TaskType getTaskType() {"},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"        return taskType;"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":""},{"lineNumber":70,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"song0180"},"content":"     * Sets a new type of the task."},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"     * @param taskType the new type of the task."},{"lineNumber":74,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"    public void setTaskType(TaskType taskType) {"},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"song0180"},"content":""},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"song0180"},"content":"     * Gets a String of time limit of a Task object, if applicable."},{"lineNumber":81,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"     * @return The time limit of a Task in String."},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"    public abstract String getTimeLimitString();"},{"lineNumber":85,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":85}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":""},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"     * Total number of task object in current list."},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"    private static int numOfTasks \u003d 0;"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"     * The collection of task object in current list."},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"    private ArrayList\u003cTask\u003e Tasks;"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":""},{"lineNumber":13,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"     * Initializes a to-do-list object with an empty array list that stores task item."},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"        this.Tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":""},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"     * Returns the total number of task object."},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":"     * @return the total number of task object."},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"    public static int getNumOfTasks() {"},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"        return numOfTasks;"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"song0180"},"content":""},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"     * Returns a string message about the number of task objects in the list."},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"     * @return a string of the number of task objects in the list."},{"lineNumber":33,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"song0180"},"content":"    private String getNumOfTasksString() {"},{"lineNumber":35,"author":{"gitId":"song0180"},"content":"        int numOfTasks \u003d getNumOfTasks();"},{"lineNumber":36,"author":{"gitId":"song0180"},"content":"        return \"Now you have \" + numOfTasks + (numOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":37,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"song0180"},"content":""},{"lineNumber":39,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"song0180"},"content":"     * Prints the current list with dividers."},{"lineNumber":41,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"song0180"},"content":"    public void printCurrentList() {"},{"lineNumber":43,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER);"},{"lineNumber":44,"author":{"gitId":"song0180"},"content":"        printList();"},{"lineNumber":45,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER_LINE_ONLY);"},{"lineNumber":46,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"song0180"},"content":""},{"lineNumber":48,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"song0180"},"content":"     * Prints the current list (without dividers)."},{"lineNumber":50,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"song0180"},"content":"    private void printList() {"},{"lineNumber":52,"author":{"gitId":"song0180"},"content":"        int listSize \u003d Tasks.size();"},{"lineNumber":53,"author":{"gitId":"song0180"},"content":"        System.out.println(\"This is your current task list:\");"},{"lineNumber":54,"author":{"gitId":"song0180"},"content":"        if (listSize \u003d\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"song0180"},"content":"            printListEmptyWarning();"},{"lineNumber":56,"author":{"gitId":"song0180"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"song0180"},"content":"            for (int i \u003d 0; i \u003c listSize; i++) {"},{"lineNumber":58,"author":{"gitId":"song0180"},"content":"                Task currentItem \u003d Tasks.get(i);"},{"lineNumber":59,"author":{"gitId":"song0180"},"content":"                String timeString \u003d currentItem.getTimeLimitString();"},{"lineNumber":60,"author":{"gitId":"song0180"},"content":"                System.out.println((i + 1) + \". \""},{"lineNumber":61,"author":{"gitId":"song0180"},"content":"                        + \"[\" + convertTaskType(currentItem.getTaskType()) + \"] \""},{"lineNumber":62,"author":{"gitId":"song0180"},"content":"                        + \"[\" + (currentItem.isDone() ? \"☑️\" : \"✖️\") + \"] \""},{"lineNumber":63,"author":{"gitId":"song0180"},"content":"                        + currentItem.getTaskContent()"},{"lineNumber":64,"author":{"gitId":"song0180"},"content":"                        + (currentItem.getTaskType() \u003d\u003d TaskType.TODO ? \"\" : \" \")"},{"lineNumber":65,"author":{"gitId":"song0180"},"content":"                        + timeString"},{"lineNumber":66,"author":{"gitId":"song0180"},"content":"                );"},{"lineNumber":67,"author":{"gitId":"song0180"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"song0180"},"content":""},{"lineNumber":71,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"song0180"},"content":"     * Prints warning message if the list is empty."},{"lineNumber":73,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"song0180"},"content":"    private void printListEmptyWarning() {"},{"lineNumber":75,"author":{"gitId":"song0180"},"content":"        System.out.println(\" - The list is empty!\");"},{"lineNumber":76,"author":{"gitId":"song0180"},"content":"        System.out.println(\" - You can try add task object by input what\\n\""},{"lineNumber":77,"author":{"gitId":"song0180"},"content":"                + \"   you want to do.\\n\""},{"lineNumber":78,"author":{"gitId":"song0180"},"content":"                + \" - check \u0027help\u0027 for more.\""},{"lineNumber":79,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":80,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"song0180"},"content":""},{"lineNumber":82,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"song0180"},"content":"     * Converts the enum type to string."},{"lineNumber":84,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"song0180"},"content":"     * @param type the type of the task."},{"lineNumber":86,"author":{"gitId":"song0180"},"content":"     * @return the type of the task in string."},{"lineNumber":87,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"song0180"},"content":"    private String convertTaskType(TaskType type) {"},{"lineNumber":89,"author":{"gitId":"song0180"},"content":"        switch (type) {"},{"lineNumber":90,"author":{"gitId":"song0180"},"content":"        case TODO:"},{"lineNumber":91,"author":{"gitId":"song0180"},"content":"            return \"T\";"},{"lineNumber":92,"author":{"gitId":"song0180"},"content":"        case EVENT:"},{"lineNumber":93,"author":{"gitId":"song0180"},"content":"            return \"E\";"},{"lineNumber":94,"author":{"gitId":"song0180"},"content":"        case DEADLINE:"},{"lineNumber":95,"author":{"gitId":"song0180"},"content":"            return \"D\";"},{"lineNumber":96,"author":{"gitId":"song0180"},"content":"        default:"},{"lineNumber":97,"author":{"gitId":"song0180"},"content":"            return \"Unknown task type\";"},{"lineNumber":98,"author":{"gitId":"song0180"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"song0180"},"content":""},{"lineNumber":101,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"song0180"},"content":"     * Adds a new to-do task to the current task list."},{"lineNumber":103,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":104,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"song0180"},"content":"     * @param content the content of the new task object."},{"lineNumber":106,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"song0180"},"content":"    public void addTodoTask(String content) {"},{"lineNumber":108,"author":{"gitId":"song0180"},"content":"        Todo newTask \u003d new Todo(content);"},{"lineNumber":109,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":110,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":111,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":112,"author":{"gitId":"song0180"},"content":"                + \"A new to-do task is added:\\n\""},{"lineNumber":113,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":114,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":115,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":116,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":117,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"song0180"},"content":""},{"lineNumber":119,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"song0180"},"content":"     * Adds a new deadline task to the current task list."},{"lineNumber":121,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":122,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"song0180"},"content":"     * @param content  the content of the new deadline task object."},{"lineNumber":124,"author":{"gitId":"song0180"},"content":"     * @param deadline the deadline of the new deadline task object."},{"lineNumber":125,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"song0180"},"content":"    public void addDeadlineTask(String content, String deadline) {"},{"lineNumber":127,"author":{"gitId":"song0180"},"content":"        Deadline newTask \u003d new Deadline(content, deadline);"},{"lineNumber":128,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":129,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":130,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":131,"author":{"gitId":"song0180"},"content":"                + \"A new deadline task is added:\\n\""},{"lineNumber":132,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":133,"author":{"gitId":"song0180"},"content":"                + \"Task deadline :\" + newTask.getDeadline() + \"\\n\""},{"lineNumber":134,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":135,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":136,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":137,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"song0180"},"content":""},{"lineNumber":139,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"song0180"},"content":"     * Adds a new event task to the current task list."},{"lineNumber":141,"author":{"gitId":"song0180"},"content":"     * The content of the new list will be printed."},{"lineNumber":142,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"song0180"},"content":"     * @param content the content of the new event task object."},{"lineNumber":144,"author":{"gitId":"song0180"},"content":"     * @param period  the period of the new event task object."},{"lineNumber":145,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"song0180"},"content":"    public void addEventTask(String content, String period) {"},{"lineNumber":147,"author":{"gitId":"song0180"},"content":"        Event newTask \u003d new Event(content, period);"},{"lineNumber":148,"author":{"gitId":"song0180"},"content":"        Tasks.add(newTask);"},{"lineNumber":149,"author":{"gitId":"song0180"},"content":"        numOfTasks++;"},{"lineNumber":150,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":151,"author":{"gitId":"song0180"},"content":"                + \"A new event task is added:\\n\""},{"lineNumber":152,"author":{"gitId":"song0180"},"content":"                + \"Task content  :\" + newTask.getTaskContent() + \"\\n\""},{"lineNumber":153,"author":{"gitId":"song0180"},"content":"                + \"Task period   :\" + newTask.getPeriod() + \"\\n\""},{"lineNumber":154,"author":{"gitId":"song0180"},"content":"                + getNumOfTasksString() + \"\\n\""},{"lineNumber":155,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":156,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":157,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"song0180"},"content":""},{"lineNumber":159,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"song0180"},"content":"     * Updates the content of a given task object."},{"lineNumber":161,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"song0180"},"content":"     * @param itemIndex  the index of the task object in the array list."},{"lineNumber":163,"author":{"gitId":"song0180"},"content":"     * @param newContent the new content to be updated."},{"lineNumber":164,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"song0180"},"content":"    public void updateTaskContent(int itemIndex, String newContent) {"},{"lineNumber":166,"author":{"gitId":"song0180"},"content":"        Task itemToUpdate \u003d Tasks.get(itemIndex);"},{"lineNumber":167,"author":{"gitId":"song0180"},"content":"        itemToUpdate.setTaskContent(newContent);"},{"lineNumber":168,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"song0180"},"content":""},{"lineNumber":170,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"song0180"},"content":"     * Removes a given task object from the current task list."},{"lineNumber":172,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":174,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"song0180"},"content":"    public void removeTaskFromList(int itemIndex) {"},{"lineNumber":176,"author":{"gitId":"song0180"},"content":"        String itemContent \u003d Tasks.get(itemIndex).getTaskContent();"},{"lineNumber":177,"author":{"gitId":"song0180"},"content":"        Tasks.remove(itemIndex);"},{"lineNumber":178,"author":{"gitId":"song0180"},"content":"        numOfTasks--;"},{"lineNumber":179,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":180,"author":{"gitId":"song0180"},"content":"                + \"A task object is removed: \""},{"lineNumber":181,"author":{"gitId":"song0180"},"content":"                + itemContent + \"\\n\""},{"lineNumber":182,"author":{"gitId":"song0180"},"content":"                + Duke.DIVIDER_LINE_ONLY"},{"lineNumber":183,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":184,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"song0180"},"content":""},{"lineNumber":186,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"song0180"},"content":"     * Prints the task object with content and status."},{"lineNumber":188,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":190,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"song0180"},"content":"    public void printTask(int itemIndex) {"},{"lineNumber":192,"author":{"gitId":"song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":193,"author":{"gitId":"song0180"},"content":"        boolean isItemDone \u003d currentItem.isDone();"},{"lineNumber":194,"author":{"gitId":"song0180"},"content":"        System.out.println(\"Item content: \" + currentItem.getTaskContent());"},{"lineNumber":195,"author":{"gitId":"song0180"},"content":"        System.out.println(\"Item status: \" + (isItemDone ? \"Done\" : \"Undone\"));"},{"lineNumber":196,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"song0180"},"content":""},{"lineNumber":198,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"song0180"},"content":"     * Updates the status of a given task object."},{"lineNumber":200,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":201,"author":{"gitId":"song0180"},"content":"     * @param itemIndex the index of the task object in the array list."},{"lineNumber":202,"author":{"gitId":"song0180"},"content":"     * @param isDone    the new status of the task object."},{"lineNumber":203,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"song0180"},"content":"    public void updateTaskStatus(int itemIndex, boolean isDone) {"},{"lineNumber":205,"author":{"gitId":"song0180"},"content":"        Task currentItem \u003d Tasks.get(itemIndex);"},{"lineNumber":206,"author":{"gitId":"song0180"},"content":"        currentItem.setDone(isDone);"},{"lineNumber":207,"author":{"gitId":"song0180"},"content":"        printUpdatedTaskStatus(isDone, currentItem);"},{"lineNumber":208,"author":{"gitId":"song0180"},"content":"        printList();"},{"lineNumber":209,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER_LINE_ONLY);"},{"lineNumber":210,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"song0180"},"content":""},{"lineNumber":212,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"song0180"},"content":"     * Prints the updated status of a Task object."},{"lineNumber":214,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"song0180"},"content":"     * @param isDone      The status of the Task object."},{"lineNumber":216,"author":{"gitId":"song0180"},"content":"     * @param currentTask The current Task object whose status is updated."},{"lineNumber":217,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"song0180"},"content":"    private void printUpdatedTaskStatus(boolean isDone, Task currentTask) {"},{"lineNumber":219,"author":{"gitId":"song0180"},"content":"        System.out.println(Duke.DIVIDER"},{"lineNumber":220,"author":{"gitId":"song0180"},"content":"                + \"The task object: \\n\""},{"lineNumber":221,"author":{"gitId":"song0180"},"content":"                + \" | \" + currentTask.getTaskContent() + \" |\\n\""},{"lineNumber":222,"author":{"gitId":"song0180"},"content":"                + \"is marked as \""},{"lineNumber":223,"author":{"gitId":"song0180"},"content":"                + (isDone ? \"done\" : \"undone\") + \".\\n\""},{"lineNumber":224,"author":{"gitId":"song0180"},"content":"        );"},{"lineNumber":225,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"song0180"},"content":""},{"lineNumber":227,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"song0180"},"content":"     * Checks if the index of a given task is in the range of the list;"},{"lineNumber":229,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"song0180"},"content":"     * @param index the index of the task object."},{"lineNumber":231,"author":{"gitId":"song0180"},"content":"     * @return true if in range, false otherwise."},{"lineNumber":232,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"song0180"},"content":"    public boolean isIndexInRange(int index) {"},{"lineNumber":234,"author":{"gitId":"song0180"},"content":"        return !(index \u003c 0 || index \u003e\u003d numOfTasks);"},{"lineNumber":235,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":236}},{"path":"src/main/java/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"public enum TaskType {"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":3}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"     * Parses the content of a Task object from user input and return it in an array."},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"     * @param userInput User\u0027s keyboard input in String."},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"     * @return An array that stores the content of the to-do Task."},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"song0180"},"content":"    public static String[] parseTaskContent(String userInput) {"},{"lineNumber":9,"author":{"gitId":"song0180"},"content":"        String[] parseResult \u003d new String[1];"},{"lineNumber":10,"author":{"gitId":"song0180"},"content":"        parseResult[0] \u003d userInput.substring(5).trim();"},{"lineNumber":11,"author":{"gitId":"song0180"},"content":"        return parseResult;"},{"lineNumber":12,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"song0180"},"content":""},{"lineNumber":14,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"song0180"},"content":"     * Initializes a To-do type of Task object."},{"lineNumber":16,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"song0180"},"content":"     * @param content The content of the To-do Task."},{"lineNumber":18,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"song0180"},"content":"    public Todo(String content) {"},{"lineNumber":20,"author":{"gitId":"song0180"},"content":"        super(content);"},{"lineNumber":21,"author":{"gitId":"song0180"},"content":"        this.taskType \u003d TaskType.TODO;"},{"lineNumber":22,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"song0180"},"content":""},{"lineNumber":24,"author":{"gitId":"song0180"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"song0180"},"content":"     * Gets the time limit of the task, if applicable."},{"lineNumber":26,"author":{"gitId":"song0180"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"song0180"},"content":"     * @return \"\"."},{"lineNumber":28,"author":{"gitId":"song0180"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"song0180"},"content":"    public String getTimeLimitString() {"},{"lineNumber":30,"author":{"gitId":"song0180"},"content":"        return \"\";"},{"lineNumber":31,"author":{"gitId":"song0180"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"song0180"},"content":"}"}],"authorContributionMap":{"song0180":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"song0180"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"song0180"},"content":"list"},{"lineNumber":3,"author":{"gitId":"song0180"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"song0180"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"song0180"},"content":"deadline do homework /by no idea :)"},{"lineNumber":6,"author":{"gitId":"song0180"},"content":"list"},{"lineNumber":7,"author":{"gitId":"song0180"},"content":"bye"}],"authorContributionMap":{"song0180":7}}]
