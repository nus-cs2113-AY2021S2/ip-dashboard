[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"# Duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"1. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"Refer [here](https://limwenfeng.github.io/ip/) "},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"   for a detailed user guide."}],"authorContributionMap":{"limwenfeng":4,"-":24}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"Duke is a desktop app for managing your todos, events and deadlines, optimised for use via a Command Line Interface(CLI)."},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"* [Features](#features)"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"    * [Adding todos, deadlines and events](#1-adding-todos-deadlines-and-events)"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"        * [Adding a todo](#adding-a-todo-todo)"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"        * [Adding a deadline](#adding-a-deadline-deadline)"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"        * [Adding an event](#adding-an-event-event)"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"    * [Deleting a task](#2-deleting-todos-deadlines-and-events-delete)"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    * [Listing all tasks](#3-listing-all-tasks-list)"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    * [Marking task as done](#4-marking-task-as-done-done)"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    * [Seaching for specified keyword](#5-searching-for-specified-keyword-find)"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"    * [Exiting the program](#6-exiting-the-program-bye)"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"* [FAQ](#faq)"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"### 1. Adding todos, deadlines and events"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"Adding tasks."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"### Usage"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"### Adding a todo: `todo`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"Adds a todo into the task list"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"Format: `todo [task name]`"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"`todo run 2.4 km`"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"Expected outcome:"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"  [T][ ] run 2.4 km"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"Now you have 1 tasks in the list."},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"### Adding a deadline: `deadline`"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"Adds a task with a deadline into the task list"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"Format: `deadline [task name] /by [date/time]`"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"`deadline run 2.4 km /by Friday`"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"  [D][ ] run 2.4 km  (by: Friday)"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"Now you have 2 tasks in the list."},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"### Adding an event: `event`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"Adds an event into the task list"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"Format: `event [event name] /at [date/time]`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"`event run 2.4 km /at Monday evening`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"  [E][ ] run 2.4 km  (at: Monday Evening)"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"Now you have 3 tasks in the list."},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"### 2. Deleting todos, deadlines and events: `delete`"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"Deletes a task at the given index"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"### Usage"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"Format: `delete [index]`"},{"lineNumber":91,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":93,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"`delete 1`"},{"lineNumber":95,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":96,"author":{"gitId":"limwenfeng"},"content":"Expected outcome:"},{"lineNumber":97,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":98,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":99,"author":{"gitId":"limwenfeng"},"content":"Noted. I\u0027ve removed this task"},{"lineNumber":100,"author":{"gitId":"limwenfeng"},"content":"\t[T][ ] run 2.4 km"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"Now you have 2 tasks in the list."},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":104,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":105,"author":{"gitId":"limwenfeng"},"content":"### 3. Listing all tasks: `list`"},{"lineNumber":106,"author":{"gitId":"limwenfeng"},"content":"For a quick overview on all added tasks, printed in chronological order."},{"lineNumber":107,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":108,"author":{"gitId":"limwenfeng"},"content":"### Usage"},{"lineNumber":109,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":110,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":111,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":112,"author":{"gitId":"limwenfeng"},"content":"`list`"},{"lineNumber":113,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":114,"author":{"gitId":"limwenfeng"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":116,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":117,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":118,"author":{"gitId":"limwenfeng"},"content":"1. [D][ ] run 2.4 km  (by: Friday)"},{"lineNumber":119,"author":{"gitId":"limwenfeng"},"content":"2. [E][ ] run 2.4 km  (at: Monday Evening)"},{"lineNumber":120,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":121,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":122,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":123,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":124,"author":{"gitId":"limwenfeng"},"content":"### 4. Marking task as done: `done`"},{"lineNumber":125,"author":{"gitId":"limwenfeng"},"content":"To mar a task as completed"},{"lineNumber":126,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":127,"author":{"gitId":"limwenfeng"},"content":"### Usage"},{"lineNumber":128,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":129,"author":{"gitId":"limwenfeng"},"content":"Format: `done [index]`"},{"lineNumber":130,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":131,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":132,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":133,"author":{"gitId":"limwenfeng"},"content":"`done 1`"},{"lineNumber":134,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":135,"author":{"gitId":"limwenfeng"},"content":"Expected outcome:"},{"lineNumber":136,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":137,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":138,"author":{"gitId":"limwenfeng"},"content":"Nice! Following task is now marked as done:"},{"lineNumber":139,"author":{"gitId":"limwenfeng"},"content":"[X] run 2.4 km  (by: Friday)"},{"lineNumber":140,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":141,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":142,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":143,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":144,"author":{"gitId":"limwenfeng"},"content":"### 5. Searching for specified keyword: `find`"},{"lineNumber":145,"author":{"gitId":"limwenfeng"},"content":"Return all tasks with specified keyword"},{"lineNumber":146,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":147,"author":{"gitId":"limwenfeng"},"content":"### Usage"},{"lineNumber":148,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":149,"author":{"gitId":"limwenfeng"},"content":"Format: `find [keyword]`"},{"lineNumber":150,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":151,"author":{"gitId":"limwenfeng"},"content":"Example of usage:"},{"lineNumber":152,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":153,"author":{"gitId":"limwenfeng"},"content":"`find run`"},{"lineNumber":154,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":155,"author":{"gitId":"limwenfeng"},"content":"Expected outcome:"},{"lineNumber":156,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":157,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":158,"author":{"gitId":"limwenfeng"},"content":"Here are the matching tasks in your list:"},{"lineNumber":159,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":160,"author":{"gitId":"limwenfeng"},"content":"1. [D][X] run 2.4 km  (by: Friday)"},{"lineNumber":161,"author":{"gitId":"limwenfeng"},"content":"2. [E][ ] run 2.4 km  (at: Monday Evening)"},{"lineNumber":162,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":163,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":164,"author":{"gitId":"limwenfeng"},"content":"or "},{"lineNumber":165,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":166,"author":{"gitId":"limwenfeng"},"content":"`find sleep`"},{"lineNumber":167,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":168,"author":{"gitId":"limwenfeng"},"content":"Expected outcome: (If there is no task with the specified keyword.)"},{"lineNumber":169,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":170,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":171,"author":{"gitId":"limwenfeng"},"content":"Here are the matching tasks in your list:"},{"lineNumber":172,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":173,"author":{"gitId":"limwenfeng"},"content":"No results."},{"lineNumber":174,"author":{"gitId":"limwenfeng"},"content":"-------------------------------------------"},{"lineNumber":175,"author":{"gitId":"limwenfeng"},"content":"```"},{"lineNumber":176,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":177,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":178,"author":{"gitId":"limwenfeng"},"content":"### 6. Exiting the program: `bye`"},{"lineNumber":179,"author":{"gitId":"limwenfeng"},"content":"Ending the program"},{"lineNumber":180,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":181,"author":{"gitId":"limwenfeng"},"content":"Format: `bye`"},{"lineNumber":182,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":183,"author":{"gitId":"limwenfeng"},"content":"## FAQ"},{"lineNumber":184,"author":{"gitId":"limwenfeng"},"content":"**Q:** How is my data stored?"},{"lineNumber":185,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":186,"author":{"gitId":"limwenfeng"},"content":"**A:** Data or user\u0027s list of tasks are stored in a text file named `Duke.txt`. When the programs reboot, it will automatically load the data from this text file and save the latest state of textfile when the program exits. "}],"authorContributionMap":{"limwenfeng":166,"-":20}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Parser.DukeParser;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import Duke.Parser.TodoException;"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import Duke.Storage.DukeStorage;"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import Duke.Task.Task;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"import Duke.TaskManager.TaskManager;"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import Duke.UI.DukeUI;"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"    private static TaskManager taskManager \u003d new TaskManager();"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"        DukeStorage.createFileIfThereIsNone();"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"        taskManager \u003d DukeStorage.loadData();"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printWelcomeMessage();"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"        while(true) {"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"            String[] listOfUserInputs \u003d DukeUI.getUserInput();"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"            String userCommand \u003d listOfUserInputs[0];"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"            String inputDetails \u003d listOfUserInputs[1];"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"            if (userCommand.equalsIgnoreCase(\"bye\")){"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"                DukeStorage.endDuke(taskManager);"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"                break;"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"            if (userCommand.equalsIgnoreCase(\"list\")) TaskManager.listOutTasks();"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"            else if (userCommand.equalsIgnoreCase(\"done\" )) {"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"                TaskManager.markTaskAsDone(inputDetails);"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"            } else if (userCommand.equalsIgnoreCase(\"delete\" )) {"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"                TaskManager.deleteTask(inputDetails);"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"            } else if (userCommand.equalsIgnoreCase(\"find\")) {"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"                TaskManager.findTask(inputDetails);"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"            } else  {"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"                if (!DukeParser.isValidCommand(userCommand)) {"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"                    continue;"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"                }"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"                //process Todo, event or deadline"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"                processCommandWithException(userCommand, inputDetails);"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.printLine();"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"    private static void processCommandWithException(String userCommand, String inputDetails) {"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"            Task newTask \u003d DukeParser.processUserRequest(userCommand, inputDetails);"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"            taskManager.addTask(newTask);"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.notifyUserNewTask(newTask, taskManager);"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"        } catch (TodoException e) {"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.informErrorToUser(e);"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"limwenfeng":51,"-":2}},{"path":"src/main/java/Duke/Parser/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.Parser;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Task.Task;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import Duke.UI.DukeUI;"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"public class DukeParser {"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"     * Returns a list of event type and event description."},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"     * If there is no event description, \"filler\" is used temporarily."},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"     * @param userInput userInput from Scanner"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"     * @return listOfInputs"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"    public static String[] splitInputIntoString(String userInput) {"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"        userInput \u003d userInput.trim();"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"        String[] listOfInputs \u003d userInput.split(\" \", 2);"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"        if (listOfInputs.length \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"            listOfInputs \u003d new String[]{userInput, \"filler\"};"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"        return listOfInputs;"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"     * Takes in userCommand and inputDetails parsed from stored text file and return a Task object."},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"     * @param userCommand Type of event"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"     * @param inputDetails Event description"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"     * @return Task Object"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"    public static Task processSavedData(String userCommand, String inputDetails) {"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"        return new Task(inputDetails, userCommand);"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"     * Takes in userCommand and inputDetails from DukeUI and returns a task object."},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"     * @param userCommand Type of event"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"     * @param inputDetails Event Description"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"     * @return Task Object"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"     * @throws TodoException if there is no task description"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"    public static Task processUserRequest(String userCommand, String inputDetails) throws TodoException {"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"        if (inputDetails.equalsIgnoreCase(\"filler\") \u0026 userCommand.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"            throw new TodoException();"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"        if (inputDetails.equalsIgnoreCase(\"filler\") \u0026 userCommand.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"            throw new TodoException();"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"        if (inputDetails.equalsIgnoreCase(\"filler\") \u0026 userCommand.equalsIgnoreCase(\"event\")) {"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"            throw new TodoException();"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"        return new Task(inputDetails, userCommand);"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"    public static boolean isValidCommand(String userCommand) {"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"        boolean isValid \u003d true;"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"            isValidInput(userCommand);"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.printLine();"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.print(e.sendErrorMessage());"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.printLine();"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"            isValid \u003d false;"},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"        return isValid;"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"     * Check whether user has input any command not implemented for Duke."},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"     * @param userCommand"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"     * @throws InvalidCommandException If the command is invalid"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"    private static void isValidInput(String userCommand) throws InvalidCommandException {"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"        var isValid \u003d userCommand.equalsIgnoreCase(\"todo\") | userCommand.equalsIgnoreCase(\"deadline\") | userCommand.equalsIgnoreCase(\"event\");"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"        if (!isValid) {"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"            throw new InvalidCommandException();"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":83}},{"path":"src/main/java/Duke/Parser/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.Parser;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"    private String errorMessage;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    public InvalidCommandException() {"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"        this.errorMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    public String sendErrorMessage() {"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"        return this.errorMessage;"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":15}},{"path":"src/main/java/Duke/Parser/TodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.Parser;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"public class TodoException extends Exception {"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"    private final String errorMessage;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    public TodoException() {"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"        this.errorMessage \u003d \"☹ OOPS!!! The description of the task cannot be empty.\";"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    public String sendErrorMessage() {"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"        return this.errorMessage;"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"}"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":""}],"authorContributionMap":{"limwenfeng":18}},{"path":"src/main/java/Duke/Storage/DukeStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.Storage;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Parser.DukeParser;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import Duke.Task.Task;"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import Duke.TaskManager.TaskManager;"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import Duke.UI.DukeUI;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"public class DukeStorage {"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"    public static final String FILE_PATH_TO_SAVE_TASKS \u003d \"duke.txt\";"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"     * Perform a check on whether a file with name duke exist. If false, call createNewFile"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"    public static void createFileIfThereIsNone() {"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"        File toCheck \u003d new File(FILE_PATH_TO_SAVE_TASKS);"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"        if (!toCheck.exists()) {"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"            createNewFile(toCheck);"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"    private static void createNewFile(File fForCheck) {"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"            fForCheck.createNewFile();"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"     * Clear the file after the tasks from the file has been loaded into tasksList in Duke."},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"    private static void emptyFileAfterInitializing() {"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"        FileWriter fw \u003d null;"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"        fw \u003d createFileWriterObject(null);"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"        writeEmptyStringToFile(fw);"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"    private static FileWriter createFileWriterObject(FileWriter fw) {"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"            fw \u003d new FileWriter(FILE_PATH_TO_SAVE_TASKS);"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"            e.printStackTrace();"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"        return fw;"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"    private static void writeEmptyStringToFile(FileWriter fw) {"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"            fw.write(\"\");"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"            e.printStackTrace();"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"     * Load data from Duke.txt into TaskManager and returns the TaskManager"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"     * @return TaskManager object loaded with Tasks from Duke.txt"},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"    public static TaskManager loadData() {"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":"        final TaskManager taskManager \u003d new TaskManager();"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":"        File f \u003d new File(FILE_PATH_TO_SAVE_TASKS);"},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Loading data\");"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"            while(s.hasNext()) {"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"                String[] listOfDataFromFile \u003d DukeParser.splitInputIntoString(s.nextLine());"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"                String userCommand \u003d listOfDataFromFile[0];"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"                String inputDetails \u003d listOfDataFromFile[1];"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"                Task newTask \u003d DukeParser.processSavedData(userCommand, inputDetails);"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"                taskManager.addTask(newTask);"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"            e.printStackTrace();"},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"        //emptyFileAfterInitializing();"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"        return taskManager;"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"     * Write tasks into Duke.txt"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"limwenfeng"},"content":"     * @param filePath Name and location of destinaton file"},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"     * @param tasks Task to be written"},{"lineNumber":93,"author":{"gitId":"limwenfeng"},"content":"     * @throws IOException If there is I/O errors"},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"limwenfeng"},"content":"    private static void writeToFile(String filePath, Task tasks) throws IOException {"},{"lineNumber":96,"author":{"gitId":"limwenfeng"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":97,"author":{"gitId":"limwenfeng"},"content":"        String description \u003d tasks.getDescriptionWithoutBrackets();"},{"lineNumber":98,"author":{"gitId":"limwenfeng"},"content":"        String taskType \u003d tasks.getTaskTypeInWords();"},{"lineNumber":99,"author":{"gitId":"limwenfeng"},"content":"        Boolean status \u003d tasks.getStatusInWords();"},{"lineNumber":100,"author":{"gitId":"limwenfeng"},"content":"        if (status) {"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"            fw.write(taskType + \"done \" + description + \"\\n\");"},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"        } else {"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"            fw.write(taskType + \u0027 \u0027 + description + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"limwenfeng"},"content":"        fw.close();"},{"lineNumber":106,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":108,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"limwenfeng"},"content":"     * Clear the file before saving the new list of Tasks."},{"lineNumber":110,"author":{"gitId":"limwenfeng"},"content":"     * Print exiting message and end the program."},{"lineNumber":111,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"limwenfeng"},"content":"     * @param latestTaskManager Most updated version of Task Manager"},{"lineNumber":113,"author":{"gitId":"limwenfeng"},"content":"     * @throws IOException If there is I/O error"},{"lineNumber":114,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"limwenfeng"},"content":"    private static void exitDuke(TaskManager latestTaskManager) throws IOException {"},{"lineNumber":116,"author":{"gitId":"limwenfeng"},"content":"        emptyFileAfterInitializing();"},{"lineNumber":117,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":118,"author":{"gitId":"limwenfeng"},"content":"        ArrayList\u003cTask\u003e finalTasksList \u003d latestTaskManager.returnTaskList();"},{"lineNumber":119,"author":{"gitId":"limwenfeng"},"content":"        for (Task task : finalTasksList) {"},{"lineNumber":120,"author":{"gitId":"limwenfeng"},"content":"            try {"},{"lineNumber":121,"author":{"gitId":"limwenfeng"},"content":"                writeToFile(FILE_PATH_TO_SAVE_TASKS, task);"},{"lineNumber":122,"author":{"gitId":"limwenfeng"},"content":"            } catch (IOException e) {"},{"lineNumber":123,"author":{"gitId":"limwenfeng"},"content":"                DukeUI.print(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":124,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printExitingMessage();"},{"lineNumber":127,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":129,"author":{"gitId":"limwenfeng"},"content":"    public static void endDuke(TaskManager latestTaskManager) {"},{"lineNumber":130,"author":{"gitId":"limwenfeng"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"limwenfeng"},"content":"            exitDuke(latestTaskManager);"},{"lineNumber":132,"author":{"gitId":"limwenfeng"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"limwenfeng"},"content":"            e.printStackTrace();"},{"lineNumber":134,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":136}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Duke;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":"    protected String taskType;"},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    public Task(String description, String taskType) {"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":"        if (taskType.equalsIgnoreCase(\"event\")) {"},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"            String[] listOfInputs \u003d description.split(\"/at\",2);"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"            description \u003d listOfInputs[0] + \" (at:\" + listOfInputs[1] + \")\";"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"            this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"            this.taskType \u003d taskType;"},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"        else if (taskType.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"            String[] listOfInputs \u003d description.split(\"/by\",2);"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"            description \u003d listOfInputs[0] + \" (by:\" + listOfInputs[1] + \")\";"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"            this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"            this.taskType \u003d taskType;"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"        else {"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"            String removeDone \u003d taskType.substring(0, taskType.length() - 4);"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"            if (taskType.equalsIgnoreCase(\"deadlinedone\")) {"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":"                String[] listOfInputs \u003d description.split(\"/by\",2);"},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"                description \u003d listOfInputs[0] + \" (by:\" + listOfInputs[1] + \")\";"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"                this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"                this.taskType \u003d removeDone;"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"            else if (taskType.equalsIgnoreCase(\"eventdone\")) {"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"                String[] listOfInputs \u003d description.split(\"/by\",2);"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"                description \u003d listOfInputs[0] + \" (by:\" + listOfInputs[1] + \")\";"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"                this.isDone \u003d true;"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"                this.taskType \u003d removeDone;"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"            else if (taskType.equalsIgnoreCase(\"tododone\")) {"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"                String[] listOfInputs \u003d description.split(\"/by\",2);"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"                description \u003d listOfInputs[0];"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"                this.isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"                this.taskType \u003d removeDone;"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"            } else {"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"                this.isDone \u003d false;"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"                this.taskType \u003d taskType;"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"        this.description \u003d description;"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"    public String getStatusIcon() {"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"    public Boolean getStatusInWords() { return this.isDone;}"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"    public void markAsDone() {"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"        this.isDone \u003d true;"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"    public String getTaskType() {"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"        if (this.taskType.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"            return \"[T]\";"},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"        } else if (this.taskType.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"            return \"[D]\";"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"            return \"[E]\";"},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":"    public String getTaskTypeInWords() {return this.taskType;}"},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"    public String getDescription() {"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":"        return this.description;"},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"    public String getDescriptionWithoutBrackets() {"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"        if (this.taskType.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned \u003d this.description.replaceAll(\"\\\\(\", \"/\");"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned2 \u003d descriptionCleaned.replaceAll(\":\", \"\");"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned3 \u003d descriptionCleaned2.replaceAll(\"  \", \"\");"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"            return descriptionCleaned3.substring(0, descriptionCleaned3.length() - 1);"},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"        } else if (this.taskType.equalsIgnoreCase(\"event\")) {"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned \u003d this.description.replaceAll(\"\\\\(\", \"/\");"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned2 \u003d descriptionCleaned.replaceAll(\":\", \"\");"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":"            String descriptionCleaned3 \u003d descriptionCleaned2.replaceAll(\"  \", \"\");"},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":"            return descriptionCleaned3.substring(0, descriptionCleaned3.length() - 1);"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"            return this.description;"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":92}},{"path":"src/main/java/Duke/TaskManager/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.TaskManager;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Task.Task;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import Duke.UI.DukeUI;"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":"public class TaskManager {"},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"    private static ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    public TaskManager() {"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"        tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"     * Add new Task object into tasksList"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"     * @param toAdd Task object"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"     * @return Task object that has been added"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":"    public Task addTask (Task toAdd) {"},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"        tasksList.add(toAdd);"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"        return toAdd;"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"     * return the number of tasks in tasksList"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"     * @return"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"    public static int taskCount() {"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"        return tasksList.size();"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"     * remove specific Task object from ArrayList"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"     * @param taskNo index of the Task to be removed"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"     * @return The Task object that has just been removed"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"    public static Task removeTask(String taskNo) {"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"        int taskNumber \u003d Integer.parseInt(taskNo);"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"        taskNumber--;"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"        Task selectedTask \u003d tasksList.get(taskNumber);"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":"        tasksList.remove(taskNumber);"},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"        return selectedTask;"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"     * returns specific Task from tasksList when the input is a string"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"     * @param taskNo index of the Task from ArrayList"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"     * @return The Task object from that index"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"    public static Task getTask(String taskNo) {"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"        int taskNumber \u003d Integer.parseInt(taskNo);"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":"        taskNumber--;"},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"        return tasksList.get(taskNumber);"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"     * returns specific Task from tasksList when the input is an integer"},{"lineNumber":65,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"limwenfeng"},"content":"     * @param taskNo index of the Task from ArrayList"},{"lineNumber":67,"author":{"gitId":"limwenfeng"},"content":"     * @return The Task object from that index"},{"lineNumber":68,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"limwenfeng"},"content":"    public static Task getTaskWithInt(Integer taskNo) {"},{"lineNumber":70,"author":{"gitId":"limwenfeng"},"content":"        taskNo--;"},{"lineNumber":71,"author":{"gitId":"limwenfeng"},"content":"        return tasksList.get(taskNo);"},{"lineNumber":72,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":74,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"limwenfeng"},"content":"     * List out all the tasks and details through DukeUI"},{"lineNumber":76,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"limwenfeng"},"content":"    public static void listOutTasks() {"},{"lineNumber":78,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":79,"author":{"gitId":"limwenfeng"},"content":"        int i \u003d 0;"},{"lineNumber":80,"author":{"gitId":"limwenfeng"},"content":"        while (i \u003ctaskCount()) {"},{"lineNumber":81,"author":{"gitId":"limwenfeng"},"content":"            i++;"},{"lineNumber":82,"author":{"gitId":"limwenfeng"},"content":"            Task selectedTask \u003d getTaskWithInt(i);"},{"lineNumber":83,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.print(i + \". \" + selectedTask.getTaskType() + selectedTask.getStatusIcon() + \" \" + selectedTask.getDescription());"},{"lineNumber":84,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":87,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"limwenfeng"},"content":"     * Call removeTask method and notify user of deletion and remaining number of Tasks"},{"lineNumber":89,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"limwenfeng"},"content":"     * @param s index of Task to be removed"},{"lineNumber":91,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"limwenfeng"},"content":"    public static void deleteTask(String s) {"},{"lineNumber":93,"author":{"gitId":"limwenfeng"},"content":"        Task selectedTask \u003d getTask(s);"},{"lineNumber":94,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Noted. I\u0027ve removed this task\");"},{"lineNumber":95,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"\\t\" + selectedTask.getTaskType() + selectedTask.getStatusIcon() + \" \" + selectedTask.getDescription());"},{"lineNumber":96,"author":{"gitId":"limwenfeng"},"content":"        removeTask(s);"},{"lineNumber":97,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Now you have \" + TaskManager.taskCount() + \" tasks in the list.\");"},{"lineNumber":98,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":100,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"limwenfeng"},"content":"     * Set the Task.isDone as True"},{"lineNumber":102,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"limwenfeng"},"content":"     * @param s index of the Task that will be marked as Done"},{"lineNumber":104,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"limwenfeng"},"content":"    public static void markTaskAsDone(String s) {"},{"lineNumber":106,"author":{"gitId":"limwenfeng"},"content":"        Task selectedTask \u003d TaskManager.getTask(s);"},{"lineNumber":107,"author":{"gitId":"limwenfeng"},"content":"        selectedTask.markAsDone();"},{"lineNumber":108,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Nice! Following task is now marked as done:\");"},{"lineNumber":109,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"[X] \" + selectedTask.getDescription());"},{"lineNumber":110,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":112,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"limwenfeng"},"content":"     * List out the tasks that contains the keyword s."},{"lineNumber":114,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"limwenfeng"},"content":"     * @param s keyword input by the user"},{"lineNumber":116,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"limwenfeng"},"content":"    public static void findTask(String s) {"},{"lineNumber":118,"author":{"gitId":"limwenfeng"},"content":"        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"limwenfeng"},"content":"        int i \u003d 0;"},{"lineNumber":120,"author":{"gitId":"limwenfeng"},"content":"        while (i \u003c taskCount()) {"},{"lineNumber":121,"author":{"gitId":"limwenfeng"},"content":"            i++;"},{"lineNumber":122,"author":{"gitId":"limwenfeng"},"content":"            Task selectedTask \u003d getTaskWithInt(i);"},{"lineNumber":123,"author":{"gitId":"limwenfeng"},"content":"            String[] listOfDescriptions \u003d selectedTask.getDescription().split(\" \");"},{"lineNumber":124,"author":{"gitId":"limwenfeng"},"content":"            for(String words : listOfDescriptions) {"},{"lineNumber":125,"author":{"gitId":"limwenfeng"},"content":"                // DukeUI.print(words);"},{"lineNumber":126,"author":{"gitId":"limwenfeng"},"content":"                if (words.equalsIgnoreCase(s)) {"},{"lineNumber":127,"author":{"gitId":"limwenfeng"},"content":"                    resultList.add(selectedTask);"},{"lineNumber":128,"author":{"gitId":"limwenfeng"},"content":"                }"},{"lineNumber":129,"author":{"gitId":"limwenfeng"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"limwenfeng"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"limwenfeng"},"content":"        int j \u003d 0;"},{"lineNumber":132,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Here are the matching tasks in your list:\");"},{"lineNumber":133,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":134,"author":{"gitId":"limwenfeng"},"content":"        if (resultList.size() \u003d\u003d 0) {"},{"lineNumber":135,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.print(\"No results.\");"},{"lineNumber":136,"author":{"gitId":"limwenfeng"},"content":"        } else {"},{"lineNumber":137,"author":{"gitId":"limwenfeng"},"content":"        while (j \u003c resultList.size()) {"},{"lineNumber":138,"author":{"gitId":"limwenfeng"},"content":"            Task selectedTask \u003d resultList.get(j);"},{"lineNumber":139,"author":{"gitId":"limwenfeng"},"content":"            j++;"},{"lineNumber":140,"author":{"gitId":"limwenfeng"},"content":"            DukeUI.print(j + \". \" + selectedTask.getTaskType() + selectedTask.getStatusIcon() + \" \" + selectedTask.getDescription());"},{"lineNumber":141,"author":{"gitId":"limwenfeng"},"content":"        }}"},{"lineNumber":142,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":144,"author":{"gitId":"limwenfeng"},"content":"    public ArrayList\u003cTask\u003e returnTaskList() {"},{"lineNumber":145,"author":{"gitId":"limwenfeng"},"content":"        return tasksList;"},{"lineNumber":146,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":147}},{"path":"src/main/java/Duke/UI/DukeUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limwenfeng"},"content":"package Duke.UI;"},{"lineNumber":2,"author":{"gitId":"limwenfeng"},"content":"import Duke.Parser.DukeParser;"},{"lineNumber":3,"author":{"gitId":"limwenfeng"},"content":"import Duke.Parser.TodoException;"},{"lineNumber":4,"author":{"gitId":"limwenfeng"},"content":"import Duke.Task.Task;"},{"lineNumber":5,"author":{"gitId":"limwenfeng"},"content":"import Duke.TaskManager.TaskManager;"},{"lineNumber":6,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":7,"author":{"gitId":"limwenfeng"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":9,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":10,"author":{"gitId":"limwenfeng"},"content":"public class DukeUI {"},{"lineNumber":11,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":12,"author":{"gitId":"limwenfeng"},"content":"    private static final Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"limwenfeng"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":14,"author":{"gitId":"limwenfeng"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"limwenfeng"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"limwenfeng"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"limwenfeng"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":19,"author":{"gitId":"limwenfeng"},"content":"    public static void printLine() {"},{"lineNumber":20,"author":{"gitId":"limwenfeng"},"content":"        System.out.println(\"-------------------------------------------\");"},{"lineNumber":21,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":23,"author":{"gitId":"limwenfeng"},"content":"    public static void print(String output) {"},{"lineNumber":24,"author":{"gitId":"limwenfeng"},"content":"        System.out.println(output);"},{"lineNumber":25,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":27,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"limwenfeng"},"content":"     * Get userInput from the scanner"},{"lineNumber":29,"author":{"gitId":"limwenfeng"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"limwenfeng"},"content":"     * @return return userInput as String"},{"lineNumber":31,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"limwenfeng"},"content":"    public static String[] getUserInput() {"},{"lineNumber":33,"author":{"gitId":"limwenfeng"},"content":"        String userInput \u003d scanner.nextLine();"},{"lineNumber":34,"author":{"gitId":"limwenfeng"},"content":"        return DukeParser.splitInputIntoString(userInput);"},{"lineNumber":35,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":37,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"limwenfeng"},"content":"     * Print Welcome Message"},{"lineNumber":39,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"limwenfeng"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":41,"author":{"gitId":"limwenfeng"},"content":"        print(\"Hello from\\n\" + LOGO);"},{"lineNumber":42,"author":{"gitId":"limwenfeng"},"content":"        printLine();"},{"lineNumber":43,"author":{"gitId":"limwenfeng"},"content":"        print(\"Hello! I\u0027m Duke.Duke\");"},{"lineNumber":44,"author":{"gitId":"limwenfeng"},"content":"        print(\"What can I do for you?\");"},{"lineNumber":45,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":47,"author":{"gitId":"limwenfeng"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"limwenfeng"},"content":"     * Print exiting message"},{"lineNumber":49,"author":{"gitId":"limwenfeng"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"limwenfeng"},"content":"    public static void printExitingMessage() {"},{"lineNumber":51,"author":{"gitId":"limwenfeng"},"content":"        print(\"Bye. Hope to see you again soon!\");"},{"lineNumber":52,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":54,"author":{"gitId":"limwenfeng"},"content":"    public static void notifyUserNewTask(Task selectedTask, TaskManager currentTaskManager) {"},{"lineNumber":55,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":56,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"  \" + selectedTask.getTaskType() + selectedTask.getStatusIcon() + \" \" + selectedTask.getDescription());"},{"lineNumber":57,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(\"Now you have \" + currentTaskManager.taskCount() + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"limwenfeng"},"content":""},{"lineNumber":60,"author":{"gitId":"limwenfeng"},"content":"    public static void informErrorToUser(TodoException e) {"},{"lineNumber":61,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.printLine();"},{"lineNumber":62,"author":{"gitId":"limwenfeng"},"content":"        DukeUI.print(e.sendErrorMessage());"},{"lineNumber":63,"author":{"gitId":"limwenfeng"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"limwenfeng"},"content":"}"}],"authorContributionMap":{"limwenfeng":64}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"limwenfeng"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"limwenfeng":1,"-":20}}]
