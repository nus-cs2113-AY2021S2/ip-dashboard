[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"# ip.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"1. After that, locate the `src/main/java/ip.duke.Duke.java` file, right-click it, and choose `Run ip.duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":24,"Cocokkkk":2}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"D | 0 | return book | 2月 28 2021"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":"E | 1 | project meeting | 3月 5 2021"}],"authorContributionMap":{"Cocokkkk":2}},{"path":"src/main/java/ip/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":" * Represents the whole Duke project"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":" * Builds a Java project named Duke to store tasks in a given address."},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":" * a Duke(filepath) object represents a Duke project"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":" * that store all task information in file at the path of filepath"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"     * The constructor for a Duke object, returns nothing"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"     * loading the task information that already exist in the file"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"     * which is written by previous runs before each run"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"     * @param filePath the address of the file storing all task information into a certain taskList"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"     * @throws IOException the exception that occurs when encountered with problems in writing to"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"     *                     or reading from a file"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"    public Duke(String filePath) {"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"        ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"            tasks \u003d new TaskList(storage.loadData());"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"            ui.showLoadingError();"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":"     * Runs the Duke program."},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"    public void run() throws IOException {"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"        start();"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"        runUntilExit();"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"        exit();"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"     * Starts the program by printing greeting information."},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":"    private void start() {"},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"        ui.printGreetings();"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"     * The program continues running to get the commands from user inputs until"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"     * the user\u0027s input is an instruction (bye) to exit the program."},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"     * The program helps to store all task information into a certain file"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"     * @throws DukeException when the command received in is incomplete or different from any acceptable commands"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"     * @throws IOException   the exception that occurs when encountered with problems in writing to"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":"     *                       or reading from a file"},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"    private void runUntilExit() throws IOException {"},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"        String commandText;"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"        do {"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"            commandText \u003d in.nextLine();"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"                Parser.parseCommand(commandText);"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"            } catch (DukeException e) {"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"                ui.printInvalidInputWarnings(commandText);"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"        } while (!commandText.equals(\"bye\"));"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"        storage.saveData();"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"     * Exits the program by printing a bye message."},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":"    private void exit() {"},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"        ui.printBye();"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":"        System.exit(0);"},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"Cocokkkk":87}},{"path":"src/main/java/ip/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":" * Represents all possible exceptions when incomplete or incorrect command is typed in"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":" * description gives details of exceptions"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":8}},{"path":"src/main/java/ip/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"     * Parses the user\u0027s input into a format that can be recognized by the Duke project program."},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"     * Apart from \"help\" \"list\" and \"bye\" commands, all other valid commands must be followed by further information."},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"     * If the input is not an acceptable command or cannot be recognized correctly by this program"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"     * it will throw a DukeException."},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"     * @param input the string input by user, which is regarded as a command"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"     * @throws DukeException an exception that occurs when an invalid command is input"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"    public static void parseCommand(String input) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"        int lengthOfCommandType \u003d 0;"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"        String commandType;"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"        if (input.equals(\"help\") || input.equals(\"list\") || input.equals(\"bye\")) {"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"            commandType \u003d input;"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"        } else if (!input.contains(\" \")) {"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"            throw new DukeException();"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"            lengthOfCommandType \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"            commandType \u003d input.substring(0, lengthOfCommandType);"},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"        String commandContent \u003d input.substring(lengthOfCommandType + 1);"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"        switch (commandType) {"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"        case \"todo\":"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"            parseTodoCommand(commandContent);"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"        case \"deadline\":"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"            parseDeadlineCommand(commandContent);"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"        case \"event\":"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"            parseEventCommand(commandContent);"},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":"        case \"list\":"},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"            parseListCommand();"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"        case \"done\":"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"            parseDoneCommand(commandContent);"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"        case \"delete\":"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"            parseDeleteCommand(commandContent);"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"        case \"find\":"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"            parseFindCommand(commandContent);"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"        case \"date\":"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"            parseDateCommand(commandContent);"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"        default:"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseTodoCommand(String description) {"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.updateTodo(description);"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseDeadlineCommand(String commandContent) {"},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"        int byTimePosition \u003d commandContent.indexOf(\"/\") + 4;"},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"        String description \u003d commandContent.substring(0, byTimePosition - 5);"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":"        String byTime \u003d commandContent.substring(byTimePosition);"},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"        if (byTime.contains(\"-\")) {"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"            LocalDate date \u003d LocalDate.parse(byTime);"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"            byTime \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.updateDeadline(description, byTime);"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseEventCommand(String commandContent) {"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":"        int atTimePosition \u003d commandContent.indexOf(\"/\") + 4;"},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"        String description \u003d commandContent.substring(0, atTimePosition - 5);"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"        String atTime \u003d commandContent.substring(atTimePosition);"},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":"        if (atTime.contains(\"-\")) {"},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"            LocalDate date \u003d LocalDate.parse(atTime);"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"            atTime \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.updateEvent(description, atTime);"},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseListCommand() {"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.getCompleteList();"},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":89,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseDoneCommand(String commandContent) {"},{"lineNumber":90,"author":{"gitId":"Cocokkkk"},"content":"        int doneIndex \u003d Integer.parseInt(commandContent);"},{"lineNumber":91,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.markDone(doneIndex);"},{"lineNumber":92,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":94,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseDeleteCommand(String commandContent) {"},{"lineNumber":95,"author":{"gitId":"Cocokkkk"},"content":"        int deletedIndex \u003d Integer.parseInt(commandContent);"},{"lineNumber":96,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.deleteTask(deletedIndex);"},{"lineNumber":97,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":99,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseFindCommand(String commandContent) {"},{"lineNumber":100,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.getFoundTask(commandContent);"},{"lineNumber":101,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":103,"author":{"gitId":"Cocokkkk"},"content":"    private static void parseDateCommand(String commandContent) {"},{"lineNumber":104,"author":{"gitId":"Cocokkkk"},"content":"        LocalDate date \u003d LocalDate.parse(commandContent);"},{"lineNumber":105,"author":{"gitId":"Cocokkkk"},"content":"        commandContent \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":106,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.getDateTask(commandContent);"},{"lineNumber":107,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":109,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":109}},{"path":"src/main/java/ip/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":" * Represents an object that deals with loading information from a file"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":" * as well as writing information into it"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":" * A Storage(filepath) object corresponds to an object that can read and write"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":" * into the file at the path given by filepath"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"    public static String filePath;"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"    public static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"     * Constructs a Storage object to access the data in the given address."},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"     * @param filePath the String given to find the path of the file."},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"        Storage.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"     * Loads the data stored in the given file address and re-formats them into a task list."},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"     * If the file does not exist, create a new file to store the task information"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"     * The stored data may contain three types todo, deadline, and event with their corresponding task status."},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"     * no parameters"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"     * @return the task list that read from that file"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"     * @throws IOException an exception occurs when encountered with problems reading into the file"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"    public static ArrayList\u003cTask\u003e loadData() throws IOException {"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"        File dataFile \u003d new File(filePath);"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"        if (dataFile.createNewFile()) {"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printLine();"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(\"Since the file does not exist, I have created a new one.\");"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printLine();"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":"        Scanner dataScanner \u003d new Scanner(dataFile);"},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"        while (dataScanner.hasNext()) {"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"            String data \u003d dataScanner.nextLine();"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"            String type \u003d data.substring(0, 1);"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"            boolean isDone \u003d data.charAt(4) \u003d\u003d \u00271\u0027;"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"            String content \u003d data.substring(8);"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"            String description \u003d content;"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"            String byTime;"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"            String atTime;"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"            int separatePoint \u003d content.length() - 1;"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"            if (content.contains(\"|\")) {"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":"                separatePoint \u003d content.indexOf(\"|\");"},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":"                description \u003d content.substring(0, separatePoint - 1);"},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"            switch (type) {"},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"            case \"T\":"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":"                fileUpdateTodo(list, description, isDone);"},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"            case \"D\":"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"                byTime \u003d content.substring(separatePoint + 2);"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"                fileUpdateDeadline(list, description, byTime, isDone);"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"            case \"E\":"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":"                atTime \u003d content.substring(separatePoint + 2);"},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"                fileUpdateEvent(list, description, atTime, isDone);"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"            default:"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"        return list;"},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":"     * Update a todo type task read from the file to the task list."},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":"     * @param list        the list that stores all the tasks"},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the string that describe this todo task"},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":"     * @param isDone      the status of this todo tasks"},{"lineNumber":89,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Cocokkkk"},"content":"    public static void fileUpdateTodo(ArrayList\u003cTask\u003e list, String description, boolean isDone) {"},{"lineNumber":91,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Todo(description));"},{"lineNumber":92,"author":{"gitId":"Cocokkkk"},"content":"        list.get(list.size() - 1).setDone(isDone);"},{"lineNumber":93,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":95,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Cocokkkk"},"content":"     * Update a deadline type task read from the file to the task list."},{"lineNumber":97,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"Cocokkkk"},"content":"     * @param list        the list that stores all the tasks"},{"lineNumber":99,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the string that describe this todo task"},{"lineNumber":100,"author":{"gitId":"Cocokkkk"},"content":"     * @param byTime      the string representing the latest time the task should be done"},{"lineNumber":101,"author":{"gitId":"Cocokkkk"},"content":"     * @param isDone      the status of this todo tasks"},{"lineNumber":102,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Cocokkkk"},"content":"    public static void fileUpdateDeadline(ArrayList\u003cTask\u003e list, String description, String byTime, boolean isDone) {"},{"lineNumber":104,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Deadline(description, byTime));"},{"lineNumber":105,"author":{"gitId":"Cocokkkk"},"content":"        list.get(list.size() - 1).setDone(isDone);"},{"lineNumber":106,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":108,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Cocokkkk"},"content":"     * Update an event type task read from the file to the task list."},{"lineNumber":110,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Cocokkkk"},"content":"     * @param list        the list that stores all the tasks"},{"lineNumber":112,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the string that describe this todo task"},{"lineNumber":113,"author":{"gitId":"Cocokkkk"},"content":"     * @param atTime      the string representing the time the task should start"},{"lineNumber":114,"author":{"gitId":"Cocokkkk"},"content":"     * @param isDone      the status of this todo tasks"},{"lineNumber":115,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Cocokkkk"},"content":"    public static void fileUpdateEvent(ArrayList\u003cTask\u003e list, String description, String atTime, boolean isDone) {"},{"lineNumber":117,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Event(description, atTime));"},{"lineNumber":118,"author":{"gitId":"Cocokkkk"},"content":"        list.get(list.size() - 1).setDone(isDone);"},{"lineNumber":119,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":121,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"Cocokkkk"},"content":"     * Save the updated task list information as data format"},{"lineNumber":123,"author":{"gitId":"Cocokkkk"},"content":"     * back to the given file address whenever the task list changes."},{"lineNumber":124,"author":{"gitId":"Cocokkkk"},"content":"     * returns nothing"},{"lineNumber":125,"author":{"gitId":"Cocokkkk"},"content":"     * if the ArrayList is empty, nothing will be written"},{"lineNumber":126,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"Cocokkkk"},"content":"     * @throws IOException an exception occurs when encountered with problems writing to the file"},{"lineNumber":128,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Cocokkkk"},"content":"    public static void saveData() throws IOException {"},{"lineNumber":130,"author":{"gitId":"Cocokkkk"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":131,"author":{"gitId":"Cocokkkk"},"content":"        for (int i \u003d 0; i \u003c TaskList.getSize(); i++) {"},{"lineNumber":132,"author":{"gitId":"Cocokkkk"},"content":"            fw.write(TaskList.getList().get(i).toDataString() + \"\\n\");"},{"lineNumber":133,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"Cocokkkk"},"content":"        fw.close();"},{"lineNumber":135,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":136}},{"path":"src/main/java/ip/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    public static ArrayList\u003cTask\u003e list;"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"     * Constructs a new task list if there is no data stored in the given address."},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"        list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"     * Constructs a task list by reading from the file in the given address."},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"     * @param list the task list that is read from the file in the given address"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"        TaskList.list \u003d list;"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"     * Updates a todo type task into the task list and confirms the operation by printing a message"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the description of this todo task obtained by parsing the user\u0027s input command"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"    public static void updateTodo(String description) {"},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Todo(description));"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printRecordMessage(list.get(list.size() - 1));"},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"     * Updates a deadline type task into the task list and confirms the operation by printing a message"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the description of this deadline task obtained by parsing the user\u0027s input command"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"     * @param byTime      the latest time of this task should be done obtain by parsing the user\u0027s input command"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"    public static void updateDeadline(String description, String byTime) {"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Deadline(description, byTime));"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printRecordMessage(list.get(list.size() - 1));"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"     * Updates an event type task into the task list and confirms the operation by printing a message"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the description of this deadline task obtained by parsing the user\u0027s input command"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"     * @param atTime      the start time of this task obtain by parsing the user\u0027s input command"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"    public static void updateEvent(String description, String atTime) {"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"        list.add(new Event(description, atTime));"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printRecordMessage(list.get(list.size() - 1));"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"     * Marks the indicated user\u0027s input task as done and confirms the marking operation by printing a message."},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"     * @param doneIndex the index of the task that to be marked as done"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"    public static void markDone(int doneIndex) {"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"        Task doneTask \u003d list.get(doneIndex - 1);"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"        doneTask.setDone(true);"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"        list.set(doneIndex - 1, doneTask);"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printDoneMessage(doneTask);"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":"     * Deletes the indicated user\u0027s input task from the task list and confirms the marking operation by printing a message."},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"     * @param deletedIndex the index of the task that to be deleted"},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"    public static void deleteTask(int deletedIndex) {"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"        Task deletedTask \u003d list.get(deletedIndex - 1);"},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printDeletedMessage(deletedTask);"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":"        list.remove(deletedIndex - 1);"},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"    public static int getSize() {"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":"        return list.size();"},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":89,"author":{"gitId":"Cocokkkk"},"content":"    public static ArrayList\u003cTask\u003e getList() {"},{"lineNumber":90,"author":{"gitId":"Cocokkkk"},"content":"        return list;"},{"lineNumber":91,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":93,"author":{"gitId":"Cocokkkk"},"content":"    public static void getCompleteList() {"},{"lineNumber":94,"author":{"gitId":"Cocokkkk"},"content":"        Ui.printList(list);"},{"lineNumber":95,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":97,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Cocokkkk"},"content":"     * Obtains the tasks that contains the keyword that input by the user and stores them in another task list."},{"lineNumber":99,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the new list obtained before"},{"lineNumber":100,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the warning message if there is no matching task in the new task list"},{"lineNumber":101,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Cocokkkk"},"content":"     * @param keywordToFind the keyword that the user want all the matching tasks to contain"},{"lineNumber":103,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Cocokkkk"},"content":"    public static void getFoundTask(String keywordToFind) {"},{"lineNumber":105,"author":{"gitId":"Cocokkkk"},"content":"        ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitId":"Cocokkkk"},"content":"        for (Task task : list) {"},{"lineNumber":107,"author":{"gitId":"Cocokkkk"},"content":"            if (task.getDescription().contains(keywordToFind)) {"},{"lineNumber":108,"author":{"gitId":"Cocokkkk"},"content":"                foundList.add(task);"},{"lineNumber":109,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Cocokkkk"},"content":"        if (foundList.size() !\u003d 0) {"},{"lineNumber":112,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printFoundList(foundList);"},{"lineNumber":113,"author":{"gitId":"Cocokkkk"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printEmptyMessage();"},{"lineNumber":115,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":118,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Cocokkkk"},"content":"     * Obtains the tasks that contains the date that input by the user and stores them in another task list."},{"lineNumber":120,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the new list obtained before"},{"lineNumber":121,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the warning message if there is no matching task in the new task list"},{"lineNumber":122,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"Cocokkkk"},"content":"     * @param dateToFind the date that the user wants all the matching tasks to contain"},{"lineNumber":124,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"Cocokkkk"},"content":"    public static void getDateTask(String dateToFind) {"},{"lineNumber":126,"author":{"gitId":"Cocokkkk"},"content":"        ArrayList\u003cTask\u003e dateList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":127,"author":{"gitId":"Cocokkkk"},"content":"        for (Task task : list) {"},{"lineNumber":128,"author":{"gitId":"Cocokkkk"},"content":"            if (task.toString().contains(dateToFind)) {"},{"lineNumber":129,"author":{"gitId":"Cocokkkk"},"content":"                dateList.add(task);"},{"lineNumber":130,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Cocokkkk"},"content":"        if (dateList.size() !\u003d 0) {"},{"lineNumber":133,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printDateList(dateList);"},{"lineNumber":134,"author":{"gitId":"Cocokkkk"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"Cocokkkk"},"content":"            Ui.printNoMessage();"},{"lineNumber":136,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":139,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":140,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":140}},{"path":"src/main/java/ip/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the Duke logo and the greeting message when the program starts to run."},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    public static void printGreetings() {"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"     * Prints an error message when there is no data stored in the text file to be loaded."},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"    public static void showLoadingError() {"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"There is no existing data to load... \");"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the corresponding error message for different type of invalid inputs."},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"     * @param input the invalid input which is not a command or does not provide enough information"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"    public static void printInvalidInputWarnings(String input) {"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"        switch (input) {"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"        case \"deadline\":"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"        case \"done\":"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"        case \"delete\":"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(\"🙁 OOPS!!! The description of a \" + input + \" cannot be empty.\");"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"        case \"event\":"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(\"🙁 OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(\"🙁 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Please input again!:)\");"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"    public static void printLine() {"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"___________________________________________\");"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"     * Prints a message to confirm the task updated successfully by printing the formatted task"},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"     * and the current number of tasks in the updated task list."},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":"     * @param task the new task to be updated into the task list"},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"    public static void printRecordMessage(Task task) {"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(task.toString());"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Now you have \" + (TaskList.getSize()) + \" tasks in the list. \");"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"     * Prints all the tasks in the list."},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"     * @param list the task list to be displayed"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"    public static void printList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(i + \". \" + list.get(i - 1).toString());"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the list of tasks that matches the find input."},{"lineNumber":90,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"Cocokkkk"},"content":"     * @param foundList the list of tasks that contains the finding keyword"},{"lineNumber":92,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Cocokkkk"},"content":"    public static void printFoundList(ArrayList\u003cTask\u003e foundList) {"},{"lineNumber":94,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":95,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Here are the matching tasks in your list: \");"},{"lineNumber":96,"author":{"gitId":"Cocokkkk"},"content":"        printList(foundList);"},{"lineNumber":97,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":99,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the list of tasks that matches the find input."},{"lineNumber":101,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Cocokkkk"},"content":"     * @param dateList the list of tasks that contains the finding keyword"},{"lineNumber":103,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Cocokkkk"},"content":"    public static void printDateList(ArrayList\u003cTask\u003e dateList) {"},{"lineNumber":105,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":106,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Here are the tasks occurring on this specific date: \");"},{"lineNumber":107,"author":{"gitId":"Cocokkkk"},"content":"        printList(dateList);"},{"lineNumber":108,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":110,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Cocokkkk"},"content":"     * Prints a message to confirm marking a task as done successfully by printing the formatted task"},{"lineNumber":112,"author":{"gitId":"Cocokkkk"},"content":"     * and the updated task status."},{"lineNumber":113,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"Cocokkkk"},"content":"     * @param task the task to be marked as done"},{"lineNumber":115,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Cocokkkk"},"content":"    public static void printDoneMessage(Task task) {"},{"lineNumber":117,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":118,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":119,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(task.toString());"},{"lineNumber":120,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":121,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":123,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Cocokkkk"},"content":"     * Prints a message to confirm deleting a task successfully by printing the formatted task"},{"lineNumber":125,"author":{"gitId":"Cocokkkk"},"content":"     * and the current number of tasks in the task list."},{"lineNumber":126,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"Cocokkkk"},"content":"     * @param task the task to be marked as done"},{"lineNumber":128,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Cocokkkk"},"content":"    public static void printDeletedMessage(Task task) {"},{"lineNumber":130,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":131,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":132,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(task.toString());"},{"lineNumber":133,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Now you have \" + (TaskList.getSize() - 1) + \" tasks in the list.\");"},{"lineNumber":134,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":135,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":137,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Cocokkkk"},"content":"     * Prints an error message if the task matches the find input cannot be found."},{"lineNumber":139,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"Cocokkkk"},"content":"    public static void printEmptyMessage() {"},{"lineNumber":141,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":142,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"There is no matching task in your list.\");"},{"lineNumber":143,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Please input another keyword! :)\");"},{"lineNumber":144,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":145,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":147,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"Cocokkkk"},"content":"     * Prints an error message if the task matches the find input cannot be found."},{"lineNumber":149,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"Cocokkkk"},"content":"    public static void printNoMessage() {"},{"lineNumber":151,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":152,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"There is no task occurring on this specific date.\");"},{"lineNumber":153,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Please input another date! :)\");"},{"lineNumber":154,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":155,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":157,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"Cocokkkk"},"content":"     * Prints the bye message before the program ends."},{"lineNumber":159,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"Cocokkkk"},"content":"    public static void printBye() {"},{"lineNumber":161,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":162,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":163,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":164,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":166,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":166}},{"path":"src/main/java/ip/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":" * Represents a type of task with description and a deadline (date or time)"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":" * status is undone unless marked done by the user"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"        this.by \u003d by;"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"    public String toDataString() {"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"        return \"D\" + super.toDataString() + \" | \" + by;"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":24}},{"path":"src/main/java/ip/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":" * Represents a type of task with description and a startTime (date or time)"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":" * status is undone by default unless marked done by the user"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"    protected String at;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    public Event(String description, String at) {"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + at + \")\";"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"    public String toDataString() {"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"        return \"E\" + super.toDataString() + \" | \" + at;"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":25}},{"path":"src/main/java/ip/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":" * Represents all types of tasks"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":" * parent class of Todo/Deadline/Event"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":" * includes description only"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":" * status is undone by default unless marked done by user"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    public String description;"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"    public boolean isDone;"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"     * Constructs a Task object with a given description and a default task status of undone."},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"     * @param description the string given to describe this task"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"    public String getDescription() {"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"        return description;"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"    public String getStatusNum() {"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"        return (isDone ? \"1\" : \"0\");"},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"     * Returns the string format of the task to output the task when the program is running."},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"     * @return the string format of this task with its status and description for output"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"     * Returns the string format of the task to write the task into the file."},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"     * @return the string format of this task with its status and description for data saving"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"    public String toDataString() {"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"        return \" | \" + getStatusNum() + \" | \" + description;"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":60}},{"path":"src/main/java/ip/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":" * Represents a type of task with description only"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":" * without any date/time"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":" * status is undone by default unless user marks it as done"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"    public String toDataString() {"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"        return \"T\" + super.toDataString();"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"    public String getDate() {"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"        return null;"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":"deadline do homework /by Sunday"},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"event"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"bye"}],"authorContributionMap":{"Cocokkkk":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\ip\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"java -classpath ..\\bin ip.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"Cocokkkk":2}}]
