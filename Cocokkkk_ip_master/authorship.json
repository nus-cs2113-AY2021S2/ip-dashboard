[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"# ip.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"1. After that, locate the `src/main/java/ip.duke.Duke.java` file, right-click it, and choose `Run ip.duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":24,"Cocokkkk":2}},{"path":"src/main/java/ip/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"import ip.duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"        printGreeting();"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"        Task[] list \u003d new Task[100];"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"        int index \u003d 0;"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"        int slashPosition \u003d 0;"},{"lineNumber":24,"author":{"gitId":"Cocokkkk"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":25,"author":{"gitId":"Cocokkkk"},"content":"        String command \u003d in.nextLine();"},{"lineNumber":26,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":27,"author":{"gitId":"Cocokkkk"},"content":"        while (!command.equals(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"Cocokkkk"},"content":"            try {"},{"lineNumber":29,"author":{"gitId":"Cocokkkk"},"content":"                if (command.equals(\"list\")) {"},{"lineNumber":30,"author":{"gitId":"Cocokkkk"},"content":"                    printTasks(list, index);"},{"lineNumber":31,"author":{"gitId":"Cocokkkk"},"content":"                } else if (command.startsWith(\"todo\")) {"},{"lineNumber":32,"author":{"gitId":"Cocokkkk"},"content":"                    if (command.length() \u003c\u003d 5) {"},{"lineNumber":33,"author":{"gitId":"Cocokkkk"},"content":"                        throw new DukeException(\"todo\");"},{"lineNumber":34,"author":{"gitId":"Cocokkkk"},"content":"                    }"},{"lineNumber":35,"author":{"gitId":"Cocokkkk"},"content":"                    recordTasks(list, index, command, \"todo\");"},{"lineNumber":36,"author":{"gitId":"Cocokkkk"},"content":"                    index++;"},{"lineNumber":37,"author":{"gitId":"Cocokkkk"},"content":"                } else {"},{"lineNumber":38,"author":{"gitId":"Cocokkkk"},"content":"                    int Position \u003d Integer.parseInt(String.valueOf(command.indexOf(\u0027/\u0027)));"},{"lineNumber":39,"author":{"gitId":"Cocokkkk"},"content":"                    if (command.startsWith(\"deadline\")) {"},{"lineNumber":40,"author":{"gitId":"Cocokkkk"},"content":"                        if (command.length() \u003c\u003d 9) {"},{"lineNumber":41,"author":{"gitId":"Cocokkkk"},"content":"                            throw new DukeException(\"deadline\");"},{"lineNumber":42,"author":{"gitId":"Cocokkkk"},"content":"                        }"},{"lineNumber":43,"author":{"gitId":"Cocokkkk"},"content":"                        slashPosition \u003d Position;"},{"lineNumber":44,"author":{"gitId":"Cocokkkk"},"content":"                        if (slashPosition !\u003d -1) {"},{"lineNumber":45,"author":{"gitId":"Cocokkkk"},"content":"                            recordTasks(list, index, command, \"deadline\");"},{"lineNumber":46,"author":{"gitId":"Cocokkkk"},"content":"                            index++;"},{"lineNumber":47,"author":{"gitId":"Cocokkkk"},"content":"                        } else {"},{"lineNumber":48,"author":{"gitId":"Cocokkkk"},"content":"                            printLine();"},{"lineNumber":49,"author":{"gitId":"Cocokkkk"},"content":"                            System.out.println(\"üôÅ OOPS!!! The deadline time is missing.\");"},{"lineNumber":50,"author":{"gitId":"Cocokkkk"},"content":"                            System.out.println(\"Please fill in the time! :)\");"},{"lineNumber":51,"author":{"gitId":"Cocokkkk"},"content":"                            printLine();"},{"lineNumber":52,"author":{"gitId":"Cocokkkk"},"content":"                        }"},{"lineNumber":53,"author":{"gitId":"Cocokkkk"},"content":"                    } else if (command.startsWith(\"event\")) {"},{"lineNumber":54,"author":{"gitId":"Cocokkkk"},"content":"                        if (command.length() \u003c\u003d 6) {"},{"lineNumber":55,"author":{"gitId":"Cocokkkk"},"content":"                            throw new DukeException(\"event\");"},{"lineNumber":56,"author":{"gitId":"Cocokkkk"},"content":"                        }"},{"lineNumber":57,"author":{"gitId":"Cocokkkk"},"content":"                        slashPosition \u003d Position;"},{"lineNumber":58,"author":{"gitId":"Cocokkkk"},"content":"                        if (slashPosition !\u003d -1) {"},{"lineNumber":59,"author":{"gitId":"Cocokkkk"},"content":"                            recordTasks(list, index, command, \"event\");"},{"lineNumber":60,"author":{"gitId":"Cocokkkk"},"content":"                            index++;"},{"lineNumber":61,"author":{"gitId":"Cocokkkk"},"content":"                        } else {"},{"lineNumber":62,"author":{"gitId":"Cocokkkk"},"content":"                            printLine();"},{"lineNumber":63,"author":{"gitId":"Cocokkkk"},"content":"                            System.out.println(\"üôÅ OOPS!!! The event time is missing.\");"},{"lineNumber":64,"author":{"gitId":"Cocokkkk"},"content":"                            System.out.println(\"Please fill in the time! :)\");"},{"lineNumber":65,"author":{"gitId":"Cocokkkk"},"content":"                        }"},{"lineNumber":66,"author":{"gitId":"Cocokkkk"},"content":"                    } else if (command.startsWith(\"done\")) {"},{"lineNumber":67,"author":{"gitId":"Cocokkkk"},"content":"                        if (command.length() \u003c\u003d 5) {"},{"lineNumber":68,"author":{"gitId":"Cocokkkk"},"content":"                            throw new DukeException(\"done\");"},{"lineNumber":69,"author":{"gitId":"Cocokkkk"},"content":"                        }"},{"lineNumber":70,"author":{"gitId":"Cocokkkk"},"content":"                        markDone(list, command);"},{"lineNumber":71,"author":{"gitId":"Cocokkkk"},"content":"                    } else {"},{"lineNumber":72,"author":{"gitId":"Cocokkkk"},"content":"                        printLine();"},{"lineNumber":73,"author":{"gitId":"Cocokkkk"},"content":"                        System.out.println(\"üôÅ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":74,"author":{"gitId":"Cocokkkk"},"content":"                        System.out.println(\"Please input again! :)\");"},{"lineNumber":75,"author":{"gitId":"Cocokkkk"},"content":"                        printLine();"},{"lineNumber":76,"author":{"gitId":"Cocokkkk"},"content":"                    }"},{"lineNumber":77,"author":{"gitId":"Cocokkkk"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"Cocokkkk"},"content":"            } catch (DukeException e) {"},{"lineNumber":79,"author":{"gitId":"Cocokkkk"},"content":"                printLine();"},{"lineNumber":80,"author":{"gitId":"Cocokkkk"},"content":"                if (e.category.equals(\"event\")) {"},{"lineNumber":81,"author":{"gitId":"Cocokkkk"},"content":"                    System.out.println(\"‚òπ OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":82,"author":{"gitId":"Cocokkkk"},"content":"                } else {"},{"lineNumber":83,"author":{"gitId":"Cocokkkk"},"content":"                    System.out.println(\"‚òπ OOPS!!! The description of a \" + e.category + \" cannot be empty.\");"},{"lineNumber":84,"author":{"gitId":"Cocokkkk"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"Cocokkkk"},"content":"                System.out.println(\"Please complete the description! :)\");"},{"lineNumber":86,"author":{"gitId":"Cocokkkk"},"content":"                printLine();"},{"lineNumber":87,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"Cocokkkk"},"content":"            command \u003d in.nextLine();"},{"lineNumber":89,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":90,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Cocokkkk"},"content":"        printBye();"},{"lineNumber":92,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":94,"author":{"gitId":"Cocokkkk"},"content":"    public static void printGreeting() {"},{"lineNumber":95,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Hello! I\u0027m ip.taskmaster.Duke\");"},{"lineNumber":96,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"What can I do for you?\\n\");"},{"lineNumber":97,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":98,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":100,"author":{"gitId":"Cocokkkk"},"content":"    public static void recordTasks(Task[] list, int index, String command, String category) {"},{"lineNumber":101,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":102,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":103,"author":{"gitId":"Cocokkkk"},"content":"        if (category.equals(\"todo\")) {"},{"lineNumber":104,"author":{"gitId":"Cocokkkk"},"content":"            list[index] \u003d new Todo(command.substring(5));"},{"lineNumber":105,"author":{"gitId":"Cocokkkk"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"Cocokkkk"},"content":"            String Time \u003d command.substring(command.indexOf(\"/\") + 4);"},{"lineNumber":107,"author":{"gitId":"Cocokkkk"},"content":"            if (category.equals(\"deadline\")) {"},{"lineNumber":108,"author":{"gitId":"Cocokkkk"},"content":"                String content \u003d command.substring(9, command.indexOf(\"/\"));"},{"lineNumber":109,"author":{"gitId":"Cocokkkk"},"content":"                list[index] \u003d new Deadline(content, Time);"},{"lineNumber":110,"author":{"gitId":"Cocokkkk"},"content":"            } else if (category.equals(\"event\")) {"},{"lineNumber":111,"author":{"gitId":"Cocokkkk"},"content":"                String content \u003d command.substring(6, command.indexOf(\"/\"));"},{"lineNumber":112,"author":{"gitId":"Cocokkkk"},"content":"                list[index] \u003d new Event(content, Time);"},{"lineNumber":113,"author":{"gitId":"Cocokkkk"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(list[index].toString());"},{"lineNumber":116,"author":{"gitId":"Cocokkkk"},"content":"        int count \u003d index + 1;"},{"lineNumber":117,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Now you have \" + count + \" tasks in the list.\");"},{"lineNumber":118,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":119,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":121,"author":{"gitId":"Cocokkkk"},"content":"    public static void markDone(Task[] list, String command) {"},{"lineNumber":122,"author":{"gitId":"Cocokkkk"},"content":"        int i;"},{"lineNumber":123,"author":{"gitId":"Cocokkkk"},"content":"        i \u003d Integer.parseInt(command.substring(5));"},{"lineNumber":124,"author":{"gitId":"Cocokkkk"},"content":"        list[i - 1].setDone(true);"},{"lineNumber":125,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":126,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":127,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\" \" + \" \" + list[i - 1].toString());"},{"lineNumber":128,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":129,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":130,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":132,"author":{"gitId":"Cocokkkk"},"content":"    public static void printTasks(Task[] list, int index) {"},{"lineNumber":133,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":134,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":135,"author":{"gitId":"Cocokkkk"},"content":"        for (int i \u003d 1; i \u003c\u003d index; i++) {"},{"lineNumber":136,"author":{"gitId":"Cocokkkk"},"content":"            System.out.println(i + \".\" + list[i - 1].toString());"},{"lineNumber":137,"author":{"gitId":"Cocokkkk"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":139,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":141,"author":{"gitId":"Cocokkkk"},"content":"    public static void printBye() {"},{"lineNumber":142,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":143,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":144,"author":{"gitId":"Cocokkkk"},"content":"        printLine();"},{"lineNumber":145,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":147,"author":{"gitId":"Cocokkkk"},"content":"    public static void printLine() {"},{"lineNumber":148,"author":{"gitId":"Cocokkkk"},"content":"        System.out.println(\"-----------------------------------------\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"},{"lineNumber":151,"author":{"gitId":"Cocokkkk"},"content":""}],"authorContributionMap":{"-":10,"Cocokkkk":141}},{"path":"src/main/java/ip/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"    protected String category;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"    public DukeException(String category) {"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"        this.category \u003d category;"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":9}},{"path":"src/main/java/ip/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":15}},{"path":"src/main/java/ip/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":15}},{"path":"src/main/java/ip/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":15,"author":{"gitId":"Cocokkkk"},"content":"    public String getStatusIcon() {"},{"lineNumber":16,"author":{"gitId":"Cocokkkk"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":17,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":19,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Cocokkkk"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":22,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":23}},{"path":"src/main/java/ip/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"package ip.duke.task;"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"    public Todo(String description) {"},{"lineNumber":6,"author":{"gitId":"Cocokkkk"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Cocokkkk"},"content":""},{"lineNumber":9,"author":{"gitId":"Cocokkkk"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"Cocokkkk"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"Cocokkkk"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Cocokkkk"},"content":"}"}],"authorContributionMap":{"Cocokkkk":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Cocokkkk"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Cocokkkk"},"content":"deadline do homework /by Sunday"},{"lineNumber":3,"author":{"gitId":"Cocokkkk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"Cocokkkk"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Cocokkkk"},"content":"bye"}],"authorContributionMap":{"Cocokkkk":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Cocokkkk"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\ip\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Cocokkkk"},"content":"java -classpath ..\\bin ip.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"Cocokkkk":2}}]
