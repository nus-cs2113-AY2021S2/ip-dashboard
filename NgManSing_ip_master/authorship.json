[{"path":"Records.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"T|1|task1"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"E|0|task3 /at 2020-10-15 1745"}],"authorContributionMap":{"NgManSing":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"Happy is designed to be a personal assistant chatbot in command line interface (CLI)."},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"By using Happy, you can make a list of tasks (todo, deadline and event) and manage your schedule "},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"more easily."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"## Quick start"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"1. Download and install Java 11 or above in your device."},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"2. Get the latest version of Happy from [HERE](https://github.com/NgManSing/ip)."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"3. Run the .jar file in terminal (e.g. command prompt for Windows) to start the program. A command-line interface (CLI) "},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"   should appear quickly after execution."},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"4. Start using the app by entering commands to the user interface. Please refer to the Features section below for "},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"   detailed description of each command."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"## Features"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"### Notes about the command format:"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"- Parameters in brackets () are mandatory while the ones in square brackets [] are optional."},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"- Valid command should be given in the following format: __command + parameter(s)__"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"- Date has to be provided in yyyy-mm-dd format (e.g. 2021-09-03)"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"- Time has to be provided in hhmm 24-hour format (e.g. 2359)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"### `todo` - Adding a todo task"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"To add a todo task to the task list"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"#### Command: `todo (name of the task)`"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"#### Example: `todo task1`"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"\t[T][X] task1"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"Now you have 1 tasks in the list."},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"### `deadline` - Adding a deadline task"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"To add a deadline task to the task list"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"#### Command: `deadline (name of the deadline) /by (date) [time]`"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"#### Example: `deadline task2 /by 2020-09-03 1134`"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"\t[D][X] task2 (by: Sep 3 2020, 11:34am)"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"Now you have 2 tasks in the list."},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"### `event` - Adding an event task"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"To add an event task to the task list"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"#### Command: `event (name of the event) /at (date) [time]`"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"#### Example: `event task3 /at 2020-10-15 1745`"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"\t[E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"Now you have 3 tasks in the list."},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"### `list` - Show the task list"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"To list all tasks stored in the task list"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"#### Command: `list`"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"#### Assume we have the following tasks in the task list:"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"1. [T][X] task1"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"2. [D][X] task2 (by: Jan 1 2020, 11:59pm)"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"3. [E][X] task3 (at: Mar 1 2020)"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"Here is your task List:"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"1. [T][X] task1"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"2. [D][X] task2 (by: Sep 3 2020, 11:34am)"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"3. [E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"### `done` - Mark a task as \"Done\""},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"To mark a task indicated by an index, which could be found with `list` command, as \"Done\"."},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"#### Command: `done (index)`"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"#### Example: `done 1`"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"#### Assume we have the following tasks in the task list:"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"1. [T][X] task1"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"2. [D][X] task2 (by: Jan 1 2020, 11:59pm)"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"3. [E][X] task3 (at: Mar 1 2020)"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"\t[T][Done] task1"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"### `delete` - Delete a task"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"To delete a task indicated by an index, which could be found with `list` command, stored in the task list"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"#### Command: `delete (index)`"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"#### Example: `delete 2`"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"#### Assume we have the following tasks in the task list:"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"1. [T][Done] task1"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"2. [D][X] task2 (by: Sep 3 2020, 11:34am)"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"3. [E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve deleted this task:"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"\t[D][X] task2 (by: Sep 3 2020, 11:34am)"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"Now you have 2 tasks in the list."},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"### `find` - List target tasks based on a given keyword"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"To list all tasks in the task list whose task names contain the keyword."},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"#### Command: `find (keyword)`"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"#### Example: `find 1`"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"#### Assume we have the following tasks in the task list:"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"1. [T][Done] task1"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"2. [E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"Here is your task List with keyword 1:"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"1. [T][Done] task1"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"### `search` - List target tasks based on a given date"},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"To list all tasks in the task list whose dates are the same as the given date."},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"#### Command: `search (date)`"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"#### Example: `search 2020-10-15`"},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"#### Assume we have the following tasks in the task list:"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":"1. [T][Done] task1"},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"2. [E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":129,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"Here is your task with deadline/Due day by 2020-10-15:"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":"1. [E][X] task3 (at: Oct 15 2020, 5:45pm)"},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"### `bye` - Exit the program"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"To exit the program"},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":"#### Command: `bye`"},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":143,"author":{"gitId":"NgManSing"},"content":"## FAQ"},{"lineNumber":144,"author":{"gitId":"NgManSing"},"content":"Question: Will Happy update the changes made in CLI to the local text file?"},{"lineNumber":145,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":146,"author":{"gitId":"NgManSing"},"content":"Answer: Yes, all changes (add / delete / set as Done) will be updated synchronously."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"NgManSing"},"content":"## Command Summary"},{"lineNumber":149,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":150,"author":{"gitId":"NgManSing"},"content":"|Command|Format|"},{"lineNumber":151,"author":{"gitId":"NgManSing"},"content":"|---------|---------|"},{"lineNumber":152,"author":{"gitId":"NgManSing"},"content":"|todo|todo (name of the task)|"},{"lineNumber":153,"author":{"gitId":"NgManSing"},"content":"|deadline|deadline (name of the deadline) /by (date) [time]|"},{"lineNumber":154,"author":{"gitId":"NgManSing"},"content":"|event|event (name of the task) /at (date) [time]|"},{"lineNumber":155,"author":{"gitId":"NgManSing"},"content":"|list|list|"},{"lineNumber":156,"author":{"gitId":"NgManSing"},"content":"|done|done (index)|"},{"lineNumber":157,"author":{"gitId":"NgManSing"},"content":"|delete|delete (index)|"},{"lineNumber":158,"author":{"gitId":"NgManSing"},"content":"|find|find (keyword)|"},{"lineNumber":159,"author":{"gitId":"NgManSing"},"content":"|search|search (date)|"},{"lineNumber":160,"author":{"gitId":"NgManSing"},"content":"|bye|bye|"}],"authorContributionMap":{"NgManSing":145,"-":15}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.command.CommandHandler;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.record.Record;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * Represents a personal assistant chatbot called \"Happy\""},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * (Customized from Duke)"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" *"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * @author NgManSing"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" * @version v1.0"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    public static final String APP_NAME \u003d \"Happy\";"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    private static Record record;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     * Call this method to start the program. This method keeps on looping to ask for user inputs and perform related"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * functionalities until false is returned from {@code command.handleCommand()}. When DukeException is thrown,"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * this method will notify users that their inputted command is invalid."},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @param args Dummy command-line arguments (not used)"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"    public static void main(String[] args) {"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"        initializeDuke();"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        CommandHandler commandHandler \u003d new CommandHandler(record);"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        boolean isContinue \u003d true;"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"        while (isContinue) {"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"                isContinue \u003d commandHandler.handleCommand();"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"            } catch (DukeException e) {"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"                promptUserInputInvalid();"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    private static void initializeDuke() {"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        record \u003d new Record();"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        printWelcomeMsg();"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"    private static void printWelcomeMsg() {"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Hello! I am %s :)\\n\", APP_NAME);"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    private static void promptUserInputInvalid() {"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"I don\u0027t understand your input! Please try again!\");"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"NgManSing":50,"-":2}},{"path":"src/main/java/duke/command/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.exception.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputParser;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputType;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import duke.record.Record;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"import duke.task.Todo;"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code CommandHandler} object. It receives and handles command provided by a user via CLI."},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"public class CommandHandler {"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    private final Record record;"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    private final Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * Constructor of CommandHandler\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code CommandHandler} object by the given {@code Record} object."},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     * @param record A {@code Record} object that stores and manages user\u0027s tasks"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    public CommandHandler(Record record) {"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        this.record \u003d record;"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * Receiving input string, processing it and executing the related command accordingly. It returns {@code ture}"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * normally so that the program continues to process inputs unless the command \"bye\" is inputted."},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * Also, If the command is invalid, exception {@code DukeException} will be thrown."},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * @return boolean value of whether to continue processing user command"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     * @throws DukeException if the command inputted is not valid"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    public boolean handleCommand() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        boolean isLoop \u003d true;"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"        InputParser userInput \u003d getUserInput();"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        switch (userInput.getCommand()) {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        case \"todo\":"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getArguments(), Todo.TASK_TYPE);"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"        case \"deadline\":"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getArguments(), Deadline.TASK_TYPE);"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        case \"event\":"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getArguments(), Event.TASK_TYPE);"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"        case \"list\":"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"            showList(userInput.getArguments());"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"        case \"done\":"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"            processCommand(userInput.getArguments(), CommandType.done);"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        case \"delete\":"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"            processCommand(userInput.getArguments(), CommandType.delete);"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"        case \"find\":"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"            findRecords(userInput.getArguments());"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"        case \"search\":"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"            searchDate(userInput.getArguments());"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"        case \"bye\":"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"            isLoop \u003d isContinueToRun(userInput.getArguments());"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"        default:"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"            throw new DukeException();"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"        return isLoop;"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"    private InputParser getUserInput() {"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"        String userInput \u003d \"dummy\";"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"        if (scan.hasNextLine()) {"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"            userInput \u003d scan.nextLine();"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"        return new InputParser(userInput, InputType.userInput);"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"    private void showList(String[] arguments) {"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 0) {"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Command \\\"list\\\" requires no argument. Please try again!\");"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"        record.showList();"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"    private void processCommand(String[] arguments, CommandType commandType) {"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Command \\\"\" + commandType + \"\\\" requires an integer argument.\");"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"        int targetRecordIndex;"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"            targetRecordIndex \u003d convertStringToIndex(arguments[0]);"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"        } catch (InvalidArgumentException e) {"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(e.getMessage());"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"        executeCommand(commandType, targetRecordIndex);"},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"    private int convertStringToIndex(String targetString) throws InvalidArgumentException {"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"        int targetRecordIndex;"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"            targetRecordIndex \u003d Integer.parseInt(targetString) - 1;"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Provided argument is not an integer.\");"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"        return targetRecordIndex;"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"    private void executeCommand(CommandType commandType, int targetRecordIndex) {"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"        if (commandType.equals(CommandType.delete)) {"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"            record.deleteRecord(targetRecordIndex);"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":"        } else if (commandType.equals(CommandType.done)) {"},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"            record.markAsDone(targetRecordIndex);"},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Unrecognized task type is provided.\");"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":"    private void findRecords(String[] arguments) {"},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":129,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Command \\\"find\\\" requires 1 argument as keyword.\");"},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"        record.findRecords(arguments[0]);"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":135,"author":{"gitId":"NgManSing"},"content":"    private void searchDate(String[] arguments) {"},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Command \\\"search\\\" requires a date argument.\");"},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"            record.searchDate(arguments[0]);"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"        } catch (InvalidArgumentException e) {"},{"lineNumber":143,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(e.getMessage());"},{"lineNumber":144,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":146,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":148,"author":{"gitId":"NgManSing"},"content":"    private boolean isContinueToRun(String[] arguments) {"},{"lineNumber":149,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 0) {"},{"lineNumber":150,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Command \\\"bye\\\" requires no argument.\");"},{"lineNumber":151,"author":{"gitId":"NgManSing"},"content":"            return true;"},{"lineNumber":152,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"NgManSing"},"content":"        printQuitMsg();"},{"lineNumber":154,"author":{"gitId":"NgManSing"},"content":"        return false;"},{"lineNumber":155,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":157,"author":{"gitId":"NgManSing"},"content":"    private void printQuitMsg() {"},{"lineNumber":158,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":159,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":161,"author":{"gitId":"NgManSing"},"content":"    private void printErrorMsg(String message) {"},{"lineNumber":162,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Error: \" + message);"},{"lineNumber":163,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":164}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * Represents the types of command (i.e. delete / done)"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public enum CommandType {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"    delete, done;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":8}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * It is a checked exception that is thrown when the command provided by a user is invalid."},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":7}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * It is a checked exception that is thrown when the argument provided is invalid."},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public class InvalidArgumentException extends Exception {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"    String errorMsg;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"    public InvalidArgumentException(String errorMsg) {"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"        this.errorMsg \u003d errorMsg;"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"        return errorMsg;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":17}},{"path":"src/main/java/duke/input/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * Parser input data from a user via CLI or a local text file (retrieving stored user tasks)."},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * An {@code InputParser} object receives and processes a given raw input string. Useful information"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * (e.g. isDone, arguments, ...) would be extracted and stored in the {@code InputParser} object."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * Methods of returning useful information are also provided."},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"public class InputParser {"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"    private String command;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    private String taskType;"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    private String[] arguments;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code InputParser}\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     * Processes the given {@code rawInput} based on the {@code inputType}."},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * Useful information would be extracted and stored within the {@code InputData} object."},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * @param rawInput  A String of input in standard format based on {@code InputType} (e.g. \"E|1|ola /at 2021-08-31\""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     *                  for recordInput, \"todo job1\" for userInput)"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param inputType Type of Input (i.e. userInput / recordInput)"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public InputParser(String rawInput, InputType inputType) {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        parserInput(rawInput, inputType);"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    public boolean isDone() {"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"        return isDone;"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"    public String getCommand() {"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"        return command;"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    public String getTaskType() {"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        return taskType;"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"    public String[] getArguments() {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        return arguments;"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    private void parserInput(String rawInput, InputType inputType) {"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"        if (inputType.equals(InputType.recordInput)) {"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"            parserInputFromRecord(rawInput);"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"            parserInputFromUser(rawInput);"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"    private void parserInputFromRecord(String rawInput) {"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"        String[] infoFragments \u003d getInfoFragments(rawInput);"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"        if (infoFragments.length !\u003d 3) {"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Record format is invalid.\");"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"        setTaskType(infoFragments[0]);"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"        setDone(infoFragments[1]);"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"        initializeCommandAndArgumentsFromRecord(infoFragments[2]);"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"    private String[] getInfoFragments(String inputString) {"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"        return splitString(inputString, \"\\\\|\");"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"    private void setTaskType(String input) {"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"        taskType \u003d input;"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"    private void setDone(String infoFragment) {"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"        if (infoFragment.equals(\"1\")) {"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"            isDone \u003d true;"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"        } else if (infoFragment.equals(\"0\")) {"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"            isDone \u003d false;"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Done section in the record is not either 1 or 0.\");"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"    private void initializeCommandAndArgumentsFromRecord(String inputString) {"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"        arguments \u003d splitString(inputString, \" \");"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"    private void parserInputFromUser(String rawInput) {"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"        String[] inputFragments \u003d splitString(rawInput, \" \");"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"        command \u003d inputFragments[0];"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"        arguments \u003d Arrays.copyOfRange(inputFragments, 1, inputFragments.length);"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"    private String[] splitString(String inputString, String splitter) {"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"        return inputString.split(splitter);"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":96}},{"path":"src/main/java/duke/input/InputType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * Represents the types of input (i.e. userInput obtained from CLI / recordInput retrieved from local text file)."},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public enum InputType {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"    userInput, recordInput;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":8}},{"path":"src/main/java/duke/record/Record.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.record;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.exception.InvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputParser;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputType;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"import duke.task.Todo;"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"import java.util.Scanner;"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Record} object for managing and storing user\u0027s tasks. A {@code Record} object retrieves user\u0027s"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":" * tasks from a text file (Record.txt) in the local file system. It also manages (adds/deletes) tasks during runtime"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":" * via CLI. Any updates of user\u0027s tasks will be synchronized to the local text file."},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"public class Record {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    private final ArrayList\u003cTask\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"     * Constructor of Record \u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"     * Initializes the Record object by retrieving user\u0027s tasks from the Record.txt (if any). If Record.txt is found,"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * the program will print \"Record found\" and the tasks stored inside the text file will be retrieved and"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * store to the ArrayList {@code records}. Otherwise, the program will print \"No record found\" and the ArrayList"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * {@code records} remains empty."},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    public Record() {"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"        printStartInitializationPrompt();"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        readRecords();"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        printEndInitializationPrompt();"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"    private void printStartInitializationPrompt() {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Initializing \" + Duke.APP_NAME + \"...\");"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    private void printEndInitializationPrompt() {"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Completed!\");"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"-----------------------------\");"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"     * Adds a new task to the {@code Record} object. If the task is added successfully, the program will print"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"     * message to prompt users that the given task has been added. If InvalidArgumentException is thrown, it indicates"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"     * that the given task failed to be added and the related reason of failure will be printed in the CLI."},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"     * @param inputFragments ArrayList of information of a given task (i.e. taskName, isDone indicator (1/0) and date"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"     *                       [based on taskType])"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"     * @param taskType       Type of the given task (i.e. Deadline [D], Event [E] or Todo [T])"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"    public void addRecord(String[] inputFragments, String taskType) {"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"        boolean isAdded \u003d false;"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"            isAdded \u003d addTaskToArrayList(inputFragments, taskType);"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"        } catch (InvalidArgumentException e) {"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(e.getMessage());"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"        if (isAdded) {"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"            int numberOfRecords \u003d records.size();"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"            printSuccessAddedPrompt(numberOfRecords);"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"            saveRecords();"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"    private void printSuccessAddedPrompt(int numberOfRecords) {"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"\\t\" + records.get(numberOfRecords - 1));"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", numberOfRecords);"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"    private boolean addTaskToArrayList(String[] inputFragments, String taskType) throws InvalidArgumentException {"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"        boolean isAdded;"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"        if (taskType.equals(Todo.TASK_TYPE)) {"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"            isAdded \u003d addTodo(inputFragments);"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"        } else if (taskType.equals(Deadline.TASK_TYPE) || taskType.equals(Event.TASK_TYPE)) {"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"            isAdded \u003d addTask(inputFragments, taskType);"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"A non-taskType is passed to addRecord. Program terminated.\");"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"        return isAdded;"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"    private boolean addTodo(String[] detailFragments) throws InvalidArgumentException {"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"        String taskName;"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"        if (detailFragments.length \u003e 0) {"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"            taskName \u003d String.join(\" \", detailFragments);"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"            records.add(new Todo(taskName));"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"The description of a To-do task cannot be empty.\");"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"        return true;"},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"    private boolean addTask(String[] inputFragments, String taskType) throws InvalidArgumentException {"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"        String[] taskNameAndDate \u003d getTaskNameAndDate(inputFragments, taskType);"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"        String taskName \u003d taskNameAndDate[0];"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"        String date \u003d taskNameAndDate[1];"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"        if (taskType.equals(Deadline.TASK_TYPE)) {"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"            records.add(new Deadline(taskName, date));"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"            records.add(new Event(taskName, date));"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"        return true;"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"     * Deletes a record from the {@code Record} object based on the given {@code index}. If the record is deleted"},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"     * successfully, the program will print message to prompt users that the given task has been deleted.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"     * Otherwise, the program will print the reason of failure and given task is failed to be deleted."},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":"     * @param index index of record, which could be found with {@code list} command, that the user wants to delete"},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"    public void deleteRecord(int index) {"},{"lineNumber":129,"author":{"gitId":"NgManSing"},"content":"        if (isIndexOutOfBound(index)) {"},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Index provided is out of bounds.\");"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":"        Task deletedTask \u003d records.remove(index);"},{"lineNumber":135,"author":{"gitId":"NgManSing"},"content":"        printSuccessDeletedPrompt(deletedTask);"},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"        saveRecords();"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"    private void printSuccessDeletedPrompt(Task deletedTask) {"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Got it. I\u0027ve deleted this task:\");"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"\\t\" + deletedTask);"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", records.size());"},{"lineNumber":143,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":145,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"NgManSing"},"content":"     * Mark a record as done based on the given {@code index}. If the record is marked as done successfully, the program"},{"lineNumber":147,"author":{"gitId":"NgManSing"},"content":"     * will print message to prompt users that the given task has been marked as done. Otherwise, the program will print"},{"lineNumber":148,"author":{"gitId":"NgManSing"},"content":"     * the reason of failure that makes the given task fail to be marked."},{"lineNumber":149,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"NgManSing"},"content":"     * @param index index of record, which could be found with {@code list} command, that the user wants to mark as"},{"lineNumber":151,"author":{"gitId":"NgManSing"},"content":"     *              done"},{"lineNumber":152,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"NgManSing"},"content":"    public void markAsDone(int index) {"},{"lineNumber":154,"author":{"gitId":"NgManSing"},"content":"        if (isIndexOutOfBound(index)) {"},{"lineNumber":155,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"Index provided is out of bounds.\");"},{"lineNumber":156,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":157,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"NgManSing"},"content":"        records.get(index).setAsDone();"},{"lineNumber":159,"author":{"gitId":"NgManSing"},"content":"        printSuccessMarkedDonePrompt(index);"},{"lineNumber":160,"author":{"gitId":"NgManSing"},"content":"        saveRecords();"},{"lineNumber":161,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":163,"author":{"gitId":"NgManSing"},"content":"    private void printSuccessMarkedDonePrompt(int index) {"},{"lineNumber":164,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":165,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"\\t\" + records.get(index));"},{"lineNumber":166,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":168,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"NgManSing"},"content":"     * Searches records based on the given {@code date}. If the date of stored tasks match the given {@code date},"},{"lineNumber":170,"author":{"gitId":"NgManSing"},"content":"     * the program will print those tasks in the CLI. If no record contains the given {@code date}, \"Null\""},{"lineNumber":171,"author":{"gitId":"NgManSing"},"content":"     * will be printed."},{"lineNumber":172,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"NgManSing"},"content":"     * @param date A date in format of yyyy-mm-dd"},{"lineNumber":174,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"NgManSing"},"content":"    public void searchDate(String date) throws InvalidArgumentException {"},{"lineNumber":176,"author":{"gitId":"NgManSing"},"content":"        DateTime dateTime;"},{"lineNumber":177,"author":{"gitId":"NgManSing"},"content":"        dateTime \u003d new DateTime(date);"},{"lineNumber":178,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Here is your task with deadline/Due day by %s:\\n\", date);"},{"lineNumber":179,"author":{"gitId":"NgManSing"},"content":"        searchFromTheArrayList(dateTime);"},{"lineNumber":180,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":182,"author":{"gitId":"NgManSing"},"content":"    private void searchFromTheArrayList(DateTime dateTime) {"},{"lineNumber":183,"author":{"gitId":"NgManSing"},"content":"        int counter \u003d 1;"},{"lineNumber":184,"author":{"gitId":"NgManSing"},"content":"        for (Task task : records) {"},{"lineNumber":185,"author":{"gitId":"NgManSing"},"content":"            if (task.getDate() \u003d\u003d null) {"},{"lineNumber":186,"author":{"gitId":"NgManSing"},"content":"                continue;"},{"lineNumber":187,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"NgManSing"},"content":"            if (task.getDate().equals(dateTime.getDate())) {"},{"lineNumber":189,"author":{"gitId":"NgManSing"},"content":"                System.out.println(counter++ + \". \" + task);"},{"lineNumber":190,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"NgManSing"},"content":"        if (counter \u003d\u003d 1) {"},{"lineNumber":193,"author":{"gitId":"NgManSing"},"content":"            printNullMsg();"},{"lineNumber":194,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":197,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"NgManSing"},"content":"     * Finds records based on the given {@code keyword}. If the name of stored tasks contains the given"},{"lineNumber":199,"author":{"gitId":"NgManSing"},"content":"     * {@code keyword}, the program will print those tasks in the CLI. If no record contains the given {@code keyword},"},{"lineNumber":200,"author":{"gitId":"NgManSing"},"content":"     * \"Null\" will be printed."},{"lineNumber":201,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":202,"author":{"gitId":"NgManSing"},"content":"     * @param keyword A target String for searching"},{"lineNumber":203,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"NgManSing"},"content":"    public void findRecords(String keyword) {"},{"lineNumber":205,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Here is your task List with keyword %s:\\n\", keyword);"},{"lineNumber":206,"author":{"gitId":"NgManSing"},"content":"        findFromTheArrayList(keyword);"},{"lineNumber":207,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":209,"author":{"gitId":"NgManSing"},"content":"    private void findFromTheArrayList(String keyword) {"},{"lineNumber":210,"author":{"gitId":"NgManSing"},"content":"        boolean hasRecord \u003d false;"},{"lineNumber":211,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {"},{"lineNumber":212,"author":{"gitId":"NgManSing"},"content":"            if (records.get(i).getTaskName().contains(keyword)) {"},{"lineNumber":213,"author":{"gitId":"NgManSing"},"content":"                System.out.println((i + 1) + \". \" + records.get(i));"},{"lineNumber":214,"author":{"gitId":"NgManSing"},"content":"                hasRecord \u003d true;"},{"lineNumber":215,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"NgManSing"},"content":"        if (!hasRecord) {"},{"lineNumber":218,"author":{"gitId":"NgManSing"},"content":"            printNullMsg();"},{"lineNumber":219,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":222,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"NgManSing"},"content":"     * Prints all stored records inside the {@code Record} object to the CLI. If no task is stored, \"Null\" will be"},{"lineNumber":224,"author":{"gitId":"NgManSing"},"content":"     * printed in the CLI."},{"lineNumber":225,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"NgManSing"},"content":"    public void showList() {"},{"lineNumber":227,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Here is your task List:\");"},{"lineNumber":228,"author":{"gitId":"NgManSing"},"content":"        listAllTasksFromTheArrayList();"},{"lineNumber":229,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":231,"author":{"gitId":"NgManSing"},"content":"    private void listAllTasksFromTheArrayList() {"},{"lineNumber":232,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {"},{"lineNumber":233,"author":{"gitId":"NgManSing"},"content":"            System.out.println((i + 1) + \". \" + records.get(i));"},{"lineNumber":234,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"NgManSing"},"content":"        if (records.size() \u003d\u003d 0) {"},{"lineNumber":236,"author":{"gitId":"NgManSing"},"content":"            printNullMsg();"},{"lineNumber":237,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":240,"author":{"gitId":"NgManSing"},"content":"    private void readRecords() {"},{"lineNumber":241,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":242,"author":{"gitId":"NgManSing"},"content":"            File myObj \u003d new File(\"records.txt\");"},{"lineNumber":243,"author":{"gitId":"NgManSing"},"content":"            Scanner recordReader \u003d new Scanner(myObj);"},{"lineNumber":244,"author":{"gitId":"NgManSing"},"content":"            retrieveRecordFromLocalFile(recordReader);"},{"lineNumber":245,"author":{"gitId":"NgManSing"},"content":"            recordReader.close();"},{"lineNumber":246,"author":{"gitId":"NgManSing"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":247,"author":{"gitId":"NgManSing"},"content":"            printNotFoundMsg();"},{"lineNumber":248,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":249,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"NgManSing"},"content":"        printRecordRetrievedMsg();"},{"lineNumber":251,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":253,"author":{"gitId":"NgManSing"},"content":"    private void retrieveRecordFromLocalFile(Scanner recordReader) {"},{"lineNumber":254,"author":{"gitId":"NgManSing"},"content":"        InputParser data;"},{"lineNumber":255,"author":{"gitId":"NgManSing"},"content":"        while (recordReader.hasNextLine()) {"},{"lineNumber":256,"author":{"gitId":"NgManSing"},"content":"            String record \u003d recordReader.nextLine();"},{"lineNumber":257,"author":{"gitId":"NgManSing"},"content":"            try {"},{"lineNumber":258,"author":{"gitId":"NgManSing"},"content":"                data \u003d new InputParser(record, InputType.recordInput);"},{"lineNumber":259,"author":{"gitId":"NgManSing"},"content":"                addTaskToArrayList(data.getArguments(), data.getTaskType());"},{"lineNumber":260,"author":{"gitId":"NgManSing"},"content":"            } catch (InvalidArgumentException | IllegalArgumentException e) {"},{"lineNumber":261,"author":{"gitId":"NgManSing"},"content":"                printErrorMsg(\"The following record failed to be added: \" + record);"},{"lineNumber":262,"author":{"gitId":"NgManSing"},"content":"                continue;"},{"lineNumber":263,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":264,"author":{"gitId":"NgManSing"},"content":"            if (data.isDone()) {"},{"lineNumber":265,"author":{"gitId":"NgManSing"},"content":"                setAsDone();"},{"lineNumber":266,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":267,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":270,"author":{"gitId":"NgManSing"},"content":"    private void setAsDone() {"},{"lineNumber":271,"author":{"gitId":"NgManSing"},"content":"        int indexOfNewlyAddedTask \u003d records.size() - 1;"},{"lineNumber":272,"author":{"gitId":"NgManSing"},"content":"        records.get(indexOfNewlyAddedTask).setAsDone();"},{"lineNumber":273,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":275,"author":{"gitId":"NgManSing"},"content":"    private String[] getTaskNameAndDate(String[] inputFragments, String taskType) throws InvalidArgumentException {"},{"lineNumber":276,"author":{"gitId":"NgManSing"},"content":"        int keywordIndex \u003d getKeywordIndex(inputFragments, taskType);"},{"lineNumber":277,"author":{"gitId":"NgManSing"},"content":"        if (keywordIndex \u003c 0 || keywordIndex \u003d\u003d inputFragments.length - 1) {"},{"lineNumber":278,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Date is not provided or keyword is not matching\");"},{"lineNumber":279,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":280,"author":{"gitId":"NgManSing"},"content":"        if (keywordIndex \u003d\u003d 0) {"},{"lineNumber":281,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Description cannot be empty!\");"},{"lineNumber":282,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":283,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":284,"author":{"gitId":"NgManSing"},"content":"        String taskName \u003d getTaskName(inputFragments, keywordIndex);"},{"lineNumber":285,"author":{"gitId":"NgManSing"},"content":"        String dateTime \u003d getDateTime(inputFragments, keywordIndex);"},{"lineNumber":286,"author":{"gitId":"NgManSing"},"content":"        return new String[]{taskName, dateTime};"},{"lineNumber":287,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":289,"author":{"gitId":"NgManSing"},"content":"    private int getKeywordIndex(String[] inputFragments, String taskType) {"},{"lineNumber":290,"author":{"gitId":"NgManSing"},"content":"        return Arrays.asList(inputFragments).indexOf(taskType.equals(Deadline.TASK_TYPE) ? \"/by\" : \"/at\");"},{"lineNumber":291,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":293,"author":{"gitId":"NgManSing"},"content":"    private String getTaskName(String[] inputFragments, int keywordIndex) {"},{"lineNumber":294,"author":{"gitId":"NgManSing"},"content":"        StringBuilder taskName \u003d new StringBuilder();"},{"lineNumber":295,"author":{"gitId":"NgManSing"},"content":"        taskName.append(inputFragments[0]);"},{"lineNumber":296,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 1; i \u003c keywordIndex; i++) {"},{"lineNumber":297,"author":{"gitId":"NgManSing"},"content":"            taskName.append(\" \").append(inputFragments[i]);"},{"lineNumber":298,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"NgManSing"},"content":"        return taskName.toString();"},{"lineNumber":300,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":302,"author":{"gitId":"NgManSing"},"content":"    private String getDateTime(String[] inputFragments, int keywordIndex) {"},{"lineNumber":303,"author":{"gitId":"NgManSing"},"content":"        StringBuilder dueDay \u003d new StringBuilder();"},{"lineNumber":304,"author":{"gitId":"NgManSing"},"content":"        dueDay.append(inputFragments[keywordIndex + 1]);"},{"lineNumber":305,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d keywordIndex + 2; i \u003c inputFragments.length; i++) {"},{"lineNumber":306,"author":{"gitId":"NgManSing"},"content":"            dueDay.append(\" \").append(inputFragments[i]);"},{"lineNumber":307,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":308,"author":{"gitId":"NgManSing"},"content":"        return dueDay.toString();"},{"lineNumber":309,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":311,"author":{"gitId":"NgManSing"},"content":"    private void saveRecords() {"},{"lineNumber":312,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":313,"author":{"gitId":"NgManSing"},"content":"            FileWriter save \u003d new FileWriter(\"Records.txt\");"},{"lineNumber":314,"author":{"gitId":"NgManSing"},"content":"            writeRecordToLocalFile(save);"},{"lineNumber":315,"author":{"gitId":"NgManSing"},"content":"            save.close();"},{"lineNumber":316,"author":{"gitId":"NgManSing"},"content":"        } catch (IOException e) {"},{"lineNumber":317,"author":{"gitId":"NgManSing"},"content":"            printErrorMsg(\"File failed to be saved\");"},{"lineNumber":318,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":321,"author":{"gitId":"NgManSing"},"content":"    private void writeRecordToLocalFile(FileWriter save) throws IOException {"},{"lineNumber":322,"author":{"gitId":"NgManSing"},"content":"        for (Task task : records) {"},{"lineNumber":323,"author":{"gitId":"NgManSing"},"content":"            save.write(task.toSave() + \"\\n\");"},{"lineNumber":324,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":325,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":327,"author":{"gitId":"NgManSing"},"content":"    private boolean isIndexOutOfBound(int index) {"},{"lineNumber":328,"author":{"gitId":"NgManSing"},"content":"        return index \u003c 0 || index \u003e\u003d records.size();"},{"lineNumber":329,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":331,"author":{"gitId":"NgManSing"},"content":"    private void printNotFoundMsg() {"},{"lineNumber":332,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"No record found\");"},{"lineNumber":333,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":335,"author":{"gitId":"NgManSing"},"content":"    private void printNullMsg() {"},{"lineNumber":336,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Null\");"},{"lineNumber":337,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":339,"author":{"gitId":"NgManSing"},"content":"    private void printRecordRetrievedMsg() {"},{"lineNumber":340,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Record retrieved\");"},{"lineNumber":341,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":343,"author":{"gitId":"NgManSing"},"content":"    private void printErrorMsg(String message) {"},{"lineNumber":344,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Error: \" + message);"},{"lineNumber":345,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":346}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.exception.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Deadline} object, which is inherited from {@code Task}. An {@code Deadline} object is initialized"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * with a task name and a date. Also, It provides methods for returning the stored date and a string of information of"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" * the object in displaying/saving formats."},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"D\";"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    private final DateTime dueDay;"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Deadline}\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Deadline} object with the given parameters."},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the Deadline Object"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     * @param dueDay   deadline of the Deadline Object"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    public Deadline(String taskName, String dueDay) throws InvalidArgumentException {"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"        this.dueDay \u003d new DateTime(dueDay);"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * Returns the stored date of a {@code Deadline} object."},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     * @return date of the {@code Deadline} object"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        return dueDay.getDate();"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Deadline} object for displaying in Command-Line Interface."},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Deadline} object for CLI display"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (by: \" + dueDay.toString() + \")\";"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Deadline} object for storage in text file."},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Deadline} object for saving"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave() + \" /by \" + dueDay.toSave();"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":61}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.exception.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Event} object, which is inherited from {@code Task}. An {@code Event} object is initialized"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * with a task name and a date. Also, It provides methods for returning the stored date and a string of the information"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * of the object in displaying/saving formats."},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"E\";"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    private final DateTime schedule;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Event}\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Event} object with the given parameters."},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Event} Object"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param schedule date and time (optional) of the {@code Event} Object"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public Event(String taskName, String schedule) throws InvalidArgumentException {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        this.schedule \u003d new DateTime(schedule);"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * Returns the stored date of the {@code Event} object."},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * @return date of the {@code Event} object"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        return schedule.getDate();"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Event} object for displaying in Command-Line Interface."},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Event} object for CLI display"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (at: \" + schedule.toString() + \")\";"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Event} object for storage in text file."},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Event} object for saving"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave() + \" /at \" + schedule.toSave();"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":60}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * It is an abstract super class that represents the core of three subclass ({@code Todo/Deadline/Event})."},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * Class {@code Task} handles task name initialization and setting task to be done. Also, it provides methods to"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * return a string of task information for displaying via CLI or saving in local text file."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"abstract public class Task {"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"    private final String taskName;"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Task}\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Task} object with the given parameter."},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Task} object"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"    public Task(String taskName) {"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"    abstract public LocalDate getDate();"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public void setAsDone() {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    public String getTaskName() {"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"        return taskName;"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of part of information about the {@code Task} object for displaying in Command-Line Interface."},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * (Done: marked as done, X: marked as not done)"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"     * @return A string of part of information about the {@code Task} object for displaying in CLI"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        String mark \u003d isDone ? \"[Done] \" : \"[X] \";"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        return mark + taskName;"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of part of information about the {@code Task} object for storage in text file"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"     * (1: marked as done, 0: marked as not done)"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"     * @return A string of part of information about the {@code Task} object for saving"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"        String mark \u003d isDone ? \"|1|\" : \"|0|\";"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"        return mark + taskName;"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":56}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Todo} object, which is inherited from {@code Task}. A {@code Todo} object is initialized"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * with a task name and provide methods for returning a string of the object in displaying/saving format."},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Todo}\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Todo} object with the given parameter."},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Todo} Object"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    public Todo(String taskName) {"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * Returns null since {@code Todo} object does not have a date/deadline."},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     * @return null"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"        return null;"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Todo} object for displaying in Command-Line Interface."},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Todo} object for CLI display"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString();"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Todo} object for storage in text file."},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Todo} object for saving"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave();"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":52}},{"path":"src/main/java/duke/task/dateTime/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task.dateTime;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.exception.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * Represents dates/times for class {@code Deadline} and {@code Event}. An {@code DateTime} object is initialized"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * with a date and a time. Also, It provides methods for returning the stored date and a string of the date/time"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" * of the object in displaying/saving formats."},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"public class DateTime {"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    LocalDate date;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    int hourIn24HourClock \u003d -1;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    int minuteIn24HourClock;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code DateTime}\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * Initializes the object with the given parameter. The given {@code dateTimeInput} will be processed and key"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * information (i.e. date and time) will be extracted and stored in the object."},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param dateTimeInput date and time [optional] provide by users in the format of \"yyyy-mm-dd [hhmm]\""},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     * @throws InvalidArgumentException If the inputted {@code dateTime} is invalid"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    public DateTime(String dateTimeInput) throws InvalidArgumentException {"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        initializeDateTime(dateTimeInput);"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"        return date;"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"    private void initializeDateTime(String datetime) throws InvalidArgumentException {"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"        String[] dateFragments \u003d datetime.split(\" \");"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"        if (dateFragments.length \u003e 2 || dateFragments.length \u003c\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Invalid format of date and time provided, format: yyyy-mm-dd [hhmm]\");"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"        initializeDate(dateFragments[0]);"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        if (dateFragments.length \u003d\u003d 2) {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"            initializeTime(dateFragments[1]);"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"    private void initializeDate(String date) throws InvalidArgumentException {"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"            this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Invalid date is given, format: yyyy-MM-dd\");"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"    private void initializeTime(String time) throws InvalidArgumentException {"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"        if (time.length() !\u003d 4) {"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Invalid time is given, format: tttt in 24 hour time format\");"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"            hourIn24HourClock \u003d Integer.parseInt(time.substring(0, 2));"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"            minuteIn24HourClock \u003d Integer.parseInt(time.substring(2, 4));"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Invalid time is given (only digits are allowed)\");"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24HourClock \u003c 0 || hourIn24HourClock \u003e 23 || minuteIn24HourClock \u003c 0 || minuteIn24HourClock \u003e 60) {"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"            throw new InvalidArgumentException(\"Invalid time is given (hour/minute is out of bound)\");"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of date and time for displaying in Command-Line Interface"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"     * @return date/time for CLI displaying"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"        builder.append(getDateOfPrintFormat());"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24HourClock \u003e\u003d 0) {"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"            builder.append(\", \").append(getTimeIn12HourClock());"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"        return builder.toString();"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of date and time for storage in text file"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"     * @return date/time for saving"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"        builder.append(getDateOfSaveFormat());"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24HourClock \u003e\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"            builder.append(\" \");"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"            String hourPadding \u003d hourIn24HourClock \u003c 10 ? \"0\" : \"\";"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"            String minutePadding \u003d minuteIn24HourClock \u003c 10 ? \"0\" : \"\";"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"            builder.append(hourPadding).append(hourIn24HourClock).append(minutePadding).append(minuteIn24HourClock);"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"        return builder.toString();"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"    private String getTimeIn12HourClock() {"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24HourClock \u003c 12) {"},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":"            int hourIn12HourClock \u003d hourIn24HourClock \u003d\u003d 0 ? 12 : hourIn24HourClock;"},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"            return hourIn12HourClock + \":\" + (minuteIn24HourClock \u003c 10 ? \"0\" : \"\") + minuteIn24HourClock + \"am\";"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"        int hourIn12HourClock \u003d hourIn24HourClock \u003d\u003d 12 ? hourIn24HourClock : hourIn24HourClock - 12;"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"        return hourIn12HourClock + \":\" + (minuteIn24HourClock \u003c 10 ? \"0\" : \"\") + minuteIn24HourClock + \"pm\";"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"    private String getDateOfPrintFormat() {"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"    private String getDateOfSaveFormat() {"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":119}},{"path":"text-ui-test/Records.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"T|1|Task-1"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"T|0|Task-1"},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"D|0|Task-2 /by 10:00am"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"E|0|Task-3 /at tmr"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"T|0|Task-1"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"D|0|Task-2 /by 10:00am"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"E|0|Task-3 /at tmr"}],"authorContributionMap":{"NgManSing":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"Testing"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"todo Task-1"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"deadline Task-2"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"deadline Task-2 /at 10:00am"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"deadline Task-2 /by 10:00am"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"event Task-3"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"event Task-3 /by tmr"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"event Task-3 /at tmr"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"done 0"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"done"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"list 2"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"delete 10"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"delete 2"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"bye again~"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"bye"}],"authorContributionMap":{"NgManSing":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\Input\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\Record\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"NgManSing":3,"-":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"# run the program, feed commands from INPUT.TXT file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"NgManSing":1,"-":37}}]
