[{"path":"Records.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"D|1|task1 /by 2020-01-01"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"T|0|1"}],"authorContributionMap":{"NgManSing":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"Happy is designed to be a personal assistant chatbot in command line interface (CLI)."},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"By using Happy, you can make a list of tasks (todo, deadline and event) and manage your schedule "},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"more easily."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"## Quick start"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"1. Download and install Java 11 or above in your device."},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"2. Get the latest version of Happy from [HERE](https://github.com/NgManSing/ip)."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"3. Run the .jar file in terminal (e.g. command prompt for Windows) to start the program. A command-line interface (CLI) "},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"   should appear quickly after execution."},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"4. Start using the app by entering commands to the user interface. Please refer to the Features section below for "},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"   detailed description of each command."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"## Features"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"### Notes about the command format:"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"- Parameters in brackets () are mandatory while the ones in square brackets [] are optional."},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"- Valid command should be given in the following format: __command + parameter(s)__"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"- Date has to be provided in yyyy-mm-dd format (e.g. 2021-09-03)"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"- Time has to be provided in hhmm 24-hour format (e.g. 2359)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"### `todo` - Adding a todo task"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"To add a todo task to the task list"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"#### Command: `todo (name of the task)`"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"#### Example: `todo task1`"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"Command entered: todo task1"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    [T][X] task1"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"Now you have 5 tasks in the list."},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"### `deadline` - Adding a deadline task"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"To add a deadline task to the task list"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"#### Command: `deadline (name of the deadline) /by (date) [time]`"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"#### Example: `deadline task1 /by 2020-09-03 1134`"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"Command entered: deadline task1 /by 2020-09-03 1134"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"\t[D][X] task1 (by: Sep 3 2020, 11:34am)"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"Now you have 1 tasks in the list."},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"### `event` - Adding an event task"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"To add an event task to the task list"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"#### Command: `event (name of the event) /at (date) [time]`"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"#### Example: `event task1 /at 2020-09-03 1134`"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"Command entered: event task1 /at 2020-09-03 1134"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"\t[E][X] task1 (at: Sep 3 2020, 11:34am)"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"Now you have 1 tasks in the list."},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"### `list` - Show the task list"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"To list all tasks stored in the task list"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"#### Command: `list`"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"Command entered: list"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"Here is your task List:"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"1. [T][X] task1"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"2. [D][X] task2 (by: Jan 1 2020, 11:59pm)"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"3. [E][X] task3 (at: Mar 1 2020)"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"### `done` - Mark a task as \"Done\""},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"To mark a task indicated by an index, which could be found with `list` command, as \"Done\"."},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"#### Command: `done (index)`"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"#### Example: `done 1`"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"Command entered: done 1"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"\t[T][Done] task1"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"### `delete` - Delete a task"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"To delete a task indicated by an index, which could be found with `list` command, stored in the task list"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"#### Command: `delete (index)`"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"#### Example: `delete 1`"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"Command entered: delete 1"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"Got it. I\u0027ve deleted this task:"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"\t[T][Done] task1"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"Now you have 0 tasks in the list."},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"### `find` - List target tasks based on a given keyword"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"To list all tasks in the task list whose task names contain the keyword."},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"#### Command: `find (keyword)`"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"#### Example: `find happy`"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"Command entered: find happy"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"Here is your task List with keyword happy:"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"1. [T][X] happyhappy"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"2. [E][X] happy night (at: Feb 2 2020, 6:00pm)"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"### `search` - List target tasks based on a given date"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"To list all tasks in the task list whose dates are the same as the given date."},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"#### Command: `search (date)`"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"#### Example: `find 2020-01-01`"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"Command entered: search 2020-01-01"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"Here is your task in 2020-01-01:"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"1. [D][X] task1 (by: Jan 1 2020)"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"### `bye` - Exit the program"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"To exit the program"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"#### Command: `bye`"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":"#### Expected outcome:"},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"Command entered: bye"},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"```"},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"## FAQ"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":"Question: Will Happy update the changes made in CLI to the local text file?"},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"Answer: Yes, all changes (add / delete / set as Done) will be updated synchronously."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"## Command Summary"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"|Command|Format|"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":"|---------|---------|"},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":"|todo|todo (name of the task)|"},{"lineNumber":135,"author":{"gitId":"NgManSing"},"content":"|deadline|deadline (name of the deadline) /by (date) [time]|"},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"|event|event (name of the task) /at (date) [time]|"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"|list|list|"},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":"|done|done (index)|"},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"|delete|delete (index)|"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"|find|find (keyword)|"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"|search|search (date)|"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"|bye|bye|"}],"authorContributionMap":{"NgManSing":127,"-":15}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.command.CommandHandler;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.record.Record;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * Represents a personal assistant chatbot called \"Happy\""},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * (Customized from Duke)"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" *"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * @author NgManSing"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" * @version v1.0"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    public static final String NAME \u003d \"Happy\";"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    private static Record record;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    private static void initializeDuke() {"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"        record \u003d new Record();"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"        printWelcomeMsg();"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * Call this method to start the program. This method keeps on looping to ask for user inputs and perform related"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     * functionalities until false is returned from {@code command.handleCommand()}. When DukeException is thrown,"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     * this method handles it by calling {@code promptUserInputInvalid()} to notify users that their inputted command"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"     * is invalid."},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"     * @param args Dummy command-line arguments (not used)"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    public static void main(String[] args) {"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"        initializeDuke();"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"        CommandHandler commandHandler \u003d new CommandHandler(record);"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"        boolean isContinue \u003d true;"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"        while (isContinue) {"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"                isContinue \u003d commandHandler.handleCommand();"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"            } catch (DukeException e) {"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"                promptUserInputInvalid();"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"    private static void promptUserInputInvalid() {"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"I don\u0027t understand your input! Please try again!\");"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    private static void printWelcomeMsg() {"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Hello! I am %s :)\\n\", NAME);"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"NgManSing":51,"-":2}},{"path":"src/main/java/duke/command/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputDataHandler;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputType;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.record.Record;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code CommandHandler} object. It receives and handles command provided by a user via CLI."},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"public class CommandHandler {"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    private final Record record;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    private final Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * Constructor of CommandHandler\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code CommandHandler} object by the given {@code Record} object."},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param record A {@code Record} object that stores user\u0027s tasks"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public CommandHandler(Record record) {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        this.record \u003d record;"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"     * Receiving a user input string, process it and perform the related command accordingly. It returns {@code ture}"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * normally so that the program continues to process user inputs unless the command \"bye\" is inputted."},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * (i.e. {@code false} is returned when the user wants to exit the program) Also, If the command is invalid,"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * exception {@code DukeException} will be thrown."},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * @return boolean value of whether to continue processing user command"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     * @throws DukeException if the command inputted is not valid"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    public boolean handleCommand() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        boolean isLoop \u003d true;"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"        InputDataHandler userInput \u003d getUserInput();"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        switch (userInput.getFirstArgument()) {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        case \"todo\":"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getOtherArguments(), Todo.TASK_TYPE);"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"        case \"deadline\":"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getOtherArguments(), Deadline.TASK_TYPE);"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"        case \"event\":"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"            record.addRecord(userInput.getOtherArguments(), Event.TASK_TYPE);"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"        case \"list\":"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"            showList(userInput.getOtherArguments());"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"        case \"done\":"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"            processCommand(userInput.getOtherArguments(), CommandType.done);"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        case \"delete\":"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"            processCommand(userInput.getOtherArguments(), CommandType.delete);"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"        case \"find\":"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"            findRecords(userInput.getOtherArguments());"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"        case \"search\":"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"            searchDate(userInput.getOtherArguments());"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"        case \"bye\":"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"            isLoop \u003d isEndProgram(userInput.getOtherArguments());"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"        default:"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"            throw new DukeException();"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"        return isLoop;"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"    private void findRecords(String[] arguments) {"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Command \\\"find\\\" requires 1 argument as keyword. Please try again!\");"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"        record.findRecords(arguments[0]);"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"    private void searchDate(String[] arguments) {"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"            System.out.printf(\"Command \\\"%s\\\" requires a date argument. Please try again!\\n\", \"search\");"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"        record.searchDate(arguments[0]);"},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"    private void processCommand(String[] arguments, CommandType commandType) {"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"            System.out.printf(\"Command \\\"%s\\\" requires an integer argument. Please try again!\\n\", commandType);"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"        int targetRecordIndex \u003d -1;"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"        boolean isArgumentInteger \u003d true;"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"            targetRecordIndex \u003d Integer.parseInt(arguments[0]) - 1;"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"            isArgumentInteger \u003d false;"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"        if (isArgumentInteger) {"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"            switch (commandType) {"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"            case delete:"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"                record.deleteRecord(targetRecordIndex);"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"                break;"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"            case done:"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"                record.markAsDone(targetRecordIndex);"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"                break;"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"            default:"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"                throw new IllegalArgumentException(\"Invalid commandType! Program terminated.\");"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"            System.out.printf(\"Command \\\"%s\\\" only requires an integer argument. Please try again!\\n\", commandType);"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"    private void showList(String[] arguments) {"},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Command \\\"list\\\" requires no argument. Please try again!\");"},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":"        record.showList();"},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"    private InputDataHandler getUserInput() {"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":"        String userInput \u003d \"dummy\";"},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"        if (scan.hasNextLine()) {"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":"            userInput \u003d scan.nextLine();"},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Command entered: \" + userInput);"},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"        return new InputDataHandler(userInput, InputType.userInput);"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"    private boolean isEndProgram(String[] arguments) {"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"        if (arguments.length !\u003d 0) {"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Command \\\"bye\\\" requires no argument. Please try again!\");"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"            return true;"},{"lineNumber":143,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":145,"author":{"gitId":"NgManSing"},"content":"        quitProgram();"},{"lineNumber":146,"author":{"gitId":"NgManSing"},"content":"        return false;"},{"lineNumber":147,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":149,"author":{"gitId":"NgManSing"},"content":"    private void quitProgram() {"},{"lineNumber":150,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":151,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":152}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * Represents the types of command (i.e. delete / done)"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public enum CommandType {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"    delete, done;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":8}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * It is a checked exception that is thrown when the command provided by a user is invalid."},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":7}},{"path":"src/main/java/duke/input/InputDataHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * Wrapper class of input data from a user via CLI or a local text file (retriving stored user tasks)."},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * An {@code InputDataHandler} object receives and processes a given raw input string. Useful information"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * (e.g. isDone, first argument, ...) would be extracted and stored in the {@code InputDataHandler} object."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * Methods of returning stored useful information is also provided."},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"public class InputDataHandler {"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"    private String first;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    private String[] arguments;"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"     * Constructor of InputDataHandler\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     * Processes the given {@code rawInput} based on the {@code inputType} by calling private method"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     * {@code processInput()}. Useful information would be extracted and stored within the {@code InputData} object."},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * @param rawInput A String of input in standard format based on {@code InputType} (e.g. \"E|1|ola /at 2021-08-31\""},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     *                 for recordInput, \"todo job1\" for userInput)"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @param inputType Type of Input (i.e. userInput / recordInput)"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"    public InputDataHandler(String rawInput, InputType inputType) {"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"        processInput(rawInput, inputType);"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    public boolean isDone() {"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"        return isDone;"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"    public String getFirstArgument() {"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"        return first;"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"    public String[] getOtherArguments() {"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        return arguments;"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    private void processInput(String rawInput, InputType inputType) {"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        String[] inputFragments;"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        if (inputType.equals(InputType.recordInput)) {"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"            inputFragments \u003d rawInput.split(\"\\\\|\");"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"            isDone \u003d inputFragments[1].equals(\"1\");"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"            arguments \u003d inputFragments[2].split(\" \");"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"            inputFragments \u003d rawInput.split(\" \");"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"            arguments \u003d Arrays.copyOfRange(inputFragments, 1, inputFragments.length);"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"        first \u003d inputFragments[0];"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":53}},{"path":"src/main/java/duke/input/InputType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":" * Represents the types of input (i.e. userInput obtained from CLI / recordInput retrieved from local text file)."},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"public enum InputType {"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"    userInput, recordInput;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":8}},{"path":"src/main/java/duke/record/Record.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.record;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputDataHandler;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import duke.input.InputType;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"import java.io.FileWriter;"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Record} object for managing and storing user\u0027s tasks. A {@code Record} object retrieves user\u0027s"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":" * tasks from a text file (Record.txt) in the local file system. It also manages (adds/deletes) tasks during runtime"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":" * via CLI. Any updates of user\u0027s tasks will be synchronized to the local text file."},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"public class Record {"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    private final ArrayList\u003cTask\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"     * Constructor of Record \u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"     * Initializes the Record object by retrieving user\u0027s tasks from the Record.txt (if any). If Record.txt is found,"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"     * the program will print \"Record found\" and the tasks stored inside the text file will be retrieved and"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * store to the ArrayList {@code records}. Otherwise, the program will print \"No record found\" and the ArrayList"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * {@code records} remains empty."},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"    public Record() {"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"        String line \u003d \"-----------------------------\";"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Initializing \" + Duke.NAME + \"...\");"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        readRecords();"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Completed!\");"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        System.out.println(line);"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     * Adds a new record to the {@code Record} object. If the record is added successfully, the program will print"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     * message to prompt users that the given task has been added. If IllegalArgumentException is thrown, it indicates"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"     * that the given task failed to be added and the related reason of failure will be printed in the CLI."},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"     * @param detailFragments ArrayList of information of a given task (i.e. taskName, isDone indicator (1/0) and date"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"     *                        [based on taskType])"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"     * @param taskType        Type of the given task (i.e. Deadline [D], Event [E] or Todo [T])"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    public void addRecord(String[] detailFragments, String taskType) {"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"        boolean isAdded \u003d false;"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"            isAdded \u003d addRecordToCollection(detailFragments, taskType);"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"        if (isAdded) {"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"            int numberOfRecords \u003d records.size();"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"\\t\" + records.get(numberOfRecords - 1));"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":"            System.out.printf(\"Now you have %d tasks in the list.\\n\", numberOfRecords);"},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"            saveRecords();"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"     * Deletes a record from the {@code Record} object based on the given {@code index}. If the record is deleted"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"     * successfully, the program will print message to prompt users that the given task has been deleted.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"     * Otherwise, the program will print the reason of failure and given task is failed to be deleted."},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"     * @param index index of record, which could be found with {@code list} command, that the user wants to delete"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"    public void deleteRecord(int index) {"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"        if (isIndexOutOfBound(index)) {"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Invalid input! (Index cannot be out of bounds)\");"},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Got it. I\u0027ve deleted this task:\");"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"\\t\" + records.remove(index));"},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", records.size());"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"        saveRecords();"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"     * Mark a record as done based on the given {@code index}. If the record is marked as done successfully, the program"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"     * will print message to prompt users that the given task has been marked as done. Otherwise, the program will print"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":"     * the reason of failure that makes the given task fail to be marked."},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"     * @param index index of record, which could be found with {@code list} command, that the user wants to mark as"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"     *              done"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"    public void markAsDone(int index) {"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"        if (isIndexOutOfBound(index)) {"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Invalid input! (Index cannot be out of bounds)\");"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"        records.get(index).setAsDone();"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"\\t\" + records.get(index));"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"        saveRecords();"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"     * Searches records based on the given {@code date}. If the dates of stored tasks match the given {@code date},"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"     * the program will print those tasks in the CLI. If no record contains the given {@code date}, \"Null\""},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"     * will be printed in the CLI."},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"     * @param date A date in format of yyyy-mm-dd"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"    public void searchDate(String date) {"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"        DateTime dateTime;"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"        int counter \u003d 1;"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"            dateTime \u003d new DateTime(date);"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Here is your task in %s:\\n\", date);"},{"lineNumber":123,"author":{"gitId":"NgManSing"},"content":"        for (Task task : records) {"},{"lineNumber":124,"author":{"gitId":"NgManSing"},"content":"            if(task.getDate() \u003d\u003d null) continue;"},{"lineNumber":125,"author":{"gitId":"NgManSing"},"content":"            if (task.getDate().equals(dateTime.getDate())) {"},{"lineNumber":126,"author":{"gitId":"NgManSing"},"content":"                System.out.println(counter++ + \". \" + task);"},{"lineNumber":127,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"NgManSing"},"content":"        if (counter \u003d\u003d 1){"},{"lineNumber":130,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Null\");"},{"lineNumber":131,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":134,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"NgManSing"},"content":"     * Finds records based on the given {@code keyword}. If the names of stored tasks contains the given"},{"lineNumber":136,"author":{"gitId":"NgManSing"},"content":"     * {@code keyword}, the program will print those tasks in the CLI. If no record contains the given {@code keyword},"},{"lineNumber":137,"author":{"gitId":"NgManSing"},"content":"     * \"Null\" will be printed in the CLI."},{"lineNumber":138,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"NgManSing"},"content":"     * @param keyword A target String for searching"},{"lineNumber":140,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"NgManSing"},"content":"    public void findRecords(String keyword) {"},{"lineNumber":142,"author":{"gitId":"NgManSing"},"content":"        boolean hasRecord \u003d false;"},{"lineNumber":143,"author":{"gitId":"NgManSing"},"content":"        System.out.printf(\"Here is your task List with keyword %s:\\n\", keyword);"},{"lineNumber":144,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {"},{"lineNumber":145,"author":{"gitId":"NgManSing"},"content":"            if (records.get(i).getTaskName().contains(keyword)) {"},{"lineNumber":146,"author":{"gitId":"NgManSing"},"content":"                System.out.println((i + 1) + \". \" + records.get(i));"},{"lineNumber":147,"author":{"gitId":"NgManSing"},"content":"                hasRecord \u003d true;"},{"lineNumber":148,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"NgManSing"},"content":"        if (!hasRecord) {"},{"lineNumber":151,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Null\");"},{"lineNumber":152,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":155,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"NgManSing"},"content":"     * Prints all stored records inside the {@code Record} object to the CLI. If no task is stored, \"Null\" will be"},{"lineNumber":157,"author":{"gitId":"NgManSing"},"content":"     * printed in the CLI."},{"lineNumber":158,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"NgManSing"},"content":"    public void showList() {"},{"lineNumber":160,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Here is your task List:\");"},{"lineNumber":161,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {"},{"lineNumber":162,"author":{"gitId":"NgManSing"},"content":"            System.out.println((i + 1) + \". \" + records.get(i));"},{"lineNumber":163,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"NgManSing"},"content":"        if (records.size() \u003d\u003d 0) {"},{"lineNumber":165,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Null\");"},{"lineNumber":166,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":169,"author":{"gitId":"NgManSing"},"content":"    private void readRecords() {"},{"lineNumber":170,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"NgManSing"},"content":"            File myObj \u003d new File(\"records.txt\");"},{"lineNumber":172,"author":{"gitId":"NgManSing"},"content":"            Scanner recordReader \u003d new Scanner(myObj);"},{"lineNumber":173,"author":{"gitId":"NgManSing"},"content":"            while (recordReader.hasNextLine()) {"},{"lineNumber":174,"author":{"gitId":"NgManSing"},"content":"                InputDataHandler data \u003d new InputDataHandler(recordReader.nextLine(), InputType.recordInput);"},{"lineNumber":175,"author":{"gitId":"NgManSing"},"content":"                addRecordToCollection(data.getOtherArguments(), data.getFirstArgument());"},{"lineNumber":176,"author":{"gitId":"NgManSing"},"content":"                if (data.isDone()) {"},{"lineNumber":177,"author":{"gitId":"NgManSing"},"content":"                    records.get(records.size() - 1).setAsDone();"},{"lineNumber":178,"author":{"gitId":"NgManSing"},"content":"                }"},{"lineNumber":179,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":180,"author":{"gitId":"NgManSing"},"content":"            recordReader.close();"},{"lineNumber":181,"author":{"gitId":"NgManSing"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":182,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"No record found\");"},{"lineNumber":183,"author":{"gitId":"NgManSing"},"content":"            return;"},{"lineNumber":184,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"Record found\");"},{"lineNumber":186,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":188,"author":{"gitId":"NgManSing"},"content":"    private boolean addRecordToCollection(String[] detailFragments, String taskType) {"},{"lineNumber":189,"author":{"gitId":"NgManSing"},"content":"        String date;"},{"lineNumber":190,"author":{"gitId":"NgManSing"},"content":"        String taskName;"},{"lineNumber":191,"author":{"gitId":"NgManSing"},"content":"        String[] details;"},{"lineNumber":192,"author":{"gitId":"NgManSing"},"content":"        boolean isAdded \u003d false;"},{"lineNumber":193,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":194,"author":{"gitId":"NgManSing"},"content":"        switch (taskType) {"},{"lineNumber":195,"author":{"gitId":"NgManSing"},"content":"        case Todo.TASK_TYPE:"},{"lineNumber":196,"author":{"gitId":"NgManSing"},"content":"            if (detailFragments.length \u003e 0) {"},{"lineNumber":197,"author":{"gitId":"NgManSing"},"content":"                taskName \u003d String.join(\" \", detailFragments);"},{"lineNumber":198,"author":{"gitId":"NgManSing"},"content":"                records.add(new Todo(taskName));"},{"lineNumber":199,"author":{"gitId":"NgManSing"},"content":"                isAdded \u003d true;"},{"lineNumber":200,"author":{"gitId":"NgManSing"},"content":"            } else {"},{"lineNumber":201,"author":{"gitId":"NgManSing"},"content":"                showInvalidEmptyDescription();"},{"lineNumber":202,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":204,"author":{"gitId":"NgManSing"},"content":"        case Deadline.TASK_TYPE:"},{"lineNumber":205,"author":{"gitId":"NgManSing"},"content":"            details \u003d getTaskNameAndDate(detailFragments, taskType);"},{"lineNumber":206,"author":{"gitId":"NgManSing"},"content":"            if (details !\u003d null) {"},{"lineNumber":207,"author":{"gitId":"NgManSing"},"content":"                taskName \u003d details[0];"},{"lineNumber":208,"author":{"gitId":"NgManSing"},"content":"                date \u003d details[1];"},{"lineNumber":209,"author":{"gitId":"NgManSing"},"content":"                records.add(new Deadline(taskName, date));"},{"lineNumber":210,"author":{"gitId":"NgManSing"},"content":"                isAdded \u003d true;"},{"lineNumber":211,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":213,"author":{"gitId":"NgManSing"},"content":"        case Event.TASK_TYPE:"},{"lineNumber":214,"author":{"gitId":"NgManSing"},"content":"            details \u003d getTaskNameAndDate(detailFragments, taskType);"},{"lineNumber":215,"author":{"gitId":"NgManSing"},"content":"            if (details !\u003d null) {"},{"lineNumber":216,"author":{"gitId":"NgManSing"},"content":"                taskName \u003d details[0];"},{"lineNumber":217,"author":{"gitId":"NgManSing"},"content":"                date \u003d details[1];"},{"lineNumber":218,"author":{"gitId":"NgManSing"},"content":"                records.add(new Event(taskName, date));"},{"lineNumber":219,"author":{"gitId":"NgManSing"},"content":"                isAdded \u003d true;"},{"lineNumber":220,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"NgManSing"},"content":"            break;"},{"lineNumber":222,"author":{"gitId":"NgManSing"},"content":"        default:"},{"lineNumber":223,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"A non-taskType is passed to addRecord. Program terminated.\");"},{"lineNumber":224,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"NgManSing"},"content":"        return isAdded;"},{"lineNumber":226,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":228,"author":{"gitId":"NgManSing"},"content":"    private String[] getTaskNameAndDate(String[] detailFragments, String taskType) {"},{"lineNumber":229,"author":{"gitId":"NgManSing"},"content":"        int keywordIndex \u003d Arrays.asList(detailFragments).indexOf(taskType.equals(Deadline.TASK_TYPE) ? \"/by\" : \"/at\");"},{"lineNumber":230,"author":{"gitId":"NgManSing"},"content":"        if (keywordIndex \u003c 0 || keywordIndex \u003d\u003d detailFragments.length - 1) {"},{"lineNumber":231,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"Invalid argument! It may be resulted from:\");"},{"lineNumber":232,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"1. No date/time provided\");"},{"lineNumber":233,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"2. keywords not matching\");"},{"lineNumber":234,"author":{"gitId":"NgManSing"},"content":"            return null;"},{"lineNumber":235,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"NgManSing"},"content":"        if (keywordIndex \u003d\u003d 0) {"},{"lineNumber":237,"author":{"gitId":"NgManSing"},"content":"            showInvalidEmptyDescription();"},{"lineNumber":238,"author":{"gitId":"NgManSing"},"content":"            return null;"},{"lineNumber":239,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"NgManSing"},"content":"        StringBuilder taskName \u003d new StringBuilder();"},{"lineNumber":241,"author":{"gitId":"NgManSing"},"content":"        StringBuilder dueDay \u003d new StringBuilder();"},{"lineNumber":242,"author":{"gitId":"NgManSing"},"content":"        taskName.append(detailFragments[0]);"},{"lineNumber":243,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d 1; i \u003c keywordIndex; i++) {"},{"lineNumber":244,"author":{"gitId":"NgManSing"},"content":"            taskName.append(\" \").append(detailFragments[i]);"},{"lineNumber":245,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"NgManSing"},"content":"        dueDay.append(detailFragments[keywordIndex + 1]);"},{"lineNumber":247,"author":{"gitId":"NgManSing"},"content":"        for (int i \u003d keywordIndex + 2; i \u003c detailFragments.length; i++) {"},{"lineNumber":248,"author":{"gitId":"NgManSing"},"content":"            dueDay.append(\" \").append(detailFragments[i]);"},{"lineNumber":249,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"NgManSing"},"content":"        return new String[]{taskName.toString(), dueDay.toString()};"},{"lineNumber":251,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":253,"author":{"gitId":"NgManSing"},"content":"    private void saveRecords() {"},{"lineNumber":254,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":255,"author":{"gitId":"NgManSing"},"content":"            FileWriter save \u003d new FileWriter(\"Records.txt\");"},{"lineNumber":256,"author":{"gitId":"NgManSing"},"content":"            for (Task task : records) {"},{"lineNumber":257,"author":{"gitId":"NgManSing"},"content":"                save.write(task.toSave() + \"\\n\");"},{"lineNumber":258,"author":{"gitId":"NgManSing"},"content":"            }"},{"lineNumber":259,"author":{"gitId":"NgManSing"},"content":"            save.close();"},{"lineNumber":260,"author":{"gitId":"NgManSing"},"content":"        } catch (IOException e) {"},{"lineNumber":261,"author":{"gitId":"NgManSing"},"content":"            System.out.println(\"IOException - File failed to be saved\");"},{"lineNumber":262,"author":{"gitId":"NgManSing"},"content":"            e.printStackTrace();"},{"lineNumber":263,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":266,"author":{"gitId":"NgManSing"},"content":"    private boolean isIndexOutOfBound(int index) {"},{"lineNumber":267,"author":{"gitId":"NgManSing"},"content":"        return index \u003c 0 || index \u003e\u003d records.size();"},{"lineNumber":268,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":270,"author":{"gitId":"NgManSing"},"content":"    private void showInvalidEmptyDescription() {"},{"lineNumber":271,"author":{"gitId":"NgManSing"},"content":"        System.out.println(\"The description of a task cannot be empty.\");"},{"lineNumber":272,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":273}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Deadline} object, which is inherited from {@code Task}. An {@code Deadline} object is initialized"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * with a task name and a date. Also, It provides methods for returning the stored date and a string of information of"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" * the object in displaying/saving formats."},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"D\";"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    private final DateTime dueDay;"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Deadline}\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Deadline} object with the given parameters."},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the Deadline Object"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * @param dueDay   deadline of the Deadline Object"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public Deadline(String taskName, String dueDay) {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"        this.dueDay \u003d new DateTime(dueDay);"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     * Returns the stored date of a {@code Deadline} object."},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * @return date of the {@code Deadline} object"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        return dueDay.getDate();"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Deadline} object for displaying in Command-Line Interface."},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Deadline} object for CLI display"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (by: \" + dueDay.toString() + \")\";"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Deadline} object for storage in text file."},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Deadline} object for saving"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave() + \" /by \" + dueDay.toSave();"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":60}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import duke.task.dateTime.DateTime;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Event} object, which is inherited from {@code Task}. An {@code Event} object is initialized"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * with a task name and a date. Also, It provides methods for returning the stored date and a string of the information"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * of the object in displaying/saving formats."},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"E\";"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"    private final DateTime schedule;"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Event}\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Event} object with the given parameters."},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Event} Object"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @param schedule date and time (optional) of the {@code Event} Object"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"    public Event(String taskName, String schedule) {"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        this.schedule \u003d new DateTime(schedule);"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"     * Returns the stored date of the {@code Event} object."},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"     * @return date of the {@code Event} object"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"        return schedule.getDate();"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Event} object for displaying in Command-Line Interface."},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Event} object for CLI display"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString() + \" (at: \" + schedule.toString() + \")\";"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Event} object for storage in text file."},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Event} object for saving"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave() + \" /at \" + schedule.toSave();"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":59}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * It is an abstract super class that represents the core of three subclass ({@code Todo/Deadline/Event})."},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * Class {@code Task} handles task name initialization and setting task to be done. Also, it provides methods to"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * return a string of task information for displaying via CLI or saving in local text file."},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"abstract public class Task {"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"    private final String taskName;"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Task}\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Task} object with the given parameter."},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Task} object"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"    public Task(String taskName) {"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"    abstract public LocalDate getDate();"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"    public void setAsDone() {"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"    public String getTaskName() {"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"        return taskName;"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of part of information about the {@code Task} object for displaying in Command-Line Interface."},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * (Done: marked as done, X: marked as not done)"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"     * @return A string of part of information about the {@code Task} object for displaying in CLI"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        String mark \u003d isDone ? \"[Done] \" : \"[X] \";"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"        return mark + taskName;"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of part of information about the {@code Task} object for storage in text file"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"     * (1: marked as done, 0: marked as not done)"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"     * @return A string of part of information about the {@code Task} object for saving"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"        String mark \u003d isDone ? \"|1|\" : \"|0|\";"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"        return mark + taskName;"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":56}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":" * Represents a {@code Todo} object, which is inherited from {@code Task}. A {@code Todo} object is initialized"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":" * with a task name and provide methods for returning a string of the object in displaying/saving format."},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"    public static final String TASK_TYPE \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code Todo}\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"     * Initializes the {@code Todo} object with the given parameter."},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"     * @param taskName name of the {@code Todo} Object"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"    public Todo(String taskName) {"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"        super(taskName);"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     * Returns null since {@code Todo} object does not have a date/deadline."},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"     * @return null"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"        return null;"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Todo} object for displaying in Command-Line Interface."},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Todo} object for CLI display"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":"        return \"[\" + TASK_TYPE + \"]\" + super.toString();"},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of all information about the {@code Todo} object for storage in text file."},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"     * @return A string of information about the {@code Todo} object for saving"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        return TASK_TYPE + super.toSave();"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":52}},{"path":"src/main/java/duke/task/dateTime/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"package duke.task.dateTime;"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":" * Represents dates/times for class {@code Deadline} and {@code Event}. An {@code DateTime} object is initialized"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":" * with a date and a time. Also, It provides methods for returning the stored date and a string of the date/time"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":" * of the object in displaying/saving formats."},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":" */"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"public class DateTime {"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"    LocalDate date;"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"    int hourIn24 \u003d -1;"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"    int minuteIn24;"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"     * Constructor of {@code DateTime}\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"     * Initializes the object with the given parameter. The given {@code dateTimeInput} will be processed and key"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"     * information (i.e. date and time) will be extracted and stored in the object."},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"     * @param dateTimeInput date and time [optional] provide by users in the format of \"yyyy-mm-dd [hhmm]\""},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"     * @throws IllegalArgumentException If the inputted {@code dateTime} is invalid"},{"lineNumber":24,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"NgManSing"},"content":"    public DateTime(String dateTimeInput) throws IllegalArgumentException {"},{"lineNumber":26,"author":{"gitId":"NgManSing"},"content":"        initializeDateTime(dateTimeInput);"},{"lineNumber":27,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":29,"author":{"gitId":"NgManSing"},"content":"    private void initializeDateTime(String datetime) throws IllegalArgumentException {"},{"lineNumber":30,"author":{"gitId":"NgManSing"},"content":"        String[] dateFragments \u003d datetime.split(\" \");"},{"lineNumber":31,"author":{"gitId":"NgManSing"},"content":"        if (dateFragments.length \u003e 2) {"},{"lineNumber":32,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Invalid format of date and time provided, format: yyyy-mm-dd [hhmm]\");"},{"lineNumber":33,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":35,"author":{"gitId":"NgManSing"},"content":"        initializeDate(dateFragments[0]);"},{"lineNumber":36,"author":{"gitId":"NgManSing"},"content":"        if (dateFragments.length \u003d\u003d 2) {"},{"lineNumber":37,"author":{"gitId":"NgManSing"},"content":"            initializeTime(dateFragments[1]);"},{"lineNumber":38,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":41,"author":{"gitId":"NgManSing"},"content":"    private void initializeDate(String date) throws IllegalArgumentException {"},{"lineNumber":42,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"NgManSing"},"content":"            this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":44,"author":{"gitId":"NgManSing"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":45,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Invalid date is given, format: yyyy-MM-dd\");"},{"lineNumber":46,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":49,"author":{"gitId":"NgManSing"},"content":"    private void initializeTime(String time) throws IllegalArgumentException {"},{"lineNumber":50,"author":{"gitId":"NgManSing"},"content":"        if (time.length() !\u003d 4) {"},{"lineNumber":51,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Invalid time is given, format: tttt in 24 hour time format\");"},{"lineNumber":52,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"NgManSing"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"NgManSing"},"content":"            hourIn24 \u003d Integer.parseInt(time.substring(0, 2));"},{"lineNumber":55,"author":{"gitId":"NgManSing"},"content":"            minuteIn24 \u003d Integer.parseInt(time.substring(2, 4));"},{"lineNumber":56,"author":{"gitId":"NgManSing"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":57,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Invalid time is given (only digits are allowed)\");"},{"lineNumber":58,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24 \u003c 0 || hourIn24 \u003e 23 || minuteIn24 \u003c 0 || minuteIn24 \u003e 60) {"},{"lineNumber":60,"author":{"gitId":"NgManSing"},"content":"            throw new IllegalArgumentException(\"Invalid time is given (either hour/minute is out of bound)\");"},{"lineNumber":61,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":63,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":65,"author":{"gitId":"NgManSing"},"content":"    private String convertTimeFormat(int hour, int minute) {"},{"lineNumber":66,"author":{"gitId":"NgManSing"},"content":"        boolean isMorning \u003d true;"},{"lineNumber":67,"author":{"gitId":"NgManSing"},"content":"        int hourInNewFormat;"},{"lineNumber":68,"author":{"gitId":"NgManSing"},"content":"        if (hour \u003e\u003d 12) {"},{"lineNumber":69,"author":{"gitId":"NgManSing"},"content":"            isMorning \u003d false;"},{"lineNumber":70,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"NgManSing"},"content":"        if (isMorning) {"},{"lineNumber":72,"author":{"gitId":"NgManSing"},"content":"            hourInNewFormat \u003d hour \u003d\u003d 0 ? 12 : hour;"},{"lineNumber":73,"author":{"gitId":"NgManSing"},"content":"            return hourInNewFormat + \":\" + (minute \u003c 10 ? \"0\" : \"\") + minute + \"am\";"},{"lineNumber":74,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"NgManSing"},"content":"        hourInNewFormat \u003d hour \u003d\u003d 12 ? hour : hour - 12;"},{"lineNumber":76,"author":{"gitId":"NgManSing"},"content":"        return hourInNewFormat + \":\" + (minute \u003c 10 ? \"0\" : \"\") + minute + \"pm\";"},{"lineNumber":77,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":79,"author":{"gitId":"NgManSing"},"content":"    public LocalDate getDate() {"},{"lineNumber":80,"author":{"gitId":"NgManSing"},"content":"        return date;"},{"lineNumber":81,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":83,"author":{"gitId":"NgManSing"},"content":"    private String getDateToPrintFormat() {"},{"lineNumber":84,"author":{"gitId":"NgManSing"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":85,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":87,"author":{"gitId":"NgManSing"},"content":"    private String getDateToSaveFormat() {"},{"lineNumber":88,"author":{"gitId":"NgManSing"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":89,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":91,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of date and time for displaying in Command-Line Interface"},{"lineNumber":93,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"NgManSing"},"content":"     * @return date/time for CLI displaying"},{"lineNumber":95,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"NgManSing"},"content":"    public String toString() {"},{"lineNumber":97,"author":{"gitId":"NgManSing"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitId":"NgManSing"},"content":"        builder.append(getDateToPrintFormat());"},{"lineNumber":99,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24 \u003e\u003d 0) {"},{"lineNumber":100,"author":{"gitId":"NgManSing"},"content":"            builder.append(\", \").append(convertTimeFormat(hourIn24, minuteIn24));"},{"lineNumber":101,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"NgManSing"},"content":"        return builder.toString();"},{"lineNumber":103,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"NgManSing"},"content":""},{"lineNumber":105,"author":{"gitId":"NgManSing"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"NgManSing"},"content":"     * Returns a string of date and time for storage in text file"},{"lineNumber":107,"author":{"gitId":"NgManSing"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"NgManSing"},"content":"     * @return date/time for saving"},{"lineNumber":109,"author":{"gitId":"NgManSing"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"NgManSing"},"content":"    public String toSave() {"},{"lineNumber":111,"author":{"gitId":"NgManSing"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":112,"author":{"gitId":"NgManSing"},"content":"        builder.append(getDateToSaveFormat());"},{"lineNumber":113,"author":{"gitId":"NgManSing"},"content":"        if (hourIn24 \u003e\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"NgManSing"},"content":"            builder.append(\" \");"},{"lineNumber":115,"author":{"gitId":"NgManSing"},"content":"            String hourPadding \u003d hourIn24 \u003c 10 ? \"0\" : \"\";"},{"lineNumber":116,"author":{"gitId":"NgManSing"},"content":"            String minutePadding \u003d minuteIn24 \u003c 10 ? \"0\" : \"\";"},{"lineNumber":117,"author":{"gitId":"NgManSing"},"content":"            builder.append(hourPadding).append(hourIn24).append(minutePadding).append(minuteIn24);"},{"lineNumber":118,"author":{"gitId":"NgManSing"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"NgManSing"},"content":"        return builder.toString();"},{"lineNumber":120,"author":{"gitId":"NgManSing"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"NgManSing"},"content":"}"}],"authorContributionMap":{"NgManSing":121}},{"path":"text-ui-test/Records.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"T|1|Task-1"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"T|0|Task-1"},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"D|0|Task-2 /by 10:00am"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"E|0|Task-3 /at tmr"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"T|0|Task-1"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"D|0|Task-2 /by 10:00am"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"E|0|Task-3 /at tmr"}],"authorContributionMap":{"NgManSing":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NgManSing"},"content":"Testing"},{"lineNumber":2,"author":{"gitId":"NgManSing"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"NgManSing"},"content":"todo Task-1"},{"lineNumber":4,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":5,"author":{"gitId":"NgManSing"},"content":"deadline Task-2"},{"lineNumber":6,"author":{"gitId":"NgManSing"},"content":"deadline Task-2 /at 10:00am"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"deadline Task-2 /by 10:00am"},{"lineNumber":8,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":9,"author":{"gitId":"NgManSing"},"content":"event Task-3"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"event Task-3 /by tmr"},{"lineNumber":11,"author":{"gitId":"NgManSing"},"content":"event Task-3 /at tmr"},{"lineNumber":12,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":13,"author":{"gitId":"NgManSing"},"content":"done 0"},{"lineNumber":14,"author":{"gitId":"NgManSing"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":16,"author":{"gitId":"NgManSing"},"content":"done"},{"lineNumber":17,"author":{"gitId":"NgManSing"},"content":"list 2"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"NgManSing"},"content":"delete 10"},{"lineNumber":20,"author":{"gitId":"NgManSing"},"content":"delete 2"},{"lineNumber":21,"author":{"gitId":"NgManSing"},"content":"list"},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"bye again~"},{"lineNumber":23,"author":{"gitId":"NgManSing"},"content":"bye"}],"authorContributionMap":{"NgManSing":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"NgManSing"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"NgManSing"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\Input\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\Record\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"NgManSing"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"NgManSing":3,"-":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"NgManSing"},"content":"# run the program, feed commands from INPUT.TXT file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"NgManSing":1,"-":37}}]
