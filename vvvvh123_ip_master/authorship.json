[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"T/0/wash the dishes"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":"E/0/presentation/2021-05-29T10:00"}],"authorContributionMap":{"vvvvh123":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"Duke is a Personal Assistant Chatbot that helps you manage your various tasks. "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"## Table of contents"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"* [Quick start](#quick-start)"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"* [Features](#features)"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"* [Usage](#usage)"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"    * [`todo` - Add a Todo](#todo---add-a-todo)"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    * [`deadline` - Add a Deadline](#deadline---add-a-deadline)"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    * [`event` - Add an Event](#event---add-an-event)"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    * [`list` - Display all tasks](#list---display-all-tasks)"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    * [`done` - Mark a task as done ✓](#done---mark-a-task-as-done-)"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    * [`delete` - ~~Delete~~ a task](#delete---delete-a-task)"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    * [`find` - Find tasks](#find---find-tasks)"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    * [`bye` - Exit Duke](#bye---exit-duke)"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"* [Command summary](#command-summary)"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"## Quick start"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"1. Ensure you have Java `11` installed on your computer"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"1. Download the latest `v0.2.jar` from [here]()"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"1. Open a command window in the folder containing the `.jar` file"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"1. Run the command `java -jar {filename}.jar` \u003cbr\u003e If you haven\u0027t changed the filename, run the command `java -jar v0.2.jar`"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"## Features"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"### Add tasks"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"Add tasks to keep track of.  "},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"Duke has three subcategories of tasks you may add: "},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"* Todos"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"* Deadlines"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"* Events  "},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"### Record Date \u0026 Time "},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"Date \u0026 time can be specified for deadline and event tasks. This allows you to have the information ready when needed. "},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"### List tasks"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"Display all your added tasks as a list."},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"### Mark task as done"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"Mark a task from your list of added tasks as done."},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"### Delete task"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"You may delete tasks that you no longer want to manage"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"### Find tasks"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"Find all tasks that contain the queried keyword and view them as a list. "},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"### Auto Save and Reload"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"All your tasks data is saved in the hard disk automatically, every time you make a change. Once you exit and reload the program, the saved data is loaded. This means you won\u0027t lose your data and you can pick up where you left off. "},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"Words in `UPPER_CASE` are the parameters to be supplied by the user."},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":"\u003cbr\u003ee.g. in `todo TASK_DESCRIPTION`, `TASK_DESCRIPTION` is a parameter which can be used as `todo wash the dishes`"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"### `todo` - Add a Todo"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"vvvvh123"},"content":"Adds a Todo task to your task list "},{"lineNumber":64,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":65,"author":{"gitId":"vvvvh123"},"content":"Format: `todo TASK_DESCRIPTION`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":68,"author":{"gitId":"vvvvh123"},"content":"`todo wash the dishes`"},{"lineNumber":69,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":70,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":71,"author":{"gitId":"vvvvh123"},"content":"![](todo.jpg)"},{"lineNumber":72,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":73,"author":{"gitId":"vvvvh123"},"content":"### `deadline` - Add a Deadline"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"vvvvh123"},"content":"Adds a Deadline task to your task list with a specified due date and time. Date and time must be in the given format. "},{"lineNumber":76,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":77,"author":{"gitId":"vvvvh123"},"content":"Format: `deadline TASK_DESCRIPTION /by DDMMYYYY HHMM`"},{"lineNumber":78,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":79,"author":{"gitId":"vvvvh123"},"content":"Example of usage:"},{"lineNumber":80,"author":{"gitId":"vvvvh123"},"content":"`deadline finish project /by 02/04/2021 2359`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Expected outcome:  "},{"lineNumber":83,"author":{"gitId":"vvvvh123"},"content":"![](deadline.jpg)"},{"lineNumber":84,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":85,"author":{"gitId":"vvvvh123"},"content":"### `event` - Add an Event"},{"lineNumber":86,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":87,"author":{"gitId":"vvvvh123"},"content":"Adds an Event task to your task list occuring at a specified date and time. Date and time must be in the given format."},{"lineNumber":88,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":89,"author":{"gitId":"vvvvh123"},"content":"Format: `event TASK_DESCRIPTION /at DDMMYYYY HHMM`"},{"lineNumber":90,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":91,"author":{"gitId":"vvvvh123"},"content":"Example of usage:"},{"lineNumber":92,"author":{"gitId":"vvvvh123"},"content":"`event presentation /at 29/05/2021 1000`"},{"lineNumber":93,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":94,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":95,"author":{"gitId":"vvvvh123"},"content":"![](event.jpg)"},{"lineNumber":96,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":97,"author":{"gitId":"vvvvh123"},"content":"### `list` - Display all tasks"},{"lineNumber":98,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":99,"author":{"gitId":"vvvvh123"},"content":"Displays all your tasks with their type, completion status, and date \u0026 time (for deadlines and events). Tasks are shown as an ordered list."},{"lineNumber":100,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":101,"author":{"gitId":"vvvvh123"},"content":"Format: `list`"},{"lineNumber":102,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":103,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":104,"author":{"gitId":"vvvvh123"},"content":"![](list.jpg)"},{"lineNumber":105,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":106,"author":{"gitId":"vvvvh123"},"content":"### `done` - Mark a task as done ✓"},{"lineNumber":107,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":108,"author":{"gitId":"vvvvh123"},"content":"Mark a task at a specified index, in your task list, as done"},{"lineNumber":109,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":110,"author":{"gitId":"vvvvh123"},"content":"Format: `done INDEX`"},{"lineNumber":111,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":112,"author":{"gitId":"vvvvh123"},"content":"Example of usage:"},{"lineNumber":113,"author":{"gitId":"vvvvh123"},"content":"`done 2`"},{"lineNumber":114,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":115,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":116,"author":{"gitId":"vvvvh123"},"content":"![](done.jpg)"},{"lineNumber":117,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":118,"author":{"gitId":"vvvvh123"},"content":"### `delete` - ~~Delete~~ a task"},{"lineNumber":119,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":120,"author":{"gitId":"vvvvh123"},"content":"Delete a task at a specified index, in your task list."},{"lineNumber":121,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":122,"author":{"gitId":"vvvvh123"},"content":"Format: `delete INDEX`"},{"lineNumber":123,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":124,"author":{"gitId":"vvvvh123"},"content":"Example of usage:"},{"lineNumber":125,"author":{"gitId":"vvvvh123"},"content":"`delete 2`"},{"lineNumber":126,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":127,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":128,"author":{"gitId":"vvvvh123"},"content":"![](delete.jpg)"},{"lineNumber":129,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":130,"author":{"gitId":"vvvvh123"},"content":"### `find` - Find tasks"},{"lineNumber":131,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":132,"author":{"gitId":"vvvvh123"},"content":"Finds all tasks that contain the specified keyword in their description. Displays these tasks as an ordered list."},{"lineNumber":133,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":134,"author":{"gitId":"vvvvh123"},"content":"Format: `find KEYWORD`"},{"lineNumber":135,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":136,"author":{"gitId":"vvvvh123"},"content":"Example of usage:"},{"lineNumber":137,"author":{"gitId":"vvvvh123"},"content":"`find presentation`"},{"lineNumber":138,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":139,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":140,"author":{"gitId":"vvvvh123"},"content":"![](find.jpg)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"vvvvh123"},"content":"### `bye` - Exit Duke"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"vvvvh123"},"content":"Exits the program with a goodbye message"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"vvvvh123"},"content":"Format: `bye`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"vvvvh123"},"content":"Expected outcome:  "},{"lineNumber":149,"author":{"gitId":"vvvvh123"},"content":"![](bye.jpg)"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"vvvvh123"},"content":"## Command summary"},{"lineNumber":152,"author":{"gitId":"vvvvh123"},"content":"____"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"vvvvh123"},"content":"Action | Format, Examples"},{"lineNumber":155,"author":{"gitId":"vvvvh123"},"content":"------ | ----------------"},{"lineNumber":156,"author":{"gitId":"vvvvh123"},"content":"todo | `todo TASK_DESCRIPTION` \u003cbr\u003e e.g. `todo wash the dishes`"},{"lineNumber":157,"author":{"gitId":"vvvvh123"},"content":"deadline | `deadline TASK_DESCRIPTION /by DDMMYYYY HHMM` \u003cbr\u003e e.g. `deadline finish project /by 02/04/2021 2359`"},{"lineNumber":158,"author":{"gitId":"vvvvh123"},"content":"event | `event TASK_DESCRIPTION /at DDMMYYYY HHMM` \u003cbr\u003e e.g. `event presentation /at 29/05/2021 1000`"},{"lineNumber":159,"author":{"gitId":"vvvvh123"},"content":"list | `list`"},{"lineNumber":160,"author":{"gitId":"vvvvh123"},"content":"done | `done INDEX` \u003cbr\u003e e.g. `done 2`"},{"lineNumber":161,"author":{"gitId":"vvvvh123"},"content":"delete | `delete INDEX` \u003cbr\u003e e.g. `delete 2`"},{"lineNumber":162,"author":{"gitId":"vvvvh123"},"content":"find | `find KEYWORD` \u003cbr\u003e e.g. `find presentation`"},{"lineNumber":163,"author":{"gitId":"vvvvh123"},"content":"bye | `bye`"}],"authorContributionMap":{"-":18,"vvvvh123":145}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":" * Duke is a command line task manager"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":" * It allows users to add, delete, save, and complete to-dos, deadlines, and events"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"    public Duke() {"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        storage \u003d new Storage(ui);"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"        tasks \u003d new TaskList(storage.loadFile());"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"     * The code to run the Duke program"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"     * Takes in user input and executes command\u0027s accordingly"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"    public void run() {"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"        boolean isExit \u003d false;"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"        while (!isExit) {"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"                ui.printHorizontalLine();"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"            } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"            } finally {"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"                ui.printHorizontalLine();"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    public static void main(String[] args) {"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"        new Duke().run();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"vvvvh123":48}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" * All commands are subclasses of this abstract Command class"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" * This forces all commands to have execute(tasks,ui,storage) and isExit() methods"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    public abstract boolean isExit();"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":15}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":" * DeadlineCommand is called when user wants to add a new Deadline"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    private static final int DEADLINE_LENGTH \u003d 9;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    private static final int BY_LENGTH \u003d 3;"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of DeadlineCommand which stores the user input"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input for adding a new Deadline"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    public DeadlineCommand(String fullCommand) {"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     * Adds new Deadline to the TaskList tasks"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"     * Prints output confirming addition to user"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"     * Saves changes to data file"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"            int index \u003d fullCommand.indexOf(\"/\");"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"            String description \u003d fullCommand.substring(DEADLINE_LENGTH, index - 1);"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"            String byString \u003d fullCommand.substring(index + BY_LENGTH).trim();"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"            LocalDateTime by \u003d LocalDateTime.parse(byString, inputFormat);"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"            Task newTask \u003d new Deadline(description, by);"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"            tasks.addTask(newTask);"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"            ui.printNewTask(newTask, tasks.getTaskCount());"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":55,"author":{"gitId":"vvvvh123"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"vvvvh123"},"content":"            ui.printEmptyDescription(\"deadline\");"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"            ui.printDateError();"},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":61}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" * DeleteCommand is called when user wants to delete a task"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    private static final int DELETE_LENGTH \u003d 7;"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of DeleteCommand which stores the user input"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input for deleting a task"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"     * Deletes a task from the TaskList tasks"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"     * Prints output confirming task deletion to user"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     * Saves changes to data file"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"            int index \u003d Integer.parseInt(fullCommand.substring(DELETE_LENGTH)) - 1;"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"            Task deleted \u003d tasks.getTask(index);"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"            tasks.removeTask(index);"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"            ui.printRemoveTask(deleted, tasks.getTaskCount());"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"            ui.printInvalidTask();"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":50}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" * DoneCommand is called when user wants to mark a task as done"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    private static final int DONE_LENGTH \u003d 5;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of DoneCommand which stores the user input"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input for marking a task as done"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"     * Marks a task as done in the TaskList tasks"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"     * Prints output confirming operation to user"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"     * Saves changes to data file"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"            int index \u003d Integer.parseInt(fullCommand.substring(DONE_LENGTH)) - 1;"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"            tasks.getTask(index).markAsDone();"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"            ui.printDoneTask(tasks, index);"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"        } catch (Exception e) {"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"            ui.printInvalidTask();"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":48}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":" * EventCommand is called when user wants to add a new Event"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"public class EventCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    private static final int EVENT_LENGTH \u003d 6;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    private static final int AT_LENGTH \u003d 3;"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of EventCommand which stores the user input"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input for adding a new Event"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    public EventCommand(String fullCommand) {"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     * Adds new Event to the TaskList tasks"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"     * Prints output confirming addition to user"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"     * Saves changes to data file"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"            int index \u003d fullCommand.indexOf(\"/\");"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"            String description \u003d fullCommand.substring(EVENT_LENGTH, index - 1);"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"            String atString \u003d fullCommand.substring(index + AT_LENGTH).trim();"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"            LocalDateTime at \u003d LocalDateTime.parse(atString, inputFormat);"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"            Task newTask \u003d new Event(description, at);"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"            tasks.addTask(newTask);"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"            ui.printNewTask(newTask, tasks.getTaskCount());"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":55,"author":{"gitId":"vvvvh123"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"vvvvh123"},"content":"            ui.printEmptyDescription(\"event\");"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"            ui.printDateError();"},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":61}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" * ExitCommand is called when user wants to exit the program"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of ExitCommand which sets isExit to true"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    public ExitCommand() {"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d true;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"     * Prints goodbye message"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"        ui.showExitMessage();"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":35}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"public class FindCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"    private static final int FIND_LENGTH \u003d 5;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"            String query \u003d fullCommand.substring(FIND_LENGTH);"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"            ui.printQueryList(tasks.getTasksByKeyword(query));"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"            ui.printEmptyQuery();"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" * ListCommand is called when user wants to view all their tasks"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    public ListCommand() {"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"     * Prints all tasks stored in TaskList tasks in an ordered list"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"        ui.printTasksList(tasks);"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":31}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":" * ToDoCommand is called when user wants to add a new ToDo"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    private boolean isExit;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    private String fullCommand;"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    private static final int TODO_LENGTH \u003d 5;"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method of ToDoCommand which stores the user input"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input for adding a new ToDo"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"    public ToDoCommand(String fullCommand) {"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"        return isExit;"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"     * Adds new ToDo to the TaskList tasks"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     * Prints output confirming addition to user"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"     * Saves changes to data file"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList containing all tasks"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     * @param ui User Interface"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"     * @param storage Storage to save all tasks, updating the data file"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"            String description \u003d fullCommand.substring(TODO_LENGTH);"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"            Task newTask \u003d new ToDo(description);"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"            tasks.addTask(newTask);"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"            ui.printNewTask(newTask, tasks.getTaskCount());"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"            ui.printEmptyDescription(\"todo\");"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":51}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"    public abstract String getMessage();"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":6}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":" * InvalidCommandException is raised when the user provides an invalid input"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"    private static final String MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"    public InvalidCommandException() {"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"        return MESSAGE;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":" * Parser class deals with making sense of the user command"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"     * parse method takes in a String of user input and returns the corresponding Command object based on it"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"     * @param fullCommand String of user input"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"     * @return Command command object depending on user input"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"     * @throws InvalidCommandException Thrown when user input is not a valid command"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    public static Command parse(String fullCommand) throws InvalidCommandException {"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"        Command command;"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"        if (fullCommand.equals(\"bye\")) {"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.equals(\"list\")) {"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new ListCommand();"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"done\")) {"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new DoneCommand(fullCommand);"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"todo\")) {"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new ToDoCommand(fullCommand);"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"deadline\")) {"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new DeadlineCommand(fullCommand);"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"event\")) {"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new EventCommand(fullCommand);"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"delete\")) {"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new DeleteCommand(fullCommand);"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"        } else if (fullCommand.startsWith(\"find\")) {"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"            command \u003d new FindCommand(fullCommand);"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"            throw new InvalidCommandException();"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"        return command;"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":41}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"import java.nio.file.FileAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":" * Storage class is used to load tasks from the data file and save tasks to the data file"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"    private static final String ROOT_PATH \u003d System.getProperty(\"user.dir\");"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    private static final Path FOLDER_PATH \u003d Paths.get(ROOT_PATH, \"data\");"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"    private static final Path FILE_PATH \u003d Paths.get(ROOT_PATH, \"data\", \"duke.txt\");"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"    private Ui ui;"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method for the Storage class"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"     * Creates a file directory and data file inside of it unless it already exists"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"     * @param ui Takes in a Ui object, used to print error messages"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"    public Storage(Ui ui) {"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"        this.ui \u003d ui;"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"            Files.createDirectory(FOLDER_PATH);"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"        } catch (FileAlreadyExistsException e) {"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"            // Do nothing, directory already exists"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"            ui.printDirectoryError();"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"            Files.createFile(FILE_PATH);"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"        } catch (FileAlreadyExistsException e) {"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"            // Do nothing, file already exists"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"            ui.printFileError();"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"     * Loads Task data saved in the data file"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"     * Task data is converted into an ArrayList\u003cTask\u003e"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"vvvvh123"},"content":"     * @return ArrayList\u003cTasK\u003e that were saved in the data file"},{"lineNumber":56,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"    public ArrayList\u003cTask\u003e loadFile() {"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"vvvvh123"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(FILE_PATH);"},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"            for (String line : lines) {"},{"lineNumber":62,"author":{"gitId":"vvvvh123"},"content":"                String[] components \u003d line.split(\"/\");"},{"lineNumber":63,"author":{"gitId":"vvvvh123"},"content":"                String taskType \u003d components[0];"},{"lineNumber":64,"author":{"gitId":"vvvvh123"},"content":"                String done \u003d components[1];"},{"lineNumber":65,"author":{"gitId":"vvvvh123"},"content":"                String description \u003d components[2];"},{"lineNumber":66,"author":{"gitId":"vvvvh123"},"content":"                Task newTask \u003d new Task(description);"},{"lineNumber":67,"author":{"gitId":"vvvvh123"},"content":"                switch (taskType) {"},{"lineNumber":68,"author":{"gitId":"vvvvh123"},"content":"                case \"T\":"},{"lineNumber":69,"author":{"gitId":"vvvvh123"},"content":"                    newTask \u003d new ToDo(description);"},{"lineNumber":70,"author":{"gitId":"vvvvh123"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"vvvvh123"},"content":"                case \"D\":"},{"lineNumber":72,"author":{"gitId":"vvvvh123"},"content":"                    LocalDateTime by \u003d LocalDateTime.parse(components[3]);"},{"lineNumber":73,"author":{"gitId":"vvvvh123"},"content":"                    newTask \u003d new Deadline(description, by);"},{"lineNumber":74,"author":{"gitId":"vvvvh123"},"content":"                    break;"},{"lineNumber":75,"author":{"gitId":"vvvvh123"},"content":"                case \"E\":"},{"lineNumber":76,"author":{"gitId":"vvvvh123"},"content":"                    LocalDateTime at \u003d LocalDateTime.parse(components[3]);"},{"lineNumber":77,"author":{"gitId":"vvvvh123"},"content":"                    newTask \u003d new Event(description, at);"},{"lineNumber":78,"author":{"gitId":"vvvvh123"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"vvvvh123"},"content":"                if (done.equals(\"1\")) {"},{"lineNumber":80,"author":{"gitId":"vvvvh123"},"content":"                    newTask.markAsDone();"},{"lineNumber":81,"author":{"gitId":"vvvvh123"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"vvvvh123"},"content":"                tasks.add(newTask);"},{"lineNumber":83,"author":{"gitId":"vvvvh123"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"vvvvh123"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"vvvvh123"},"content":"            ui.printLoadError();"},{"lineNumber":86,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"vvvvh123"},"content":"        return tasks;"},{"lineNumber":88,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":90,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"vvvvh123"},"content":"     * Saves all tasks in TaskList to the data file"},{"lineNumber":92,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList object containing all existing"},{"lineNumber":94,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"vvvvh123"},"content":"    public void saveToFile(TaskList tasks) {"},{"lineNumber":96,"author":{"gitId":"vvvvh123"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"vvvvh123"},"content":"            FileWriter fw \u003d new FileWriter(FILE_PATH.toString());"},{"lineNumber":98,"author":{"gitId":"vvvvh123"},"content":"            ArrayList\u003cTask\u003e taskArrayList \u003d tasks.getList();"},{"lineNumber":99,"author":{"gitId":"vvvvh123"},"content":"            for (Task t: taskArrayList) {"},{"lineNumber":100,"author":{"gitId":"vvvvh123"},"content":"                String description \u003d t.getDescription();"},{"lineNumber":101,"author":{"gitId":"vvvvh123"},"content":"                String done \u003d (t.isDone()) ? \"1\" : \"0\";"},{"lineNumber":102,"author":{"gitId":"vvvvh123"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":103,"author":{"gitId":"vvvvh123"},"content":"                    fw.write(\"T\" + \"/\" + done + \"/\" + description + System.lineSeparator());"},{"lineNumber":104,"author":{"gitId":"vvvvh123"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":105,"author":{"gitId":"vvvvh123"},"content":"                    LocalDateTime by \u003d ((Deadline) t).getByForSaving();"},{"lineNumber":106,"author":{"gitId":"vvvvh123"},"content":"                    fw.write(\"D\" + \"/\" + done + \"/\" + description + \"/\" + by + System.lineSeparator());"},{"lineNumber":107,"author":{"gitId":"vvvvh123"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":108,"author":{"gitId":"vvvvh123"},"content":"                    LocalDateTime at \u003d ((Event) t).getAtForSaving();"},{"lineNumber":109,"author":{"gitId":"vvvvh123"},"content":"                    fw.write(\"E\" + \"/\" + done + \"/\" + description + \"/\" + at + System.lineSeparator());"},{"lineNumber":110,"author":{"gitId":"vvvvh123"},"content":"                }"},{"lineNumber":111,"author":{"gitId":"vvvvh123"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"vvvvh123"},"content":"            fw.close();"},{"lineNumber":113,"author":{"gitId":"vvvvh123"},"content":"        } catch (IOException e) {"},{"lineNumber":114,"author":{"gitId":"vvvvh123"},"content":"            ui.printSaveError();"},{"lineNumber":115,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":117}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":" * Subclass of Task that is used to represent Deadline tasks created by user"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"    protected LocalDateTime by;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method for Deadline class"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"     * @param description Description of the deadline"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"     * @param by Date and time (deadline) that the task needs to be completed by"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    public String getBy() {"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        String byString \u003d by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\"));"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"        return byString;"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"    public LocalDateTime getByForSaving() {"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"        return by;"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     * Returns the status icon depending on if the deadline is completed"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"     * @return A tick if the deadline is done, and a space (rather than a cross) if it hasn\u0027t yet"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"    public String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"     * Returns a String that contains all details of the deadline (status, description, and deadline)"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"     * @return String containing all details of the deadline"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getBy() + \")\";"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":51}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":" * Subclass of Task that is used to represent Event tasks created by user"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"    protected LocalDateTime at;"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method for Event class"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"     * @param description Description of the event"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"     * @param at Date and time that the event is at"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    public String getAt() {"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        String byString \u003d at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm\"));"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"        return byString;"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"    public LocalDateTime getAtForSaving() {"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"        return at;"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     * Returns the status icon depending on if the event has been marked as done"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"     * @return A tick if the event is done, and a space (rather than a cross) if it isn\u0027t"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"    public String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"     * Returns a String that contains all details of the event (status, description, and date \u0026 time)"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"     * @return String containing all details of the event"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getAt() + \")\";"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":51}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":" * Each instance represents a task created by the user"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":" * A Task has two fields, a description and a boolean isDone to indicate if it\u0027s completed"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method for the Task Class"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"     * @param description Description of the task"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"    public String getDescription() {"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"        return description;"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"    public boolean isDone() {"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"        return isDone;"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"     * Returns a tick or cross icon depending on if the task is done"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"     * @return String tick or cross icon"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"     * Returns a String that contains all details of the task (status and description)"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"     * @return String containing all details of the task"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":"     * Marks the task as done/completed"},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"    public void markAsDone() {"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"        isDone \u003d true;"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":54}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":" * TaskList is a class used to contain the list of all tasks created by the user"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method to create a new TaskList with no tasks"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method that takes in an ArrayList\u003cTask\u003e"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"     * Used to load tasks from the data file"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks ArrayList\u003cTask\u003e"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"     * Takes in a task and adds it to the TaskList"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"     * @param t Task"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"    public void addTask(Task t) {"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"        tasks.add(t);"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"     * Takes in an index and removes the corresponding task from the TaskList"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"     * @param index"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":"    public void removeTask(int index) {"},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"        tasks.remove(index);"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"    public int getTaskCount() {"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"        return tasks.size();"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"     * Returns ordered list of tasks whose description contains the keyword specified"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"     * @param keyword String obtained from user\u0027s query"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"     * @return String ordered list of tasks containing keyword"},{"lineNumber":55,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"vvvvh123"},"content":"    public String getTasksByKeyword(String keyword) {"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"        String list \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"        int taskCounter \u003d 1;"},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":"        for (Task t: tasks) {"},{"lineNumber":60,"author":{"gitId":"vvvvh123"},"content":"            if (t.getDescription().contains(keyword)) {"},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"                list +\u003d (\"\\t\" + taskCounter + \". \");"},{"lineNumber":62,"author":{"gitId":"vvvvh123"},"content":"                list +\u003d (t + \"\\n\");"},{"lineNumber":63,"author":{"gitId":"vvvvh123"},"content":"                taskCounter++;"},{"lineNumber":64,"author":{"gitId":"vvvvh123"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"vvvvh123"},"content":"        return list;"},{"lineNumber":67,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":69,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"vvvvh123"},"content":"     * Returns a String to represent the tasks in TaskList as an ordered list"},{"lineNumber":71,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"vvvvh123"},"content":"     * @return String that is an ordered list of tasks"},{"lineNumber":73,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"vvvvh123"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"vvvvh123"},"content":"        String list \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"vvvvh123"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":78,"author":{"gitId":"vvvvh123"},"content":"            list +\u003d (\"\\t\" + i + \". \");"},{"lineNumber":79,"author":{"gitId":"vvvvh123"},"content":"            list +\u003d (tasks.get(i - 1) + \"\\n\");"},{"lineNumber":80,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"vvvvh123"},"content":"        return list;"},{"lineNumber":82,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":84,"author":{"gitId":"vvvvh123"},"content":"    public Task getTask(int index) {"},{"lineNumber":85,"author":{"gitId":"vvvvh123"},"content":"        return tasks.get(index);"},{"lineNumber":86,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":88,"author":{"gitId":"vvvvh123"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":89,"author":{"gitId":"vvvvh123"},"content":"        return tasks;"},{"lineNumber":90,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":91}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":" * Subclass of Task that is used to represent ToDo tasks created by user"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":"     * Constructor method for ToDo class"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":"     * @param description Description of the ToDo"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"     * Returns a String that contains all details of the ToDo (description)"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"     * @return String containing all details of the ToDo"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vvvvh123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":3,"author":{"gitId":"vvvvh123"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"vvvvh123"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":6,"author":{"gitId":"vvvvh123"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":8,"author":{"gitId":"vvvvh123"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vvvvh123"},"content":" * The UI class contains methods that deal with the user"},{"lineNumber":10,"author":{"gitId":"vvvvh123"},"content":" * UI has methods to read user input and also print output"},{"lineNumber":11,"author":{"gitId":"vvvvh123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vvvvh123"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"vvvvh123"},"content":"    private final Scanner in;"},{"lineNumber":14,"author":{"gitId":"vvvvh123"},"content":"    private static final String exceptionGreeting \u003d \"\\ud83d\\ude16 OOPS!!! \";"},{"lineNumber":15,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":16,"author":{"gitId":"vvvvh123"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"vvvvh123"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":20,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vvvvh123"},"content":"     * Prints the Duke logo and welcomes the user"},{"lineNumber":22,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"vvvvh123"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":24,"author":{"gitId":"vvvvh123"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":25,"author":{"gitId":"vvvvh123"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":26,"author":{"gitId":"vvvvh123"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":27,"author":{"gitId":"vvvvh123"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":28,"author":{"gitId":"vvvvh123"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":29,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":30,"author":{"gitId":"vvvvh123"},"content":"        printHorizontalLine();"},{"lineNumber":31,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tHello! I\u0027m Duke\");"},{"lineNumber":32,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tWhat can I do for you?\");"},{"lineNumber":33,"author":{"gitId":"vvvvh123"},"content":"        printHorizontalLine();"},{"lineNumber":34,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":36,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"vvvvh123"},"content":"     * Prints goodbye message when the user is exiting the program"},{"lineNumber":38,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"vvvvh123"},"content":"    public void showExitMessage() {"},{"lineNumber":40,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");"},{"lineNumber":41,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":43,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"vvvvh123"},"content":"     * Prints a horizontal line made of dashes, intending to separate user input and program output"},{"lineNumber":45,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"vvvvh123"},"content":"    public void printHorizontalLine() {"},{"lineNumber":47,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t---------------------------------------------------------------------\");"},{"lineNumber":48,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":50,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"vvvvh123"},"content":"     * Prints out all existing tasks in the TaskList object"},{"lineNumber":52,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList object"},{"lineNumber":54,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"vvvvh123"},"content":"    public void printTasksList(TaskList tasks) {"},{"lineNumber":56,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tHere are the tasks in your list:\");"},{"lineNumber":57,"author":{"gitId":"vvvvh123"},"content":"        System.out.print(tasks);"},{"lineNumber":58,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":60,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":61,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"vvvvh123"},"content":"     * Prints out tasks matching queried keyword"},{"lineNumber":63,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"vvvvh123"},"content":"     * @param listOfTasks String containing all tasks containing the queried keyword"},{"lineNumber":65,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"vvvvh123"},"content":"    public void printQueryList(String listOfTasks) {"},{"lineNumber":67,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");"},{"lineNumber":68,"author":{"gitId":"vvvvh123"},"content":"        System.out.print(listOfTasks);"},{"lineNumber":69,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":71,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"vvvvh123"},"content":"     * Returns String of next line of user\u0027s input"},{"lineNumber":73,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"vvvvh123"},"content":"     * @return String of user\u0027s input"},{"lineNumber":75,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"vvvvh123"},"content":"    public String readCommand() {"},{"lineNumber":77,"author":{"gitId":"vvvvh123"},"content":"        String fullCommand \u003d in.nextLine();"},{"lineNumber":78,"author":{"gitId":"vvvvh123"},"content":"        return fullCommand;"},{"lineNumber":79,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":81,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"vvvvh123"},"content":"     * Prints the error message prepended with an error greeting"},{"lineNumber":83,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"vvvvh123"},"content":"     * @param message String obtained from exception"},{"lineNumber":85,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"vvvvh123"},"content":"    public void showError(String message) {"},{"lineNumber":87,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + message);"},{"lineNumber":88,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":90,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"vvvvh123"},"content":"     * Prints out message to confirm to the user that the task has been marked as done"},{"lineNumber":92,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"vvvvh123"},"content":"     * @param tasks TaskList object"},{"lineNumber":94,"author":{"gitId":"vvvvh123"},"content":"     * @param index index that the task that was marked as done corresponds to in tasks"},{"lineNumber":95,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"vvvvh123"},"content":"    public void printDoneTask(TaskList tasks, int index) {"},{"lineNumber":97,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"},{"lineNumber":98,"author":{"gitId":"vvvvh123"},"content":"        System.out.print(\"\\t  \");"},{"lineNumber":99,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(tasks.getTask(index));"},{"lineNumber":100,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":102,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"vvvvh123"},"content":"     * Prints out message to confirm to the user that the task has been removed/deleted"},{"lineNumber":104,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"vvvvh123"},"content":"     * @param t Task object that user has removed"},{"lineNumber":106,"author":{"gitId":"vvvvh123"},"content":"     * @param taskCounter Total number of tasks remaining"},{"lineNumber":107,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"vvvvh123"},"content":"    public void printRemoveTask(Task t, int taskCounter) {"},{"lineNumber":109,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"},{"lineNumber":110,"author":{"gitId":"vvvvh123"},"content":"        System.out.print(\"\\t  \");"},{"lineNumber":111,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(t);"},{"lineNumber":112,"author":{"gitId":"vvvvh123"},"content":"        if (taskCounter \u003d\u003d 1) {"},{"lineNumber":113,"author":{"gitId":"vvvvh123"},"content":"            System.out.println(\"\\tNow you have \" + taskCounter + \" task in the list.\");"},{"lineNumber":114,"author":{"gitId":"vvvvh123"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"vvvvh123"},"content":"            System.out.println(\"\\tNow you have \" + taskCounter + \" tasks in the list.\");"},{"lineNumber":116,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":119,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"vvvvh123"},"content":"     * Prints out message to confirm to the user that the task has been added"},{"lineNumber":121,"author":{"gitId":"vvvvh123"},"content":"     * @param t Task object that user has added"},{"lineNumber":122,"author":{"gitId":"vvvvh123"},"content":"     * @param taskCounter Total number of tasks after adding new task"},{"lineNumber":123,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"vvvvh123"},"content":"    public void printNewTask(Task t, int taskCounter) {"},{"lineNumber":125,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"},{"lineNumber":126,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t  \" + t);"},{"lineNumber":127,"author":{"gitId":"vvvvh123"},"content":"        if (taskCounter \u003d\u003d 1) {"},{"lineNumber":128,"author":{"gitId":"vvvvh123"},"content":"            System.out.println(\"\\tNow you have \" + taskCounter + \" task in the list.\");"},{"lineNumber":129,"author":{"gitId":"vvvvh123"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"vvvvh123"},"content":"            System.out.println(\"\\tNow you have \" + taskCounter + \" tasks in the list.\");"},{"lineNumber":131,"author":{"gitId":"vvvvh123"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":134,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate user has tried to add new task but left description empty"},{"lineNumber":136,"author":{"gitId":"vvvvh123"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"vvvvh123"},"content":"     * @param type Type of task that the user tried to add"},{"lineNumber":138,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"vvvvh123"},"content":"    public void printEmptyDescription(String type) {"},{"lineNumber":140,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"The description of a \" + type + \" cannot be empty.\");"},{"lineNumber":141,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":143,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate user has tried to query but hasn\u0027t provided a keyword"},{"lineNumber":145,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"vvvvh123"},"content":"    public void printEmptyQuery() {"},{"lineNumber":147,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"The query cannot be empty.\");"},{"lineNumber":148,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":150,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message prepended with error greeting to indicate user has specified invalid task number"},{"lineNumber":152,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"vvvvh123"},"content":"    public void printInvalidTask() {"},{"lineNumber":154,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"That task number does not exist.\");"},{"lineNumber":155,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":157,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate an error while creating a directory in which the data file would be stored"},{"lineNumber":159,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"vvvvh123"},"content":"    public void printDirectoryError() {"},{"lineNumber":161,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"I\u0027ve encountered an error while creating a directory :-(\");"},{"lineNumber":162,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":164,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate an error while creating the data file"},{"lineNumber":166,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"vvvvh123"},"content":"    public void printFileError() {"},{"lineNumber":168,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"I\u0027ve encountered an error while creating a data file :-(\");"},{"lineNumber":169,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":171,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate an error while loading data from the data file"},{"lineNumber":173,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"vvvvh123"},"content":"    public void printLoadError() {"},{"lineNumber":175,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"I\u0027ve encountered an error loading your data :-(\");"},{"lineNumber":176,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":178,"author":{"gitId":"vvvvh123"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"vvvvh123"},"content":"     * Prints out error message to indicate an error while saving user\u0027s data to the data file"},{"lineNumber":180,"author":{"gitId":"vvvvh123"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"vvvvh123"},"content":"    public void printSaveError() {"},{"lineNumber":182,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"I\u0027ve encountered an error saving your data :-(\");"},{"lineNumber":183,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"vvvvh123"},"content":""},{"lineNumber":185,"author":{"gitId":"vvvvh123"},"content":"    public void printDateError() {"},{"lineNumber":186,"author":{"gitId":"vvvvh123"},"content":"        System.out.println(\"\\t\" + exceptionGreeting + \"I\u0027ve encountered an error parsing your date :-(\");"},{"lineNumber":187,"author":{"gitId":"vvvvh123"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"vvvvh123"},"content":"}"}],"authorContributionMap":{"vvvvh123":188}}]
