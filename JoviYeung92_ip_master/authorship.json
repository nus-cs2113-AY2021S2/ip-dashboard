[{"path":"src/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import ui.TextUi;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"import parser.Parser;"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":" * Entry point of the Duke application."},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":" * Initializes the application and starts the interaction with the user."},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"public class Main {"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    private TextUi ui;"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"    public static void main(String... args) {"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"        new Main().run();"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"    /** Runs the program until termination. */"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"    private void run() {"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"        start();"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"        runCommandLoopUntilByeCommand();"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"        exit();"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"    /** Sets up the required objects, loads up the data from the storage file, and prints the welcome message. */"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"    private void start() {"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"        ui \u003d new TextUi();"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"        storage \u003d new Storage();"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"        storage.readFile();"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"    /** Reads the user command and executes it, until the user issues the bye command. */"},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"    private void runCommandLoopUntilByeCommand() {"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":"        while (true) {"},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"            String userCommandText \u003d ui.getUserCommand();"},{"lineNumber":42,"author":{"gitId":"JoviYeung92"},"content":"            Parser.parseCommand(userCommandText);"},{"lineNumber":43,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":44,"author":{"gitId":"JoviYeung92"},"content":"            if (userCommandText.equals(\"bye\")) {"},{"lineNumber":45,"author":{"gitId":"JoviYeung92"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":50,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the Goodbye message and exits. */"},{"lineNumber":51,"author":{"gitId":"JoviYeung92"},"content":"    private void exit() {"},{"lineNumber":52,"author":{"gitId":"JoviYeung92"},"content":"        ui.showGoodbyeMessage();"},{"lineNumber":53,"author":{"gitId":"JoviYeung92"},"content":"        System.exit(0);"},{"lineNumber":54,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":56,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":56}},{"path":"src/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"    //catching errors not define in the Exceptions class"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":5}},{"path":"src/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import preparetask.PrepareDeadline;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"import preparetask.PrepareEvent;"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"import preparetask.PrepareTodo;"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":"import tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":" * Parses user input into command for task objection creation."},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"     * @param userInput contains the full user input"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"     * @throws Exception if user input does not contains"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"     * \"bye\",\"todo\",\"deadline\",\"event\",\"list\",\"done\",\"delete\",\"find\""},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"    public static void parseCommand(String userInput) {"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"            if (!(userInput.contains(\"bye\") || userInput.contains(\"todo\") || userInput.contains(\"deadline\") ||"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"                    userInput.contains(\"event\") || userInput.contains(\"list\") || userInput.contains(\"done\") ||"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"                    userInput.contains(\"delete\") || userInput.contains(\"find\"))){"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"                throw new DukeException();"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"            if (userInput.contains(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"                new PrepareTodo(userInput);"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"deadline\")) {"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"                new PrepareDeadline(userInput);"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"event\")) {"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"                new PrepareEvent(userInput);"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"                TaskList.list();"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"done\")) {"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"                TaskList.done(userInput);"},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"delete\")) {"},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"                TaskList.delete(userInput);"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":"            } else if (userInput.contains(\"find\")) {"},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":"                TaskList.find(userInput);"},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"JoviYeung92"},"content":"        } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":44,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":46,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":47}},{"path":"src/java/preparetask/PrepareDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package preparetask;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import tasks.DeadLines;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":" * Parses argument in the context of the add deadline task command"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":" *"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":" * parameter \"userInput\" contains full command args string"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":" * parameter \"task\" contains the task"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":" * parameter \"by\" contains the date and/or time of task"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":" *"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":" * @throws StringIndexOutOfBoundsException if deadline is empty"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"public class PrepareDeadline extends Storage {"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"    public PrepareDeadline(String userInput) {"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"            String task \u003d userInput.substring(9, userInput.indexOf(\"/\") - 1);"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"            String by \u003d userInput.substring(userInput.indexOf(\"/\") + 4);"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount] \u003d new DeadLines(task, by);"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.add(tasks[taskCount]);"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"            taskSentences.add(\"D\" + \"|\" + tasks[taskCount].getDone() + \"|\" + task + \"|\" + by);  //add task in string format to arraylist"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(\"  \");"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount++].printStatus();"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Now you have \" + taskCount + \" tasks in the list\");"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"            Storage.writeFile();                                                                //update file"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"        } catch(StringIndexOutOfBoundsException e){"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":36}},{"path":"src/java/preparetask/PrepareEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package preparetask;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import tasks.Events;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":" * Parses argument in the context of the add event task command"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":" * @throws StringIndexOutOfBoundsException if event is empty"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"public class PrepareEvent extends Storage {"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"     * @param userInput contains full command args string"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"    public PrepareEvent(String userInput) {"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"            String task \u003d userInput.substring(6, userInput.indexOf(\"/\") - 1);"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"            String at \u003d userInput.substring(userInput.indexOf(\"/\") + 4);"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount] \u003d new Events(task, at);"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.add(tasks[taskCount]);"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"            taskSentences.add(\"E\" + \"|\" + tasks[taskCount].getDone() + \"|\" + task + \"|\" + at); //add task in string format"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(\"  \");"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount++].printStatus();"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Now you have \" + taskCount + \" tasks in the list:\");"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"            Storage.writeFile();                                                            //update file"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"        } catch(StringIndexOutOfBoundsException e){"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":32}},{"path":"src/java/preparetask/PrepareTodo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package preparetask;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import storage.Storage;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"import tasks.ToDos;"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":" * Parses argument in the context of the add todo task command"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":" *"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":" * parameter \"userInput\" contains full command args string"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":" * parameter \"task\" contains the task"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"public class PrepareTodo extends Storage {"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    private final String[] words;"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"    public PrepareTodo(String userInput) {"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"        words \u003d userInput.split(\" \");"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"            if (words.length \u003d\u003d 1) {"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"                throw new DukeException();"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"            String task \u003d userInput.substring(5);"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount] \u003d new ToDos(task);"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.add(tasks[taskCount]);"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"            taskSentences.add(\"T\" + \"|\" + tasks[taskCount].getDone() + \"|\" + task);  //add task in string format"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Got it. I\u0027ve added this task\");"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(\"  \");"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"            tasks[taskCount++].printStatus();"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Now you have \" + taskCount + \" tasks in the list\");"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"            Storage.writeFile();                                                 // update file"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":37}},{"path":"src/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import tasks.DeadLines;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import tasks.Events;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"import tasks.Task;"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"import tasks.ToDos;"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":"import java.io.BufferedWriter;"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"import java.io.FileReader;"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":" * Functions that stores the task data by reading and writing the task data"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"    public static Task[] tasks \u003d new Task[100];"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"    //Array list to store the task objects"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"    public static ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"    //Array list in string for writing to file"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"    public static ArrayList\u003cString\u003e taskSentences \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"    public static int taskCount \u003d 0;"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"    private static final String home \u003d System.getProperty(\"user.home\");"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"    //store each line from file"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"    private static String sentence;"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"    //used to spilt each sentence from file"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"    private static String[] words;"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"    public Storage() {"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"     * Represents the file and method used to read task data."},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"     * @throws Exception if file does not exist."},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":"    public static void readFile() {"},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"JoviYeung92"},"content":"            //Read from this file"},{"lineNumber":43,"author":{"gitId":"JoviYeung92"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(home + \"/tasklist.txt\"));"},{"lineNumber":44,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":45,"author":{"gitId":"JoviYeung92"},"content":"            while ((sentence \u003d br.readLine()) !\u003d null) {"},{"lineNumber":46,"author":{"gitId":"JoviYeung92"},"content":"                words \u003d sentence.split(\"\\\\|\");"},{"lineNumber":47,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":48,"author":{"gitId":"JoviYeung92"},"content":"                switch (words[0]) {"},{"lineNumber":49,"author":{"gitId":"JoviYeung92"},"content":"                    case \"T\":"},{"lineNumber":50,"author":{"gitId":"JoviYeung92"},"content":"                        //create new todo object"},{"lineNumber":51,"author":{"gitId":"JoviYeung92"},"content":"                        tasks[taskCount] \u003d new ToDos(words[2]);"},{"lineNumber":52,"author":{"gitId":"JoviYeung92"},"content":"                        //add todo object to arraylist"},{"lineNumber":53,"author":{"gitId":"JoviYeung92"},"content":"                        taskArrayList.add(tasks[taskCount]);"},{"lineNumber":54,"author":{"gitId":"JoviYeung92"},"content":"                        //update the task array list"},{"lineNumber":55,"author":{"gitId":"JoviYeung92"},"content":"                        taskSentences.add(\"T\" + \"|\" + words[1] + \"|\" + words[2]);"},{"lineNumber":56,"author":{"gitId":"JoviYeung92"},"content":"                        //if status from file is true set the object as done"},{"lineNumber":57,"author":{"gitId":"JoviYeung92"},"content":"                        if (words[1].equals(\"true\")) {"},{"lineNumber":58,"author":{"gitId":"JoviYeung92"},"content":"                            tasks[taskCount].setDone(true);"},{"lineNumber":59,"author":{"gitId":"JoviYeung92"},"content":"                        }"},{"lineNumber":60,"author":{"gitId":"JoviYeung92"},"content":"                        taskCount++;"},{"lineNumber":61,"author":{"gitId":"JoviYeung92"},"content":"                        break;"},{"lineNumber":62,"author":{"gitId":"JoviYeung92"},"content":"                    case \"D\":"},{"lineNumber":63,"author":{"gitId":"JoviYeung92"},"content":"                        tasks[taskCount] \u003d new DeadLines(words[2], words[3]);"},{"lineNumber":64,"author":{"gitId":"JoviYeung92"},"content":"                        taskArrayList.add(tasks[taskCount]);"},{"lineNumber":65,"author":{"gitId":"JoviYeung92"},"content":"                        taskSentences.add(\"D\" + \"|\" + words[1] + \"|\" + words[2] + \"|\" + words[3]);"},{"lineNumber":66,"author":{"gitId":"JoviYeung92"},"content":"                        if (words[1].equals(\"true\")) {"},{"lineNumber":67,"author":{"gitId":"JoviYeung92"},"content":"                            tasks[taskCount].setDone(true);"},{"lineNumber":68,"author":{"gitId":"JoviYeung92"},"content":"                        }"},{"lineNumber":69,"author":{"gitId":"JoviYeung92"},"content":"                        taskCount++;"},{"lineNumber":70,"author":{"gitId":"JoviYeung92"},"content":"                        break;"},{"lineNumber":71,"author":{"gitId":"JoviYeung92"},"content":"                    case \"E\":"},{"lineNumber":72,"author":{"gitId":"JoviYeung92"},"content":"                        tasks[taskCount] \u003d new Events(words[2], words[3]);"},{"lineNumber":73,"author":{"gitId":"JoviYeung92"},"content":"                        taskArrayList.add(tasks[taskCount]);"},{"lineNumber":74,"author":{"gitId":"JoviYeung92"},"content":"                        taskSentences.add(\"E\" + \"|\" + words[1] + \"|\" + words[2] + \"|\" + words[3]);"},{"lineNumber":75,"author":{"gitId":"JoviYeung92"},"content":"                        if (words[1].equals(\"true\")) {"},{"lineNumber":76,"author":{"gitId":"JoviYeung92"},"content":"                            tasks[taskCount].setDone(true);"},{"lineNumber":77,"author":{"gitId":"JoviYeung92"},"content":"                        }"},{"lineNumber":78,"author":{"gitId":"JoviYeung92"},"content":"                        taskCount++;"},{"lineNumber":79,"author":{"gitId":"JoviYeung92"},"content":"                        break;"},{"lineNumber":80,"author":{"gitId":"JoviYeung92"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"JoviYeung92"},"content":"            br.close();"},{"lineNumber":83,"author":{"gitId":"JoviYeung92"},"content":"        } catch (Exception e) {"},{"lineNumber":84,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"No file exist\");"},{"lineNumber":85,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":88,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"JoviYeung92"},"content":"     * Represents the file and method used to write task data."},{"lineNumber":90,"author":{"gitId":"JoviYeung92"},"content":"     * @throws Exception if unable to write to file"},{"lineNumber":91,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"JoviYeung92"},"content":"    public static void writeFile() {"},{"lineNumber":93,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"JoviYeung92"},"content":"            //write to this file"},{"lineNumber":95,"author":{"gitId":"JoviYeung92"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(home + \"/tasklist.txt\"));"},{"lineNumber":96,"author":{"gitId":"JoviYeung92"},"content":"            for (String s : taskSentences) {"},{"lineNumber":97,"author":{"gitId":"JoviYeung92"},"content":"                bw.write(s + \"\\n\");"},{"lineNumber":98,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"JoviYeung92"},"content":"            bw.close();"},{"lineNumber":100,"author":{"gitId":"JoviYeung92"},"content":"        } catch (Exception ex) {"},{"lineNumber":101,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Error writing to file\");"},{"lineNumber":102,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":105,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":105}},{"path":"src/java/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package tasklist;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import storage.Storage;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":" * Contains the list of operations such as list,done,delete and find"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":"public class TaskList extends Storage {"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"     * Lists all task in the task list to the user."},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    public static void list() {"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"        for (int i \u003d 0; i \u003c taskArrayList.size(); i++) {"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(i + 1 + \".\");"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.get(i).printStatus();"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"     * Set the indexed task as done"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"     * @param userInput contains the full user input"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"     * @throws NullPointerException if array is empty. e.g, over the size of the current array"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"     * @throws ArrayIndexOutOfBoundsException if index is out of bound e.g, 0."},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"    public static void done(String userInput) {"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"            String text;"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"            int index \u003d Integer.parseInt(userInput.substring(5));"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"            tasks[index - 1].setDone(true);"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"            tasks[index - 1].printStatus();"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"            text \u003d taskSentences.get(index - 1);"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"            text \u003d text.replace(\"false\", \"true\");"},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"            taskSentences.set(index - 1, text);                              //rewrite and update the status"},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"            Storage.writeFile();                                             //update file"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":"        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Index out of bound, please re-enter.\");"},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":44,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JoviYeung92"},"content":"     * Delete the indexed task"},{"lineNumber":46,"author":{"gitId":"JoviYeung92"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"JoviYeung92"},"content":"     * @param userInput contains the full user input"},{"lineNumber":48,"author":{"gitId":"JoviYeung92"},"content":"     * @throws DukeException if index is out of bound"},{"lineNumber":49,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"JoviYeung92"},"content":"    public static void delete(String userInput) {"},{"lineNumber":51,"author":{"gitId":"JoviYeung92"},"content":"        int index \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":52,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":53,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"JoviYeung92"},"content":"            if (index \u003e taskCount || index \u003c 1) {"},{"lineNumber":55,"author":{"gitId":"JoviYeung92"},"content":"                throw new DukeException();"},{"lineNumber":56,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":58,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.get(index - 1).printStatus();"},{"lineNumber":59,"author":{"gitId":"JoviYeung92"},"content":"            taskArrayList.remove(index - 1);"},{"lineNumber":60,"author":{"gitId":"JoviYeung92"},"content":"            taskSentences.remove(index - 1);"},{"lineNumber":61,"author":{"gitId":"JoviYeung92"},"content":"            taskCount \u003d taskCount - 1;"},{"lineNumber":62,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Now you have \" + taskArrayList.size() + \" tasks in the list.\");"},{"lineNumber":63,"author":{"gitId":"JoviYeung92"},"content":"            Storage.writeFile();                                    //update file after deleting"},{"lineNumber":64,"author":{"gitId":"JoviYeung92"},"content":"        } catch (DukeException e) {"},{"lineNumber":65,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Index out of bound, please re-enter.\");"},{"lineNumber":66,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":69,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"JoviYeung92"},"content":"     * Finds all task related to the keyword as given by the user"},{"lineNumber":71,"author":{"gitId":"JoviYeung92"},"content":"     * @param userInput contains the full user input"},{"lineNumber":72,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JoviYeung92"},"content":"    public static void find(String userInput) {"},{"lineNumber":74,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":75,"author":{"gitId":"JoviYeung92"},"content":"        String keyword \u003d userInput.substring(5);"},{"lineNumber":76,"author":{"gitId":"JoviYeung92"},"content":"        int index \u003d 1;"},{"lineNumber":77,"author":{"gitId":"JoviYeung92"},"content":"        int rememberIndex \u003d -1;"},{"lineNumber":78,"author":{"gitId":"JoviYeung92"},"content":"        boolean hasFound \u003d false;"},{"lineNumber":79,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":80,"author":{"gitId":"JoviYeung92"},"content":"        for (int i \u003d 0; i \u003c taskArrayList.size(); i++) {        //first loop to check if there is at least 1 match"},{"lineNumber":81,"author":{"gitId":"JoviYeung92"},"content":"            if (taskArrayList.get(i).getName().contains(keyword)) {"},{"lineNumber":82,"author":{"gitId":"JoviYeung92"},"content":"                rememberIndex \u003d i;"},{"lineNumber":83,"author":{"gitId":"JoviYeung92"},"content":"                hasFound \u003d true;"},{"lineNumber":84,"author":{"gitId":"JoviYeung92"},"content":"                break;                                          //break out of loop after finding 1 match"},{"lineNumber":85,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":88,"author":{"gitId":"JoviYeung92"},"content":"        if (hasFound) {"},{"lineNumber":89,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":90,"author":{"gitId":"JoviYeung92"},"content":"            for (int i \u003d rememberIndex; i \u003c taskArrayList.size(); i++) {    //loop again starting from the 1st match"},{"lineNumber":91,"author":{"gitId":"JoviYeung92"},"content":"                if (taskArrayList.get(i).getName().contains(keyword)) {"},{"lineNumber":92,"author":{"gitId":"JoviYeung92"},"content":"                    System.out.print(index++ + \".\");"},{"lineNumber":93,"author":{"gitId":"JoviYeung92"},"content":"                    taskArrayList.get(i).printStatus();"},{"lineNumber":94,"author":{"gitId":"JoviYeung92"},"content":"                }"},{"lineNumber":95,"author":{"gitId":"JoviYeung92"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"JoviYeung92"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"No matching task found.\");"},{"lineNumber":98,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"JoviYeung92"},"content":"}"},{"lineNumber":101,"author":{"gitId":"JoviYeung92"},"content":""}],"authorContributionMap":{"JoviYeung92":101}},{"path":"src/java/tasks/DeadLines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":" * Represents a deadline Task"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":"public class DeadLines extends Task {"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"    private final String by;"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"    public DeadLines(String task, String dateAndTime) {"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"        super(task);"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"        this.by \u003d dateAndTime;"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the task with its current status in addition with the specified time format */"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"    public void printStatus() {"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"        System.out.print(\"[D]\");"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"        super.printStatus();"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"            String[] words \u003d by.split(\" \");"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"            String date \u003d words[0];"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"            String time \u003d words[1];"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"            LocalDate d1 \u003d LocalDate.parse(date);"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"(by: \" + d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \" + time + \")\");"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"            System.out.println(\"(by: \" + by + \")\");"},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":35}},{"path":"src/java/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":" * Represents a event Task"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"public class Events extends Task {"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"    private final String at;"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":"     * @param task contains the task"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"     * @param dateAndTime contains the date and time"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    public Events(String task, String dateAndTime) {"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"        super(task);"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"        this.at \u003d dateAndTime;"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the task with its current status */"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"    public void printStatus() {"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"        System.out.print(\"[E]\");"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"        super.printStatus();"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"        System.out.println(\"(at: \" + at + \")\");"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":26}},{"path":"src/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":" * Represents a Task"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":" * This is the primary class to other task classes"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":"    private final String taskName;"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"    /** @param task contains the task name */"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"    public Task(String task) {"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"        this.taskName \u003d task;"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"        setDone(false);"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"    /** set the task done to true */"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"    /** @return task name */"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":"    public String getName() {"},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"        return this.taskName;"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"    /** @return done status */"},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"    public boolean getDone() {"},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"        return isDone;"},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"    /** prints the task status box */"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"    public void printStatus() {"},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"        if (getDone()) {"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(\"[\" + \"\\u2713\" + \"] \" + getName());"},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"            System.out.print(\"[\" + \"\\u274C\" + \"] \" + getName());"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":41}},{"path":"src/java/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":" * Represents a todo Task"},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":"public class ToDos extends Task {"},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":"     * @param task contains the task name"},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":"    public ToDos(String task) {"},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"        super(task);"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the task with its current status */"},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"    public void printStatus() {"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"        System.out.print(\"[T]\");"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"        super.printStatus();"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"        System.out.print(\"\\n\");"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":23}},{"path":"src/java/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoviYeung92"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":3,"author":{"gitId":"JoviYeung92"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":5,"author":{"gitId":"JoviYeung92"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoviYeung92"},"content":" * Text UI of the application."},{"lineNumber":7,"author":{"gitId":"JoviYeung92"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoviYeung92"},"content":"public class TextUi {"},{"lineNumber":9,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":10,"author":{"gitId":"JoviYeung92"},"content":"    Scanner in \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":12,"author":{"gitId":"JoviYeung92"},"content":"    public TextUi() {"},{"lineNumber":13,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":15,"author":{"gitId":"JoviYeung92"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JoviYeung92"},"content":"     * Prompts for the command and reads the text entered by the user."},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JoviYeung92"},"content":"     * @return command (full line) entered by the user"},{"lineNumber":19,"author":{"gitId":"JoviYeung92"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JoviYeung92"},"content":"    public String getUserCommand() {"},{"lineNumber":21,"author":{"gitId":"JoviYeung92"},"content":"        String fullInputLine \u003d in.nextLine();"},{"lineNumber":22,"author":{"gitId":"JoviYeung92"},"content":"        return fullInputLine;"},{"lineNumber":23,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":25,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the welcome message upon the start of the application. */"},{"lineNumber":26,"author":{"gitId":"JoviYeung92"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":27,"author":{"gitId":"JoviYeung92"},"content":"        String LINEBREAK \u003d \"____________________________________________________________\\n\";"},{"lineNumber":28,"author":{"gitId":"JoviYeung92"},"content":"        String LOGO \u003d \"Hello from\\n\""},{"lineNumber":29,"author":{"gitId":"JoviYeung92"},"content":"                + \" ____        _        \\n\""},{"lineNumber":30,"author":{"gitId":"JoviYeung92"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":31,"author":{"gitId":"JoviYeung92"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":32,"author":{"gitId":"JoviYeung92"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":33,"author":{"gitId":"JoviYeung92"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":34,"author":{"gitId":"JoviYeung92"},"content":"        String GREETING \u003d  \" Hello! I\u0027m Duke\\n\""},{"lineNumber":35,"author":{"gitId":"JoviYeung92"},"content":"                + \" What can I do for you?\\n\";"},{"lineNumber":36,"author":{"gitId":"JoviYeung92"},"content":"        String GOODBYE \u003d \"Bye, Hope to see you again soon!\\n\";"},{"lineNumber":37,"author":{"gitId":"JoviYeung92"},"content":"        System.out.println(LOGO);"},{"lineNumber":38,"author":{"gitId":"JoviYeung92"},"content":"        System.out.println(LINEBREAK + GREETING + LINEBREAK);"},{"lineNumber":39,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":41,"author":{"gitId":"JoviYeung92"},"content":"    /** Prints the goodbye message at the end of the application. */"},{"lineNumber":42,"author":{"gitId":"JoviYeung92"},"content":"    public void showGoodbyeMessage() {"},{"lineNumber":43,"author":{"gitId":"JoviYeung92"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\\n\");"},{"lineNumber":44,"author":{"gitId":"JoviYeung92"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":46,"author":{"gitId":"JoviYeung92"},"content":""},{"lineNumber":47,"author":{"gitId":"JoviYeung92"},"content":"}"}],"authorContributionMap":{"JoviYeung92":47}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JoviYeung92"},"content":"REM run the program, feed parser from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"JoviYeung92":1,"-":20}}]
