[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":"This Duke program is for tracking tasks - *todo, event and deadline*. It is optimised for use via a Command Line Interface. "},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"## Quick Start"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"1. Download and install Java 11 or above in your device."},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"2. Get the latest version of the `ip.jar` from \u003ca href\u003d\"https://github.com/s-t-e-f/ip/releases/tag/v2.0\"\u003eHERE\u003c/a\u003e"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"3. To execute the JAR file from Windows Command Prompt"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"   * Input the following command : `java -jar file_Path` , where **file_path** is the location of the jar file."},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"4. Start using the app by entering commands to the user interface. "},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"   Please refer to the Features section below for detailed description of each command."},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"### Notes about the command format"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"* Words in UPPER_CASE are parameters specified by the user."},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"  \u003cbr\u003e E.g. : In `todo DESCRIPTION`, `DESCRIPTION` is a parameter "},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"  which can be used as `todo buy bread`."},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"  "},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"* Extraneous parameters for commands that do not take in parameters"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"  (such as `list` and `bye`) will be ignored."},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"  \u003cbr\u003e E.g.: `bye 123` will be interpreted as `bye`."},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"  "},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"### List all tasks : `list` "},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"Shows a list of all the tasks in the tasks list."},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"The task type, task description, and date \u0027at\u0027 or \u0027by\u0027 "},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"if the task is an event or deadline will be printed."},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003eFormat : `list`"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"### Add a ToDo task : `todo`"},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"Adds a ToDo task to the tasks list."},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `todo DESCRIPTION`"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `todo buy bread` : adds a new Todo task with the description `buy bread`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"### Add an Event : `event`"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"Adds an event to the tasks list."},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `event DESCRIPTION /at DATE`"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `DATE` has to be in the format of **YYYY-MM-DD**."},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `event project meeting /at 2021-01-01` : add a new task with the description `project meeting` "},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"on `2021-01-01`."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"### Add a Deadline : `deadline`"},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"Adds a deadline to the tasks list."},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `deadline DESCRIPTION /by DATE`"},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"* `DATE` has to be in the format of YYYY-MM-DD."},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `deadline project submission /at 2021-03-05` : add a new task with the description `project submission`,"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"  with the deadline `2021-03-05`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"s-t-e-f"},"content":"### Mark a task as done : `done`"},{"lineNumber":53,"author":{"gitId":"s-t-e-f"},"content":"Marks the specified task as done "},{"lineNumber":54,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `done INDEX`"},{"lineNumber":55,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":56,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `done 3` : marks the `third` item in the task list as done."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"s-t-e-f"},"content":"### Delete a task : `delete`"},{"lineNumber":59,"author":{"gitId":"s-t-e-f"},"content":"Deletes the specified task from the tasks list."},{"lineNumber":60,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `delete INDEX`"},{"lineNumber":61,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":62,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `delete 3` : deletes the `third` item in the task list."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"s-t-e-f"},"content":"### Find a task : `find`"},{"lineNumber":65,"author":{"gitId":"s-t-e-f"},"content":"Find tasks from the tasks list which description "},{"lineNumber":66,"author":{"gitId":"s-t-e-f"},"content":"contains the given substring."},{"lineNumber":67,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format : `find SEARCH_DESCRIPTION`"},{"lineNumber":68,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Examples :"},{"lineNumber":69,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e* `find project` : searches the task list for all the task descriptions containing the word "},{"lineNumber":70,"author":{"gitId":"s-t-e-f"},"content":"`project` and print those task(s) out."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"s-t-e-f"},"content":"### Exit the program : `bye`"},{"lineNumber":73,"author":{"gitId":"s-t-e-f"},"content":"Exits the program and saves the tasks list into a text file."},{"lineNumber":74,"author":{"gitId":"s-t-e-f"},"content":"\u003cbr\u003e Format :  `bye`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"s-t-e-f"},"content":"## Storage  "},{"lineNumber":77,"author":{"gitId":"s-t-e-f"},"content":"The task list is loaded and saved from the `user_dir/duke.txt` file automatically when "},{"lineNumber":78,"author":{"gitId":"s-t-e-f"},"content":"starting and exiting the program."}],"authorContributionMap":{"s-t-e-f":67,"-":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"    private Storage storage;"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"    private TaskList tasks;"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"    public Duke(String filePath) {"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"        ui \u003d new Ui();"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"        tasks \u003d new TaskList(storage.readFile());"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    public void run() {"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"        ui.showWelcome();"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"        boolean isExit \u003d false;"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"        while (!isExit) {"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"            String fullCommand \u003d ui.readCommand();"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"            if (fullCommand.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"                Ui.printExitMessage(isExit);"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"                Storage.saveFile();"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"                break;"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"            else {"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"                Parser.processUserRequest(fullCommand);"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"        ui.showLine();"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"    public static void main(String[] args) {"},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"        new Duke(System.getProperty(\"user.dir\") + \"\\\\Duke.txt\").run();"},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":37}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"import tasks.*;"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":" * Deals with processing user commands."},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"public class Parser {"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    static final int TODO_LENGTH \u003d 4;"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"    static final int EVENT_LENGTH \u003d 5;"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"    static final int DEADLINE_LENGTH \u003d 8;"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"    static final int DONE_LENGTH \u003d 4;"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"    static final int DELETE_LENGTH \u003d 6;"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"    static final int FIND_LENGTH \u003d 4;"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"    enum UserCommands {"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"        LIST,"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"        DONE,"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"        DELETE,"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"        FIND"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s request to determine if the user wants to list, delete, find or mark a task done"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"     * @param task User\u0027s full command input"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"    public static void processUserRequest(String task) {"},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"        if (task.equalsIgnoreCase(UserCommands.LIST.toString().toLowerCase())) {"},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"            Ui.printTaskList();"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"        else if (task.contains(UserCommands.DONE.toString().toLowerCase())) {"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"            TaskList.markTaskDone(task);"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":"        else if (task.contains(UserCommands.DELETE.toString().toLowerCase())) {"},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"            TaskList.deleteTask(task);"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"        else if (task.contains(UserCommands.FIND.toString().toLowerCase())) {"},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"            Ui.printMatchingTasks(task);"},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"        else {"},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"            TaskList.addTask(task);"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":52,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for adding deadline."},{"lineNumber":54,"author":{"gitId":"s-t-e-f"},"content":"     * Determine the description of the deadline and when the deadline has to be completed."},{"lineNumber":55,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s full command input"},{"lineNumber":56,"author":{"gitId":"s-t-e-f"},"content":"     * @return deadline object (with \u0027description\u0027 and \u0027by\u0027 initialised)"},{"lineNumber":57,"author":{"gitId":"s-t-e-f"},"content":"     * @throws DukeException if description of deadline is empty"},{"lineNumber":58,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"s-t-e-f"},"content":"    public static Deadline processAddDeadline(String userInput) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d DEADLINE_LENGTH ) {"},{"lineNumber":61,"author":{"gitId":"s-t-e-f"},"content":"            throw new DukeException(TaskType.DEADLINE);"},{"lineNumber":62,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"s-t-e-f"},"content":"        String description, by;"},{"lineNumber":64,"author":{"gitId":"s-t-e-f"},"content":"        userInput \u003d userInput.substring(DEADLINE_LENGTH+1).trim();"},{"lineNumber":65,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.contains(\"/\")){"},{"lineNumber":66,"author":{"gitId":"s-t-e-f"},"content":"            int idx \u003d userInput.indexOf(\u0027/\u0027);"},{"lineNumber":67,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d userInput.substring(0, idx);"},{"lineNumber":68,"author":{"gitId":"s-t-e-f"},"content":"            by \u003d userInput.substring(idx+3).trim();"},{"lineNumber":69,"author":{"gitId":"s-t-e-f"},"content":"            LocalDate date \u003d processDatesTimes(by);"},{"lineNumber":70,"author":{"gitId":"s-t-e-f"},"content":"            if (date !\u003d null) {"},{"lineNumber":71,"author":{"gitId":"s-t-e-f"},"content":"                return new Deadline(description, date);"},{"lineNumber":72,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"s-t-e-f"},"content":"        else {"},{"lineNumber":75,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d userInput;"},{"lineNumber":76,"author":{"gitId":"s-t-e-f"},"content":"            by \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"s-t-e-f"},"content":"        return new Deadline(description, by);"},{"lineNumber":79,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":81,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for adding event."},{"lineNumber":83,"author":{"gitId":"s-t-e-f"},"content":"     * Determine the description of the event and when the event will be conducted."},{"lineNumber":84,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s full command input"},{"lineNumber":85,"author":{"gitId":"s-t-e-f"},"content":"     * @return event object (with \u0027description\u0027 and \u0027at\u0027 initialised)"},{"lineNumber":86,"author":{"gitId":"s-t-e-f"},"content":"     * @throws DukeException if description of event is empty"},{"lineNumber":87,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"s-t-e-f"},"content":"    public static Event processAddEvent(String userInput) throws DukeException {"},{"lineNumber":89,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d EVENT_LENGTH) {"},{"lineNumber":90,"author":{"gitId":"s-t-e-f"},"content":"            throw new DukeException(TaskType.EVENT);"},{"lineNumber":91,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"s-t-e-f"},"content":"        String description, at;"},{"lineNumber":93,"author":{"gitId":"s-t-e-f"},"content":"        userInput \u003d userInput.substring(EVENT_LENGTH+1).trim();"},{"lineNumber":94,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.contains(\"/\")){"},{"lineNumber":95,"author":{"gitId":"s-t-e-f"},"content":"            int idx \u003d userInput.indexOf(\u0027/\u0027);"},{"lineNumber":96,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d userInput.substring(0, idx);"},{"lineNumber":97,"author":{"gitId":"s-t-e-f"},"content":"            at \u003d userInput.substring(idx+3).trim();"},{"lineNumber":98,"author":{"gitId":"s-t-e-f"},"content":"            LocalDate date \u003d processDatesTimes(at);"},{"lineNumber":99,"author":{"gitId":"s-t-e-f"},"content":"            if (date !\u003d null) {"},{"lineNumber":100,"author":{"gitId":"s-t-e-f"},"content":"                return new Event(description, date);"},{"lineNumber":101,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"s-t-e-f"},"content":"        else {"},{"lineNumber":104,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d userInput;"},{"lineNumber":105,"author":{"gitId":"s-t-e-f"},"content":"            at \u003d \"\";"},{"lineNumber":106,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":108,"author":{"gitId":"s-t-e-f"},"content":"        return new Event(description, at);"},{"lineNumber":109,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":111,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for adding todo."},{"lineNumber":113,"author":{"gitId":"s-t-e-f"},"content":"     * Determine the description of the todo."},{"lineNumber":114,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s full command input"},{"lineNumber":115,"author":{"gitId":"s-t-e-f"},"content":"     * @return todo object (with description initialised)"},{"lineNumber":116,"author":{"gitId":"s-t-e-f"},"content":"     * @throws DukeException if description of todo is empty"},{"lineNumber":117,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"s-t-e-f"},"content":"    public static Todo processAddTodo(String userInput) throws DukeException {"},{"lineNumber":119,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d TODO_LENGTH) {"},{"lineNumber":120,"author":{"gitId":"s-t-e-f"},"content":"            throw new DukeException(TaskType.TODO);"},{"lineNumber":121,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"s-t-e-f"},"content":"        String description \u003d userInput.substring(TODO_LENGTH+1);"},{"lineNumber":123,"author":{"gitId":"s-t-e-f"},"content":"        return new Todo(description);"},{"lineNumber":124,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":126,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"s-t-e-f"},"content":"     * Convert date string into date data type only if date string pattern match is found."},{"lineNumber":128,"author":{"gitId":"s-t-e-f"},"content":"     * If there is date string pattern match found, return null."},{"lineNumber":129,"author":{"gitId":"s-t-e-f"},"content":"     * @param dateString Date string entered by the user"},{"lineNumber":130,"author":{"gitId":"s-t-e-f"},"content":"     * @return date of date data type"},{"lineNumber":131,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"s-t-e-f"},"content":"    public static LocalDate processDatesTimes(String dateString) {"},{"lineNumber":133,"author":{"gitId":"s-t-e-f"},"content":"        LocalDate date \u003d null;"},{"lineNumber":134,"author":{"gitId":"s-t-e-f"},"content":"        Pattern patt \u003d Pattern.compile(\"2[0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]\");"},{"lineNumber":135,"author":{"gitId":"s-t-e-f"},"content":"        Matcher matcher \u003d patt.matcher(dateString);"},{"lineNumber":136,"author":{"gitId":"s-t-e-f"},"content":"        boolean ifmatch \u003d matcher.find();"},{"lineNumber":137,"author":{"gitId":"s-t-e-f"},"content":"        if (ifmatch) {"},{"lineNumber":138,"author":{"gitId":"s-t-e-f"},"content":"            try {"},{"lineNumber":139,"author":{"gitId":"s-t-e-f"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":140,"author":{"gitId":"s-t-e-f"},"content":"                date \u003d LocalDate.parse(dateString.substring(matcher.start(), matcher.start()+10), formatter);"},{"lineNumber":141,"author":{"gitId":"s-t-e-f"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":142,"author":{"gitId":"s-t-e-f"},"content":"                System.out.println(\"Unable to parse date ...\");"},{"lineNumber":143,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"s-t-e-f"},"content":"        return date;"},{"lineNumber":146,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":148,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for marking task done."},{"lineNumber":150,"author":{"gitId":"s-t-e-f"},"content":"     * Get the index of the task to be mark done."},{"lineNumber":151,"author":{"gitId":"s-t-e-f"},"content":"     * If no index is indicated by user/ index is invalid, print error message."},{"lineNumber":152,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s command"},{"lineNumber":153,"author":{"gitId":"s-t-e-f"},"content":"     * @return The index of the task to be mark done + 1"},{"lineNumber":154,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"s-t-e-f"},"content":"    public static int processTaskDone(String userInput) {"},{"lineNumber":156,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d DONE_LENGTH) {"},{"lineNumber":157,"author":{"gitId":"s-t-e-f"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":158,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"s-t-e-f"},"content":"        int idx \u003d -1;"},{"lineNumber":160,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"s-t-e-f"},"content":"            idx \u003d Integer.parseInt(String.valueOf(userInput.charAt(DONE_LENGTH+1)));"},{"lineNumber":162,"author":{"gitId":"s-t-e-f"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":163,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"OOPS!!! Please enter an integer after \u0027done\u0027.\");"},{"lineNumber":164,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":165,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"OOPS!!! Please choose a valid task index.\");"},{"lineNumber":166,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"s-t-e-f"},"content":"        return idx;"},{"lineNumber":168,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":170,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for deleting a task."},{"lineNumber":172,"author":{"gitId":"s-t-e-f"},"content":"     * Get the index of the task to be deleted."},{"lineNumber":173,"author":{"gitId":"s-t-e-f"},"content":"     * If no index is indicated by user/ index is invalid, print error message."},{"lineNumber":174,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s command"},{"lineNumber":175,"author":{"gitId":"s-t-e-f"},"content":"     * @return The index of the task to be deleted + 1"},{"lineNumber":176,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"s-t-e-f"},"content":"    public static int processDeleteTask(String userInput) {"},{"lineNumber":178,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d DELETE_LENGTH) {"},{"lineNumber":179,"author":{"gitId":"s-t-e-f"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":180,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"s-t-e-f"},"content":"        int idx \u003d -1;"},{"lineNumber":182,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":183,"author":{"gitId":"s-t-e-f"},"content":"            idx \u003d Integer.parseInt(String.valueOf(userInput.charAt(DELETE_LENGTH+1)));"},{"lineNumber":184,"author":{"gitId":"s-t-e-f"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":185,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"OOPS!!! Please enter an integer after \u0027delete\u0027.\");"},{"lineNumber":186,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":187,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"OOPS!!! Please choose a valid task index.\");"},{"lineNumber":188,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"s-t-e-f"},"content":"        return idx;"},{"lineNumber":190,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"s-t-e-f"},"content":"     * Process user\u0027s command for finding tasks that match specified search description."},{"lineNumber":193,"author":{"gitId":"s-t-e-f"},"content":"     * Get the search description that the user specified."},{"lineNumber":194,"author":{"gitId":"s-t-e-f"},"content":"     * If there is no search description, return an empty string."},{"lineNumber":195,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s command"},{"lineNumber":196,"author":{"gitId":"s-t-e-f"},"content":"     * @return The search dscription"},{"lineNumber":197,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"s-t-e-f"},"content":"    public static String processFindTask(String userInput) {"},{"lineNumber":199,"author":{"gitId":"s-t-e-f"},"content":"        // when the user did not enter search description"},{"lineNumber":200,"author":{"gitId":"s-t-e-f"},"content":"        if (userInput.length() \u003d\u003d FIND_LENGTH) {"},{"lineNumber":201,"author":{"gitId":"s-t-e-f"},"content":"            return \"\";"},{"lineNumber":202,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"s-t-e-f"},"content":"        return userInput.substring(FIND_LENGTH+1).trim();"},{"lineNumber":204,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":205}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Task;"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Todo;"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Event;"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"import java.io.FileReader;"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":" * Deals with loading tasks from the file and saving task in the file."},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"    private static String filePath;"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"     * Contructor for Storage."},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"     * Initialise the file path."},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"     * @param filePath"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"    public Storage(String filePath) {"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"     * Process task object from a line in the loaded file."},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"     * Determine task type, description, isDone, at (for event), by (for deadline)x."},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"     * @param line A line in the loaded file."},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"     * @return Task object to be added to the arraylist"},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"    public static Task processFile(String line) {"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"        Task t \u003d null;"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"        int idx;"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"        String description, at , by;"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":"            t \u003d new Todo(line.substring(7));"},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"            idx \u003d line.indexOf(\u0027(\u0027);"},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d line.substring(7, idx).trim();"},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"            at \u003d line.substring(idx+4, line.length()-1).trim();"},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"            t \u003d new Event(description, at);"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"            idx \u003d line.indexOf(\u0027(\u0027);"},{"lineNumber":51,"author":{"gitId":"s-t-e-f"},"content":"            description \u003d line.substring(7, idx).trim();"},{"lineNumber":52,"author":{"gitId":"s-t-e-f"},"content":"            by \u003d line.substring(idx+4, line.length()-1).trim();"},{"lineNumber":53,"author":{"gitId":"s-t-e-f"},"content":"            t \u003d new Deadline(description, by);"},{"lineNumber":54,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"s-t-e-f"},"content":"        // check if task isDone"},{"lineNumber":56,"author":{"gitId":"s-t-e-f"},"content":"        if (line.contains(\"\\u2713\")) {"},{"lineNumber":57,"author":{"gitId":"s-t-e-f"},"content":"            t.markAsDone();"},{"lineNumber":58,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"s-t-e-f"},"content":"        return t;"},{"lineNumber":60,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":62,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"s-t-e-f"},"content":"     * Read line by line from the file as specified by the file path."},{"lineNumber":64,"author":{"gitId":"s-t-e-f"},"content":"     * @return Arraylist containing all the tasks loaded from the file"},{"lineNumber":65,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"s-t-e-f"},"content":"    public static ArrayList\u003cTask\u003e readFile() {"},{"lineNumber":67,"author":{"gitId":"s-t-e-f"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"s-t-e-f"},"content":"            FileReader reader \u003d new FileReader(filePath);"},{"lineNumber":70,"author":{"gitId":"s-t-e-f"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(reader);"},{"lineNumber":71,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":72,"author":{"gitId":"s-t-e-f"},"content":"            String line;"},{"lineNumber":73,"author":{"gitId":"s-t-e-f"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"},{"lineNumber":74,"author":{"gitId":"s-t-e-f"},"content":"                Task t \u003d processFile(line);"},{"lineNumber":75,"author":{"gitId":"s-t-e-f"},"content":"                tasks.add(t);"},{"lineNumber":76,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":78,"author":{"gitId":"s-t-e-f"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":79,"author":{"gitId":"s-t-e-f"},"content":"            // starts with an empty file (empty taskArray)"},{"lineNumber":80,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"No file is loaded. Starting with an empty task list ... \");"},{"lineNumber":81,"author":{"gitId":"s-t-e-f"},"content":"            return null;"},{"lineNumber":82,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IOException e) {"},{"lineNumber":83,"author":{"gitId":"s-t-e-f"},"content":"            e.printStackTrace();"},{"lineNumber":84,"author":{"gitId":"s-t-e-f"},"content":"            return null;"},{"lineNumber":85,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"s-t-e-f"},"content":"        return tasks;"},{"lineNumber":87,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":89,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"s-t-e-f"},"content":"     * Write the updated arraylist back into the file path specified."},{"lineNumber":91,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"s-t-e-f"},"content":"    public static void saveFile() {"},{"lineNumber":93,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"s-t-e-f"},"content":"            FileWriter writer \u003d new FileWriter(filePath, false);"},{"lineNumber":95,"author":{"gitId":"s-t-e-f"},"content":"            ArrayList\u003cTask\u003e tasks \u003d TaskList.getTasks();"},{"lineNumber":96,"author":{"gitId":"s-t-e-f"},"content":"            for (Task t : tasks) {"},{"lineNumber":97,"author":{"gitId":"s-t-e-f"},"content":"                String task \u003d t.toString() + \"\\n\";"},{"lineNumber":98,"author":{"gitId":"s-t-e-f"},"content":"                writer.write(task);"},{"lineNumber":99,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"s-t-e-f"},"content":"            writer.close();"},{"lineNumber":101,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitId":"s-t-e-f"},"content":"            e.printStackTrace();"},{"lineNumber":103,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":105}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"import exceptions.ErrorHandler;"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Task;"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"import tasks.TaskType;"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":" * Contains the task list and tracks the number of tasks in the list."},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":" * Deals with tasks-related operations, such as add tasks, delete tasks, find tasks and marking a task done."},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"    private static int tasksCount;"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"     * Constructor for TaskList"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"     * Initialises \u0027tasks\u0027 arraylist and the number of tasks."},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"     * If \u0027tasks\u0027 is null, create an empty \u0027tasks\u0027 arraylist and set number of tasks to 0."},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"     * @param tasks ArrayList containing all the tasks"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"        if (tasks \u003d\u003d null) {"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"            tasksCount \u003d0;"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"        this.tasksCount \u003d tasks.size();"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"     * Return \u0027tasks\u0027 arraylist."},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"     * @return tasks ArrayList containing all the tasks"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"    public static ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"        return tasks;"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":"     * Add new task (todo/ event/ deadline) into \u0027tasks\u0027 arraylist"},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"     * If description of task is empty, print error message indicating that description of task cannot be empty."},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"     * If user command does not contain (\u0027todo\u0027/ \u0027event\u0027/ \u0027deadline\u0027), print error message indicating invalid command."},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"     * @param userInput User\u0027s description of task to be added"},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"    public static void addTask(String userInput) {"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"            Task t;"},{"lineNumber":51,"author":{"gitId":"s-t-e-f"},"content":"            if (userInput.toLowerCase().startsWith(TaskType.DEADLINE.toString().toLowerCase())){"},{"lineNumber":52,"author":{"gitId":"s-t-e-f"},"content":"                t \u003d Parser.processAddDeadline(userInput);"},{"lineNumber":53,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"s-t-e-f"},"content":"            else if (userInput.toLowerCase().startsWith(TaskType.EVENT.toString().toLowerCase())){"},{"lineNumber":55,"author":{"gitId":"s-t-e-f"},"content":"                t \u003d Parser.processAddEvent(userInput);"},{"lineNumber":56,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"s-t-e-f"},"content":"            else if (userInput.toLowerCase().startsWith(TaskType.TODO.toString().toLowerCase())){"},{"lineNumber":58,"author":{"gitId":"s-t-e-f"},"content":"                t \u003d Parser.processAddTodo(userInput);"},{"lineNumber":59,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"s-t-e-f"},"content":"            else {"},{"lineNumber":61,"author":{"gitId":"s-t-e-f"},"content":"                ErrorHandler.printErrorMsgInvalidInput();"},{"lineNumber":62,"author":{"gitId":"s-t-e-f"},"content":"                return;"},{"lineNumber":63,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"s-t-e-f"},"content":"            tasks.add(t);"},{"lineNumber":65,"author":{"gitId":"s-t-e-f"},"content":"            Ui.printAddTaskMessage(tasks, tasksCount);"},{"lineNumber":66,"author":{"gitId":"s-t-e-f"},"content":"            tasksCount++;"},{"lineNumber":67,"author":{"gitId":"s-t-e-f"},"content":"        } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"s-t-e-f"},"content":"            e.getErrorTaskCannotBeEmpty();"},{"lineNumber":69,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":72,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"s-t-e-f"},"content":"     * Mark the task, as specified by the user, as done."},{"lineNumber":74,"author":{"gitId":"s-t-e-f"},"content":"     * If no index is indicated, print error message indicating invalid index."},{"lineNumber":75,"author":{"gitId":"s-t-e-f"},"content":"     * @param task User\u0027s input"},{"lineNumber":76,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"s-t-e-f"},"content":"    public static void markTaskDone(String task) {"},{"lineNumber":78,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"s-t-e-f"},"content":"            int idx \u003d Parser.processTaskDone(task);"},{"lineNumber":80,"author":{"gitId":"s-t-e-f"},"content":"            Task taskDone \u003d tasks.get(idx-1);"},{"lineNumber":81,"author":{"gitId":"s-t-e-f"},"content":"            taskDone.markAsDone();"},{"lineNumber":82,"author":{"gitId":"s-t-e-f"},"content":"            Ui.printMarkTaskDoneMessage(taskDone);"},{"lineNumber":83,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"s-t-e-f"},"content":"            ErrorHandler.printErrorMsgIndexCannotBeEmpty();"},{"lineNumber":85,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":88,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"s-t-e-f"},"content":"     * Delete the task, as specified by the user, from the arraylist."},{"lineNumber":90,"author":{"gitId":"s-t-e-f"},"content":"     * If no index is indicated, print error message indicating invalid index."},{"lineNumber":91,"author":{"gitId":"s-t-e-f"},"content":"     * @param task User\u0027s input"},{"lineNumber":92,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"s-t-e-f"},"content":"    public static void deleteTask(String task) {"},{"lineNumber":94,"author":{"gitId":"s-t-e-f"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"s-t-e-f"},"content":"            int idx \u003d Parser.processDeleteTask(task);"},{"lineNumber":96,"author":{"gitId":"s-t-e-f"},"content":"            Task taskDeleted \u003d tasks.get(idx-1);"},{"lineNumber":97,"author":{"gitId":"s-t-e-f"},"content":"            tasks.remove(idx-1);"},{"lineNumber":98,"author":{"gitId":"s-t-e-f"},"content":"            tasksCount--;"},{"lineNumber":99,"author":{"gitId":"s-t-e-f"},"content":"            Ui.printDeleteTaskMessage(taskDeleted, tasksCount);"},{"lineNumber":100,"author":{"gitId":"s-t-e-f"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":101,"author":{"gitId":"s-t-e-f"},"content":"            ErrorHandler.printErrorMsgIndexCannotBeEmpty();"},{"lineNumber":102,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":104,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":106,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"s-t-e-f"},"content":"     * Returns tasks which contains substring that matches user\u0027s indicated search description"},{"lineNumber":108,"author":{"gitId":"s-t-e-f"},"content":"     * If no match is found, return nothing."},{"lineNumber":109,"author":{"gitId":"s-t-e-f"},"content":"     * @param task ArrayList containing all the tasks"},{"lineNumber":110,"author":{"gitId":"s-t-e-f"},"content":"     * @return"},{"lineNumber":111,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"s-t-e-f"},"content":"    public static ArrayList\u003cTask\u003e findTask(String task) {"},{"lineNumber":113,"author":{"gitId":"s-t-e-f"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":114,"author":{"gitId":"s-t-e-f"},"content":"        String searchDescription \u003d Parser.processFindTask(task);"},{"lineNumber":115,"author":{"gitId":"s-t-e-f"},"content":"        for (Task t: tasks) {"},{"lineNumber":116,"author":{"gitId":"s-t-e-f"},"content":"            if (t.getDescription().contains(searchDescription)){"},{"lineNumber":117,"author":{"gitId":"s-t-e-f"},"content":"                matchingTasks.add(t);"},{"lineNumber":118,"author":{"gitId":"s-t-e-f"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"s-t-e-f"},"content":"        return matchingTasks;"},{"lineNumber":121,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":123,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":123}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import tasks.Task;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":" * Deals with interactions with the user."},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"     * Print welcome message when user launches the application."},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    public static void showWelcome() {"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"     * Read in user\u0027s input as string."},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"     * @return User\u0027s input as string"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"    public static String readCommand() {"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"        return sc.nextLine().trim();"},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"     * Print divider line."},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"    public static void showLine() {"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"------------------------------------------\");"},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"     * Print exit message when the user exits the application."},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"     * Set the boolean variable indicating whether user wishes to exit the application \u003d true."},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"     * @param isExit Boolean variable indicating whether user wishes to exit the application"},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"    public static void printExitMessage(boolean isExit) {"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Bye. Hope to see you again soon!\");"},{"lineNumber":51,"author":{"gitId":"s-t-e-f"},"content":"        isExit \u003d true;"},{"lineNumber":52,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":54,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"s-t-e-f"},"content":"     * Print all the tasks in the \u0027tasks\u0027 arraylist."},{"lineNumber":56,"author":{"gitId":"s-t-e-f"},"content":"     * @param tasks ArrayList containing all the tasks"},{"lineNumber":57,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"s-t-e-f"},"content":"    public static void printTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":59,"author":{"gitId":"s-t-e-f"},"content":"        for (int i\u003d0; i\u003ctasks.size(); i++) {"},{"lineNumber":60,"author":{"gitId":"s-t-e-f"},"content":"            System.out.println(\"    \" + (i+1) + \". \" + tasks.get(i));"},{"lineNumber":61,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":64,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"s-t-e-f"},"content":"     * Print message for user\u0027s command \u0027list\u0027."},{"lineNumber":66,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"s-t-e-f"},"content":"    public static void printTaskList() {"},{"lineNumber":68,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Here are the tasks in your list: \");"},{"lineNumber":69,"author":{"gitId":"s-t-e-f"},"content":"        printTasks(TaskList.getTasks());"},{"lineNumber":70,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":71,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":73,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"s-t-e-f"},"content":"     * Print message for user\u0027s command \u0027find\u0027."},{"lineNumber":75,"author":{"gitId":"s-t-e-f"},"content":"     * @param task ArrayList containing all the matching tasks"},{"lineNumber":76,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"s-t-e-f"},"content":"    public static void printMatchingTasks(String task) {"},{"lineNumber":78,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Here are the matching tasks in your list: \");"},{"lineNumber":79,"author":{"gitId":"s-t-e-f"},"content":"        printTasks(TaskList.findTask(task));"},{"lineNumber":80,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":81,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":83,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"s-t-e-f"},"content":"     * Print message for adding task."},{"lineNumber":85,"author":{"gitId":"s-t-e-f"},"content":"     * @param tasks ArrayList containing all the tasks"},{"lineNumber":86,"author":{"gitId":"s-t-e-f"},"content":"     * @param tasksCount The number of tasks in the arraylist"},{"lineNumber":87,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"s-t-e-f"},"content":"    public static void printAddTaskMessage(ArrayList\u003cTask\u003e tasks, int tasksCount) {"},{"lineNumber":89,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Got it. I\u0027ve added this task: \");"},{"lineNumber":90,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"      \" + tasks.get(tasksCount));"},{"lineNumber":91,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Now you have \" + (tasksCount + 1) + \" tasks in the list.\");"},{"lineNumber":92,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":93,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":95,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"s-t-e-f"},"content":"     * Print message for marking task done."},{"lineNumber":97,"author":{"gitId":"s-t-e-f"},"content":"     * @param task Task object to be mark done"},{"lineNumber":98,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"s-t-e-f"},"content":"    public static void printMarkTaskDoneMessage(Task task) {"},{"lineNumber":100,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":101,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    \" + task);"},{"lineNumber":102,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":103,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":105,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"s-t-e-f"},"content":"     * Print message for deleting a task."},{"lineNumber":107,"author":{"gitId":"s-t-e-f"},"content":"     * @param task Task object to be deleted"},{"lineNumber":108,"author":{"gitId":"s-t-e-f"},"content":"     * @param tasksCount The number of tasks in the arraylist"},{"lineNumber":109,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"s-t-e-f"},"content":"    public static void printDeleteTaskMessage(Task task, int tasksCount) {"},{"lineNumber":111,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Noted. I\u0027ve removed this task: \");"},{"lineNumber":112,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    \" + task);"},{"lineNumber":113,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"    Now you have \" + tasksCount + \" tasks in the list.\");"},{"lineNumber":114,"author":{"gitId":"s-t-e-f"},"content":"        showLine();"},{"lineNumber":115,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"s-t-e-f"},"content":"}"},{"lineNumber":117,"author":{"gitId":"s-t-e-f"},"content":""}],"authorContributionMap":{"s-t-e-f":117}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import tasks.TaskType;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":" * Represents exceptions specific to the Duke application."},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"    private final TaskType TASKTYPE;"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"    public DukeException(TaskType taskType) {"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"        this.TASKTYPE \u003d taskType;"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"     * Print error message when the user does not indicate task description while adding task."},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"    public void getErrorTaskCannotBeEmpty() {"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"OOPS!!! The description of a \" + TASKTYPE.toString().toLowerCase() + \" cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"     * Print error message when the user does not indicate search description while finding tasks."},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"    public void getErrorSearchCannotBeEmpty() {"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"OOPS!!! The search description cannot be empty. \");"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":30}},{"path":"src/main/java/exceptions/ErrorHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"public class ErrorHandler {"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"     * Print error message indicating invalid user\u0027s command."},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    public static void printErrorMsgInvalidInput() {"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"     * Print error message indicating invalid index."},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"    public static void printErrorMsgIndexCannotBeEmpty() {"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"        System.out.println(\"OOPS!!! Please enter a valid index.\");"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":18}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"    String byString \u003d \"\";"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    LocalDate by \u003d null;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"        this.byString \u003d by;"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"        this.by \u003d by;"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"        if (by !\u003d null) {"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"            byString \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"        return String.format(\"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + byString + \")\");"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":26}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":" * Represents an event. A \u003ccode\u003eEvent\u003c/code\u003e object corresponds to"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":" * a task represented by description and \u0027at\u0027 - indicating when the event is conducted."},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"    LocalDate at \u003d null;"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"    String atString \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"     * Constructor for Event object if \u0027as\u0027 is of String type."},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"     * @param description Description of the event object"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"     * @param at When the event will be conducted"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"    public Event(String description, String at) {"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"        this.atString \u003d at;"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"     * Constructor for Event object if \u0027as\u0027 is of LocalDate type."},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"     * @param description"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"     * @param at"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"        super(description);"},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"        this.at \u003d at;"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"     * Override toString() function."},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":"     * @return message shown when printing an event object"},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"        if (at !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"            atString \u003d at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":"        return String.format(\"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \" + atString + \")\");"},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":43}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object contains its description"},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":" * and \u0027isDone\u0027 boolean variable - indicating whether the task is completed."},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"     * Constructor for Task object."},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"     * @param description Description of the task object"},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":20,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"s-t-e-f"},"content":"     * Getter method for description."},{"lineNumber":22,"author":{"gitId":"s-t-e-f"},"content":"     * @return Description of the task object"},{"lineNumber":23,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"s-t-e-f"},"content":"    public String getDescription() {"},{"lineNumber":25,"author":{"gitId":"s-t-e-f"},"content":"        return description;"},{"lineNumber":26,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":28,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"s-t-e-f"},"content":"     * Getter method for isDone."},{"lineNumber":30,"author":{"gitId":"s-t-e-f"},"content":"     * @return Boolean variable isDone, indicating if the task is done"},{"lineNumber":31,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"s-t-e-f"},"content":"    public boolean isDone() {"},{"lineNumber":33,"author":{"gitId":"s-t-e-f"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":36,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"s-t-e-f"},"content":"     * Getter method for status icon"},{"lineNumber":38,"author":{"gitId":"s-t-e-f"},"content":"     * @return Status Icon (tick or X symbols)"},{"lineNumber":39,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"s-t-e-f"},"content":"    public String getStatusIcon() {"},{"lineNumber":41,"author":{"gitId":"s-t-e-f"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":42,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":44,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"s-t-e-f"},"content":"     * Mark a task done."},{"lineNumber":46,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"s-t-e-f"},"content":"    public void markAsDone() {"},{"lineNumber":48,"author":{"gitId":"s-t-e-f"},"content":"        this.isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":50}},{"path":"src/main/java/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":" * Enum class representing the different task types."},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":"    TODO,"},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    EVENT,"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"    DEADLINE"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":10}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"s-t-e-f"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":3,"author":{"gitId":"s-t-e-f"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"s-t-e-f"},"content":" * Represents a todo task."},{"lineNumber":5,"author":{"gitId":"s-t-e-f"},"content":" */"},{"lineNumber":6,"author":{"gitId":"s-t-e-f"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":8,"author":{"gitId":"s-t-e-f"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"s-t-e-f"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"s-t-e-f"},"content":""},{"lineNumber":12,"author":{"gitId":"s-t-e-f"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"s-t-e-f"},"content":"     * Override toString() function."},{"lineNumber":14,"author":{"gitId":"s-t-e-f"},"content":"     * @return message shown when printing a Todo object"},{"lineNumber":15,"author":{"gitId":"s-t-e-f"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"s-t-e-f"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"s-t-e-f"},"content":"        return String.format(\"[T][\" + getStatusIcon() + \"] \" + description);"},{"lineNumber":18,"author":{"gitId":"s-t-e-f"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"s-t-e-f"},"content":"}"}],"authorContributionMap":{"s-t-e-f":19}}]
