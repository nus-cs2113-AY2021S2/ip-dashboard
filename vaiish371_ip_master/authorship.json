[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"   "},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"------------------------------------------"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"\tHello! I\u0027m Duke"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"\tWhat can I do for you?"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"------------------------------------------ "},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"```"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"## Running the JAR File on computer:"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"The **Duke** app is run via a file with the extension `.jar`. The following steps will help you set up **Duke** to run on your computer."},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":"1. Set up the `.jar` file by downloading the latest version from [here](https://github.com/nivikcivik/ip/releases)"},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"    1. Click on `Individual Project.jar` under the latest version (`v1.0` or beyond)"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"    1. Once the download prompt appears, `save` the file to your desired folder on your computer. This folder will be the _home folder_ for your tasks list."},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":" "},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"1. Look for the `terminal` or `command prompt` application on your computer."},{"lineNumber":41,"author":{"gitId":"vaiish371"},"content":"    1. Type `java --version` in the terminal on your computer to check the version of java and ensure its JDK 11."},{"lineNumber":42,"author":{"gitId":"vaiish371"},"content":"    2. Locate your _home folder_ where you have saved the `.jar` file."},{"lineNumber":43,"author":{"gitId":"vaiish371"},"content":"    3. Use commands `cd` to change directory ( or folder) and `ls` (or `dir` on command prompt on Windows) to view the files in your current directory."},{"lineNumber":44,"author":{"gitId":"vaiish371"},"content":" "},{"lineNumber":45,"author":{"gitId":"vaiish371"},"content":"1. Once you have entered the _home folder_, type the following command: `java -jar \u003cname of .jar file\u003e` e.g. `java -jar ip.jar`"},{"lineNumber":46,"author":{"gitId":"vaiish371"},"content":"1. You should see the **Duke** logo along with a welcome message.   "},{"lineNumber":47,"author":{"gitId":"vaiish371"},"content":"   **Duke** is now running!"},{"lineNumber":48,"author":{"gitId":"vaiish371"},"content":"    1. You would see this greeting message, for example:"},{"lineNumber":49,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":50,"author":{"gitId":"vaiish371"},"content":"```"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":53,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":54,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":57,"author":{"gitId":"vaiish371"},"content":"   "},{"lineNumber":58,"author":{"gitId":"vaiish371"},"content":"------------------------------------------"},{"lineNumber":59,"author":{"gitId":"vaiish371"},"content":"\tHello! I\u0027m Duke"},{"lineNumber":60,"author":{"gitId":"vaiish371"},"content":"\tWhat can I do for you?"},{"lineNumber":61,"author":{"gitId":"vaiish371"},"content":"------------------------------------------ "},{"lineNumber":62,"author":{"gitId":"-"},"content":"```"},{"lineNumber":63,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":64,"author":{"gitId":"vaiish371"},"content":" "},{"lineNumber":65,"author":{"gitId":"vaiish371"},"content":"## Command Summary:"},{"lineNumber":66,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":67,"author":{"gitId":"vaiish371"},"content":"1.`list` : Lists all the tasks that you have created."},{"lineNumber":68,"author":{"gitId":"vaiish371"},"content":"1. `done taskNumber` : Marks a particular task as done."},{"lineNumber":69,"author":{"gitId":"vaiish371"},"content":"    For example: `\u003edone 1` in this following example will give:"},{"lineNumber":70,"author":{"gitId":"vaiish371"},"content":"    ```"},{"lineNumber":71,"author":{"gitId":"vaiish371"},"content":"    Here are the tasks in your list:"},{"lineNumber":72,"author":{"gitId":"vaiish371"},"content":"\t1. [T][ ] read"},{"lineNumber":73,"author":{"gitId":"vaiish371"},"content":"\t2. [D][ ] kk (by: Mar 08 2021, 04:30 PM)"},{"lineNumber":74,"author":{"gitId":"vaiish371"},"content":"\t3. [E][ ] meeting (at: 2021-08-19 2:00)"},{"lineNumber":75,"author":{"gitId":"vaiish371"},"content":"\t"},{"lineNumber":76,"author":{"gitId":"vaiish371"},"content":"\t\u003e done 2"},{"lineNumber":77,"author":{"gitId":"vaiish371"},"content":"\t"},{"lineNumber":78,"author":{"gitId":"vaiish371"},"content":"   ------------------------------------------"},{"lineNumber":79,"author":{"gitId":"vaiish371"},"content":"   Nice! I\u0027ve marked this task as done:"},{"lineNumber":80,"author":{"gitId":"vaiish371"},"content":"\t2. [D][âœ“] kk (by: Mar 08 2021, 04:30 PM)"},{"lineNumber":81,"author":{"gitId":"vaiish371"},"content":"\t------------------------------------------"},{"lineNumber":82,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":83,"author":{"gitId":"vaiish371"},"content":"1.  `todo description` : Create/adds a Todo task with a particular description. For ex: `\u003e todo read books;`"},{"lineNumber":84,"author":{"gitId":"vaiish371"},"content":"1. `deadline description /by YYYY-MM-DD HH:MM` : Create/adds a Deadline task with a particular description and deadline written in the below format:"},{"lineNumber":85,"author":{"gitId":"vaiish371"},"content":"      Date: YYYY-MM-DD. Ex: 2021-03-09"},{"lineNumber":86,"author":{"gitId":"vaiish371"},"content":"      Time: HH:MM (24-hr format). Ex: 16:00"},{"lineNumber":87,"author":{"gitId":"vaiish371"},"content":"      `\u003e deadline assignment /by 2021-03-09 16:00`"},{"lineNumber":88,"author":{"gitId":"vaiish371"},"content":"      ```"},{"lineNumber":89,"author":{"gitId":"vaiish371"},"content":"      Got it. I\u0027ve added this task: "},{"lineNumber":90,"author":{"gitId":"vaiish371"},"content":"        2. [D][ ] assignment (by: Mar 09 2021, 04:00 PM)"},{"lineNumber":91,"author":{"gitId":"vaiish371"},"content":"           Now you have 2 tasks in the list."},{"lineNumber":92,"author":{"gitId":"vaiish371"},"content":"      ```"},{"lineNumber":93,"author":{"gitId":"vaiish371"},"content":"1. `event description /at YYYY-MM-DD HH:MM` : Create/adds an Event task with a particular description and event time written in the below format:"},{"lineNumber":94,"author":{"gitId":"vaiish371"},"content":"      Date: YYYY-MM-DD. Ex: 2021-03-09"},{"lineNumber":95,"author":{"gitId":"vaiish371"},"content":"      Time: HH:MM (24-hr format). Ex: 16:00"},{"lineNumber":96,"author":{"gitId":"vaiish371"},"content":"      `\u003e event meeting /at 2021-03-09 16:00`"},{"lineNumber":97,"author":{"gitId":"vaiish371"},"content":"      ```"},{"lineNumber":98,"author":{"gitId":"vaiish371"},"content":"      Got it. I\u0027ve added this task: "},{"lineNumber":99,"author":{"gitId":"vaiish371"},"content":"        3. [E][ ] meeting (at: Mar 09 2021, 04:00 PM)"},{"lineNumber":100,"author":{"gitId":"vaiish371"},"content":"           Now you have 3 tasks in the list."},{"lineNumber":101,"author":{"gitId":"vaiish371"},"content":"      ```"},{"lineNumber":102,"author":{"gitId":"vaiish371"},"content":"1. `find keyword` : Searched for the keyword among the tasks and lists down all tasks which contain it."},{"lineNumber":103,"author":{"gitId":"vaiish371"},"content":"    For Ex: `\u003e find read`"},{"lineNumber":104,"author":{"gitId":"vaiish371"},"content":"    ```"},{"lineNumber":105,"author":{"gitId":"vaiish371"},"content":"    Searching for task with keyword: read..."},{"lineNumber":106,"author":{"gitId":"vaiish371"},"content":"\t1. [T][ ] read"},{"lineNumber":107,"author":{"gitId":"vaiish371"},"content":"\t5. [T][ ] read books"},{"lineNumber":108,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":109,"author":{"gitId":"vaiish371"},"content":"    ```"},{"lineNumber":110,"author":{"gitId":"vaiish371"},"content":"    NOTE: Keywords must only be **SINGLE-WORDED** with **NO TRAILING WHITE SPACES*."},{"lineNumber":111,"author":{"gitId":"vaiish371"},"content":"    "},{"lineNumber":112,"author":{"gitId":"vaiish371"},"content":"1. `delete taskNumber`: Removes a specified task. For Ex: `\u003e delete 3`"},{"lineNumber":113,"author":{"gitId":"vaiish371"},"content":"1. `bye`: Terminates the program, exits from application. "},{"lineNumber":114,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":115,"author":{"gitId":"vaiish371"},"content":"NOTE: To safely save your data of the tasks, remember to say `bye`."},{"lineNumber":116,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":117,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":118,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":119,"author":{"gitId":"vaiish371"},"content":"   "},{"lineNumber":120,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":121,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":122,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":123,"author":{"gitId":"vaiish371"},"content":""}],"authorContributionMap":{"vaiish371":92,"-":31}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Task;"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"    protected Storage storage;"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"    protected TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"    protected Ui ui;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"    protected Parser parser;"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"    public static ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":"    public Duke(String filePath) {"},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"        ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"        storage \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":"            taskArray \u003d storage.loadTasks(filePath + \"/data.txt\");"},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":"            tasks \u003d new TaskList(taskArray);"},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"File not found! Try again.\");"},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"    public void run() {"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"        ui.printHelloMsg();"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"        boolean isExit \u003d false;"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"        while (true) {"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"            try {"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"                String fullCommand \u003d ui.readCommand().trim();"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"                if(fullCommand.equals(\"bye\")){"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"                    break;"},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":"                ui.printHorizontal(); // show the divider line (\"_______\")"},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"                parser \u003d new Parser(taskArray);"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"                parser.parseCommand(fullCommand);"},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":"                storage.saveTasks(taskArray);"},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"            } catch (DukeException e){"},{"lineNumber":41,"author":{"gitId":"vaiish371"},"content":"                ui.printInvalidCommand();"},{"lineNumber":42,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"vaiish371"},"content":"        storage.saveTasks(taskArray);"},{"lineNumber":45,"author":{"gitId":"vaiish371"},"content":"        ui.printByeMsg();"},{"lineNumber":46,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":48,"author":{"gitId":"vaiish371"},"content":"    public static void main(String[] args) {"},{"lineNumber":49,"author":{"gitId":"vaiish371"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":50,"author":{"gitId":"vaiish371"},"content":"        new Duke(filePath).run();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vaiish371":49,"-":3}},{"path":"src/main/java/duke/DukeArrayException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"public class DukeArrayException extends Exception{"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":4}},{"path":"src/main/java/duke/MultipleKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"/** This exception is thrown when multiple keywords"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":" * are typed when searching for a task."},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"public class MultipleKeywordException extends Exception{"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":7}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Task;"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"    protected ArrayList\u003cTask\u003e taskArray;"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"    public Parser(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"        this.taskArray \u003d tasks;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":"     * Determines the commands entered by user and"},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"     * the appropriate function to call."},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"     * @param userCommand Command typed in by user"},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":"     * @throws DukeException when there is an invalid command send in by user."},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"    public void parseCommand(String userCommand) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":"        TaskList taskList \u003d new TaskList(taskArray);"},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":"            if (userCommand.trim().equals(\"list\")) {"},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"                taskList.listTasks();"},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"            } else if (userCommand.contains(\"done\")) {"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"                String taskNumAsString \u003d userCommand.substring(5);"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"                int taskNumAsInt \u003d Integer.parseInt(taskNumAsString);"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"                taskList.markTasks(taskNumAsInt-1);"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"            } else if (userCommand.contains(\"todo\")) {"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommand \u003d userCommand.split(\" \", 2);"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"                taskList.addTodo(splitCommand[1]) ;"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"            } else if (userCommand.contains(\"deadline\")) {"},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommand \u003d userCommand.split(\" \", 2);"},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommandAgain \u003d splitCommand[1].split(\" /by \");"},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"                taskList.addDeadline(splitCommandAgain[0], splitCommandAgain[1]);"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"            } else if(userCommand.contains(\"event\")) {"},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommand \u003d userCommand.split(\" \", 2);"},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommandAgain \u003d splitCommand[1].split(\" /at \");"},{"lineNumber":41,"author":{"gitId":"vaiish371"},"content":"                taskList.addEvent(splitCommandAgain[0], splitCommandAgain[1]);"},{"lineNumber":42,"author":{"gitId":"vaiish371"},"content":"            } else if(userCommand.contains(\"find\")){"},{"lineNumber":43,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommand \u003d userCommand.split(\" \", 2);"},{"lineNumber":44,"author":{"gitId":"vaiish371"},"content":"                taskList.findTask(splitCommand[1]);"},{"lineNumber":45,"author":{"gitId":"vaiish371"},"content":"            } else if (userCommand.contains(\"delete\")) {"},{"lineNumber":46,"author":{"gitId":"vaiish371"},"content":"                String[] splitCommand \u003d userCommand.split(\" \", 2);"},{"lineNumber":47,"author":{"gitId":"vaiish371"},"content":"                int taskNumAsInt \u003d Integer.parseInt(splitCommand[1]);"},{"lineNumber":48,"author":{"gitId":"vaiish371"},"content":"                taskList.deleteTasks(taskNumAsInt - 1);"},{"lineNumber":49,"author":{"gitId":"vaiish371"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"vaiish371"},"content":"                throw new DukeException();"},{"lineNumber":51,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":53,"author":{"gitId":"vaiish371"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"vaiish371"},"content":"            //When task numbers are not numeral. For example, \"done two\", instead of \"done 2\""},{"lineNumber":55,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Task is not specified as a number.\");"},{"lineNumber":56,"author":{"gitId":"vaiish371"},"content":"        } catch (NullPointerException|DukeArrayException e) {"},{"lineNumber":57,"author":{"gitId":"vaiish371"},"content":"            /**"},{"lineNumber":58,"author":{"gitId":"vaiish371"},"content":"             *When user tries to delete/mark done, tasks that are beyond"},{"lineNumber":59,"author":{"gitId":"vaiish371"},"content":"             *the current size of the task array."},{"lineNumber":60,"author":{"gitId":"vaiish371"},"content":"             */"},{"lineNumber":61,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"There are no such tasks added yet.\");"},{"lineNumber":62,"author":{"gitId":"vaiish371"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":63,"author":{"gitId":"vaiish371"},"content":"            //When user does not specify task number/description or the number is out of bounds."},{"lineNumber":64,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Task Number/Description is either empty or out of bounds.\");"},{"lineNumber":65,"author":{"gitId":"vaiish371"},"content":"        } catch (MultipleKeywordException e) {"},{"lineNumber":66,"author":{"gitId":"vaiish371"},"content":"            //When user enter multiple keywords instead of single-worded keyword."},{"lineNumber":67,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"No multiple keywords allowed! Try single keyword or \" +"},{"lineNumber":68,"author":{"gitId":"vaiish371"},"content":"                    \"omitting trailing whitespaces.\");"},{"lineNumber":69,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":71}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Deadlines;"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Events;"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Task;"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Todo;"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"    public Storage() {"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"     *Loads the data of Tasks from hard disk when Duke starts up."},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":"     * @param filePath File path of the text file from which we load any existing tasks from."},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":"     * @return Task array with the file contents which is later used to instantiate TaskList."},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"     * @throws FileNotFoundException when specified file is not found in the file path."},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"    public  ArrayList\u003cTask\u003e loadTasks(String filePath) throws FileNotFoundException {"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"        Scanner fileContent \u003d new Scanner(f);"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"        ArrayList\u003cTask\u003e tempArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"        while (fileContent.hasNext()) {"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"            String fileInput \u003d fileContent.nextLine();"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"            String[] splitLine \u003d fileInput.split(\" : \");"},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":"            switch (splitLine[0].trim()) {"},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":"            case \"T\":"},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"                tempArray.add(new Todo(splitLine[2]));"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"                break;"},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":"            case \"E\":"},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"                tempArray.add(new Events(splitLine[2], splitLine[3]));"},{"lineNumber":41,"author":{"gitId":"vaiish371"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"vaiish371"},"content":"            case \"D\":"},{"lineNumber":43,"author":{"gitId":"vaiish371"},"content":"                tempArray.add(new Deadlines(splitLine[2], splitLine[3]));"},{"lineNumber":44,"author":{"gitId":"vaiish371"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"vaiish371"},"content":"            default:"},{"lineNumber":46,"author":{"gitId":"vaiish371"},"content":"                System.out.println(\"Task is not valid\");"},{"lineNumber":47,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"vaiish371"},"content":"            if (splitLine[1].equals(\"âœ“\")) {"},{"lineNumber":49,"author":{"gitId":"vaiish371"},"content":"                tempArray.get(tempArray.size() - 1).markAsDone();"},{"lineNumber":50,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"vaiish371"},"content":"        return tempArray;"},{"lineNumber":53,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":55,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"vaiish371"},"content":"     *Saves the tasks in the hard disk automatically whenever the task list changes by"},{"lineNumber":57,"author":{"gitId":"vaiish371"},"content":"     * writing to the text file specified"},{"lineNumber":58,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"vaiish371"},"content":"     * @param tasks tasks Array that contains the task list and contents"},{"lineNumber":60,"author":{"gitId":"vaiish371"},"content":"     * @throws IOException when input or output is implemented incorrectly."},{"lineNumber":61,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"vaiish371"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":63,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":64,"author":{"gitId":"vaiish371"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":65,"author":{"gitId":"vaiish371"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"vaiish371"},"content":"            FileWriter fw \u003d new FileWriter(filePath + \"/data.txt\");"},{"lineNumber":67,"author":{"gitId":"vaiish371"},"content":"            for (Task taskObj : tasks) {"},{"lineNumber":68,"author":{"gitId":"vaiish371"},"content":"                if (taskObj instanceof Todo) {"},{"lineNumber":69,"author":{"gitId":"vaiish371"},"content":"                    if (taskObj.isDone) {"},{"lineNumber":70,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"T : âœ“ : \" + taskObj.getDescription() + System.lineSeparator());"},{"lineNumber":71,"author":{"gitId":"vaiish371"},"content":"                    } else {"},{"lineNumber":72,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"T : X : \" + taskObj.getDescription() + System.lineSeparator());"},{"lineNumber":73,"author":{"gitId":"vaiish371"},"content":"                    }"},{"lineNumber":74,"author":{"gitId":"vaiish371"},"content":"                } else if (taskObj instanceof Deadlines) {"},{"lineNumber":75,"author":{"gitId":"vaiish371"},"content":"                    if (taskObj.isDone) {"},{"lineNumber":76,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"D : âœ“ : \");"},{"lineNumber":77,"author":{"gitId":"vaiish371"},"content":"                    } else {"},{"lineNumber":78,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"D : X : \");"},{"lineNumber":79,"author":{"gitId":"vaiish371"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"vaiish371"},"content":"                    fw.write(taskObj.getDescription() + \" : \" + ((Deadlines) taskObj).getBy() + System.lineSeparator());"},{"lineNumber":81,"author":{"gitId":"vaiish371"},"content":"                } else if (taskObj instanceof Events) {"},{"lineNumber":82,"author":{"gitId":"vaiish371"},"content":"                    if (taskObj.isDone) {"},{"lineNumber":83,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"E : âœ“ : \");"},{"lineNumber":84,"author":{"gitId":"vaiish371"},"content":"                    } else {"},{"lineNumber":85,"author":{"gitId":"vaiish371"},"content":"                        fw.write(\"E : X : \");"},{"lineNumber":86,"author":{"gitId":"vaiish371"},"content":"                    }"},{"lineNumber":87,"author":{"gitId":"vaiish371"},"content":"                    fw.write(taskObj.getDescription() + \" : \" + ((Events) taskObj).getEventTime() + System.lineSeparator());"},{"lineNumber":88,"author":{"gitId":"vaiish371"},"content":"                } else {"},{"lineNumber":89,"author":{"gitId":"vaiish371"},"content":"                    System.out.println(\"Class not found!\");"},{"lineNumber":90,"author":{"gitId":"vaiish371"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"vaiish371"},"content":"            fw.close();"},{"lineNumber":93,"author":{"gitId":"vaiish371"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"ERROR: something went wrong! :(\");"},{"lineNumber":95,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":98,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":98}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Deadlines;"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Events;"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Task;"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"import duke.taskclass.Todo;"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":" *"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":" *"},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":" */"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"public class TaskList {"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskArray){"},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":"        tasks \u003d taskArray;"},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"    public void listTasks(){"},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"        if(tasks.size()\u003d\u003d0) {"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"No tasks are there.\");"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"            for (Task taskObject: tasks ) {"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"                System.out.println(\"\\t\" + (tasks.indexOf(taskObject) + 1) + \". \" + taskObject.toString());"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"     * Marks a specified task as done[âœ“] and displays its details."},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"     * @param index Array Index of a Task."},{"lineNumber":41,"author":{"gitId":"vaiish371"},"content":"     * @throws DukeArrayException if index is out of bounds."},{"lineNumber":42,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"vaiish371"},"content":"    public void markTasks(int index) throws DukeArrayException{"},{"lineNumber":44,"author":{"gitId":"vaiish371"},"content":"        if(index\u003etasks.size() || index\u003c0) {"},{"lineNumber":45,"author":{"gitId":"vaiish371"},"content":"            throw new DukeArrayException();"},{"lineNumber":46,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"vaiish371"},"content":"        tasks.get(index).markAsDone();"},{"lineNumber":48,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator() +"},{"lineNumber":49,"author":{"gitId":"vaiish371"},"content":"                    \"\\t\" + (index+1) + \". \" + tasks.get(index).toString());"},{"lineNumber":50,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":51,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":53,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"vaiish371"},"content":"     * Removes a specified task from tasks Array and displays its details,"},{"lineNumber":55,"author":{"gitId":"vaiish371"},"content":"     * along with the number of existing tasks."},{"lineNumber":56,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"vaiish371"},"content":"     * @param index Array Index of a Task."},{"lineNumber":58,"author":{"gitId":"vaiish371"},"content":"     * @throws DukeArrayException if index is out of bounds."},{"lineNumber":59,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"vaiish371"},"content":"    public void deleteTasks(int index) throws DukeArrayException{"},{"lineNumber":61,"author":{"gitId":"vaiish371"},"content":"        if(index\u003etasks.size() || index\u003c0) {"},{"lineNumber":62,"author":{"gitId":"vaiish371"},"content":"            throw new DukeArrayException();"},{"lineNumber":63,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Noted! I\u0027ve removed this task:\" + System.lineSeparator() +"},{"lineNumber":65,"author":{"gitId":"vaiish371"},"content":"                    \"\\t\" + (index+1) + \". \" + tasks.get(index).toString());"},{"lineNumber":66,"author":{"gitId":"vaiish371"},"content":"            tasks.remove(index);"},{"lineNumber":67,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Now you have \"+tasks.size()+\" tasks in your list.\");"},{"lineNumber":68,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":70,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"vaiish371"},"content":"     * Adds Todo task."},{"lineNumber":72,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"vaiish371"},"content":"     * @param description Description of the todo task."},{"lineNumber":74,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"vaiish371"},"content":"    public void addTodo(String description){"},{"lineNumber":76,"author":{"gitId":"vaiish371"},"content":"            tasks.add(new Todo(description));"},{"lineNumber":77,"author":{"gitId":"vaiish371"},"content":"            printDetails();"},{"lineNumber":78,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":80,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"vaiish371"},"content":"     * Adds Deadline task and formats the deadline date and time."},{"lineNumber":82,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"vaiish371"},"content":"     * @param description Description of the deadline task."},{"lineNumber":84,"author":{"gitId":"vaiish371"},"content":"     * @param by Specifies the date and time of deadline."},{"lineNumber":85,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"vaiish371"},"content":"    public void addDeadline(String description, String by){"},{"lineNumber":87,"author":{"gitId":"vaiish371"},"content":"        String formattedBy \u003d formatDateTime(by);"},{"lineNumber":88,"author":{"gitId":"vaiish371"},"content":"        tasks.add(new Deadlines(description,formattedBy));"},{"lineNumber":89,"author":{"gitId":"vaiish371"},"content":"        printDetails();"},{"lineNumber":90,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":92,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"vaiish371"},"content":"     * Adds Event task and formats the event date and time."},{"lineNumber":94,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"vaiish371"},"content":"     * @param description Description of the deadline task."},{"lineNumber":96,"author":{"gitId":"vaiish371"},"content":"     * @param at Specifies the date and time of the event."},{"lineNumber":97,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"vaiish371"},"content":"    public void addEvent(String description, String at){"},{"lineNumber":99,"author":{"gitId":"vaiish371"},"content":"        String formattedAt \u003d formatDateTime(at);"},{"lineNumber":100,"author":{"gitId":"vaiish371"},"content":"        tasks.add(new Events(description,formattedAt));"},{"lineNumber":101,"author":{"gitId":"vaiish371"},"content":"        printDetails();"},{"lineNumber":102,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":104,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"vaiish371"},"content":"     * Finds and displays all the tasks that contain user\u0027s keyword."},{"lineNumber":106,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"vaiish371"},"content":"     * @param keyword Keyword entered by user to find the corresponding tasks."},{"lineNumber":108,"author":{"gitId":"vaiish371"},"content":"     * @throws MultipleKeywordException when user does not enter single-worded keyword."},{"lineNumber":109,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"vaiish371"},"content":"    public void findTask(String keyword) throws MultipleKeywordException{"},{"lineNumber":111,"author":{"gitId":"vaiish371"},"content":"        if(keyword.contains(\" \")){"},{"lineNumber":112,"author":{"gitId":"vaiish371"},"content":"           throw new MultipleKeywordException();"},{"lineNumber":113,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"vaiish371"},"content":"        int flag \u003d 0;"},{"lineNumber":115,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Searching for task with keyword: \"+keyword+\"...\");"},{"lineNumber":116,"author":{"gitId":"vaiish371"},"content":"        for(Task taskObj: tasks){"},{"lineNumber":117,"author":{"gitId":"vaiish371"},"content":"            if(taskObj.getDescription().contains(keyword)){"},{"lineNumber":118,"author":{"gitId":"vaiish371"},"content":"                System.out.println(\"\\t\" + (tasks.indexOf(taskObj)+1) + \". \"+taskObj.toString());"},{"lineNumber":119,"author":{"gitId":"vaiish371"},"content":"                flag \u003d 1;"},{"lineNumber":120,"author":{"gitId":"vaiish371"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"vaiish371"},"content":"        if(flag\u003d\u003d0){"},{"lineNumber":123,"author":{"gitId":"vaiish371"},"content":"            System.out.println(\"Sorry :(, can\u0027t find task with keyword: \"+keyword);"},{"lineNumber":124,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":127,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"vaiish371"},"content":"     *Formats the date and time entered by user into a more readable form."},{"lineNumber":129,"author":{"gitId":"vaiish371"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"vaiish371"},"content":"     * @param dateCommand Contains the date and time entered by user,"},{"lineNumber":131,"author":{"gitId":"vaiish371"},"content":"     *                    in the \"YYYY-MM-DD HH:MM\" format."},{"lineNumber":132,"author":{"gitId":"vaiish371"},"content":"     * @return the formatted date and time in \"MMM dd yyyy hh:mm a\" format."},{"lineNumber":133,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"vaiish371"},"content":"    public static String formatDateTime(String dateCommand) {"},{"lineNumber":135,"author":{"gitId":"vaiish371"},"content":"        String[] splitCommand \u003d dateCommand.split(\" \", 2);"},{"lineNumber":136,"author":{"gitId":"vaiish371"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"vaiish371"},"content":"            LocalDate taskDate \u003d LocalDate.parse(splitCommand[0]);"},{"lineNumber":138,"author":{"gitId":"vaiish371"},"content":"            String formattedDate \u003d taskDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":139,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":140,"author":{"gitId":"vaiish371"},"content":"            LocalTime taskTime \u003d LocalTime.parse(splitCommand[1]);"},{"lineNumber":141,"author":{"gitId":"vaiish371"},"content":"            String formattedTime \u003d taskTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"},{"lineNumber":142,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":143,"author":{"gitId":"vaiish371"},"content":"            return (formattedDate + \", \" + formattedTime);"},{"lineNumber":144,"author":{"gitId":"vaiish371"},"content":"        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException dpe) {"},{"lineNumber":145,"author":{"gitId":"vaiish371"},"content":"            return dateCommand;"},{"lineNumber":146,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":149,"author":{"gitId":"vaiish371"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"vaiish371"},"content":"     * Prints details of the task that is added and"},{"lineNumber":151,"author":{"gitId":"vaiish371"},"content":"     * displays total number of existing tasks."},{"lineNumber":152,"author":{"gitId":"vaiish371"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"vaiish371"},"content":"    public void printDetails(){"},{"lineNumber":154,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":155,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"        \" + tasks.size() + \". \" + tasks.get(tasks.size() - 1).toString());"},{"lineNumber":156,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Now you have \"+tasks.size()+ \" tasks in the list.\");"},{"lineNumber":157,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":159,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":159}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"    public Ui(){"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"    public void printHelloMsg(){"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"        printHorizontal();"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"\\tHello! I\u0027m Duke\");"},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"\\tWhat can I do for you?\");"},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":"        printHorizontal();"},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":"    public void printByeMsg(){"},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"    public void printHorizontal() {"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":"        String horizontalLine \u003d \"------------------------------------------\";"},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"        System.out.println(horizontalLine);"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"    public void printInvalidCommand(){"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":"        System.out.println(\"Invalid command!Please try again.\");"},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":36,"author":{"gitId":"vaiish371"},"content":"    public String readCommand(){"},{"lineNumber":37,"author":{"gitId":"vaiish371"},"content":"        Scanner input \u003d new Scanner(System.in);"},{"lineNumber":38,"author":{"gitId":"vaiish371"},"content":"        return input.nextLine();"},{"lineNumber":39,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":40}},{"path":"src/main/java/duke/taskclass/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":"public class Deadlines extends Task{"},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"    public Deadlines(String description, String by){"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"    public String getBy(){"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"        return by;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":"    public String toString(){"},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"        return (\"[D]\" + super.toString() + \" (by: \"+by+\")\");"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":19}},{"path":"src/main/java/duke/taskclass/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":"public class Events extends Task{"},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"    protected String eventTime;"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"    public Events(String description, String eventTime){"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"    public String getEventTime(){"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":"        return eventTime;"},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":"    public String toString(){"},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"        return (\"[E]\" + super.toString() + \" (at: \" + eventTime + \")\");"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":19}},{"path":"src/main/java/duke/taskclass/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"public class Task   {"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"        protected String description;"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"        public boolean isDone;"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"        public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"            this.description\u003d description;"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"            this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"        public String getDescription() {"},{"lineNumber":14,"author":{"gitId":"vaiish371"},"content":"            return description;"},{"lineNumber":15,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":17,"author":{"gitId":"vaiish371"},"content":"        public void setDescription(String description) {"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"            this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":21,"author":{"gitId":"vaiish371"},"content":"        public String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"vaiish371"},"content":"            return (isDone ? \"âœ“\" : \" \"); // mark done task with X"},{"lineNumber":23,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":25,"author":{"gitId":"vaiish371"},"content":"        public void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"vaiish371"},"content":"            isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":29,"author":{"gitId":"vaiish371"},"content":"        @Override"},{"lineNumber":30,"author":{"gitId":"vaiish371"},"content":"        public String toString(){"},{"lineNumber":31,"author":{"gitId":"vaiish371"},"content":"            return (\"[\" + getStatusIcon() + \"] \"+ description);"},{"lineNumber":32,"author":{"gitId":"vaiish371"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":34,"author":{"gitId":"vaiish371"},"content":"    }"}],"authorContributionMap":{"vaiish371":34}},{"path":"src/main/java/duke/taskclass/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":"public class Todo extends Task{"},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"    public Todo(String description){"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"vaiish371"},"content":"    public String toString(){"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"        return (\"[T]\" + super.toString());"},{"lineNumber":11,"author":{"gitId":"vaiish371"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"vaiish371"},"content":""},{"lineNumber":13,"author":{"gitId":"vaiish371"},"content":"}"}],"authorContributionMap":{"vaiish371":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vaiish371"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"vaiish371"},"content":"deadlines assignment /by 19 feb"},{"lineNumber":3,"author":{"gitId":"vaiish371"},"content":"deadline assignment /by 19 feb"},{"lineNumber":4,"author":{"gitId":"vaiish371"},"content":"event meeting /at mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"vaiish371"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"vaiish371"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"vaiish371"},"content":"list"},{"lineNumber":8,"author":{"gitId":"vaiish371"},"content":"bye"}],"authorContributionMap":{"vaiish371":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"vaiish371"},"content":"javac  -cp C:\\Users\\vaiis\\Desktop\\My Folders\\Y2S2\\CS2113T\\Individual Project\\src\\main\\java\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"vaiish371"},"content":"java -classpath C:\\Users\\vaiis\\Desktop\\My Folders\\Y2S2\\CS2113T\\Individual Project\\src\\main\\java\\duke.Duke.java"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"vaiish371":2,"-":19}}]
