[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"Duke is a Command Line Interface (CLI) application that serves as a Personal Assistant Chatbot for managing different Tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"* [Quick Start](#quick-start)"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"* [Tasks](#tasks)"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"* [Features](#features)"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"  * [Add todo task: `todo`](#add-todo-task-todo)"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"  * [Add deadline task: `deadline`](#add-deadline-task-deadline)"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"  * [Add event task: `event`](#add-event-task-event)"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"  * [List tasks: `list`](#list-tasks-list)"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"  * [Search keyword: `find`](#search-keyword-find)"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"  * [Search date: `schedule`](#search-date-schedule)"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"  * [Mark task as done: `done`](#mark-task-as-done-done)"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"  * [Delete task: `delete`](#delete-task-delete)"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"  * [Exit program: `bye`](#exit-program-bye)"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"* [Loading and Saving](#loading-and-saving)"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"* [Summary](#summary)"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"* [Credits](#credits)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"## Quick Start"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"1. Run `duke.jar`"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"2. Type in a command and press enter to execute command"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"### Prerequisites"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"Java 11"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"## Tasks"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"Duke can store and retrieve 3 types of tasks:"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"1. `Todo` Task with description"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"2. `Deadline` Task with description and deadline `by`"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"3. `Event` Task with description and event time `at`"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"## Features"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"These are the commands that Duke can execute"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"### Add todo task: `todo`"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"Adds a `Todo` task with description to `TaskList`"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"**Format:** `todo \u003cdescription\u003e`"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"| Input | `todo read book` |"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[T][✘] read book\u003cbr\u003eNow you have 1 tasks in the list. |"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Todo` \"read book\" to `TaskList` |"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"### Add deadline task: `deadline`"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"Adds a `Deadline` task with description and deadline `by` to `TaskList`"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"**Format:** `deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd hhmm\u003e`"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"| Input | `deadline return book /by 2021-03-01 1800` |"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[D][✘] return book (by: 01 Mar 2021, 6:00 pm)\u003cbr\u003eNow you have 2 tasks in the list. |"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Deadline` \"return book\" to `TaskList` |"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"### Add event task: `event`"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"Adds an `Event` task with description and event time `at` to `TaskList`"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"**Format:** `event \u003cdescription\u003e /at \u003cyyyy-mm-dd hhmm\u003e`"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":"| Input | `event book club meeting /at 2021-12-04 0900` |"},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[E][✘] book club meeting (at: 04 Dec 2021, 9:00 am)\u003cbr\u003eNow you have 3 tasks in the list. |"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Event` \"book club meeting\" to `TaskList` |"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":"### List tasks: `list`"},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` in numbered order in which they were added"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"#### First bracket: Task type"},{"lineNumber":74,"author":{"gitId":"zihan9485"},"content":"* [T] `Todo`\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"zihan9485"},"content":"* [D] `Deadline`\u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"zihan9485"},"content":"* [E] `Event`"},{"lineNumber":77,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":78,"author":{"gitId":"zihan9485"},"content":"#### Second bracket: Done status"},{"lineNumber":79,"author":{"gitId":"zihan9485"},"content":"* [✓] Done"},{"lineNumber":80,"author":{"gitId":"zihan9485"},"content":"* [✘] Not done"},{"lineNumber":81,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":82,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":83,"author":{"gitId":"zihan9485"},"content":"**Format:** `list`"},{"lineNumber":84,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":85,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":86,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":87,"author":{"gitId":"zihan9485"},"content":"| Input | `list` |"},{"lineNumber":88,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks in your list:\u003cbr\u003e1.[T][✘] read book\u003cbr\u003e2.[D][✘] return book (by: 01 Mar 2021, 6:00 pm)\u003cbr\u003e3.[E][✘] book club meeting (at: 04 Dec 2021, 9:00 am) |"},{"lineNumber":89,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs all tasks in `TaskList` |"},{"lineNumber":90,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":91,"author":{"gitId":"zihan9485"},"content":"### Search keyword: `find`"},{"lineNumber":92,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` which contains a specified keyword"},{"lineNumber":93,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":94,"author":{"gitId":"zihan9485"},"content":"**Format:** `find \u003ckeyword\u003e`"},{"lineNumber":95,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":96,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":97,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":98,"author":{"gitId":"zihan9485"},"content":"| Input | `find read` |"},{"lineNumber":99,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks matching the keyword: read\u003cbr\u003e[T][✘] read book |"},{"lineNumber":100,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs tasks in `TaskList` that contains the keyword \"read\" |"},{"lineNumber":101,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":102,"author":{"gitId":"zihan9485"},"content":"### Search date: `schedule`"},{"lineNumber":103,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` which occur at a specified date"},{"lineNumber":104,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":105,"author":{"gitId":"zihan9485"},"content":"**Format:** `schedule \u003cyyyy-mm-dd\u003e`"},{"lineNumber":106,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":107,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":108,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":109,"author":{"gitId":"zihan9485"},"content":"| Input | `schedule 2021-03-01` |"},{"lineNumber":110,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks on 01 Mar 2021\u003cbr\u003e[D][✘] return book (by: 01 Mar 2021, 6:00 pm) |"},{"lineNumber":111,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs tasks in `TaskList` that occur on 01 Mar 2021 |"},{"lineNumber":112,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":113,"author":{"gitId":"zihan9485"},"content":"### Mark task as done: `done`"},{"lineNumber":114,"author":{"gitId":"zihan9485"},"content":"Marks a `Task` in `TaskList` as done"},{"lineNumber":115,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":116,"author":{"gitId":"zihan9485"},"content":"**Format:** `done \u003cindex\u003e`"},{"lineNumber":117,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":118,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":119,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":120,"author":{"gitId":"zihan9485"},"content":"| Input | `done 2` |"},{"lineNumber":121,"author":{"gitId":"zihan9485"},"content":"| Output | Nice! I\u0027ve marked this task as done:\u003cbr\u003e[D][✓] return book (by: 01 Mar 2021, 6:00 pm) |"},{"lineNumber":122,"author":{"gitId":"zihan9485"},"content":"| Action | Mark `Task` \"return book\" as done |"},{"lineNumber":123,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":124,"author":{"gitId":"zihan9485"},"content":"### Delete task: `delete`"},{"lineNumber":125,"author":{"gitId":"zihan9485"},"content":"Deletes a `Task` in `TaskList`"},{"lineNumber":126,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":127,"author":{"gitId":"zihan9485"},"content":"**Format:** `delete \u003cindex\u003e`"},{"lineNumber":128,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":129,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":130,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":131,"author":{"gitId":"zihan9485"},"content":"| Input | `delete 1` |"},{"lineNumber":132,"author":{"gitId":"zihan9485"},"content":"| Output | Noted. I\u0027ve removed this task:\u003cbr\u003e[T][✘] read book\u003cbr\u003eNow you have 2 tasks in the list. |"},{"lineNumber":133,"author":{"gitId":"zihan9485"},"content":"| Action | Delete `Task` \"read book\" |"},{"lineNumber":134,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":135,"author":{"gitId":"zihan9485"},"content":"### Exit program: `bye`"},{"lineNumber":136,"author":{"gitId":"zihan9485"},"content":"Exits Duke"},{"lineNumber":137,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":138,"author":{"gitId":"zihan9485"},"content":"**Format:** `bye`"},{"lineNumber":139,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":140,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":141,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":142,"author":{"gitId":"zihan9485"},"content":"| Input | `bye` |"},{"lineNumber":143,"author":{"gitId":"zihan9485"},"content":"| Output | Bye. Hope to see you again soon! |"},{"lineNumber":144,"author":{"gitId":"zihan9485"},"content":"| Action | Shows goodbye message and terminates Duke |"},{"lineNumber":145,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":146,"author":{"gitId":"zihan9485"},"content":"## Loading and Saving"},{"lineNumber":147,"author":{"gitId":"zihan9485"},"content":"### Loading"},{"lineNumber":148,"author":{"gitId":"zihan9485"},"content":"Duke will try to load existing data from `data.txt`.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitId":"zihan9485"},"content":"If file is not found, Duke will initialise an empty `TaskList`."},{"lineNumber":150,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":151,"author":{"gitId":"zihan9485"},"content":"### Saving"},{"lineNumber":152,"author":{"gitId":"zihan9485"},"content":"Duke will try to save automatically when there are changes to the `TaskList`.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitId":"zihan9485"},"content":"Duke will save this data to `data.txt`."},{"lineNumber":154,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":155,"author":{"gitId":"zihan9485"},"content":"## Summary"},{"lineNumber":156,"author":{"gitId":"zihan9485"},"content":"| Command | Format |"},{"lineNumber":157,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":158,"author":{"gitId":"zihan9485"},"content":"| todo | `todo \u003cdescription\u003e` |"},{"lineNumber":159,"author":{"gitId":"zihan9485"},"content":"| deadline | `deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":160,"author":{"gitId":"zihan9485"},"content":"| event | `event \u003cdescription\u003e /at \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":161,"author":{"gitId":"zihan9485"},"content":"| list | `list` |"},{"lineNumber":162,"author":{"gitId":"zihan9485"},"content":"| find | `find \u003ckeyword\u003e` |"},{"lineNumber":163,"author":{"gitId":"zihan9485"},"content":"| schedule | `schedule \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":164,"author":{"gitId":"zihan9485"},"content":"| done | `done \u003cindex\u003e` |"},{"lineNumber":165,"author":{"gitId":"zihan9485"},"content":"| delete | `delete \u003cindex\u003e` |"},{"lineNumber":166,"author":{"gitId":"zihan9485"},"content":"| bye | `bye` |"},{"lineNumber":167,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":168,"author":{"gitId":"zihan9485"},"content":"## Credits"},{"lineNumber":169,"author":{"gitId":"zihan9485"},"content":"From the Duke Project Template: [https://github.com/nus-cs2113-AY2021S2/ip](https://github.com/nus-cs2113-AY2021S2/ip)"}],"authorContributionMap":{"zihan9485":163,"-":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"Duke is a Command Line Interface (CLI) application that serves as a Personal Assistant Chatbot for managing different Tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"* [Quick Start](#quick-start)"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"* [Tasks](#tasks)"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"* [Features](#features)"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"  * [Add todo task: `todo`](#add-todo-task-todo)"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"  * [Add deadline task: `deadline`](#add-deadline-task-deadline)"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"  * [Add event task: `event`](#add-event-task-event)"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"  * [List tasks: `list`](#list-tasks-list)"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"  * [Search keyword: `find`](#search-keyword-find)"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"  * [Search date: `schedule`](#search-date-schedule)"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"  * [Mark task as done: `done`](#mark-task-as-done-done)"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"  * [Delete task: `delete`](#delete-task-delete)"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"  * [Exit program: `bye`](#exit-program-bye)"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"* [Loading and Saving](#loading-and-saving)"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"* [Summary](#summary)"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"* [Credits](#credits)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"## Quick Start"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"1. Run `duke.jar`"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"2. Type in a command and press enter to execute command"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"### Prerequisites"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"Java 11"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"## Tasks"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"Duke can store and retrieve 3 types of tasks:"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"1. `Todo` Task with description"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"2. `Deadline` Task with description and deadline `by`"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"3. `Event` Task with description and event time `at`"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"These are the commands that Duke can execute"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"### Add todo task: `todo`"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"Adds a `Todo` task with description to `TaskList`"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"**Format:** `todo \u003cdescription\u003e`"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"| Input | `todo read book` |"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[T][✘] read book\u003cbr\u003eNow you have 1 tasks in the list. |"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Todo` \"read book\" to `TaskList` |"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"### Add deadline task: `deadline`"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"Adds a `Deadline` task with description and deadline `by` to `TaskList`"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"**Format:** `deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd hhmm\u003e`"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"| Input | `deadline return book /by 2021-03-01 1800` |"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[D][✘] return book (by: 01 Mar 2021, 6:00 pm)\u003cbr\u003eNow you have 2 tasks in the list. |"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Deadline` \"return book\" to `TaskList` |"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"### Add event task: `event`"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"Adds an `Event` task with description and event time `at` to `TaskList`"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"**Format:** `event \u003cdescription\u003e /at \u003cyyyy-mm-dd hhmm\u003e`"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":"| Input | `event book club meeting /at 2021-12-04 0900` |"},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"| Output | Got it. I\u0027ve added this task:\u003cbr\u003e[E][✘] book club meeting (at: 04 Dec 2021, 9:00 am)\u003cbr\u003eNow you have 3 tasks in the list. |"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"| Action | Add `Event` \"book club meeting\" to `TaskList` |"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":"### List tasks: `list`"},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` in numbered order in which they were added"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"#### First bracket: Task type"},{"lineNumber":74,"author":{"gitId":"zihan9485"},"content":"* [T] `Todo`\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"zihan9485"},"content":"* [D] `Deadline`\u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"zihan9485"},"content":"* [E] `Event`"},{"lineNumber":77,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":78,"author":{"gitId":"zihan9485"},"content":"#### Second bracket: Done status"},{"lineNumber":79,"author":{"gitId":"zihan9485"},"content":"* [✓] Done"},{"lineNumber":80,"author":{"gitId":"zihan9485"},"content":"* [✘] Not done"},{"lineNumber":81,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":82,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":83,"author":{"gitId":"zihan9485"},"content":"**Format:** `list`"},{"lineNumber":84,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":85,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":86,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":87,"author":{"gitId":"zihan9485"},"content":"| Input | `list` |"},{"lineNumber":88,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks in your list:\u003cbr\u003e1.[T][✘] read book\u003cbr\u003e2.[D][✘] return book (by: 01 Mar 2021, 6:00 pm)\u003cbr\u003e3.[E][✘] book club meeting (at: 04 Dec 2021, 9:00 am) |"},{"lineNumber":89,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs all tasks in `TaskList` |"},{"lineNumber":90,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":91,"author":{"gitId":"zihan9485"},"content":"### Search keyword: `find`"},{"lineNumber":92,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` which contains a specified keyword"},{"lineNumber":93,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":94,"author":{"gitId":"zihan9485"},"content":"**Format:** `find \u003ckeyword\u003e`"},{"lineNumber":95,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":96,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":97,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":98,"author":{"gitId":"zihan9485"},"content":"| Input | `find read` |"},{"lineNumber":99,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks matching the keyword: read\u003cbr\u003e[T][✘] read book |"},{"lineNumber":100,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs tasks in `TaskList` that contains the keyword \"read\" |"},{"lineNumber":101,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":102,"author":{"gitId":"zihan9485"},"content":"### Search date: `schedule`"},{"lineNumber":103,"author":{"gitId":"zihan9485"},"content":"Lists all tasks in `TaskList` which occur at a specified date"},{"lineNumber":104,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":105,"author":{"gitId":"zihan9485"},"content":"**Format:** `schedule \u003cyyyy-mm-dd\u003e`"},{"lineNumber":106,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":107,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":108,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":109,"author":{"gitId":"zihan9485"},"content":"| Input | `schedule 2021-03-01` |"},{"lineNumber":110,"author":{"gitId":"zihan9485"},"content":"| Output | Here are the tasks on 01 Mar 2021\u003cbr\u003e[D][✘] return book (by: 01 Mar 2021, 6:00 pm) |"},{"lineNumber":111,"author":{"gitId":"zihan9485"},"content":"| Action | Outputs tasks in `TaskList` that occur on 01 Mar 2021 |"},{"lineNumber":112,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":113,"author":{"gitId":"zihan9485"},"content":"### Mark task as done: `done`"},{"lineNumber":114,"author":{"gitId":"zihan9485"},"content":"Marks a `Task` in `TaskList` as done"},{"lineNumber":115,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":116,"author":{"gitId":"zihan9485"},"content":"**Format:** `done \u003cindex\u003e`"},{"lineNumber":117,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":118,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":119,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":120,"author":{"gitId":"zihan9485"},"content":"| Input | `done 2` |"},{"lineNumber":121,"author":{"gitId":"zihan9485"},"content":"| Output | Nice! I\u0027ve marked this task as done:\u003cbr\u003e[D][✓] return book (by: 01 Mar 2021, 6:00 pm) |"},{"lineNumber":122,"author":{"gitId":"zihan9485"},"content":"| Action | Mark `Task` \"return book\" as done |"},{"lineNumber":123,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":124,"author":{"gitId":"zihan9485"},"content":"### Delete task: `delete`"},{"lineNumber":125,"author":{"gitId":"zihan9485"},"content":"Deletes a `Task` in `TaskList`"},{"lineNumber":126,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":127,"author":{"gitId":"zihan9485"},"content":"**Format:** `delete \u003cindex\u003e`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":130,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":131,"author":{"gitId":"zihan9485"},"content":"| Input | `delete 1` |"},{"lineNumber":132,"author":{"gitId":"zihan9485"},"content":"| Output | Noted. I\u0027ve removed this task:\u003cbr\u003e[T][✘] read book\u003cbr\u003eNow you have 2 tasks in the list. |"},{"lineNumber":133,"author":{"gitId":"zihan9485"},"content":"| Action | Delete `Task` \"read book\" |"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"zihan9485"},"content":"### Exit program: `bye`"},{"lineNumber":136,"author":{"gitId":"zihan9485"},"content":"Exits Duke"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"zihan9485"},"content":"**Format:** `bye`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"zihan9485"},"content":"| | Usage |"},{"lineNumber":141,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":142,"author":{"gitId":"zihan9485"},"content":"| Input | `bye` |"},{"lineNumber":143,"author":{"gitId":"zihan9485"},"content":"| Output | Bye. Hope to see you again soon! |"},{"lineNumber":144,"author":{"gitId":"zihan9485"},"content":"| Action | Shows goodbye message and terminates Duke |"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"zihan9485"},"content":"## Loading and Saving"},{"lineNumber":147,"author":{"gitId":"zihan9485"},"content":"### Loading"},{"lineNumber":148,"author":{"gitId":"zihan9485"},"content":"Duke will try to load existing data from `data.txt`.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitId":"zihan9485"},"content":"If file is not found, Duke will initialise an empty `TaskList`."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"zihan9485"},"content":"### Saving"},{"lineNumber":152,"author":{"gitId":"zihan9485"},"content":"Duke will try to save automatically when there are changes to the `TaskList`.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitId":"zihan9485"},"content":"Duke will save this data to `data.txt`."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"zihan9485"},"content":"## Summary"},{"lineNumber":156,"author":{"gitId":"zihan9485"},"content":"| Command | Format |"},{"lineNumber":157,"author":{"gitId":"zihan9485"},"content":"| --------- | ------------------------------------------------------- |"},{"lineNumber":158,"author":{"gitId":"zihan9485"},"content":"| todo | `todo \u003cdescription\u003e` |"},{"lineNumber":159,"author":{"gitId":"zihan9485"},"content":"| deadline | `deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":160,"author":{"gitId":"zihan9485"},"content":"| event | `event \u003cdescription\u003e /at \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":161,"author":{"gitId":"zihan9485"},"content":"| list | `list` |"},{"lineNumber":162,"author":{"gitId":"zihan9485"},"content":"| find | `find \u003ckeyword\u003e` |"},{"lineNumber":163,"author":{"gitId":"zihan9485"},"content":"| schedule | `schedule \u003cyyyy-mm-dd\u003e` |"},{"lineNumber":164,"author":{"gitId":"zihan9485"},"content":"| done | `done \u003cindex\u003e` |"},{"lineNumber":165,"author":{"gitId":"zihan9485"},"content":"| delete | `delete \u003cindex\u003e` |"},{"lineNumber":166,"author":{"gitId":"zihan9485"},"content":"| bye | `bye` |"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"zihan9485"},"content":"## Credits"},{"lineNumber":169,"author":{"gitId":"zihan9485"},"content":"From the Duke Project Template: [https://github.com/nus-cs2113-AY2021S2/ip](https://github.com/nus-cs2113-AY2021S2/ip)"}],"authorContributionMap":{"zihan9485":151,"-":18}},{"path":"src/main/java/duke/Commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.DeadlineFormatException;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.EventFormatException;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Event;"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Todo;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"public class AddCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    private final String commandWord, description;"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    public AddCommand(String commandWord, String description) {"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"     * Adds a \u003ccode\u003eTask\u003c/code\u003e as specified by the user to the \u003ccode\u003etaskList\u003c/code\u003e"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"     * @throws DukeException if there are formatting errors in the user input"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"        int dividerPosition;"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"        switch (commandWord) {"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        case \"todo\":"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"            taskList.addToTaskList(new Todo(description));"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"        case \"deadline\":"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"            if (!description.contains(\"/by\")) {"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"            dividerPosition \u003d description.indexOf(\"/by\");"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"                String by \u003d description.substring(dividerPosition + 4);"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"                taskList.addToTaskList(new Deadline(description.substring(0, dividerPosition - 1), by));"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":"            } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"        case \"event\":"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":"            if (!description.contains(\"/at\")) {"},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"                throw new EventFormatException();"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"            dividerPosition \u003d description.indexOf(\"/at\");"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"                String at \u003d description.substring(dividerPosition + 4);"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":"                taskList.addToTaskList(new Event(description.substring(0, dividerPosition - 1), at));"},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"            } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"                throw new EventFormatException();"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":"        ui.showAddTask(taskList.getTaskAtIndex(taskList.getSize() - 1), taskList.getSize());"},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"            storage.save(taskList);"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":"        } catch (IOException e) {"},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":"            ui.showSaveError();"},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":73}},{"path":"src/main/java/duke/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":" * Abstract class that represents a command from the user"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"        return this instanceof ExitCommand;"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":18}},{"path":"src/main/java/duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    private final int taskIndex;"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"     * Deletes a \u003ccode\u003eTask\u003c/code\u003e as specified by the user from the \u003ccode\u003etaskList\u003c/code\u003e"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"        Task currentTask;"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"            currentTask \u003d taskList.getTaskAtIndex(taskIndex);"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"            taskList.deleteTaskAtIndex(taskIndex);"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"            ui.showNotInRange(taskIndex, taskList.getSize());"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"            return;"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"        ui.showDeleteTask(currentTask, taskList.getSize());"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"            storage.save(taskList);"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"            ui.showSaveError();"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":43}},{"path":"src/main/java/duke/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    private final int taskIndex;"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"    public DoneCommand(int taskIndex) {"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"     * Updates a \u003ccode\u003eTask\u003c/code\u003e as specified by the user from the \u003ccode\u003etaskList\u003c/code\u003e to complete"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"            Task currentTask \u003d taskList.getTaskAtIndex(taskIndex);"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"            if (currentTask.getDone()) {"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"                ui.showAlreadyCompleted(currentTask);"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"                currentTask.setDone();"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"                ui.showMarkedDone(currentTask);"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"            ui.showNotInRange(taskIndex, taskList.getSize());"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"            return;"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"            storage.save(taskList);"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"            ui.showSaveError();"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":45}},{"path":"src/main/java/duke/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"     * Shows a goodbye message and triggers the end of the program loop"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"        ui.showGoodbye();"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":19}},{"path":"src/main/java/duke/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    private final String KEYWORD;"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"    public FindCommand(String KEYWORD) {"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"        this.KEYWORD \u003d KEYWORD;"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"     * Finds the \u003ccode\u003eTask\u003c/code\u003e objects that contains a \u003ccode\u003eKEYWORD\u003c/code\u003e in their description"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"            if (task.getDescription().contains(KEYWORD)) {"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"                filteredTaskList.add(task);"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"        ui.showFindTasks(filteredTaskList, KEYWORD);"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":34}},{"path":"src/main/java/duke/Commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"     * Lists the \u003ccode\u003eTask\u003c/code\u003e objects in the \u003ccode\u003etaskList\u003c/code\u003e"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"        if (taskList.getSize() \u003d\u003d 0) {"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"            ui.showNoTasks();"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"            return;"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"        ui.showTasks(taskList);"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":23}},{"path":"src/main/java/duke/Commands/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Commands;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"    private final LocalDate date;"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    private final DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    public ScheduleCommand(String dateTime) {"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"        this.date \u003d LocalDate.parse(dateTime, inputFormatter);"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"     * Finds the \u003ccode\u003eTask\u003c/code\u003e objects that occurs on a specified \u003ccode\u003edateTime\u003c/code\u003e"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The list of tasks stored in Duke"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e object that shows the output to the user"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that saves the updated tasks to the file"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"            if (!(task instanceof Todo) \u0026\u0026 task.getDateTime().format(outputFormatter).equals(date.format(outputFormatter))) {"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"                filteredTaskList.add(task);"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        ui.showSchedule(filteredTaskList, date.format(outputFormatter));"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":38}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Commands.Command;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":" * The Duke Personal Assistant"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"    private final Storage storage;"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    private TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"     * Initialises the UI, TaskList and Storage"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"     * Loads the data from file specified in \u003ccode\u003efilePath\u003c/code\u003e"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"     * If file at \u003ccode\u003efilePath\u003c/code\u003e does not exist, it initialises a new \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"     * @param filePath path of file to load and save data to"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"    public Duke(String filePath) {"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"        } catch (DukeException e) {"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"            ui.showLoadingError();"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"     * Reads a user command and parses out the intended command"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"     * Executes the commands until \u003ccode\u003eExitCommand\u003c/code\u003e is given"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"     * Shows error message when exception occurs"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"    public void run() {"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"        ui.showWelcome();"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"        boolean isExit \u003d false;"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"        while (!isExit) {"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"                ui.showLine();"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"                c.execute(taskList, ui, storage);"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":"            } catch (DukeException e) {"},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"            } finally {"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":"                ui.showLine();"},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"     * Runs the Duke program"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"     * @param args initial input arguments"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"    public static void main(String[] args) {"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"        new Duke(\"data.txt\").run();"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zihan9485":59,"-":3}},{"path":"src/main/java/duke/Exceptions/AddFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eAddCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class AddFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public AddFormatException(String command) {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Please enter the description of \" + command;"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Exceptions/CommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * When user enters a command that is not recognised"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class CommandNotFoundException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public CommandNotFoundException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"You have entered an unknown command\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Exceptions/DeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eDeadlineCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class DeadlineFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public DeadlineFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Deadline command must be in the format: deadline name /by yyyy-mm-dd hhmm\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":12}},{"path":"src/main/java/duke/Exceptions/DeleteFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eDeleteCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class DeleteFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public DeleteFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Delete command must be in the format: delete taskIndex\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":12}},{"path":"src/main/java/duke/Exceptions/DoneFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eDoneCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class DoneFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public DoneFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Done command must be in the format: done taskIndex\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * The class \u003ccode\u003eDukeException\u003c/code\u003e encompasses errors that could occur in the Duke program"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"    protected String errorMessage;"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"        return errorMessage;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":12}},{"path":"src/main/java/duke/Exceptions/EventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eEventCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class EventFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public EventFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Event command must be in the format: event name /at yyyy-mm-dd hhmm\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":12}},{"path":"src/main/java/duke/Exceptions/FindFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eFindCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class FindFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public FindFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Find command must be in format: find keyword(s)\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Exceptions/ScheduleFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * Formatting errors when using \u003ccode\u003eScheduleCommand\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class ScheduleFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public ScheduleFormatException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"Schedule command must be in the format: schedule yyyy-mm-dd\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Exceptions/TaskTypeNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":" * When Task Type in loaded data is not recognised"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"public class TaskTypeNotFoundException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"    public TaskTypeNotFoundException() {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"        this.errorMessage \u003d \"You have entered an unknown task type.\";"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":11}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Commands.*;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.*;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    public Parser() {"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"     * Full line of user input as input"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"     * Returns a \u003ccode\u003eCommand\u003c/code\u003e that corresponds to the user input and parses its arguments"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"     * Catches formatting and input errors and throws DukeExceptions"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"     * @param userInput The input that is obtained from the user"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"     * @return A \u003ccode\u003eCommand\u003c/code\u003e object that corresponds to the user input"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"     * @throws DukeException When there are formatting issues or unknown commands in the user input"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"    public static Command parse(String userInput) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"        final String[] words \u003d userInput.split(\" \", 2);"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"        final String commandWord \u003d words[0].toLowerCase();"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"        Command command;"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"        switch (commandWord) {"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"        case \"list\":"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"            command \u003d new ListCommand();"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"        case \"find\":"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"                command \u003d new FindCommand(words[1]);"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"                throw new FindFormatException();"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        case \"done\":"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"                command \u003d new DoneCommand(Integer.parseInt(words[1]) - 1);"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"                Ui.showMissingIndexInput();"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"                throw new DoneFormatException();"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"                Ui.showIncorrectIndexType();"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"                throw new DoneFormatException();"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":"        case \"todo\":"},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"            //Fallthrough"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"        case \"deadline\":"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":"            //Fallthrough"},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"        case \"event\":"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"                String commandDescription \u003d words[1];"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"                command \u003d new AddCommand(commandWord, commandDescription);"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"                throw new AddFormatException(commandWord);"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"        case \"schedule\":"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":"                command \u003d new ScheduleCommand(words[1]);"},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"            } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":"                throw new ScheduleFormatException();"},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":"        case \"delete\":"},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"                command \u003d new DeleteCommand(Integer.parseInt(words[1]) - 1);"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":"                Ui.showMissingIndexInput();"},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"                throw new DeleteFormatException();"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"                Ui.showIncorrectIndexType();"},{"lineNumber":74,"author":{"gitId":"zihan9485"},"content":"                throw new DeleteFormatException();"},{"lineNumber":75,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"zihan9485"},"content":"        case \"bye\":"},{"lineNumber":78,"author":{"gitId":"zihan9485"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":79,"author":{"gitId":"zihan9485"},"content":"            break;"},{"lineNumber":80,"author":{"gitId":"zihan9485"},"content":"        default:"},{"lineNumber":81,"author":{"gitId":"zihan9485"},"content":"            throw new CommandNotFoundException();"},{"lineNumber":82,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"zihan9485"},"content":"        return command;"},{"lineNumber":84,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":85}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import duke.Exceptions.TaskTypeNotFoundException;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Event;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Todo;"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"    private final String FILEPATH;"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"        this.FILEPATH \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"     * Loads the data from the specified FILEPATH"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"     * @return Returns an \u003ccode\u003eArrayList\u003c/code\u003e with data from the loaded file"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"     * @throws DukeException If file at \u003ccode\u003eFILEPATH\u003c/code\u003e is not found or if incorrect Task Type in file"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"        File f \u003d new File(FILEPATH);"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"        Scanner s;"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"            s \u003d new Scanner(f);"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"            Ui.showFileNotFound();"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"            throw new DukeException();"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"        Ui.showLoadingData();"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"        while (s.hasNext()) {"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"            String line \u003d s.nextLine();"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":"            int dividerPosition;"},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"            char taskType \u003d line.charAt(1);"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":"            switch (taskType) {"},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"            case \u0027T\u0027:"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":"                taskList.add(new Todo(line.substring(7)));"},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":"                break;"},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"            case \u0027D\u0027:"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":"                dividerPosition \u003d line.indexOf(\"(by:\");"},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":"                taskList.add(new Deadline(line.substring(7, dividerPosition - 1),"},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"                        line.substring(dividerPosition + 5, line.length() - 1), true));"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"            case \u0027E\u0027:"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":"                dividerPosition \u003d line.indexOf(\"(at:\");"},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":"                taskList.add(new Event(line.substring(7, dividerPosition - 1),"},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"                        line.substring(dividerPosition + 5, line.length() - 1), true));"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":"            default:"},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"                throw new TaskTypeNotFoundException();"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":"            if (line.charAt(4) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":"                taskList.get(taskList.size() - 1).setDone();"},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"        return taskList;"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":"     * Saves the changed \u003ccode\u003eTaskList\u003c/code\u003e to the file specified at \u003ccode\u003eFILEPATH\u003c/code\u003e"},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"     * @param saveList \u003ccode\u003eTaskList\u003c/code\u003e of data to be saved"},{"lineNumber":74,"author":{"gitId":"zihan9485"},"content":"     * @throws IOException If there are errors during the saving process"},{"lineNumber":75,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"zihan9485"},"content":"    public void save(TaskList saveList) throws IOException {"},{"lineNumber":77,"author":{"gitId":"zihan9485"},"content":"        taskList \u003d saveList.getTaskList();"},{"lineNumber":78,"author":{"gitId":"zihan9485"},"content":"        File f \u003d new File(FILEPATH);"},{"lineNumber":79,"author":{"gitId":"zihan9485"},"content":"        if (f.createNewFile()) {"},{"lineNumber":80,"author":{"gitId":"zihan9485"},"content":"            Ui.showCreateNewFile(FILEPATH);"},{"lineNumber":81,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"zihan9485"},"content":"        FileWriter fw \u003d new FileWriter(FILEPATH);"},{"lineNumber":83,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":84,"author":{"gitId":"zihan9485"},"content":"        for (Task task : taskList) {"},{"lineNumber":85,"author":{"gitId":"zihan9485"},"content":"            if (task !\u003d null) {"},{"lineNumber":86,"author":{"gitId":"zihan9485"},"content":"                fw.write(task.toString() + \"\\n\");"},{"lineNumber":87,"author":{"gitId":"zihan9485"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"zihan9485"},"content":"        fw.close();"},{"lineNumber":90,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":92,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":92}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"    private final ArrayList\u003cTask\u003e taskList;"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"    public int getSize() {"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"        return taskList.size();"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"    public Task getTaskAtIndex(int index) {"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"        return taskList.get(index);"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"    public void deleteTaskAtIndex(int index) {"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"        taskList.remove(index);"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"        return taskList;"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"    public void addToTaskList(Task task) {"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        taskList.add(task);"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":39}},{"path":"src/main/java/duke/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":" * Extending the \u003ccode\u003eTask\u003c/code\u003e class that includes a \u003ccode\u003eLocalDateTime\u003c/code\u003e Deadline by"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    protected LocalDateTime by;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"        this.by \u003d LocalDateTime.parse(by, inputFormatter);"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    public Deadline(String description, String by, boolean loadFlag) {"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"        this.by \u003d LocalDateTime.parse(by, outputFormatter);"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"        return by;"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(outputFormatter) + \")\";"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":30}},{"path":"src/main/java/duke/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":" * Extending the \u003ccode\u003eTask\u003c/code\u003e class that includes a \u003ccode\u003eLocalDateTime\u003c/code\u003e Event at"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    protected LocalDateTime at;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    public Event(String description, String at) {"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"        this.at \u003d LocalDateTime.parse(at, inputFormatter);"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    public Event(String description, String at, boolean loadFlag) {"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"        this.at \u003d LocalDateTime.parse(at, outputFormatter);"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"        return at;"},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(outputFormatter) + \")\";"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":30}},{"path":"src/main/java/duke/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":" * An abstract class representing the task objects"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    protected DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    protected DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\");"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    public String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"    public boolean getDone() {"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"        return isDone;"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"        return description;"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":"    public abstract LocalDateTime getDateTime();"},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"    public void setDone() {"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"        isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":42}},{"path":"src/main/java/duke/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":" * Extending the \u003ccode\u003eTask\u003c/code\u003e class that represents a basic \u003ccode\u003eTodo\u003c/code\u003e without time objects"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"        return null;"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":23}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"import duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":10,"author":{"gitId":"zihan9485"},"content":"    private final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":12,"author":{"gitId":"zihan9485"},"content":"    public Ui() {"},{"lineNumber":13,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":15,"author":{"gitId":"zihan9485"},"content":"    public String readCommand() {"},{"lineNumber":16,"author":{"gitId":"zihan9485"},"content":"        return SCANNER.nextLine();"},{"lineNumber":17,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":19,"author":{"gitId":"zihan9485"},"content":"    public void showWelcome() {"},{"lineNumber":20,"author":{"gitId":"zihan9485"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":21,"author":{"gitId":"zihan9485"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":22,"author":{"gitId":"zihan9485"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":23,"author":{"gitId":"zihan9485"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":24,"author":{"gitId":"zihan9485"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":25,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":26,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":27,"author":{"gitId":"zihan9485"},"content":"        showLine();"},{"lineNumber":28,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":29,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":30,"author":{"gitId":"zihan9485"},"content":"        showLine();"},{"lineNumber":31,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":33,"author":{"gitId":"zihan9485"},"content":"    public void showLine() {"},{"lineNumber":34,"author":{"gitId":"zihan9485"},"content":"        final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"},{"lineNumber":35,"author":{"gitId":"zihan9485"},"content":"        System.out.println(HORIZONTAL_LINE);"},{"lineNumber":36,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":38,"author":{"gitId":"zihan9485"},"content":"    public void showLoadingError() {"},{"lineNumber":39,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Sorry, there was an error in loading the data.\");"},{"lineNumber":40,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":42,"author":{"gitId":"zihan9485"},"content":"    public void showError(String errorMessage) {"},{"lineNumber":43,"author":{"gitId":"zihan9485"},"content":"        System.out.println(errorMessage);"},{"lineNumber":44,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":46,"author":{"gitId":"zihan9485"},"content":"    public static void showMissingIndexInput() {"},{"lineNumber":47,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Please enter the index of the task\");"},{"lineNumber":48,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":50,"author":{"gitId":"zihan9485"},"content":"    public static void showIncorrectIndexType() {"},{"lineNumber":51,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"taskIndex must be an integer\");"},{"lineNumber":52,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":54,"author":{"gitId":"zihan9485"},"content":"    public static void showFileNotFound() {"},{"lineNumber":55,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Data file does not exist\");"},{"lineNumber":56,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":58,"author":{"gitId":"zihan9485"},"content":"    public static void showLoadingData() {"},{"lineNumber":59,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Loading saved data\");"},{"lineNumber":60,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":62,"author":{"gitId":"zihan9485"},"content":"    public static void showCreateNewFile(String filePath) {"},{"lineNumber":63,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"File created: \" + filePath);"},{"lineNumber":64,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":66,"author":{"gitId":"zihan9485"},"content":"    public void showSaveError() {"},{"lineNumber":67,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Oops something went wrong with saving the file\");"},{"lineNumber":68,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":70,"author":{"gitId":"zihan9485"},"content":"    public void showNotInRange(int taskIndex, int taskListSize) {"},{"lineNumber":71,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Task \" + (taskIndex + 1) + \" does not exist.\");"},{"lineNumber":72,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"There are \" + taskListSize + \" tasks in the list.\");"},{"lineNumber":73,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":75,"author":{"gitId":"zihan9485"},"content":"    public void showAddTask(Task task, int taskListSize) {"},{"lineNumber":76,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":77,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":78,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"},{"lineNumber":79,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":81,"author":{"gitId":"zihan9485"},"content":"    public void showDeleteTask(Task task, int taskListSize) {"},{"lineNumber":82,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":83,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":84,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"},{"lineNumber":85,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":87,"author":{"gitId":"zihan9485"},"content":"    public void showAlreadyCompleted(Task task) {"},{"lineNumber":88,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"This task has already been completed:\");"},{"lineNumber":89,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":90,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":92,"author":{"gitId":"zihan9485"},"content":"    public void showMarkedDone(Task task) {"},{"lineNumber":93,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":94,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":95,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":97,"author":{"gitId":"zihan9485"},"content":"    public void showGoodbye() {"},{"lineNumber":98,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":99,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":101,"author":{"gitId":"zihan9485"},"content":"    public void showNoTasks() {"},{"lineNumber":102,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"There are no tasks in your list\");"},{"lineNumber":103,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":105,"author":{"gitId":"zihan9485"},"content":"    public void showTasks(TaskList taskList) {"},{"lineNumber":106,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":107,"author":{"gitId":"zihan9485"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":108,"author":{"gitId":"zihan9485"},"content":"            Task currentTask \u003d taskList.getTaskAtIndex(i);"},{"lineNumber":109,"author":{"gitId":"zihan9485"},"content":"            System.out.println(i + 1 + \".\" + currentTask);"},{"lineNumber":110,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":113,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"zihan9485"},"content":"     * Shows the tasks that contains the \u003ccode\u003ekeyword\u003c/code\u003e"},{"lineNumber":115,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The filtered list of Tasks that match the keyword"},{"lineNumber":116,"author":{"gitId":"zihan9485"},"content":"     * @param keyword keyword to search for"},{"lineNumber":117,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"zihan9485"},"content":"    public void showFindTasks(ArrayList\u003cTask\u003e taskList, String keyword) {"},{"lineNumber":119,"author":{"gitId":"zihan9485"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":120,"author":{"gitId":"zihan9485"},"content":"            System.out.println(\"There are no tasks matching the keyword: \" + keyword);"},{"lineNumber":121,"author":{"gitId":"zihan9485"},"content":"            return;"},{"lineNumber":122,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Here are the tasks matching the keyword: \" + keyword);"},{"lineNumber":124,"author":{"gitId":"zihan9485"},"content":"        for (Task task : taskList) {"},{"lineNumber":125,"author":{"gitId":"zihan9485"},"content":"            System.out.println(task);"},{"lineNumber":126,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"zihan9485"},"content":""},{"lineNumber":129,"author":{"gitId":"zihan9485"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"zihan9485"},"content":"     * Shows the tasks that occur on a specified \u003ccode\u003edateTime\u003c/code\u003e"},{"lineNumber":131,"author":{"gitId":"zihan9485"},"content":"     * @param taskList The filtered list of Tasks that happen at the specified \u003ccode\u003edateTime\u003c/code\u003e"},{"lineNumber":132,"author":{"gitId":"zihan9485"},"content":"     * @param dateTime The date to check which tasks are on"},{"lineNumber":133,"author":{"gitId":"zihan9485"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"zihan9485"},"content":"    public void showSchedule(ArrayList\u003cTask\u003e taskList, String dateTime) {"},{"lineNumber":135,"author":{"gitId":"zihan9485"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":136,"author":{"gitId":"zihan9485"},"content":"            System.out.println(\"There are no tasks on \" + dateTime);"},{"lineNumber":137,"author":{"gitId":"zihan9485"},"content":"            return;"},{"lineNumber":138,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"zihan9485"},"content":"        System.out.println(\"Here are the tasks on \" + dateTime);"},{"lineNumber":140,"author":{"gitId":"zihan9485"},"content":"        for (Task task : taskList) {"},{"lineNumber":141,"author":{"gitId":"zihan9485"},"content":"            System.out.println(task);"},{"lineNumber":142,"author":{"gitId":"zihan9485"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"zihan9485"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"zihan9485"},"content":"}"}],"authorContributionMap":{"zihan9485":144}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zihan9485"},"content":"list"},{"lineNumber":2,"author":{"gitId":"zihan9485"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"zihan9485"},"content":"list"},{"lineNumber":4,"author":{"gitId":"zihan9485"},"content":"deadline return book /by Sunday"},{"lineNumber":5,"author":{"gitId":"zihan9485"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":6,"author":{"gitId":"zihan9485"},"content":"list"},{"lineNumber":7,"author":{"gitId":"zihan9485"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"zihan9485"},"content":"list"},{"lineNumber":9,"author":{"gitId":"zihan9485"},"content":"done 1"}],"authorContributionMap":{"zihan9485":9}}]
