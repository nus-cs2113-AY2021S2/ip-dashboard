[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"1. Type the command in the command box and press Enter to execute it."},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"1. Refer to the Features section below for details of the commands"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"###Features"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"#####Adding todo task: todo"},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"todo\" to the task list"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"\u003e Format: todo [name_of_task]"},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":" \u003eExamples: todo read books --\u003e Got it. I\u0027ve added this task:"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"                            [T][✘]read books"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"#####Adding deadline task: deadline"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"deadline\" to the task list"},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"\u003e Format: deadline [name_of_task] /by [time_to_complete]"},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"  \u003eExamples: deadline return books /by Thursday --\u003e Got it. I\u0027ve added this task:"},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"                             [D][✘]return books (by: Thursday)"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"#####Adding event task: event"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"event\" to the task list"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: event [name_of_task] /at [time_of_event]"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"  \u003eExamples: event attend lecture /at Tonight"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"\u003e--\u003e Got it. I\u0027ve added this task:"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"                             [E][✘]attend lecture (at: Tonight)"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"#####Listing all the task: list"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: list"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"\u003eExamples: list --\u003e 1. [T][✓]123"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"                   2. [D][✓]ddl1  (by: Thursday)"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"#####Mark a task as done: done"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"mark a task of a specific index as done"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: done INDEX"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"#####Finding a task by keywords: find"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"find all the tasks whose names contain the keyword"},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: find [keyword]"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":"\u003eExamples: find 12 --\u003e Here are the matching tasks in your list:"},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"                           1. [T][✓]123"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":"#####Delete a task: delete"},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":"delete a task of a specific index"},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: delete INDEX"},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":"\u003e"},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":"\u003eExamples: delete 1 --\u003e Noted. I\u0027ve removed this task: "},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":"           [T][✓]123"},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":"#####End the project: bye"},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":"\u003eFormat: bye"}],"authorContributionMap":{"geezzzyyy":47,"-":26}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"[D][✓]ddl1  (by: Thursday)"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"[E][✓]event1  (at: Tonight)"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"[T][✓]abc"}],"authorContributionMap":{"geezzzyyy":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":"### Adding todo task: todo"},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"todo\" to the task list"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":"### Adding todo task: deadline"},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"deadline\" to the task list"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"### Adding todo task: deadline"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"deadline\" to the task list"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"### Listing all the task: list"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"###Marking a task as done: done"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"mark a task of a specific index as done"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"### Finding a task by keywords: find"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"find all the tasks whose names contain the keyword"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"###Deleting a task: delete"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"delete a task of a specific index"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"### End the project: bye"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"### `todo [name_of_task]` - Adding todo task"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"todo\" to the task list"},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"Example of usage: "},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"`todo read books `"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"Expected outcome:"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"                              [T][✘]read books`"},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"                              "},{"lineNumber":42,"author":{"gitId":"-"},"content":"                              "},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"### `event [name_of_task] /at [time_of_event]` - Adding event task"},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"event\" to the task list"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"`event attend lecture /at Tonight `"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"                              [E][✘]attend lecture (at: Tonight)`"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"                              "},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"                              "},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"### `deadline [name_of_task] /by [time_to_complete]` - Adding deadline task"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"add a task of type \"deadline\" to the task list"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"Example of usage: "},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"`deadline return books /by Thursday `"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"Expected outcome:"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":"`Got it. I\u0027ve added this task:[D][✘]return books (by: Thursday) `"},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":" ### `list` - listing all the tasks"},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":" Example of usage: "},{"lineNumber":74,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":75,"author":{"gitId":"geezzzyyy"},"content":" `list`"},{"lineNumber":76,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":77,"author":{"gitId":"geezzzyyy"},"content":" Expected outcome:"},{"lineNumber":78,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":79,"author":{"gitId":"geezzzyyy"},"content":" ` 1. [T][✓]123    2. [D][✓]ddl1  (by: Thursday)`"},{"lineNumber":80,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":81,"author":{"gitId":"geezzzyyy"},"content":" "},{"lineNumber":82,"author":{"gitId":"geezzzyyy"},"content":" ### `find [keyword]` - Finding a task by keywords"},{"lineNumber":83,"author":{"gitId":"geezzzyyy"},"content":" find all the tasks whose names contain the keyword"},{"lineNumber":84,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":85,"author":{"gitId":"geezzzyyy"},"content":"  Example of usage: "},{"lineNumber":86,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":87,"author":{"gitId":"geezzzyyy"},"content":"  `find 12`"},{"lineNumber":88,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":89,"author":{"gitId":"geezzzyyy"},"content":"  Expected outcome:"},{"lineNumber":90,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":91,"author":{"gitId":"geezzzyyy"},"content":"  ` Here are the matching tasks in your list:"},{"lineNumber":92,"author":{"gitId":"geezzzyyy"},"content":"                               1. [T][✓]123`"},{"lineNumber":93,"author":{"gitId":"geezzzyyy"},"content":"                               "},{"lineNumber":94,"author":{"gitId":"geezzzyyy"},"content":"                               "},{"lineNumber":95,"author":{"gitId":"geezzzyyy"},"content":" ### `done INDEX` - Marking a task as done"},{"lineNumber":96,"author":{"gitId":"geezzzyyy"},"content":" mark a task of a specific index as done"},{"lineNumber":97,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":98,"author":{"gitId":"geezzzyyy"},"content":"  Example of usage: "},{"lineNumber":99,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":100,"author":{"gitId":"geezzzyyy"},"content":"  `done 3`"},{"lineNumber":101,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":102,"author":{"gitId":"geezzzyyy"},"content":"  Expected outcome:"},{"lineNumber":103,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":104,"author":{"gitId":"geezzzyyy"},"content":"  ` Nice! I\u0027ve marked this task as done: "},{"lineNumber":105,"author":{"gitId":"geezzzyyy"},"content":"    ✓ abc`   "},{"lineNumber":106,"author":{"gitId":"geezzzyyy"},"content":"    "},{"lineNumber":107,"author":{"gitId":"geezzzyyy"},"content":"    "},{"lineNumber":108,"author":{"gitId":"geezzzyyy"},"content":"### `delete INDEX` - deleting a task"},{"lineNumber":109,"author":{"gitId":"geezzzyyy"},"content":"delete a task of a specific index"},{"lineNumber":110,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":111,"author":{"gitId":"geezzzyyy"},"content":"  Example of usage: "},{"lineNumber":112,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":113,"author":{"gitId":"geezzzyyy"},"content":"  `ddelete 1`"},{"lineNumber":114,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":115,"author":{"gitId":"geezzzyyy"},"content":"  Expected outcome:"},{"lineNumber":116,"author":{"gitId":"geezzzyyy"},"content":"  "},{"lineNumber":117,"author":{"gitId":"geezzzyyy"},"content":"  ` Noted. I\u0027ve removed this task: "},{"lineNumber":118,"author":{"gitId":"geezzzyyy"},"content":"                   [T][✓]123`    "},{"lineNumber":119,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":120,"author":{"gitId":"geezzzyyy"},"content":"### `bye` - end of project                                                    "}],"authorContributionMap":{"geezzzyyy":105,"-":15}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"public class Deadline extends Task{"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"    protected String by;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"        this.by \u003d by;"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"     * Format the deadline task as [D][status] description (by: time_to_complete)."},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"     * @return the deadline task"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":17}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":" * This is the main class for the scheduling system."},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    private static TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"    private static Storage storage;"},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"    private static Ui ui;"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"     * Constructor of Duke object."},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"     * Load the task list from the data file if it exist."},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"     * If the data file does not exist, create an empty file and an empty task list."},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"     * @param filePath Relative path of the data file"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"     * @throws FileNotFoundException If the data file does not exist."},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"        storage \u003d new Storage(\"data/duke.txt\");"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":"            tasks \u003d new TaskList(Storage.printFileContents(\"data/duke.txt\"));"},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"task list doesn\u0027t exist yet\");"},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"            Storage.createDirAndFile();"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"     * Main method."},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"     * Print the DUKE logo first."},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"     * Then run the system."},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"     * @param args"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"        System.out.println(\"____________________________________________________________\\n\"+"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"                        \"Hello! I\u0027m Duke\\n\"+"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"                        \"What can I do for you?\\n\"+"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"                        \"____________________________________________________________\");"},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"     * Uses the getCommand method from the Ui class to get and respond to user command."},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"    private static void run() {"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"        Ui.getCommand(tasks);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geezzzyyy":51,"-":10}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"public class Event extends Task{"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"    protected String at;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"    public Event(String description, String at) {"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"        this.at \u003d at;"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"     * Format the event task as [E][status] description (at: time_of_event)."},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"     * @return the event task"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":17}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":" * This class deals with making sense of the user command."},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":" * The commands includes: deadline, todo, event, done, delete, find, list."},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"     * Add a deadline task to the task list, if the user entered a deadline command."},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"     * The deadline task must follow the format: deadline \u003cdescription\u003e /by time."},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"     * Print our the number of tasks on the list after adding the new task."},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"     * Save the new task to the data file."},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"     * If the command does not follow the format, print an error message specifying the desired format."},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"     * If something went wrong when save the task to the data file, print an error message."},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"     * @param command The command users entered"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks  The existing list of tasks"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"     * @throws StringIndexOutOfBoundsException If the command does not follow the correct format"},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when save the task to the data file"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":"    public static void deadlineTasks(String command, TaskList tasks) {"},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"            String description \u003d command.substring(9, command.indexOf(\"/by\"));"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":"            String by \u003d command.substring(command.indexOf(\"/by\") + 4);"},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"            Task task \u003d new Deadline(description, by);"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":"            tasks.addTask(task);"},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(task);"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Now you have \"+ Task.getTaskCount() +\" task(s) in the list.\");"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"            Storage.writeToFile(\"data/duke.txt\", tasks);"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! The description of a deadline must include /by and description.\");"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Something went wrong when writing: \" + e.getMessage());"},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"     * Add a event task to the task list, if the user entered a event command."},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"     * The deadline task must follow the format: event \u003cdescription\u003e /at time."},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"     * Print our the number of tasks on the list after adding the new task."},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"     * Save the new task to the data file."},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"     * If the command does not follow the format, print an error message specifying the desired format."},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"     * If something went wrong when save the task to the data file, print an error message."},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"     * @param command The command users entered"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks The existing list of tasks"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"     * @throws StringIndexOutOfBoundsException If the command does not follow the correct format"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when save the task to the data file"},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"    public static void eventTask(String command, TaskList tasks) {"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"            String description \u003d command.substring(6, command.indexOf(\"/at\"));"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"            String at \u003d command.substring(command.indexOf(\"/at\") + 4);"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"            Task task \u003d new Event(description, at);"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"            tasks.addTask(task);"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(task);"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Now you have \"+ Task.getTaskCount() +\" task(s) in the list.\");"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"            Storage.writeToFile(\"data/duke.txt\", tasks);"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! The description of a event must include /at and description.\");"},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IOException e) {"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Something went wrong when writing: \" + e.getMessage());"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":"     * Add a todo task to the task list, if the user entered a todo command."},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":"     * The todo task must follow the format: todo \u003cdescription\u003e."},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":"     * Print our the number of tasks on the list after adding the new task."},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":"     * Save the new task to the data file."},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":"     * If the command does not follow the format, print an error message specifying the desired format."},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":"     * If something went wrong when save the task to the data file, print an error message."},{"lineNumber":74,"author":{"gitId":"geezzzyyy"},"content":"     * @param command The command users entered"},{"lineNumber":75,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks The existing list of tasks"},{"lineNumber":76,"author":{"gitId":"geezzzyyy"},"content":"     * @throws StringIndexOutOfBoundsException If the command does not follow the correct format"},{"lineNumber":77,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when save the task to the data file"},{"lineNumber":78,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"geezzzyyy"},"content":"    public static void todoTask(String command, TaskList tasks) {"},{"lineNumber":80,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"geezzzyyy"},"content":"            Task task \u003d new Todo(command.substring(5));"},{"lineNumber":82,"author":{"gitId":"geezzzyyy"},"content":"            tasks.addTask(task);"},{"lineNumber":83,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":84,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(task);"},{"lineNumber":85,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Now you have \"+ Task.getTaskCount() +\" task(s) in the list.\");"},{"lineNumber":86,"author":{"gitId":"geezzzyyy"},"content":"            Storage.writeToFile(\"data/duke.txt\", tasks);"},{"lineNumber":87,"author":{"gitId":"geezzzyyy"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":88,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":89,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Something went wrong when writing: \" + e.getMessage());"},{"lineNumber":91,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"geezzzyyy"},"content":"     * Mark a specific task as done."},{"lineNumber":95,"author":{"gitId":"geezzzyyy"},"content":"     * The command must follow the format: done \u003cindex\u003e."},{"lineNumber":96,"author":{"gitId":"geezzzyyy"},"content":"     * Save the new task status to the data file."},{"lineNumber":97,"author":{"gitId":"geezzzyyy"},"content":"     * If the command does not follow the format, print an error message specifying the desired format."},{"lineNumber":98,"author":{"gitId":"geezzzyyy"},"content":"     * If something went wrong when save the task to the data file, print an error message."},{"lineNumber":99,"author":{"gitId":"geezzzyyy"},"content":"     * @param command The command users entered"},{"lineNumber":100,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks The existing list of tasks"},{"lineNumber":101,"author":{"gitId":"geezzzyyy"},"content":"     * @throws NumberFormatException If the command does not follow the correct format"},{"lineNumber":102,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when save the task to the data file"},{"lineNumber":103,"author":{"gitId":"geezzzyyy"},"content":"     * @throws ArrayIndexOutOfBoundsException If the index is not on the existing task list."},{"lineNumber":104,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"geezzzyyy"},"content":"    public static void doneTasks(String command, TaskList tasks) {"},{"lineNumber":106,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"geezzzyyy"},"content":"            int doneNumber\u003dInteger.parseInt(command.substring(5));"},{"lineNumber":108,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":109,"author":{"gitId":"geezzzyyy"},"content":"            tasks.getTaskByIndex(doneNumber-1).markAsDone();"},{"lineNumber":110,"author":{"gitId":"geezzzyyy"},"content":"            Storage.writeToFile(\"data/duke.txt\", tasks);"},{"lineNumber":111,"author":{"gitId":"geezzzyyy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":112,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! A number is expected after command done\");"},{"lineNumber":113,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IndexOutOfBoundsException e) {"},{"lineNumber":114,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! Please select from the task list.\");"},{"lineNumber":115,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IOException e) {"},{"lineNumber":116,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Something went wrong when writing: \" + e.getMessage());"},{"lineNumber":117,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":120,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"geezzzyyy"},"content":"     * delete a specific task."},{"lineNumber":122,"author":{"gitId":"geezzzyyy"},"content":"     * The command must follow the format: delete \u003cindex\u003e."},{"lineNumber":123,"author":{"gitId":"geezzzyyy"},"content":"     * delete the task from data file."},{"lineNumber":124,"author":{"gitId":"geezzzyyy"},"content":"     * If the command does not follow the format, print an error message specifying the desired format."},{"lineNumber":125,"author":{"gitId":"geezzzyyy"},"content":"     * If something went wrong when save the task to the data file, print an error message."},{"lineNumber":126,"author":{"gitId":"geezzzyyy"},"content":"     * @param command The command users entered"},{"lineNumber":127,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks The existing list of tasks"},{"lineNumber":128,"author":{"gitId":"geezzzyyy"},"content":"     * @throws NumberFormatException If the command does not follow the correct format"},{"lineNumber":129,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when save the task to the data file"},{"lineNumber":130,"author":{"gitId":"geezzzyyy"},"content":"     * @throws ArrayIndexOutOfBoundsException If the index is not on the existing task list."},{"lineNumber":131,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"geezzzyyy"},"content":"    public static void deleteTask(String command, TaskList tasks) {"},{"lineNumber":133,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"geezzzyyy"},"content":"            int deleteNumber\u003dInteger.parseInt(command.substring(7));"},{"lineNumber":135,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":136,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(tasks.getTaskByIndex(deleteNumber-1));"},{"lineNumber":137,"author":{"gitId":"geezzzyyy"},"content":"            tasks.removeTask(deleteNumber-1);"},{"lineNumber":138,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Now you have \"+ Task.updateTaskCount() +\" task(s) in the list.\");"},{"lineNumber":139,"author":{"gitId":"geezzzyyy"},"content":"            Storage.writeToFile(\"data/duke.txt\", tasks);"},{"lineNumber":140,"author":{"gitId":"geezzzyyy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":141,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! A number is expected after command done\");"},{"lineNumber":142,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IndexOutOfBoundsException e) {"},{"lineNumber":143,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! Please select from the task list.\");"},{"lineNumber":144,"author":{"gitId":"geezzzyyy"},"content":"        }catch (IOException e) {"},{"lineNumber":145,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Something went wrong when writing: \" + e.getMessage());"},{"lineNumber":146,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":149,"author":{"gitId":"geezzzyyy"},"content":"    public static void findTask(String command, TaskList tasks) {"},{"lineNumber":150,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"geezzzyyy"},"content":"            String keyword \u003d command.substring(6);"},{"lineNumber":152,"author":{"gitId":"geezzzyyy"},"content":"            int count \u003d 0;"},{"lineNumber":153,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":154,"author":{"gitId":"geezzzyyy"},"content":"            for(int i\u003d0; i\u003cTask.getTaskCount(); i++) {"},{"lineNumber":155,"author":{"gitId":"geezzzyyy"},"content":"                Task t \u003d tasks.getTaskByIndex(i);"},{"lineNumber":156,"author":{"gitId":"geezzzyyy"},"content":"                if(t.getDescription().contains(keyword)) {"},{"lineNumber":157,"author":{"gitId":"geezzzyyy"},"content":"                    count++;"},{"lineNumber":158,"author":{"gitId":"geezzzyyy"},"content":"                    System.out.print(count+\". \");"},{"lineNumber":159,"author":{"gitId":"geezzzyyy"},"content":"                    System.out.println(t);"},{"lineNumber":160,"author":{"gitId":"geezzzyyy"},"content":"                }"},{"lineNumber":161,"author":{"gitId":"geezzzyyy"},"content":"            }"},{"lineNumber":162,"author":{"gitId":"geezzzyyy"},"content":"            if(count \u003d\u003d 0) {"},{"lineNumber":163,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"OOPS!!! There are no matching tasks.\");"},{"lineNumber":164,"author":{"gitId":"geezzzyyy"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"geezzzyyy"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":166,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"OOPS!!! The keyword cannot be empty.\");"},{"lineNumber":167,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":170,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":170}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":" * This class deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"     * relative path of the data file."},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"     * Constructor for an storage object."},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"     * @param filePath relative path of the data file"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":"    public Storage(String filePath) {"},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":"     * Store the list of tasks to a data file."},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"     * The tasks are saved as: [Task type][completion icon]Description"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is done, it will be marked as [✓]"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is still pending, it will be marked as [✘]"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"     * @param filePath relative path to the data file"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks the list of existing tasks"},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"     * @throws IOException If something went wrong when saving the tasks"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"    static void writeToFile(String filePath, TaskList tasks) throws IOException {"},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"        for (int i\u003d0; i\u003cTask.getTaskCount(); i++) {"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"            Task t \u003d tasks.getTaskByIndex(i);"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"            fw.write(t.toString()+\"\\n\");"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"        //fw.write(textToAdd);"},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"        fw.close();"},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"     *Read the data file and print ot the tasks written in the file as: [Task type][completion icon]Description"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is done, it will be marked as [✓]"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is still pending, it will be marked as [✘]"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"     * Create a new file if the data file does not exist yet."},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"     * @param filePath relative path to the data file"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"     * @return list of tasks written in the data file"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"     * @throws FileNotFoundException If the data file specified does not exist."},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"    static ArrayList\u003cTask\u003e printFileContents(String filePath) throws FileNotFoundException {"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"        File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"        while (s.hasNext()) {"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"            String nextItem \u003d s.nextLine();"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"            loadItem(nextItem, tasks);"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(nextItem);"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"        return tasks;"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":"     * Read from the data file content and store the data as a list of tasks"},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":"     * @param item A line item read from the data file"},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks A list of tasks"},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":"    private static void loadItem(String item, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":"        char type \u003d item.charAt(1);"},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":"        Task task;"},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":"        String description;"},{"lineNumber":74,"author":{"gitId":"geezzzyyy"},"content":"        switch (type){"},{"lineNumber":75,"author":{"gitId":"geezzzyyy"},"content":"        case \u0027T\u0027:"},{"lineNumber":76,"author":{"gitId":"geezzzyyy"},"content":"            task \u003d new Todo(item.substring(6));"},{"lineNumber":77,"author":{"gitId":"geezzzyyy"},"content":"            task.loadStatus(item.substring(4,5));"},{"lineNumber":78,"author":{"gitId":"geezzzyyy"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"geezzzyyy"},"content":"        case \u0027E\u0027:"},{"lineNumber":80,"author":{"gitId":"geezzzyyy"},"content":"            description \u003d item.substring(6, item.indexOf(\" (at:\"));"},{"lineNumber":81,"author":{"gitId":"geezzzyyy"},"content":"            String at \u003d item.substring(item.indexOf(\" (at:\") + 6 , item.indexOf(\")\"));"},{"lineNumber":82,"author":{"gitId":"geezzzyyy"},"content":"            task \u003d new Event(description, at);"},{"lineNumber":83,"author":{"gitId":"geezzzyyy"},"content":"            task.loadStatus(item.substring(4,5));"},{"lineNumber":84,"author":{"gitId":"geezzzyyy"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"geezzzyyy"},"content":"        case \u0027D\u0027:"},{"lineNumber":86,"author":{"gitId":"geezzzyyy"},"content":"            description \u003d item.substring(6, item.indexOf(\" (by:\"));"},{"lineNumber":87,"author":{"gitId":"geezzzyyy"},"content":"            String by \u003d item.substring(item.indexOf(\" (by:\") + 6 , item.indexOf(\")\"));"},{"lineNumber":88,"author":{"gitId":"geezzzyyy"},"content":"            task \u003d new Deadline(description, by);"},{"lineNumber":89,"author":{"gitId":"geezzzyyy"},"content":"            task.loadStatus(item.substring(4,5));"},{"lineNumber":90,"author":{"gitId":"geezzzyyy"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"geezzzyyy"},"content":"        default:"},{"lineNumber":92,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"no tasks\");"},{"lineNumber":93,"author":{"gitId":"geezzzyyy"},"content":"            task \u003d null;"},{"lineNumber":94,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"geezzzyyy"},"content":"        tasks.add(task);"},{"lineNumber":96,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":98,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"geezzzyyy"},"content":"     * Create a new directory and an empty data file."},{"lineNumber":100,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"geezzzyyy"},"content":"    static void createDirAndFile() {"},{"lineNumber":102,"author":{"gitId":"geezzzyyy"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"Creating file: data/duke.txt\");"},{"lineNumber":104,"author":{"gitId":"geezzzyyy"},"content":"            File newDir \u003d new File(\"data\");"},{"lineNumber":105,"author":{"gitId":"geezzzyyy"},"content":"            newDir.mkdir();"},{"lineNumber":106,"author":{"gitId":"geezzzyyy"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":107,"author":{"gitId":"geezzzyyy"},"content":"            if (f.createNewFile()) {"},{"lineNumber":108,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"File created: \" + f.getName());"},{"lineNumber":109,"author":{"gitId":"geezzzyyy"},"content":"            } else {"},{"lineNumber":110,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"File already exists.\");"},{"lineNumber":111,"author":{"gitId":"geezzzyyy"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"geezzzyyy"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":114,"author":{"gitId":"geezzzyyy"},"content":"            e.printStackTrace();"},{"lineNumber":115,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":117}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"    private static int taskCount\u003d0;"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"     * Get the total number of tasks."},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":"     * @return the total number of tasks."},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"    public static int getTaskCount() {"},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"        return taskCount;"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"     * Set the total number of tasks to a specific value."},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"     * @param taskCount the new number of task"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"    public static void setTaskCount(int taskCount) {"},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"        Task.taskCount \u003d taskCount;"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"     * Constructor method for a task object"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":"     * @param description description of a task, including name, time, etc."},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":"    public Task(String description) {"},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"        this.isDone \u003d false;"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"        taskCount++;"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"     * Get the completion status as an icon."},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is done, it will be marked as [✓]."},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is still pending, it will be marked as [✘]."},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"     * @return the status icon"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"    public String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"    public String getDescription() {"},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"        return description;"},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"     * Set the description to a specific description for the task"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"     * @param description the new description of the task, including name, time etc."},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"    public void setDescription(String description) {"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"        this.description \u003d description;"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"     * Mark a task as done, change the completion status icon"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"    public void markAsDone(){"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"        isDone \u003d true;"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"        System.out.println(this.getStatusIcon()+\" \"+this.description);"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"     * Format the task as [status] description."},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":"     * @return the task"},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":"    public String toString(){"},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":"        return \"[\" + this.getStatusIcon() +\"]\" + this.description;"},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":"     * Load the completion status of a task when reading from the data file."},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":"     * @param s status icon"},{"lineNumber":74,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"geezzzyyy"},"content":"    public void loadStatus(String s) {"},{"lineNumber":76,"author":{"gitId":"geezzzyyy"},"content":"        if (s.equals(\"\\u2713\"))"},{"lineNumber":77,"author":{"gitId":"geezzzyyy"},"content":"            isDone \u003d true;"},{"lineNumber":78,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":80,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"geezzzyyy"},"content":"     * Update the task count when the list of tasks is modified."},{"lineNumber":82,"author":{"gitId":"geezzzyyy"},"content":"     * @return new task count after modification"},{"lineNumber":83,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"geezzzyyy"},"content":"    public static int updateTaskCount() {"},{"lineNumber":85,"author":{"gitId":"geezzzyyy"},"content":"        taskCount--;"},{"lineNumber":86,"author":{"gitId":"geezzzyyy"},"content":"        return taskCount;"},{"lineNumber":87,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":88}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":" * This class contains the task list and has operation to manipulate the list"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"     * Consturctor method to create a TaskList object with an existing list of tasks"},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks an existing list of tasks"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"     * Constructor method to create an empty task list."},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"    public TaskList() { }"},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"     * Get the entire list of tasks."},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":"     * @return the entire list of tasks"},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":"    public static ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"        return tasks;"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"     * Print the tasks on the list one by one."},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"    static void printTaskList() {"},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"        for(Task t: tasks){"},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"            System.out.print(tasks.indexOf(t)+1+\". \");"},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"            System.out.println(t);"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"     * Get a specific task on the list using its index"},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"     * @param i index of the task"},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"     * @return the task at this index"},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"    public Task getTaskByIndex(int i) {"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"        return tasks.get(i);"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"     * Add a task to the existing list of task"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"     * @param t the new task to add"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"    public void addTask(Task t) {"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"        tasks.add(t);"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"     * Remove a specific task on the list using its index"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"     * @param i the index of the task to remove"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"    public void removeTask(int i) {"},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"        tasks.remove(i);"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":64}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"public class Todo extends Task{"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"    public Todo(String description) {"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":"        super(description);"},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":"     * Format the todo task as [T][status] description ."},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":"     * @return the todo task"},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"    public String toString(){"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":14}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geezzzyyy"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"geezzzyyy"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":4,"author":{"gitId":"geezzzyyy"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"geezzzyyy"},"content":" *  This class deals with interactions with users."},{"lineNumber":6,"author":{"gitId":"geezzzyyy"},"content":" *  Get user commands and respond to the commands."},{"lineNumber":7,"author":{"gitId":"geezzzyyy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"geezzzyyy"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"geezzzyyy"},"content":"    private Parser parser;"},{"lineNumber":10,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":11,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"geezzzyyy"},"content":"     * Constructor for Ui object."},{"lineNumber":13,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"geezzzyyy"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"geezzzyyy"},"content":"        parser \u003d new Parser();"},{"lineNumber":16,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":18,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"geezzzyyy"},"content":"     * Read the input stream to get user commands."},{"lineNumber":20,"author":{"gitId":"geezzzyyy"},"content":"     * Perform the actions corresponds to a specific command."},{"lineNumber":21,"author":{"gitId":"geezzzyyy"},"content":"     * Update the list of tasks if necessary."},{"lineNumber":22,"author":{"gitId":"geezzzyyy"},"content":"     * @param tasks The existing list of tasks"},{"lineNumber":23,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"geezzzyyy"},"content":"    public static void getCommand(TaskList tasks) {"},{"lineNumber":25,"author":{"gitId":"geezzzyyy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":27,"author":{"gitId":"geezzzyyy"},"content":"        while(true){"},{"lineNumber":28,"author":{"gitId":"geezzzyyy"},"content":"            String command \u003d sc.nextLine();"},{"lineNumber":29,"author":{"gitId":"geezzzyyy"},"content":"            if (command.equals(\"bye\")) {"},{"lineNumber":30,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\\n\"+"},{"lineNumber":31,"author":{"gitId":"geezzzyyy"},"content":"                                    \"Bye. Hope to see you again soon!\\n\"+"},{"lineNumber":32,"author":{"gitId":"geezzzyyy"},"content":"                                    \"____________________________________________________________\");"},{"lineNumber":33,"author":{"gitId":"geezzzyyy"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"geezzzyyy"},"content":"            }else if (command.equals(\"list\")) {"},{"lineNumber":35,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":36,"author":{"gitId":"geezzzyyy"},"content":"                listTasks();"},{"lineNumber":37,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":38,"author":{"gitId":"geezzzyyy"},"content":"            }else if (command.contains(\"done\")) {"},{"lineNumber":39,"author":{"gitId":"geezzzyyy"},"content":"                Parser.doneTasks(command, tasks);"},{"lineNumber":40,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":41,"author":{"gitId":"geezzzyyy"},"content":"            } else if (command.contains(\"todo\")) {"},{"lineNumber":42,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":43,"author":{"gitId":"geezzzyyy"},"content":"                Parser.todoTask(command, tasks);"},{"lineNumber":44,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":45,"author":{"gitId":"geezzzyyy"},"content":"            }else if (command.contains(\"deadline\")) {"},{"lineNumber":46,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":47,"author":{"gitId":"geezzzyyy"},"content":"                Parser.deadlineTasks(command, tasks);"},{"lineNumber":48,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":49,"author":{"gitId":"geezzzyyy"},"content":"            }else if (command.contains(\"event\")) {"},{"lineNumber":50,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":51,"author":{"gitId":"geezzzyyy"},"content":"                Parser.eventTask(command, tasks);"},{"lineNumber":52,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":53,"author":{"gitId":"geezzzyyy"},"content":"            }else if (command.contains(\"delete\")) {"},{"lineNumber":54,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":55,"author":{"gitId":"geezzzyyy"},"content":"                Parser.deleteTask(command, tasks);"},{"lineNumber":56,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":57,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":58,"author":{"gitId":"geezzzyyy"},"content":"            } else if (command.contains(\"find\")) {"},{"lineNumber":59,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":60,"author":{"gitId":"geezzzyyy"},"content":"                Parser.findTask(command, tasks);"},{"lineNumber":61,"author":{"gitId":"geezzzyyy"},"content":"                System.out.println(\"____________________________________________________________\");"},{"lineNumber":62,"author":{"gitId":"geezzzyyy"},"content":"            } else {"},{"lineNumber":63,"author":{"gitId":"geezzzyyy"},"content":"                    System.out.println(\"____________________________________________________________\");"},{"lineNumber":64,"author":{"gitId":"geezzzyyy"},"content":"                    System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":65,"author":{"gitId":"geezzzyyy"},"content":"                    System.out.println(\"____________________________________________________________\");"},{"lineNumber":66,"author":{"gitId":"geezzzyyy"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":68,"author":{"gitId":"geezzzyyy"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"geezzzyyy"},"content":""},{"lineNumber":71,"author":{"gitId":"geezzzyyy"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"geezzzyyy"},"content":"     * Print the entire list of tasks. In the following format:"},{"lineNumber":73,"author":{"gitId":"geezzzyyy"},"content":"     * [Task type][completion icon]Description"},{"lineNumber":74,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is done, it will be marked as [✓]"},{"lineNumber":75,"author":{"gitId":"geezzzyyy"},"content":"     * If the task is still pending, it will be marked as [✘]"},{"lineNumber":76,"author":{"gitId":"geezzzyyy"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"geezzzyyy"},"content":"    private static void listTasks() {"},{"lineNumber":78,"author":{"gitId":"geezzzyyy"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":79,"author":{"gitId":"geezzzyyy"},"content":"        TaskList.printTaskList();"},{"lineNumber":80,"author":{"gitId":"geezzzyyy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"geezzzyyy"},"content":"}"}],"authorContributionMap":{"geezzzyyy":81}}]
