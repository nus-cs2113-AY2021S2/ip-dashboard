[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"### Duke is a Personal Assistant Chatbot that helps a person to keep track of various things."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"### `list` - Fetches all tasks created by user."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"`list`"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"`1.[T][ ] user guide"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"2.[D][ ] duke launch (by: MARCH 5 2021, 06.00 PM)`"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"### `todo` - Creates a new task without any date/time attached to it."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"`todo {task description}`"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"Example of usage:"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"`todo read a book`"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"[T][ ] read a book"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"Tasks left: 1`"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"### `deadline` - Creates a new task that need to be done before a specific date/time."},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"`deadline {task description} /by {YYYY-MM-DD HH.MM}`"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"Example of usage:"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"`deadline return book /by 2021-01-10 18.00`"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"[D][ ] return book (by: JANUARY 10 2021, 06.00 PM)"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"Tasks left: 2`"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"### `event` - Creates a new task that start at a specific time and ends at a specific time."},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"`event {task description} /at {YYYY-MM-DD HH.MM-HH.MM}`"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"Example of usage:"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"`event zoom meeting /at 2021-01-10 18.00-20.00`"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"[E][ ] zoom meeting (at: JANUARY 10 2021, 06.00 PM - 08.00 PM)"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"Tasks left: 3`"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"### `done` - Marks a task as done by its index number."},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"`done {task index number}`"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"Example of usage:"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"`done 1`"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"`Nice! I\u0027ve marked this task as done:"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"[T][X] read a book"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"Tasks left: 2`"},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"### `delete` - Removes a specific task by its index number."},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":"`delete {task index number}`"},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"Example of usage:"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"`delete 3`"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":"Expected outcome:"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":"`Noted. I\u0027ve removed this task:"},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"[D][ ] return book (by: JANUARY 10 2021, 06.00 PM - 08.00 PM)"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":"Tasks left: 1`"},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"### `find` - Find a task by searching for a keyword."},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":"`find {keyword}`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":"`find book`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"`Here are the matching tasks in your list:"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"1.[T][X] read a book"},{"lineNumber":96,"author":{"gitId":"jadenwjh"},"content":"2.[D][ ] return book (by: JANUARY 10 2021, 06.00 PM)`"}],"authorContributionMap":{"-":16,"jadenwjh":80}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":":init"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":":end"},{"lineNumber":88,"author":{"gitId":"jadenwjh"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"jadenwjh"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":91,"author":{"gitId":"jadenwjh"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"jadenwjh"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"jadenwjh"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":97,"author":{"gitId":"jadenwjh"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"jadenwjh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":100,"author":{"gitId":"jadenwjh"},"content":":omega"}],"authorContributionMap":{"jadenwjh":100}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * Entry point of the application."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        greetUser();"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        Parser.handleCommand(scanner);"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    private static void greetUser() {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Messages.HELLO_MESSAGE);"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Messages.ASSIST_MESSAGE);"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        Ui.reply(messages);"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":28}},{"path":"src/main/java/duke/common/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Commands {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    public static final String BYE \u003d \"bye\";"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    public static final String LIST \u003d \"list\";"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    public static final String DONE \u003d \"done\";"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    public static final String TODO \u003d \"todo\";"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE \u003d \"deadline\";"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT \u003d \"event\";"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    public static final String DELETE \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public static final String FIND \u003d \"find\";"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":12}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Messages {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    public static final String HORIZONTAL_LINE \u003d \"    ___________________________________________\";"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    public static final String HELLO_MESSAGE \u003d \"Hello! I\u0027m Duke [Version 0.2]\";"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    public static final String ASSIST_MESSAGE \u003d \"What can I do for you?\";"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    public static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    public static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    public static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public static final String DELETED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    public static final String FOUND_TASK_MESSAGE \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    public static final String INTERNAL_ERROR_MESSAGE \u003d \"Duke has malfunctioned...\";"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"Do not understand your command.\";"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    public static final String COMPLETE_TASK_ERROR_MESSAGE \u003d \"There are no tasks to complete.\";"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    public static final String EMPTY_TASK_LIST_MESSAGE \u003d \"You currently have no tasks.\";"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    public static final String TODO_EMPTY_MESSAGE \u003d \"Description of a todo cannot be empty!\";"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE_EMPTY_MESSAGE \u003d \"Description of deadline can\u0027t be empty!\";"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE_EMPTY_TIME_MESSAGE \u003d \"Please specify a deadline\";"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT_EMPTY_MESSAGE \u003d \"Description of a event cannot be empty!\";"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT_EMPTY_TIME_MESSAGE \u003d \"Please specify a start and end time\";"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public static final String TASK_DOES_NOT_EXIST \u003d \"Task does not exist!\";"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"    public static final String INDEX_NUMBER_INPUT_MESSAGE \u003d \"Please input a valid number!\";"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    public static final String EMPTY_KEYWORD_MESSAGE \u003d \"Please input a keyword\";"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    public static final String NO_MATCHING_TASKS \u003d \"There are no matching task with: \";"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_DATETIME_MESSAGE \u003d \"Please use valid date time\";"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    public static final String MISSING_DEADLINE_MESSAGE \u003d \"Please specify a deadline\";"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    public static final String MISSING_EVENT_MESSAGE \u003d \"Please specify the event time period\";"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_TIME_ORDER_MESSAGE \u003d \"Start time must be before end time!\";"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_DEADLINE_MESSAGE \u003d \"Please set time as YYYY-MM-DD HH.MM\";"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_EVENT_MESSAGE \u003d \"Please set time as YYYY-MM-DD HH.MM-HH.MM\";"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    public static final String CORRUPTED_SAVE_FILE_MESSAGE \u003d \"Save file is corrupted.\";"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"    public static final String TASK_ALREADY_DONE_MESSAGE \u003d \"This task was already completed\";"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":34}},{"path":"src/main/java/duke/data/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import duke.util.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"public class Deadline implements Task {"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    private final String deadline;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * Constructs a Deadline task."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @param deadline Date/time this task expires."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @exception DukeException When user gives an invalid deadline."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    public Deadline(String description, boolean isDone, String deadline) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        String time \u003d DateTimeFormatter.deriveDateTime(deadline, false);"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        String fullDescription \u003d String.format(\"%s (by: %s)\", description, time);"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format("},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                \"[D][%s] %s\","},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                isDone ? \"X\" : \" \","},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                fullDescription"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"    public String getDeadline() {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        return deadline;"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":47}},{"path":"src/main/java/duke/data/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import duke.util.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"public class Event implements Task {"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    private final String event;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * Constructs an Event task."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @param event Date/time this task expires."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @exception DukeException When user gives an invalid event."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    public Event(String description, boolean isDone, String event) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        String time \u003d DateTimeFormatter.deriveDateTime(event, true);"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        String fullDescription \u003d String.format(\"%s (at: %s)\", description, time);"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        this.event \u003d event;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format("},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                \"[E][%s] %s\","},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                isDone ? \"X\" : \" \","},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                fullDescription"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"    public String getEvent() {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        return event;"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":47}},{"path":"src/main/java/duke/data/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public interface Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    "},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    boolean isTaskDone();"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    String getMessage();"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    String getDescription();"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":10}},{"path":"src/main/java/duke/data/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Todo implements Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"     * Constructs a Todo task."},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format(\"[T][%s] %s\","},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"            isDone ? \"X\" : \" \","},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"            description"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":33}},{"path":"src/main/java/duke/data/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data.exception;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"public class DukeException extends Exception {"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"     * Initiates the exception handling object in Duke."},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"     * @param type Type of Duke exception."},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public DukeException(DukeExceptionKey type) {"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"        super(categorizeException(type));"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * Determines the printed line of the exception."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @param type Type of Duke exception."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * @return Exception description."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    private static String categorizeException(DukeExceptionKey type) {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        switch (type) {"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_TASK_COMPLETE_LIST:"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            return Messages.COMPLETE_TASK_ERROR_MESSAGE;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_TASK_LIST:"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"            return Messages.EMPTY_TASK_LIST_MESSAGE;"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        case INVALID_COMMAND:"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INVALID_COMMAND_MESSAGE;"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_TODO:"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            return Messages.TODO_EMPTY_MESSAGE;"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_DEADLINE:"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"            return Messages.DEADLINE_EMPTY_MESSAGE;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_DEADLINE_TIME:"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            return Messages.DEADLINE_EMPTY_TIME_MESSAGE;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_EVENT:"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            return Messages.EVENT_EMPTY_MESSAGE;"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_EVENT_TIME:"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            return Messages.EVENT_EMPTY_TIME_MESSAGE;"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"        case NO_TASK_FOUND:"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"            return Messages.TASK_DOES_NOT_EXIST;"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        case INDEX_FORMAT_ERROR:"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INDEX_NUMBER_INPUT_MESSAGE;"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_KEYWORD:"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            return Messages.EMPTY_KEYWORD_MESSAGE;"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"        case INVALID_TIME_ORDER:"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INVALID_TIME_ORDER_MESSAGE;"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"        case INVALID_DEADLINE:"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INVALID_DEADLINE_MESSAGE;"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"        case INVALID_EVENT:"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INVALID_EVENT_MESSAGE;"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"        case EMPTY_DATETIME:"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"            return Messages.INVALID_DATETIME_MESSAGE;"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"        case MISSING_DEADLINE:"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            return Messages.MISSING_DEADLINE_MESSAGE;"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"        case MISSING_EVENT:"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"            return Messages.MISSING_EVENT_MESSAGE;"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"        case TASK_ALREADY_DONE:"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"            return Messages.TASK_ALREADY_DONE_MESSAGE;"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"        return Messages.INTERNAL_ERROR_MESSAGE;"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":61}},{"path":"src/main/java/duke/data/exception/DukeExceptionKey.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data.exception;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public enum DukeExceptionKey {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    INVALID_COMMAND,"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_TASK_LIST,"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_TASK_COMPLETE_LIST,"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_TODO,"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_DEADLINE,"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_DEADLINE_TIME,"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_EVENT,"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_EVENT_TIME,"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    NO_TASK_FOUND,"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    INDEX_FORMAT_ERROR,"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_KEYWORD,"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    EMPTY_DATETIME,"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    INVALID_TIME_ORDER,"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    INVALID_DEADLINE,"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    INVALID_EVENT,"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    MISSING_DEADLINE,"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    MISSING_EVENT,"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    TASK_ALREADY_DONE"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":22}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Commands;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.util.actions.AddTask;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.util.actions.CompleteTask;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.util.actions.DeleteTask;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"import duke.util.actions.FetchTasks;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"import duke.util.actions.FindTask;"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"import duke.ui.Ui;"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"     * Parses user input into command for execution."},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"     * @param scanner Retrieves user commands."},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    public static void handleCommand(Scanner scanner) {"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"        String sentence \u003d scanner.nextLine();"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        String[] words \u003d sentence.split(\" \");"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        String command \u003d words[0];"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        String task \u003d String.join("},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"                \" \", Arrays.copyOfRange(words, 1, words.length)"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e response;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            switch (command) {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            case Commands.BYE:"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"                messages.add(Messages.BYE_MESSAGE);"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"                Ui.reply(messages);"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"                TaskList.saveTasksToTextFile();"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"                scanner.close();"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"                return;"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            case Commands.LIST:"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"                response \u003d FetchTasks.fetchTasks();"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"            case Commands.DONE:"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                response \u003d CompleteTask.completeTask(task);"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"                TaskList.saveTasksToTextFile();"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"            case Commands.DELETE:"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"                response \u003d DeleteTask.deleteTask(task);"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"                TaskList.saveTasksToTextFile();"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"            case Commands.FIND:"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"                response \u003d FindTask.findTask(task);"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"            default:"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"                response \u003d AddTask.addTask(command, task);"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"                TaskList.saveTasksToTextFile();"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"            messages.addAll(response);"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"            Ui.reply(messages);"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"            handleCommand(scanner);"},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"            Ui.notifyError(dukeException.getMessage());"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"            handleCommand(scanner);"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":69}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    private static final String filePath \u003d \"./tasks.txt\";"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * Saves all tasks in memory to local text file."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     * File found at file path."},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"     * @param tasks Tasks in memory."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public static void save(List\u003cTask\u003e tasks) {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        if (tasks \u003d\u003d null) {"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"            for (Task task : tasks) {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"                String textInput \u003d TaskEncoder.convertToFile(task);"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"                if (textInput !\u003d null) {"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"                    fw.write(textInput + \"\\n\");"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"                }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"            fw.close();"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"        } catch (IOException | NullPointerException exception) {"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            Ui.notifyError(Messages.CORRUPTED_SAVE_FILE_MESSAGE);"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"     * Reads all tasks in local text file into Duke memory."},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"     * @return List of tasks from text file specified in file path."},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cTask\u003e read() {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"            File f \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"            if (f.createNewFile()) {"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"                messages.add(\"Tasks can be found at: \" + f.getPath());"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"                Ui.reply(messages);"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"            while (s.hasNext()) {"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"                String input \u003d s.nextLine();"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"                if (!input.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"                    Task task \u003d TaskDecoder.convertToTask(input);"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"                    if (task !\u003d null) {"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"                        tasks.add(task);"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"                    }"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"        } catch (IOException | NullPointerException exception) {"},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"            Ui.notifyError(Messages.CORRUPTED_SAVE_FILE_MESSAGE);"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"        return tasks;"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":68}},{"path":"src/main/java/duke/storage/TaskDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Deadline;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Event;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Todo;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"public class TaskDecoder {"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * Decode task in text file into a task object."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @param input String input of task."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * @return Task object."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    public static Task convertToTask(String input) {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            HashMap\u003cString,String\u003e json \u003d new HashMap\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            String[] jsonArray \u003d input.split(\",\");"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"            for (String attribute : jsonArray) {"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"                String[] detail \u003d attribute.split(\":\");"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                String key \u003d detail[0];"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                String value \u003d detail[1];"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                json.put(key,value);"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            String type \u003d json.get(\"type\");"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d json.get(\"description\");"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"            boolean isDone \u003d json.get(\"isDone\").equals(\"T\");"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"                return new Todo(description, isDone);"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            if (type.equals(\"E\")) {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"                String event \u003d json.get(\"event\");"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"                return new Event(description, isDone, event);"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"            if (type.equals(\"D\")) {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"                String deadline \u003d json.get(\"deadline\");"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"                return new Deadline(description, isDone, deadline);"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"        } catch (ArrayIndexOutOfBoundsException | DukeException exception) {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"            Ui.notifyError(Messages.CORRUPTED_SAVE_FILE_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"        return null;"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":49}},{"path":"src/main/java/duke/storage/TaskEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Deadline;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Event;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Todo;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"public class TaskEncoder {"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    private static final String nullValue \u003d \"-\";"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     * Convert a task object from Duke into text format,"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * to be saved in local text file."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * @param task Task object."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @return String input of task."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    public static String convertToFile(Task task) {"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        String isDone \u003d task.isTaskDone() ? \"T\" : \"F\";"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Event) {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"            String event \u003d ((Event) task).getEvent();"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"                    \"type:%s,\" +"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"                            \"description:%s,\" +"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"                            \"isDone:%s,\" +"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                            \"event:%s,\" +"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                            \"deadline:%s\","},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                    \"E\", description, isDone, event, nullValue"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"            String deadline \u003d ((Deadline) task).getDeadline();"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"                    \"type:%s,\" +"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"                            \"description:%s,\" +"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"                            \"isDone:%s,\" +"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"                            \"event:%s,\" +"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"                            \"deadline:%s\","},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"                    \"D\", description, isDone, nullValue, deadline"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Todo) {"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"                    \"type:%s,\" +"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                            \"description:%s,\" +"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"                            \"isDone:%s,\" +"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                            \"event:%s,\" +"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"                            \"deadline:%s\","},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"                    \"T\",description, isDone, nullValue, nullValue"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"        return null;"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":54}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * Wraps replies with horizontal lines and indentation."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param messages Dukes\u0027 replies to be seen by user."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    public static void reply(List\u003cString\u003e messages) {"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"        if (messages.isEmpty()) {"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"            return;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        StringBuilder allMessages \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        String indentation \u003d \"     \";"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        for (String message : messages) {"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"            if (message.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"                continue;"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            allMessages.append(indentation).append(message).append(\"\\n\");"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        System.out.println("},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"            String.format("},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                \"%s\\n%s%s\\n\","},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                Messages.HORIZONTAL_LINE,"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"                    allMessages.toString(),"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"                Messages.HORIZONTAL_LINE"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"            )"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        messages.clear();"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"     * Wraps error messages with horizontal lines and indentation."},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"     * @param errorMessage Dukes\u0027 report to user regarding invalid outcomes."},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    public static void notifyError(String errorMessage) {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        String output \u003d \"     \" + errorMessage;"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        System.out.println("},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            String.format("},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"                \"%s\\n%s\\n%s\\n\","},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                Messages.HORIZONTAL_LINE,"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"                output,"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                Messages.HORIZONTAL_LINE"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"            )"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":51}},{"path":"src/main/java/duke/util/DateTimeFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"public class DateTimeFormatter {"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    private static final Pattern datePattern \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    private static final Pattern deadlineTimePattern \u003d Pattern.compile(\"\\\\d{2}.\\\\d{2}\");"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    private static final Pattern eventTimePattern \u003d Pattern.compile(\"\\\\d{2}.\\\\d{2}-\\\\d{2}.\\\\d{2}\");"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     * Format given deadline and events into standardized patterns."},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"     * @param dateTime Deadline / Event date and time."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"     * @param isEvent True if is event, false if is deadline"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"     * @return YYYY-MM-DD, HH.MM AmPm"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When date / time not given or is an invalid date / time."},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    public static String deriveDateTime("},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        String dateTime, boolean isEvent) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        Matcher dateMatcher \u003d datePattern.matcher(dateTime);"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        if (!dateMatcher.find()) {"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_DATETIME);"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        LocalDate date \u003d LocalDate.parse(dateMatcher.group());"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"        String month \u003d date.getMonth().toString();"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"        String day \u003d Integer.toString(date.getDayOfMonth());"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        String year \u003d Integer.toString(date.getYear());"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"        String timeString \u003d dateTime.replaceAll(dateMatcher.group(), \"\");"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        String time \u003d \"\";"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        if (isEvent) {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"            time \u003d deriveEvent(timeString);"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"        if (!isEvent) {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"            time \u003d deriveDeadline(timeString);"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"        return String.format(\"%s %s %s, %s\", month, day, year, time);"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"    private static String deriveDeadline(String deadline) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        Matcher timeMatcher \u003d deadlineTimePattern.matcher(deadline);"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"        if (!timeMatcher.find()) {"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.MISSING_DEADLINE);"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HH.mm\");"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"        try{"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"            SimpleDateFormat twelveHourTimeFormat \u003d new SimpleDateFormat(\"hh.mm aa\");"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"            return twelveHourTimeFormat.format(timeFormat.parse(deadline));"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"        } catch (ParseException e){"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.INVALID_DEADLINE);"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"    private static String deriveEvent(String event) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"        Matcher timeMatcher \u003d eventTimePattern.matcher(event);"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"        if (!timeMatcher.find()) {"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.MISSING_EVENT);"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HH.mm\");"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"        String[] eventTimes \u003d event.split(\"-\");"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":"        try{"},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":"            SimpleDateFormat twelveHourTimeFormat \u003d new SimpleDateFormat(\"hh.mm aa\");"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"            Date startTime \u003d timeFormat.parse(eventTimes[0]);"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":"            Date endTime \u003d timeFormat.parse(eventTimes[1]);"},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"            if (startTime.after(endTime)) {"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(DukeExceptionKey.INVALID_TIME_ORDER);"},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"            String eventStart \u003d twelveHourTimeFormat.format(startTime);"},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":"            String eventEnd \u003d twelveHourTimeFormat.format(endTime);"},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"            return eventStart + \" - \" + eventEnd;"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":"        } catch (ParseException e){"},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.INVALID_EVENT);"},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":87}},{"path":"src/main/java/duke/util/TaskGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Deadline;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Event;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Todo;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"public class TaskGenerator {"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     * Generates a new Todo task."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Todo task."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Todo task."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name is not given."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    public static Todo createTodo(String details) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_TODO);"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        return new Todo(details, false);"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"     * Generates a Deadline task."},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Deadline task."},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Deadline task."},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name or deadline not given."},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    public static Deadline createDeadline(String details) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_DEADLINE);"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            String[] deadlineTask \u003d details.split(\" /by \");"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d deadlineTask[0].trim();"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            String deadline \u003d deadlineTask[1].trim();"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"            return new Deadline(description, false, deadline);"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        } catch (ArrayIndexOutOfBoundsException exception) {"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_DEADLINE_TIME);"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"     * Generates an Event task."},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Event task."},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Event task."},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name or event not given."},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"    public static Event createEvent(String details) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_EVENT);"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"            String[] eventTask \u003d details.split(\" /at \");"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d eventTask[0].trim();"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"            String event \u003d eventTask[1].trim();"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"            return new Event(description, false, event);"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"        } catch (ArrayIndexOutOfBoundsException exception) {"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_EVENT_TIME);"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":63}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    private static List\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cTask\u003e getStorage() {"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"        if (tasks \u003d\u003d null) {"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"            tasks \u003d Storage.read();"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"        return tasks;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     * Get number of undone tasks in memory."},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"     * @return Number of tasks to be completed in memory."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public static int getIncompleteTasksCount() {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        int count \u003d 0;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        for (Task task : tasks) {"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"            if (!task.isTaskDone()) {"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                count++;"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        return count;"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    public static void saveTasksToTextFile() {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"        Storage.save(tasks);"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":35}},{"path":"src/main/java/duke/util/actions/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util.actions;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Commands;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskGenerator;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"public class AddTask {"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * Adds a new Task to Duke\u0027s storage."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * @param taskType One of Todo, Deadline, Event tasks."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     * @param message Description of the task sent by user."},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone task as described by the user."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When a task is missing a name or deadline/event."},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cString\u003e addTask(String taskType, String message) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e storage \u003d TaskList.getStorage();"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        Task task;"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"        switch (taskType) {"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"            case Commands.TODO:"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"                task \u003d TaskGenerator.createTodo(message);"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"            case Commands.DEADLINE:"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"                task \u003d TaskGenerator.createDeadline(message);"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"            case Commands.EVENT:"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"                task \u003d TaskGenerator.createEvent(message);"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            default:"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(DukeExceptionKey.INVALID_COMMAND);"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        storage.add(task);"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Messages.ADDED_MESSAGE);"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        messages.add(task.getMessage());"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"        messages.add(String.format(\"Tasks left: %d\","},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"            TaskList.getIncompleteTasksCount()));"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":47}},{"path":"src/main/java/duke/util/actions/CompleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util.actions;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Deadline;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Event;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Todo;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"public class CompleteTask {"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * Marks the task as completed by the given task index."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     * @param stringIndex Index number of task."},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"     * @return Messages to notify user that task has been completed."},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task does not exist in storage."},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cString\u003e completeTask(String stringIndex) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e storage \u003d TaskList.getStorage();"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"            List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            int index \u003d Integer.parseInt(stringIndex);"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"            Task task \u003d storage.get(index - 1);"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            Task completedTask \u003d null;"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            if (task.isTaskDone()) {"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(DukeExceptionKey.TASK_ALREADY_DONE);"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Todo) {"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Todo(task.getDescription(), true);"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Deadline) {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Deadline(task.getDescription(), true,"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"                        ((Deadline) task).getDeadline());"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Event) {"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Event(task.getDescription(), true,"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"                        ((Event) task).getEvent());"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"            if (completedTask !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                storage.set(index - 1, completedTask);"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"                messages.add(Messages.DONE_MESSAGE);"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                messages.add(completedTask.getMessage());"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"                messages.add(String.format(\"Tasks left: %d\","},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"                    TaskList.getIncompleteTasksCount()));"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"                return messages;"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"            } else {"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(DukeExceptionKey.NO_TASK_FOUND);"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.INDEX_FORMAT_ERROR);"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":58}},{"path":"src/main/java/duke/util/actions/DeleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util.actions;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"public class DeleteTask {"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * Removes a task from storage by their task index number."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @param stringIndex Index number of the task."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @return Messages to notify user that task has been deleted."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task does not exist in storage."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cString\u003e deleteTask(String stringIndex) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e storage \u003d TaskList.getStorage();"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        Task removedTask \u003d null;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"            int index \u003d Integer.parseInt(stringIndex);"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            removedTask \u003d storage.remove(index - 1);"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.INDEX_FORMAT_ERROR);"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        if (removedTask \u003d\u003d null) {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.NO_TASK_FOUND);"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Messages.DELETED_MESSAGE);"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"        messages.add(removedTask.getMessage());"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"        messages.add(String.format(\"Tasks left: %d\", TaskList.getIncompleteTasksCount()));"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":41}},{"path":"src/main/java/duke/util/actions/FetchTasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util.actions;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"public class FetchTasks {"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * Fetches all previously created tasks."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @return All tasks in storage."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When the storage is empty or index is less than 0."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cString\u003e fetchTasks() throws DukeException {"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e storage \u003d TaskList.getStorage();"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        int index \u003d 1;"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        for (Task task : storage) {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            String taskDetail \u003d String.format(\"%d.%s\", index, task.getMessage());"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"            messages.add(taskDetail);"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"            index++;"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"        if (messages.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_TASK_LIST);"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":32}},{"path":"src/main/java/duke/util/actions/FindTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.util.actions;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.common.Messages;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Task;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.data.exception.DukeExceptionKey;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.util.TaskList;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"public class FindTask {"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * Allows user to search for tasks by keyword."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @param keyword Query keyword."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     * @return List of tasks matching the keyword."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When no keyword is provided by user."},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cString\u003e findTask(String keyword) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        if (keyword.isEmpty()) {"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(DukeExceptionKey.EMPTY_KEYWORD);"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e matchingTasks \u003d getMatchingTasks(keyword);"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        if (matchingTasks.isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            messages.add(Messages.NO_MATCHING_TASKS + keyword);"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        if (!matchingTasks.isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            messages.add(Messages.FOUND_TASK_MESSAGE);"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"            messages.addAll(matchingTasks);"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"    private static List\u003cString\u003e getMatchingTasks(String keyword) {"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        List\u003cTask\u003e storage \u003d TaskList.getStorage();"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        int index \u003d 1;"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"        for (Task task : storage) {"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d task.getDescription();"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"            if (description.contains(keyword)) {"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"                String taskDetail \u003d String.format(\"%d.%s\", index, task.getMessage());"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                matchingTasks.add(taskDetail);"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"            index++;"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        return matchingTasks;"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"todo Jaden : Answer CS2113 tutorial questions"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":"deadline weekly CS2113 quiz /by Monday 9pm"},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"list"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"event CS2113 lecture /at Friday 4 to 6 pm"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"list"}],"authorContributionMap":{"jadenwjh":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"jadenwjh":1}}]
