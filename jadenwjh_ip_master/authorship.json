[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":24,"jadenwjh":2}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":":init"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":":end"},{"lineNumber":88,"author":{"gitId":"jadenwjh"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"jadenwjh"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":91,"author":{"gitId":"jadenwjh"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"jadenwjh"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"jadenwjh"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":97,"author":{"gitId":"jadenwjh"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"jadenwjh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":100,"author":{"gitId":"jadenwjh"},"content":":omega"}],"authorContributionMap":{"jadenwjh":100}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.viewmodel.Logic;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"     * Main function of Duke version 0.1.0. "},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"        Logic logic \u003d Logic.getInstance();"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"        logic.handleMessage();"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":14}},{"path":"src/main/java/duke/data/Repository.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Deadline;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Event;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Task;"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Todo;"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"import duke.viewmodel.Utils;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"public class Repository {"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    private static final String filePath \u003d \"./tasks.txt\";"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    private static final String nullValue \u003d \"-\";"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    public static void save(List\u003cTask\u003e tasks) {"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"            for (Task task : tasks) {"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"                String textInput \u003d convertToFile(task);"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                fw.write(textInput + \"\\n\");"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"            fw.close();"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        } catch (IOException ioException) {"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            System.out.println(ioException.getMessage());"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    public static List\u003cTask\u003e read() {"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            File f \u003d new File(filePath);"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"            if (f.createNewFile()) {"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"                messages.add(\"Tasks can be found at: \" + f.getPath());"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"                Utils.reply(messages);"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"            while (s.hasNext()) {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                String input \u003d s.nextLine();"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"                if (!input.isEmpty()) {"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"                    Task task \u003d convertToTask(input);"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"                    tasks.add(task);"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"            return tasks;"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"        } catch (IOException fileNotFoundException) {"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            messages.add(fileNotFoundException.getMessage());"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"            Utils.reply(messages);"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"        return null;"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"    private static String convertToFile(Task task) {"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"        String isDone \u003d task.isTaskDone() ? \"T\" : \"F\";"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Event) {"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"            String event \u003d ((Event) task).getEvent();"},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"                \"type:%s,\" +"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"                \"description:%s,\" +"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"                \"isDone:%s,\" +"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"                \"event:%s,\" +"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"                \"deadline:%s\","},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"                \"E\", description, isDone, event, nullValue"},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":"            String deadline \u003d ((Deadline) task).getDeadline();"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":"                            \"type:%s,\" +"},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"                            \"description:%s,\" +"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":"                            \"isDone:%s,\" +"},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":"                            \"event:%s,\" +"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"                            \"deadline:%s\","},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":"                    \"D\", description, isDone, nullValue, deadline"},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"        if (task instanceof Todo) {"},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"            return String.format("},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":"                            \"type:%s,\" +"},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":"                            \"description:%s,\" +"},{"lineNumber":88,"author":{"gitId":"jadenwjh"},"content":"                            \"isDone:%s,\" +"},{"lineNumber":89,"author":{"gitId":"jadenwjh"},"content":"                            \"event:%s,\" +"},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":"                            \"deadline:%s\","},{"lineNumber":91,"author":{"gitId":"jadenwjh"},"content":"                    \"T\",description, isDone, nullValue, nullValue"},{"lineNumber":92,"author":{"gitId":"jadenwjh"},"content":"            );"},{"lineNumber":93,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"        return \"\";"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":97,"author":{"gitId":"jadenwjh"},"content":"    private static Task convertToTask(String input) {"},{"lineNumber":98,"author":{"gitId":"jadenwjh"},"content":"        HashMap\u003cString,String\u003e json \u003d new HashMap\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"jadenwjh"},"content":"        String[] jsonArray \u003d input.split(\",\");"},{"lineNumber":100,"author":{"gitId":"jadenwjh"},"content":"        for (String attribute : jsonArray) {"},{"lineNumber":101,"author":{"gitId":"jadenwjh"},"content":"            String[] detail \u003d attribute.split(\":\");"},{"lineNumber":102,"author":{"gitId":"jadenwjh"},"content":"            String key \u003d detail[0];"},{"lineNumber":103,"author":{"gitId":"jadenwjh"},"content":"            String value \u003d detail[1];"},{"lineNumber":104,"author":{"gitId":"jadenwjh"},"content":"            json.put(key,value);"},{"lineNumber":105,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"jadenwjh"},"content":"        String type \u003d json.get(\"type\");"},{"lineNumber":107,"author":{"gitId":"jadenwjh"},"content":"        String description \u003d json.get(\"description\");"},{"lineNumber":108,"author":{"gitId":"jadenwjh"},"content":"        boolean isDone \u003d json.get(\"isDone\").equals(\"T\");"},{"lineNumber":109,"author":{"gitId":"jadenwjh"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":110,"author":{"gitId":"jadenwjh"},"content":"            return new Todo(description, isDone);"},{"lineNumber":111,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"jadenwjh"},"content":"        if (type.equals(\"E\")) {"},{"lineNumber":113,"author":{"gitId":"jadenwjh"},"content":"            String event \u003d json.get(\"event\");"},{"lineNumber":114,"author":{"gitId":"jadenwjh"},"content":"            return new Event(description, isDone, event);"},{"lineNumber":115,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"jadenwjh"},"content":"        if (type.equals(\"D\")) {"},{"lineNumber":117,"author":{"gitId":"jadenwjh"},"content":"            String deadline \u003d json.get(\"deadline\");"},{"lineNumber":118,"author":{"gitId":"jadenwjh"},"content":"            return new Deadline(description, isDone, deadline);"},{"lineNumber":119,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"jadenwjh"},"content":"        return null;"},{"lineNumber":121,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":122}},{"path":"src/main/java/duke/model/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Deadline implements Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    private final String deadline;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * Constructs a Deadline task."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * @param deadline Date/time this task expires."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    public Deadline(String description, boolean isDone, String deadline) {"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        String fullDescription \u003d String.format(\"%s (by: %s)\", description, deadline);"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format("},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"            \"[D][%s] %s\","},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            isDone ? \"X\" : \" \","},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            fullDescription"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"    public String getDeadline() {"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        return deadline;"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":42}},{"path":"src/main/java/duke/model/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Event implements Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    private final String event;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * Constructs an Event task."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * @param event Date/time this task expires."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    public Event(String description, boolean isDone, String event) {"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        String fullDescription \u003d String.format(\"%s (at: %s)\", description, event);"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        this.event \u003d event;"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format("},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"            \"[E][%s] %s\","},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"            isDone ? \"X\" : \" \","},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            fullDescription"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"    public String getEvent() {"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        return event;"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":42}},{"path":"src/main/java/duke/model/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public interface Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    "},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    boolean isTaskDone();"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    String getMessage();"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    String getDescription();"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":10}},{"path":"src/main/java/duke/model/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Todo implements Task {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    private final String description;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    private final boolean isDone;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    private final String message;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"     * Constructs a Todo task."},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * @param description Name of task."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param isDone True if this task is completed."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"        this.description \u003d description.trim();"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        this.message \u003d String.format(\"[T][%s] %s\","},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"            isDone ? \"X\" : \" \","},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"            description"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public boolean isTaskDone() {"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        return isDone;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"    public String getDescription() {"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"        return description;"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"    public String getMessage() {"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        return message;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":33}},{"path":"src/main/java/duke/viewmodel/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class Constants {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"    public static final String HORIZONTAL_LINE \u003d \"    ___________________________________________\";"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    public static final String HELLO_MESSAGE \u003d \"Hello! I\u0027m Duke\";"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"    public static final String ASSIST_MESSAGE \u003d \"What can I do for you?\";"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    public static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"    public static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    public static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    public static final String DELETED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public static final String BYE \u003d \"bye\";"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    public static final String LIST \u003d \"list\";"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    public static final String DONE \u003d \"done\";"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    public static final String TODO \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE \u003d \"deadline\";"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT \u003d \"event\";"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    public static final String DELETE \u003d \"delete\";"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"    public static final String INTERNAL_ERROR_MESSAGE \u003d \"Duke has malfunctioned...\";"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"Do not understand your command.\";"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    public static final String COMPLETE_TASK_ERROR_MESSAGE \u003d \"There are no tasks to complete.\";"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    public static final String EMPTY_TASK_LIST_MESSAGE \u003d \"You currently have no tasks.\";"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"    public static final String TODO_EMPTY_MESSAGE \u003d \"Description of a todo cannot be empty!\";"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE_EMPTY_MESSAGE \u003d \"Description of deadline can\u0027t be empty!\";"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"    public static final String DEADLINE_EMPTY_TIME_MESSAGE \u003d \"Deadline missing!\";"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT_EMPTY_MESSAGE \u003d \"Description of a event cannot be empty!\";"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    public static final String EVENT_EMPTY_TIME_MESSAGE \u003d \"Event missing!\";"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    public static final String TASK_DOES_NOT_EXIST \u003d \"Task does not exist!\";"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"    public static final String INDEX_NUMBER_INPUT_MESSAGE \u003d \"Please input a valid number!\";"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"    public static final int INVALID_COMMAND \u003d 0;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_TASK_LIST \u003d 100;"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_TASK_COMPLETE_LIST \u003d 200;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_TODO \u003d 1;"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_DEADLINE \u003d 2;"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_DEADLINE_TIME \u003d 21;"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_EVENT \u003d 3;"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"    public static final int EMPTY_EVENT_TIME \u003d 31;"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"    public static final int NO_TASK_FOUND \u003d 4;"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    public static final int INDEX_FORMAT_ERROR \u003d 41;"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":41}},{"path":"src/main/java/duke/viewmodel/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"     * Initiates the exception handling object in Duke."},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"     * @param type Type of Duke exception."},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    public DukeException(int type) {"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"        super(categorizeException(type));"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     * Determines the printed line of the exception."},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"     * @param type Type of Duke exception."},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"     * @return Exception description."},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    private static String categorizeException(int type) {"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        switch (type) {"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_TASK_COMPLETE_LIST:"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"            return Constants.COMPLETE_TASK_ERROR_MESSAGE;"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_TASK_LIST:"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"            return Constants.EMPTY_TASK_LIST_MESSAGE;"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"        case Constants.INVALID_COMMAND:"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"            return Constants.INVALID_COMMAND_MESSAGE;"},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_TODO:"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"            return Constants.TODO_EMPTY_MESSAGE;"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_DEADLINE:"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            return Constants.DEADLINE_EMPTY_MESSAGE;"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_DEADLINE_TIME:"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"            return Constants.DEADLINE_EMPTY_TIME_MESSAGE;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_EVENT:"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            return Constants.EVENT_EMPTY_MESSAGE;"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EMPTY_EVENT_TIME:"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            return Constants.EVENT_EMPTY_TIME_MESSAGE;"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"        case Constants.NO_TASK_FOUND:"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"            return Constants.TASK_DOES_NOT_EXIST;"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"        case Constants.INDEX_FORMAT_ERROR:"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"            return Constants.INDEX_NUMBER_INPUT_MESSAGE;"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"        return Constants.INTERNAL_ERROR_MESSAGE;"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":43}},{"path":"src/main/java/duke/viewmodel/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"public class Logic {"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"    private static Logic instance \u003d null;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    private static List\u003cString\u003e messages;"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"    private static Scanner scanner;"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"    private static TaskManager taskManager;"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    private Logic() {"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        taskManager \u003d TaskManager.getInstance();"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Constants.HELLO_MESSAGE);"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Constants.ASSIST_MESSAGE);"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        Utils.reply(messages);"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"     * New logic instance. Greets user when called."},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"     * @return The logic of Duke when receiving user input."},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    public static Logic getInstance() {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            instance \u003d new Logic();"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        return instance;"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"     * If message if \"list\", lists all messages previously mentioned."},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"     * If message is \"bye\", exits program."},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"     * If message is \"done\", proceeds to mark tasks as completed."},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"     * Else, adds the message as a task."},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"    public void handleMessage() {"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        String sentence \u003d scanner.nextLine();"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"        String[] words \u003d sentence.split(\" \");"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"        String command \u003d words[0];"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        String task \u003d String.join("},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"            \" \", Arrays.copyOfRange(words, 1, words.length)"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e response;"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"            switch (command) {"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"            case Constants.BYE:"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"                messages.add(Constants.BYE_MESSAGE);"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"                Utils.reply(messages);"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"                taskManager.saveTasksToDisk();"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"                scanner.close();"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"                return;"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"            case Constants.LIST:"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"                response \u003d taskManager.fetchTasks();"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"            case Constants.DONE:"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"                response \u003d taskManager.completeTask(task);"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":"                taskManager.saveTasksToDisk();"},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"            case Constants.DELETE:"},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"                response \u003d taskManager.deleteTask(task);"},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"                taskManager.saveTasksToDisk();"},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"            default:"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"                response \u003d taskManager.addTask(command, task);"},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"                taskManager.saveTasksToDisk();"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":"            messages.addAll(response);"},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":"            Utils.reply(messages);"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"            handleMessage();"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"            Utils.notifyError(dukeException.getMessage());"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":"            handleMessage();"},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":"     * Checks if the given string is an integer."},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"     * @param s The string to be checked."},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"     * @return True if string is an integer."},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":"    private static boolean isInteger(String s) {"},{"lineNumber":88,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"jadenwjh"},"content":"            Integer.parseInt(s);"},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":"        } catch (NumberFormatException | NullPointerException e) {"},{"lineNumber":91,"author":{"gitId":"jadenwjh"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"jadenwjh"},"content":"        return true;"},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":95}},{"path":"src/main/java/duke/viewmodel/TaskGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Deadline;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Event;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Todo;"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"public class TaskGenerator {"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     * Generates a new Todo task."},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Todo task."},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Todo task."},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name is not given."},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    public Todo createTodo(String details) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_TODO);"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        return new Todo(details, false);"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"     * Generates a Deadline task."},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Deadline task."},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Deadline task."},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name or deadline not given."},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"    public Deadline createDeadline(String details) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_DEADLINE);"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":"            String[] deadlineTask \u003d details.split(\" /by \");"},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d deadlineTask[0].trim();"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"            String deadline \u003d deadlineTask[1].trim();"},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"            return new Deadline(description, false, deadline);"},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"        } catch (ArrayIndexOutOfBoundsException exception) {"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_DEADLINE_TIME);"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"     * Generates an Event task."},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"     * @param details Name of Event task."},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone Event task."},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task name or event not given."},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"    public Event createEvent(String details) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"        if (details.isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_EVENT);"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            String[] eventTask \u003d details.split(\" /at \");"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"            String description \u003d eventTask[0].trim();"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"            String event \u003d eventTask[1].trim();"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"            return new Event(description, false, event);"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"        } catch (ArrayIndexOutOfBoundsException exception) {"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_EVENT_TIME);"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":61}},{"path":"src/main/java/duke/viewmodel/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"import duke.data.Repository;"},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Deadline;"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Event;"},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Task;"},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"import duke.model.Todo;"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"public class TaskManager {"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"    private static TaskManager instance \u003d null;"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"    private static List\u003cTask\u003e storage;"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"    private static TaskGenerator taskGenerator;"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"    "},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"    private TaskManager() {"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"        taskGenerator \u003d new TaskGenerator();"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"        storage \u003d Repository.read();"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"     * New TaskManager instance. Handles all tasks."},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"     * @return The part of Duke that handles tasks."},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"    public static TaskManager getInstance() {"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            instance \u003d new TaskManager();"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        return instance;"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"     * Adds a new Task to Duke\u0027s storage."},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"     * @param taskType One of Todo, Deadline, Event tasks."},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"     * @param message Description of the task sent by user."},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"     * @return An undone task as described by the user."},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When a task is missing a name or deadline/event."},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"    public List\u003cString\u003e addTask(String taskType, String message) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"        Task task;"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"        switch (taskType) {"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"        case Constants.TODO:"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"            task \u003d taskGenerator.createTodo(message);"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"        case Constants.DEADLINE:"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"            task \u003d taskGenerator.createDeadline(message);"},{"lineNumber":50,"author":{"gitId":"jadenwjh"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"jadenwjh"},"content":"        case Constants.EVENT:"},{"lineNumber":52,"author":{"gitId":"jadenwjh"},"content":"            task \u003d taskGenerator.createEvent(message);"},{"lineNumber":53,"author":{"gitId":"jadenwjh"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"jadenwjh"},"content":"        default:"},{"lineNumber":55,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.INVALID_COMMAND);"},{"lineNumber":56,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"jadenwjh"},"content":"        storage.add(task);"},{"lineNumber":58,"author":{"gitId":"jadenwjh"},"content":"        messages.add(Constants.ADDED_MESSAGE);"},{"lineNumber":59,"author":{"gitId":"jadenwjh"},"content":"        messages.add(task.getMessage());"},{"lineNumber":60,"author":{"gitId":"jadenwjh"},"content":"        messages.add(String.format(\"Tasks left: %d\",getIncompleteTasksCount()));"},{"lineNumber":61,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":62,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":64,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jadenwjh"},"content":"     * Fetches all previously mentioned messages."},{"lineNumber":66,"author":{"gitId":"jadenwjh"},"content":"     * @return All tasks in storage."},{"lineNumber":67,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When the storage is empty or index is less than 0."},{"lineNumber":68,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jadenwjh"},"content":"    public List\u003cString\u003e fetchTasks() throws DukeException {"},{"lineNumber":70,"author":{"gitId":"jadenwjh"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitId":"jadenwjh"},"content":"        int index \u003d 1;"},{"lineNumber":72,"author":{"gitId":"jadenwjh"},"content":"        for (Task task : storage) {"},{"lineNumber":73,"author":{"gitId":"jadenwjh"},"content":"            String taskDetail \u003d String.format(\"%d.%s\", index, task.getMessage());"},{"lineNumber":74,"author":{"gitId":"jadenwjh"},"content":"            messages.add(taskDetail);"},{"lineNumber":75,"author":{"gitId":"jadenwjh"},"content":"            index++;"},{"lineNumber":76,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"jadenwjh"},"content":"        if (messages.isEmpty()) {"},{"lineNumber":78,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.EMPTY_TASK_LIST);"},{"lineNumber":79,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"jadenwjh"},"content":"        return messages;"},{"lineNumber":81,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":83,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"jadenwjh"},"content":"     * Marks the task as completed by the given task index."},{"lineNumber":85,"author":{"gitId":"jadenwjh"},"content":"     * @param stringIndex Index number of task."},{"lineNumber":86,"author":{"gitId":"jadenwjh"},"content":"     * @return Messages to notify user that task has been completed."},{"lineNumber":87,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task does not exist in storage."},{"lineNumber":88,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"jadenwjh"},"content":"    public List\u003cString\u003e completeTask(String stringIndex) throws DukeException {"},{"lineNumber":90,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"jadenwjh"},"content":"            List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitId":"jadenwjh"},"content":"            int index \u003d Integer.parseInt(stringIndex);"},{"lineNumber":93,"author":{"gitId":"jadenwjh"},"content":"            Task task \u003d storage.get(index - 1);"},{"lineNumber":94,"author":{"gitId":"jadenwjh"},"content":"            Task completedTask \u003d null;"},{"lineNumber":95,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Todo) {"},{"lineNumber":96,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Todo(task.getDescription(), true);"},{"lineNumber":97,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Deadline) {"},{"lineNumber":99,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Deadline(task.getDescription(), true,"},{"lineNumber":100,"author":{"gitId":"jadenwjh"},"content":"                        ((Deadline) task).getDeadline());"},{"lineNumber":101,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"jadenwjh"},"content":"            if (task instanceof Event) {"},{"lineNumber":103,"author":{"gitId":"jadenwjh"},"content":"                completedTask \u003d new Event(task.getDescription(), true,"},{"lineNumber":104,"author":{"gitId":"jadenwjh"},"content":"                        ((Event) task).getEvent());"},{"lineNumber":105,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"jadenwjh"},"content":"            if (completedTask !\u003d null) {"},{"lineNumber":107,"author":{"gitId":"jadenwjh"},"content":"                storage.set(index - 1, completedTask);"},{"lineNumber":108,"author":{"gitId":"jadenwjh"},"content":"                messages.add(Constants.DONE_MESSAGE);"},{"lineNumber":109,"author":{"gitId":"jadenwjh"},"content":"                messages.add(completedTask.getMessage());"},{"lineNumber":110,"author":{"gitId":"jadenwjh"},"content":"                messages.add(String.format(\"Tasks left: %d\",getIncompleteTasksCount()));"},{"lineNumber":111,"author":{"gitId":"jadenwjh"},"content":"                return messages;"},{"lineNumber":112,"author":{"gitId":"jadenwjh"},"content":"            } else {"},{"lineNumber":113,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(Constants.NO_TASK_FOUND);"},{"lineNumber":114,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"jadenwjh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":116,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.INDEX_FORMAT_ERROR);"},{"lineNumber":117,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":120,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"jadenwjh"},"content":"     * Get number of undone tasks in storage."},{"lineNumber":122,"author":{"gitId":"jadenwjh"},"content":"     * @return Number of tasks to be completed in storage."},{"lineNumber":123,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"jadenwjh"},"content":"    public int getIncompleteTasksCount() {"},{"lineNumber":125,"author":{"gitId":"jadenwjh"},"content":"        int count \u003d 0;"},{"lineNumber":126,"author":{"gitId":"jadenwjh"},"content":"        for (Task task : storage) {"},{"lineNumber":127,"author":{"gitId":"jadenwjh"},"content":"            if (!task.isTaskDone()) {"},{"lineNumber":128,"author":{"gitId":"jadenwjh"},"content":"                count++;"},{"lineNumber":129,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"jadenwjh"},"content":"        return count;"},{"lineNumber":132,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":134,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"jadenwjh"},"content":"     * Removes a task from storage by their task index number."},{"lineNumber":136,"author":{"gitId":"jadenwjh"},"content":"     * @param stringIndex Index number of the task."},{"lineNumber":137,"author":{"gitId":"jadenwjh"},"content":"     * @return Messages to notify user that task has been deleted."},{"lineNumber":138,"author":{"gitId":"jadenwjh"},"content":"     * @throws DukeException When task does not exist in storage."},{"lineNumber":139,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jadenwjh"},"content":"    public List\u003cString\u003e deleteTask(String stringIndex) throws DukeException {"},{"lineNumber":141,"author":{"gitId":"jadenwjh"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"jadenwjh"},"content":"            int index \u003d Integer.parseInt(stringIndex);"},{"lineNumber":143,"author":{"gitId":"jadenwjh"},"content":"            List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":144,"author":{"gitId":"jadenwjh"},"content":"            Task removedTask \u003d storage.remove(index - 1);"},{"lineNumber":145,"author":{"gitId":"jadenwjh"},"content":"            if (removedTask !\u003d null) {"},{"lineNumber":146,"author":{"gitId":"jadenwjh"},"content":"                messages.add(Constants.DELETED_MESSAGE);"},{"lineNumber":147,"author":{"gitId":"jadenwjh"},"content":"                messages.add(removedTask.getMessage());"},{"lineNumber":148,"author":{"gitId":"jadenwjh"},"content":"                messages.add(String.format(\"Tasks left: %d\",getIncompleteTasksCount()));"},{"lineNumber":149,"author":{"gitId":"jadenwjh"},"content":"                return messages;"},{"lineNumber":150,"author":{"gitId":"jadenwjh"},"content":"            } else {"},{"lineNumber":151,"author":{"gitId":"jadenwjh"},"content":"                throw new DukeException(Constants.NO_TASK_FOUND);"},{"lineNumber":152,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"jadenwjh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":154,"author":{"gitId":"jadenwjh"},"content":"            throw new DukeException(Constants.INDEX_FORMAT_ERROR);"},{"lineNumber":155,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":158,"author":{"gitId":"jadenwjh"},"content":"    public void saveTasksToDisk() {"},{"lineNumber":159,"author":{"gitId":"jadenwjh"},"content":"        Repository.save(storage);"},{"lineNumber":160,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":161}},{"path":"src/main/java/duke/viewmodel/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"package duke.viewmodel;"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"public class Utils {"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":7,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jadenwjh"},"content":"     * Wraps replies with horizontal lines and indentation."},{"lineNumber":9,"author":{"gitId":"jadenwjh"},"content":"     * @param messages Dukes\u0027 replies to be seen by user."},{"lineNumber":10,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jadenwjh"},"content":"    public static void reply(List\u003cString\u003e messages) {"},{"lineNumber":12,"author":{"gitId":"jadenwjh"},"content":"        if (messages.isEmpty()) {"},{"lineNumber":13,"author":{"gitId":"jadenwjh"},"content":"            return;"},{"lineNumber":14,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jadenwjh"},"content":"        StringBuilder allMessages \u003d new StringBuilder();"},{"lineNumber":16,"author":{"gitId":"jadenwjh"},"content":"        String indentation \u003d \"     \";"},{"lineNumber":17,"author":{"gitId":"jadenwjh"},"content":"        for (String message : messages) {"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"            if (message.isEmpty()) {"},{"lineNumber":19,"author":{"gitId":"jadenwjh"},"content":"                continue;"},{"lineNumber":20,"author":{"gitId":"jadenwjh"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"jadenwjh"},"content":"            allMessages.append(indentation).append(message).append(\"\\n\");"},{"lineNumber":22,"author":{"gitId":"jadenwjh"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"jadenwjh"},"content":"        System.out.println("},{"lineNumber":24,"author":{"gitId":"jadenwjh"},"content":"            String.format("},{"lineNumber":25,"author":{"gitId":"jadenwjh"},"content":"                \"%s\\n%s%s\\n\","},{"lineNumber":26,"author":{"gitId":"jadenwjh"},"content":"                Constants.HORIZONTAL_LINE,"},{"lineNumber":27,"author":{"gitId":"jadenwjh"},"content":"                    allMessages.toString(),"},{"lineNumber":28,"author":{"gitId":"jadenwjh"},"content":"                Constants.HORIZONTAL_LINE"},{"lineNumber":29,"author":{"gitId":"jadenwjh"},"content":"            )"},{"lineNumber":30,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":31,"author":{"gitId":"jadenwjh"},"content":"        messages.clear();"},{"lineNumber":32,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jadenwjh"},"content":""},{"lineNumber":34,"author":{"gitId":"jadenwjh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jadenwjh"},"content":"     * Wraps error messages with horizontal lines and indentation."},{"lineNumber":36,"author":{"gitId":"jadenwjh"},"content":"     * @param errorMessage Dukes\u0027 report to user regarding invalid outcomes."},{"lineNumber":37,"author":{"gitId":"jadenwjh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jadenwjh"},"content":"    public static void notifyError(String errorMessage) {"},{"lineNumber":39,"author":{"gitId":"jadenwjh"},"content":"        String output \u003d \"     \" + errorMessage;"},{"lineNumber":40,"author":{"gitId":"jadenwjh"},"content":"        System.out.println("},{"lineNumber":41,"author":{"gitId":"jadenwjh"},"content":"            String.format("},{"lineNumber":42,"author":{"gitId":"jadenwjh"},"content":"                \"%s\\n%s\\n%s\\n\","},{"lineNumber":43,"author":{"gitId":"jadenwjh"},"content":"                Constants.HORIZONTAL_LINE,"},{"lineNumber":44,"author":{"gitId":"jadenwjh"},"content":"                output,"},{"lineNumber":45,"author":{"gitId":"jadenwjh"},"content":"                Constants.HORIZONTAL_LINE"},{"lineNumber":46,"author":{"gitId":"jadenwjh"},"content":"            )"},{"lineNumber":47,"author":{"gitId":"jadenwjh"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"jadenwjh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jadenwjh"},"content":"}"}],"authorContributionMap":{"jadenwjh":49}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"type:E,description:qwodin,isDone:F,event:qwoidnqw,deadline:-"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":"type:T,description:qwodinqwd,isDone:F,event:-,deadline:-"},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"type:D,description:wqidoinqwd,isDone:T,event:-,deadline:wqoidnqw"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"type:T,description:qwodinqwd,isDone:F,event:-,deadline:-"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"type:T,description:qwdoiqwn,isDone:T,event:-,deadline:-"}],"authorContributionMap":{"jadenwjh":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jadenwjh"},"content":"todo Jaden : Answer CS2113 tutorial questions"},{"lineNumber":2,"author":{"gitId":"jadenwjh"},"content":"deadline weekly CS2113 quiz /by Monday 9pm"},{"lineNumber":3,"author":{"gitId":"jadenwjh"},"content":"list"},{"lineNumber":4,"author":{"gitId":"jadenwjh"},"content":"event CS2113 lecture /at Friday 4 to 6 pm"},{"lineNumber":5,"author":{"gitId":"jadenwjh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"jadenwjh"},"content":"list"}],"authorContributionMap":{"jadenwjh":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jadenwjh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"jadenwjh":1}}]
