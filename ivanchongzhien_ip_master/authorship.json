[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"# Duke _the task manager_"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":"#### by, *Ivan Chong Zhi En*"},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"#### _Last updated:_ `27 February 2021`"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"Duke is a Command Line Interface (CLI) app for managing your day-to-day tasks."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"If you work faster by typing, managing tasks using Duke will be a breeze."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"## Contents"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"1. [Quick start](#1-quick-start)"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"2. [Features](#2-features)"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"   * [2.1 Viewing help](#21-viewing-help-help)"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"   * [2.2 Adding a task](#22-adding-a-task-todo-deadline-event)"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"        1. [Todo](#a-todo)"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"        2. [Deadline](#b-deadline)"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"        3. [Event](#c-event)"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.3 Listing all tasks](#23-listing-all-tasks-list)"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.4 Mark a task as done](#24-mark-a-task-as-done-done)"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.5 Unmark a completed task](#25-unmark-a-completed-task-undo)"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.6 Delete a task](#26-delete-a-task-delete)"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.7 Filtering tasks by keyword](#26-delete-a-task-delete)"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.8 Exiting the program](#28-exiting-the-program-bye)"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"3. [Transferring data to another device](#3-transferring-data-to-another-device)"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"4. [Command Summary](#4-command-summary)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    "},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"## 1. Quick start"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"1. Ensure you have Java `11` or above installed on your computer."},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"2. [Download](https://github.com/ivanchongzhien/ip/releases/latest) the latest `Duke.jar`."},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"3. Move the file to an empty folder. This will be the **home directory** for your Duke application."},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"4. Open a terminal window in the home directory."},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"5. To run Duke, enter `java -jar Duke.jar`"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"6. Enter `help` for a quick list of commands. Refer to [features](#2-features) below for details of each command."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"* Note that on first run, a new data file `duke_data.txt` will be created. This file will store data about your tasks"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"as you use Duke."},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"You are ***strongly advised* not to** edit the text file directly as this may result in reading errors."},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"Edit your data directly via Duke."},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"## 2. Features"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"## 2.1. Viewing help: `help`"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"Shows a summarised list of commands and their respective formats."},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `help`"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"## 2.2 Adding a task: `todo` `deadline` `event`"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"###    a. Todo"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":"The most basic type of task, consists only of a task description."},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `todo [description]...`"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ task description"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `todo organize exam notes`"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"    [T][ ] organize exam notes"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"1 task in the list"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"###    b. Deadline"},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"Deadline has an additional field to include details on when a task is due."},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `deadline [description]... /by [due]`"},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ task description"},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"* _due:_ _**String**_ due date of a task. For dates, use format `dd-mm-yyyy`. "},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"Normal string descriptions are accepted, _eg: tomorrow, Wednesday 2PM, 2nd of May_."},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `deadline CS assignment /by tomorrow midnight`"},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"2 tasks in the list"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"###    c. Event"},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"Event has an additional field to include details on when described event happening."},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `event [description]... /at [time/date]`"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ event description"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":"* _time/date:_ _**String**_ time/date of event. For dates, use format `dd-mm-yyyy`."},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":"Normal string descriptions are accepted, _eg: next week, Thursday 4PM, 5th of May_"},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `event John\u0027s party /at 25-5-2021`"},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":"   [E][ ] John\u0027s party (at: 25 May, 2021)"},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"4 tasks in the list"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":"## 2.3 Listing all tasks: `list`"},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":"Shows a list of all tasks currently stored in the task list."},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `list`"},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"## 2.4 Mark a task as done: `done`"},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"Marks selected task as completed. "},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"An `[X]` beside a task shows that it has been marked as completed."},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"* _Note:_ this command does not check if a task is already marked as _done_."},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":"  It will set the task to an _done_ state regardless of its previous state."},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":"  "},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `done [index]`"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be marked as done. "},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":" "},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage** : `list` followed by `done 2` (to mark the second item on the list)"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"TASK LIST:"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"-------------"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"1. [T][ ] organize exam notes"},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":"2. [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":"3. [D][ ] statistics quiz (by: 25 February, 2021)"},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":"4. [E][ ] John\u0027s party (at: 25 May, 2021)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"```"},{"lineNumber":140,"author":{"gitId":"-"},"content":"```"},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":"Congrats! You\u0027ve completed:"},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"   [D][X] CS assignment (by: tomorrow midnight)"},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":"## 2.5 Unmark a completed task: `undo`"},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":"Marks a task as uncompleted. A `[ ]` beside a task shows that it is not done."},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"* _Note:_ this command does not check if the task is not marked _done_."},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"It will set the task to an _undone_ state regardless of its previous state."},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `undo [index]`"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be unmarked."},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `undo 2`"},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"Marked undone! Looks like you\u0027re not quite done with:"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":167,"author":{"gitId":"ivanchongzhien"},"content":"## 2.6 Delete a task: `delete`"},{"lineNumber":168,"author":{"gitId":"ivanchongzhien"},"content":"Removes the specified task from the task list."},{"lineNumber":169,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":170,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `delete [index]`"},{"lineNumber":171,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":172,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be deleted."},{"lineNumber":173,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":174,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":175,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `delete 3`"},{"lineNumber":176,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":177,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output**:"},{"lineNumber":178,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":179,"author":{"gitId":"ivanchongzhien"},"content":"Task 3 has been deleted:"},{"lineNumber":180,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] statistics quiz (by: 25 February, 2021)"},{"lineNumber":181,"author":{"gitId":"ivanchongzhien"},"content":"Tasks remaining: 3"},{"lineNumber":182,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":183,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":184,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":185,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":186,"author":{"gitId":"ivanchongzhien"},"content":"## 2.7 Filtering tasks by keyword: `find`"},{"lineNumber":187,"author":{"gitId":"ivanchongzhien"},"content":"List tasks which contain the given keyword."},{"lineNumber":188,"author":{"gitId":"ivanchongzhien"},"content":"* search is case-sensitive, _eg:_ `john` will not match `John`."},{"lineNumber":189,"author":{"gitId":"ivanchongzhien"},"content":"* only tasks descriptions containing the entire keyword string will be matched, _eg:_ `birthday party`"},{"lineNumber":190,"author":{"gitId":"ivanchongzhien"},"content":"      will match `John\u0027s birhtday party` but **not** `Alice\u0027s birthday`."},{"lineNumber":191,"author":{"gitId":"ivanchongzhien"},"content":"* Only find matches within task description. Task details (_due date, time etc._) will not be searched.  "},{"lineNumber":192,"author":{"gitId":"ivanchongzhien"},"content":"* Index of search results are the same as index of `list`."},{"lineNumber":193,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":194,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `find [keyword]`"},{"lineNumber":195,"author":{"gitId":"ivanchongzhien"},"content":"* _keyword:_ _**String**_ tasks will be checked if they contain this string."},{"lineNumber":196,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":197,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `find assignment`"},{"lineNumber":198,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":199,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":200,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":201,"author":{"gitId":"ivanchongzhien"},"content":"SEARCH RESULTS FOR \"assignment\":"},{"lineNumber":202,"author":{"gitId":"ivanchongzhien"},"content":"1. [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":203,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":204,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":205,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":206,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":207,"author":{"gitId":"ivanchongzhien"},"content":"## 2.8 Exiting the program: `bye`"},{"lineNumber":208,"author":{"gitId":"ivanchongzhien"},"content":"Exits Duke. No manual saving is required as data is automatically saved by the program."},{"lineNumber":209,"author":{"gitId":"ivanchongzhien"},"content":"Undeleted tasks will be loaded up the next time Duke is ran."},{"lineNumber":210,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":211,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `bye`"},{"lineNumber":212,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":213,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":214,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":215,"author":{"gitId":"ivanchongzhien"},"content":"____________________________________________________________"},{"lineNumber":216,"author":{"gitId":"ivanchongzhien"},"content":"Bye! Hit me up if you feel like being productive again ;)"},{"lineNumber":217,"author":{"gitId":"ivanchongzhien"},"content":"____________________________________________________________"},{"lineNumber":218,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":219,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":220,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":221,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":222,"author":{"gitId":"ivanchongzhien"},"content":"## 3. Transferring data to another device"},{"lineNumber":223,"author":{"gitId":"ivanchongzhien"},"content":"1. Copy the `duke_data.txt` file. **Do NOT** rename the file."},{"lineNumber":224,"author":{"gitId":"ivanchongzhien"},"content":"2. Paste it in the same directory as the `Duke.jar` file on your new device."},{"lineNumber":225,"author":{"gitId":"ivanchongzhien"},"content":"3. Running `Duke` should load your previous data."},{"lineNumber":226,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":227,"author":{"gitId":"ivanchongzhien"},"content":"## 4. Command Summary"},{"lineNumber":228,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":229,"author":{"gitId":"ivanchongzhien"},"content":"Command     | Format                                   | Example"},{"lineNumber":230,"author":{"gitId":"ivanchongzhien"},"content":" -----------| ---------------------------------------- | --------------------------------------"},{"lineNumber":231,"author":{"gitId":"ivanchongzhien"},"content":"help        | `help`                                   | `help`"},{"lineNumber":232,"author":{"gitId":"ivanchongzhien"},"content":"todo        | `todo [description]...`                  | `todo organize exam notes`"},{"lineNumber":233,"author":{"gitId":"ivanchongzhien"},"content":"deadline    | `deadline [description]... /by[due]`     | `deadline CS assignment /by tomorrow midnight`"},{"lineNumber":234,"author":{"gitId":"ivanchongzhien"},"content":"event       | `event [description] /at[time/date*]`    | `event John\u0027s party /at 25-5-2021`"},{"lineNumber":235,"author":{"gitId":"ivanchongzhien"},"content":"list        | `list`                                   | `list`"},{"lineNumber":236,"author":{"gitId":"ivanchongzhien"},"content":"done        | `done [index]`                           | `done 2`"},{"lineNumber":237,"author":{"gitId":"ivanchongzhien"},"content":"undo        | `undo [index]`                           | `undo 2`"},{"lineNumber":238,"author":{"gitId":"ivanchongzhien"},"content":"delete      | `delete [index]`                         | `delete 3`"},{"lineNumber":239,"author":{"gitId":"ivanchongzhien"},"content":"find        | `find [keyword]`                         | `find birthday party`"},{"lineNumber":240,"author":{"gitId":"ivanchongzhien"},"content":"bye         | `bye`                                    | `bye`"},{"lineNumber":241,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":242,"author":{"gitId":"ivanchongzhien"},"content":"_***Date format:**_ `dd-mm-yyyy`"},{"lineNumber":243,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":244,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":245,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":246,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":247,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":248,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":249,"author":{"gitId":"ivanchongzhien"},"content":""}],"authorContributionMap":{"ivanchongzhien":243,"-":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"# Duke _the task manager_"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":"#### by, *Ivan Chong Zhi En*"},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"#### _Last updated:_ `27 February 2021`"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"Duke is a Command Line Interface (CLI) app for managing your day-to-day tasks."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"If you work faster by typing, managing tasks using Duke will be a breeze."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"## Contents"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"1. [Quick start](#1-quick-start)"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"2. [Features](#2-features)"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.1 Viewing help](#21-viewing-help-help)"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.2 Adding a task](#22-adding-a-task-todo-deadline-event)"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"        1. [Todo](#a-todo)"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"        2. [Deadline](#b-deadline)"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"        3. [Event](#c-event)"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.3 Listing all tasks](#23-listing-all-tasks-list)"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.4 Mark a task as done](#24-mark-a-task-as-done-done)"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.5 Unmark a completed task](#25-unmark-a-completed-task-undo)"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.6 Delete a task](#26-delete-a-task-delete)"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.7 Filtering tasks by keyword](#26-delete-a-task-delete)"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    * [2.8 Exiting the program](#28-exiting-the-program-bye)"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"3. [Transferring data to another device](#3-transferring-data-to-another-device)"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"4. [Command Summary](#4-command-summary)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"## 1. Quick start"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"1. Ensure you have Java `11` or above installed on your computer."},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"2. [Download](https://github.com/ivanchongzhien/ip/releases/latest) the latest `Duke.jar`."},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"3. Move the file to an empty folder. This will be the **home directory** for your Duke application."},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"4. Open a terminal window in the home directory."},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"5. To run Duke, enter `java -jar Duke.jar`"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"6. Enter `help` for a quick list of commands. Refer to [features](#2-features) below for details of each command."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"* Note that on first run, a new data file `duke_data.txt` will be created. This file will store data about your tasks"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"  as you use Duke."},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"  You are ***strongly advised* not to** edit the text file directly as this may result in reading errors."},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"  Edit your data directly via Duke."},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"## 2. Features"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"## 2.1. Viewing help: `help`"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"Shows a summarised list of commands and their respective formats."},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `help`"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"## 2.2 Adding a task: `todo` `deadline` `event`"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"###    a. Todo"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":"The most basic type of task, consists only of a task description."},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `todo [description]...`"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ task description"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `todo organize exam notes`"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"    [T][ ] organize exam notes"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"1 task in the list"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"###    b. Deadline"},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"Deadline has an additional field to include details on when a task is due."},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `deadline [description]... /by [due]`"},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ task description"},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"* _due:_ _**String**_ due date of a task. For dates, use format `dd-mm-yyyy`."},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"  Normal string descriptions are accepted, _eg: tomorrow, Wednesday 2PM, 2nd of May_."},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `deadline CS assignment /by tomorrow midnight`"},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"2 tasks in the list"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"###    c. Event"},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"Event has an additional field to include details on when described event happening."},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `event [description]... /at [time/date]`"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"* _description:_ _**String**_ event description"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":"* _time/date:_ _**String**_ time/date of event. For dates, use format `dd-mm-yyyy`."},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":"  Normal string descriptions are accepted, _eg: next week, Thursday 4PM, 5th of May_"},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `event John\u0027s party /at 25-5-2021`"},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"Added to list:"},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":"   [E][ ] John\u0027s party (at: 25 May, 2021)"},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"4 tasks in the list"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":"## 2.3 Listing all tasks: `list`"},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":"Shows a list of all tasks currently stored in the task list."},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `list`"},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"## 2.4 Mark a task as done: `done`"},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"Marks selected task as completed."},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"An `[X]` beside a task shows that it has been marked as completed."},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"* _Note:_ this command does not check if a task is already marked as _done_."},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":"  It will set the task to an _done_ state regardless of its previous state."},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `done [index]`"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be marked as done."},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage** : `list` followed by `done 2` (to mark the second item on the list)"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"TASK LIST:"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"-------------"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"1. [T][ ] organize exam notes"},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":"2. [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":"3. [D][ ] statistics quiz (by: 25 February, 2021)"},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":"4. [E][ ] John\u0027s party (at: 25 May, 2021)"},{"lineNumber":139,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":140,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":"Congrats! You\u0027ve completed:"},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"   [D][X] CS assignment (by: tomorrow midnight)"},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":"## 2.5 Unmark a completed task: `undo`"},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":"Marks a task as uncompleted. A `[ ]` beside a task shows that it is not done."},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"* _Note:_ this command does not check if the task is not marked _done_."},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"  It will set the task to an _undone_ state regardless of its previous state."},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `undo [index]`"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be unmarked."},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `undo 2`"},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"Marked undone! Looks like you\u0027re not quite done with:"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":167,"author":{"gitId":"ivanchongzhien"},"content":"## 2.6 Delete a task: `delete`"},{"lineNumber":168,"author":{"gitId":"ivanchongzhien"},"content":"Removes the specified task from the task list."},{"lineNumber":169,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":170,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `delete [index]`"},{"lineNumber":171,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":172,"author":{"gitId":"ivanchongzhien"},"content":"* _index:_ _**int**_ index of the task to be deleted."},{"lineNumber":173,"author":{"gitId":"ivanchongzhien"},"content":"* Enter the _index_ following the numbering of the task as shown in `list`."},{"lineNumber":174,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":175,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `delete 3`"},{"lineNumber":176,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":177,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output**:"},{"lineNumber":178,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":179,"author":{"gitId":"ivanchongzhien"},"content":"Task 3 has been deleted:"},{"lineNumber":180,"author":{"gitId":"ivanchongzhien"},"content":"   [D][ ] statistics quiz (by: 25 February, 2021)"},{"lineNumber":181,"author":{"gitId":"ivanchongzhien"},"content":"Tasks remaining: 3"},{"lineNumber":182,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":183,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":184,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":185,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":186,"author":{"gitId":"ivanchongzhien"},"content":"## 2.7 Filtering tasks by keyword: `find`"},{"lineNumber":187,"author":{"gitId":"ivanchongzhien"},"content":"List tasks which contain the given keyword."},{"lineNumber":188,"author":{"gitId":"ivanchongzhien"},"content":"* search is case-sensitive, _eg:_ `john` will not match `John`."},{"lineNumber":189,"author":{"gitId":"ivanchongzhien"},"content":"* only tasks descriptions containing the entire keyword string will be matched, _eg:_ `birthday party`"},{"lineNumber":190,"author":{"gitId":"ivanchongzhien"},"content":"  will match `John\u0027s birhtday party` but **not** `Alice\u0027s birthday`."},{"lineNumber":191,"author":{"gitId":"ivanchongzhien"},"content":"* Only find matches within task description. Task details (_due date, time etc._) will not be searched."},{"lineNumber":192,"author":{"gitId":"ivanchongzhien"},"content":"* Index of search results are the same as index of `list`."},{"lineNumber":193,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":194,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `find [keyword]`"},{"lineNumber":195,"author":{"gitId":"ivanchongzhien"},"content":"* _keyword:_ _**String**_ tasks will be checked if they contain this string."},{"lineNumber":196,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":197,"author":{"gitId":"ivanchongzhien"},"content":"**Example usage:** `find assignment`"},{"lineNumber":198,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":199,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":200,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":201,"author":{"gitId":"ivanchongzhien"},"content":"SEARCH RESULTS FOR \"assignment\":"},{"lineNumber":202,"author":{"gitId":"ivanchongzhien"},"content":"1. [D][ ] CS assignment (by: tomorrow midnight)"},{"lineNumber":203,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":204,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":205,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":206,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":207,"author":{"gitId":"ivanchongzhien"},"content":"## 2.8 Exiting the program: `bye`"},{"lineNumber":208,"author":{"gitId":"ivanchongzhien"},"content":"Exits Duke. No manual saving is required as data is automatically saved by the program."},{"lineNumber":209,"author":{"gitId":"ivanchongzhien"},"content":"Undeleted tasks will be loaded up the next time Duke is ran."},{"lineNumber":210,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":211,"author":{"gitId":"ivanchongzhien"},"content":"**Format:** `bye`"},{"lineNumber":212,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":213,"author":{"gitId":"ivanchongzhien"},"content":"**Expected output:**"},{"lineNumber":214,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":215,"author":{"gitId":"ivanchongzhien"},"content":"____________________________________________________________"},{"lineNumber":216,"author":{"gitId":"ivanchongzhien"},"content":"Bye! Hit me up if you feel like being productive again ;)"},{"lineNumber":217,"author":{"gitId":"ivanchongzhien"},"content":"____________________________________________________________"},{"lineNumber":218,"author":{"gitId":"ivanchongzhien"},"content":"```"},{"lineNumber":219,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":220,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":221,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":222,"author":{"gitId":"ivanchongzhien"},"content":"## 3. Transferring data to another device"},{"lineNumber":223,"author":{"gitId":"ivanchongzhien"},"content":"1. Copy the `duke_data.txt` file. **Do NOT** rename the file."},{"lineNumber":224,"author":{"gitId":"ivanchongzhien"},"content":"2. Paste it in the same directory as the `Duke.jar` file on your new device."},{"lineNumber":225,"author":{"gitId":"ivanchongzhien"},"content":"3. Running `Duke` should load your previous data."},{"lineNumber":226,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":227,"author":{"gitId":"ivanchongzhien"},"content":"## 4. Command Summary"},{"lineNumber":228,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":229,"author":{"gitId":"ivanchongzhien"},"content":"Command     | Format                                   | Example"},{"lineNumber":230,"author":{"gitId":"ivanchongzhien"},"content":" -----------| ---------------------------------------- | --------------------------------------"},{"lineNumber":231,"author":{"gitId":"ivanchongzhien"},"content":"help        | `help`                                   | `help`"},{"lineNumber":232,"author":{"gitId":"ivanchongzhien"},"content":"todo        | `todo [description]...`                  | `todo organize exam notes`"},{"lineNumber":233,"author":{"gitId":"ivanchongzhien"},"content":"deadline    | `deadline [description]... /by[due]`     | `deadline CS assignment /by tomorrow midnight`"},{"lineNumber":234,"author":{"gitId":"ivanchongzhien"},"content":"event       | `event [description] /at[time/date*]`    | `event John\u0027s party /at 25-5-2021`"},{"lineNumber":235,"author":{"gitId":"ivanchongzhien"},"content":"list        | `list`                                   | `list`"},{"lineNumber":236,"author":{"gitId":"ivanchongzhien"},"content":"done        | `done [index]`                           | `done 2`"},{"lineNumber":237,"author":{"gitId":"ivanchongzhien"},"content":"undo        | `undo [index]`                           | `undo 2`"},{"lineNumber":238,"author":{"gitId":"ivanchongzhien"},"content":"delete      | `delete [index]`                         | `delete 3`"},{"lineNumber":239,"author":{"gitId":"ivanchongzhien"},"content":"find        | `find [keyword]`                         | `find birthday party`"},{"lineNumber":240,"author":{"gitId":"ivanchongzhien"},"content":"bye         | `bye`                                    | `bye`"},{"lineNumber":241,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":242,"author":{"gitId":"ivanchongzhien"},"content":"_***Date format:**_ `dd-mm-yyyy`"},{"lineNumber":243,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":244,"author":{"gitId":"ivanchongzhien"},"content":"[**\u003e back to top**](#contents)"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"ivanchongzhien":240,"-":9}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.DataErrorException;"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.FullListException;"},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"import duke.inputhandlers.CommandRunner;"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"import duke.inputhandlers.Parser;"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"import duke.storage.FileManager;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"import duke.storage.TaskList;"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Todo;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"import duke.ui.TextUi;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.File;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.FileWriter;"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":" * Entry point of the Duke application."},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":" * Initializes the necessary variables and begins interaction with the user."},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"    /** The list of all tasks entered by the user/loaded from local file. */"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"    public static TaskList tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"    public static TextUi ui \u003d new TextUi();"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"    public static CommandRunner runner \u003d new CommandRunner();"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"    public static void main(String[] args) {"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printHello();"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"        FileManager.checkSavedData();"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"        runner.receiveUserInput();"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printBye();"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":38,"-":2}},{"path":"src/main/java/duke/constants/FileIOStrings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.constants;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Container for string constants used during FileIO."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class FileIOStrings {"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DELIM \u003d \"//\";"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String PATH \u003d \"duke_data.txt\";"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    /** Error messages for UI. */"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String SAVE_FILE_ERROR_MESSAGE \u003d \"Something went wrong when saving...\";"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String FILE_FOUND_MESSAGE \u003d \"Existing records found! Data loaded...\" + \u0027\\n\u0027;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String NO_FILE_FOUND_MESSAGE \u003d \"No previous records! Starting a new record...\";"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String CREATE_FILE_SUCCESS \u003d \"New file created!\" + \u0027\\n\u0027;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String CREATE_FILE_ERROR \u003d \"Error creating new file...\" + \u0027\\n\u0027;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":17}},{"path":"src/main/java/duke/constants/ProgramInts.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.constants;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Container for integer constants used throughout the program."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class ProgramInts {"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"    /** Maximum number of tasks allowed in the list. */"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int MAX_TASK \u003d 100;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    /** Each integer is used to represent a particular command. */"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int BYE_COMMAND \u003d 0;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int LIST_COMMAND \u003d 1;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int HELP_COMMAND \u003d 2;"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int DONE_COMMAND \u003d 3;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int TODO_COMMAND \u003d 4;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int DEADLINE_COMMAND \u003d 5;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int EVENTS_COMMAND \u003d 6;"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int UNKNOWN_COMMAND \u003d 7;"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int DELETE_COMMAND \u003d 8;"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int FIND_COMMAND \u003d 9;"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"    public static final int UNDO_COMMAND \u003d 10;"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":23}},{"path":"src/main/java/duke/constants/ProgramStrings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.constants;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Container for UI messages and string constants used throughout the program."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class ProgramStrings {"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"    /** Messages for program start and exit. */"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String ALLO_MESSAGE \u003d \"Hello I\u0027m Duke!\\n\" + \"What would you like to do today?\\n\";"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String BYE_MESSAGE \u003d \"Bye! Hit me up if you feel like being productive again ;)\\n\";"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"    /** Messages for {@code help} command. */"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String LIST_COMMAND_FORMAT \u003d \"LIST - \\n\" + \"FORMAT: list\";"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DONE_COMMAND_FORMAT \u003d \"DONE - \\n\" + \"FORMAT: done [(int) number]\";"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String TODO_COMMAND_FORMAT \u003d \"TODO - \\n\" + \"FORMAT: todo [(str) description]\";"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DEADLINE_COMMAND_FORMAT \u003d \"DEADLINE - \\n\" + \"FORMAT: deadline [(str) description] /by [(str) time/*date]\";"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String EVENT_COMMAND_FORMAT \u003d \"EVENT - \\n\" + \"FORMAT: event [(str) description] /at [(str) time/*date]\";"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DELETE_COMMAND_FORMAT \u003d \"DELETE - \\n\" + \"FORMAT: delete [(int) index]\";"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String FIND_COMMAND_FORMAT \u003d \"FIND - \\n\" + \"FORMAT: find [(string) search keywords]\";"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DATE_FORMAT \u003d \"Date FORMAT: dd-mm-yyyy\";"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String UNDO_COMMAND_FORMAT \u003d \"UNDO - \\n\" + \"FORMAT: undo [(int) number]\";"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"    /** Messages for announcing user error. */"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String ENTER_HELP_FOR_LIST_OF_COMMANDS \u003d \"Enter \\\"help\\\" for a list of available commands and format\\n\";"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String JOB_NUMBER_TOO_SMALL \u003d \"Enter a valid job number. Use the list command to view your current tasks.\";"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String JOB_NUMBER_TOO_BIG \u003d \"You don\u0027t have that many jobs! Use the list command to view your current tasks.\";"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String LIST_FULL_WARNING \u003d \"List is full!\" +\u0027\\n\u0027+\"Use the \\\"list\\\" command to view your tasks.\" + \u0027\\n\u0027;"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String LIST_FULL_WARNING_2 \u003d \"Unable to add new tasks until some tasks are deleted.\" + \u0027\\n\u0027;"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String NO_MATCH_WARNING \u003d \"No tasks match your search query:\";"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String INVALID_DATE_FORMAT_WARNING \u003d \"Invalid date/ wrong date format. \" + DATE_FORMAT;"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"    /** Messages to prompt user. */"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String PROMPT_ENTER_BYE_TO_EXIT \u003d \"To exit, enter \\\"bye\\\"\";"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String PROMPT_TASK_DONE \u003d \"Congrats! You\u0027ve completed: \\n   \";"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String PROMPT_TASK_UNDONE \u003d \"Marked undone! Looks like you\u0027re not quite done with: \\n   \";"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String PROMPT_TASK_ADDED \u003d \"Added to list: \";"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"    /** String constants for Parser. */"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String INPUT_DATE_FORMAT \u003d \"d-M-yyyy\";"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String OUTPUT_DATE_FORMAT \u003d \"d MMMM, yyyy\";"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String EVENT_DELIM \u003d \"/at\";"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String DEADLINE_DELIM \u003d \"/by\";"},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"    /** String constants intended for simple UI design. */"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String STRAIGHT_LINE \u003d \"____________________________________________________________\";"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String SHORT_LINE \u003d \"-------------\";"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"    public static final String INDENT \u003d \"   \";"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":48}},{"path":"src/main/java/duke/exception/DataErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Signals an error caused by invalid formatting when reading and decoding lines from data file."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"public class DataErrorException extends DukeException{"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"    // nothing to be done"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":8}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Parent class to contain all exceptions specific to Duke."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":8}},{"path":"src/main/java/duke/exception/FullListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Signals an error caused by running commands to add tasks to a full list."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"public class FullListException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"    // nothing to be done"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":8}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Signals an error caused by invalid command entered by the user."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" * Command can be considered invalid for not matching any existing command, wrong formatting,"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":" * or missing required parameters."},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    // nothing to be done"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":10}},{"path":"src/main/java/duke/inputhandlers/CommandRunner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.inputhandlers;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.FullListException;"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"import duke.storage.FileManager;"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Todo;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.Duke.tasks;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.Duke.ui;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramInts.*;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramStrings.*;"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":" * This class receives user input, sends it to the parser, then runs the commands chosen by the user."},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":" * Also handles situation where user input is invalid or list is full."},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"public class CommandRunner {"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"     * Loops indefinitely, receiving user input until \"bye\" command is received."},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"     * Checks list capacity at each iteration."},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"     * When list is full, user cannot add new tasks until tasks are deleted."},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"     * User can still list tasks, enter a find query, mark tasks as done or print the help manual."},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"    public void receiveUserInput() {"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"        boolean isExit \u003d false;"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"        while (!isExit) {"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"            String input \u003d in.nextLine();"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"            int command \u003d Parser.parseCommand(input);"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"                checkListCapacity(command);"},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"            } catch (FullListException e) {"},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printListFullWarning();"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"                continue;"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":"            isExit \u003d selectCommandToRun(command, input);"},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"     * Selects the method to run based on the command entered."},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"     * @param command the integer representation of the command parsed from user input"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input   full user input string"},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"     * @return false only when exit command is given. Calls the respective method for other commands"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"    private boolean selectCommandToRun(int command, String input) {"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"        switch (command) {"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"        case BYE_COMMAND:"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"        case LIST_COMMAND:"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"            runList();"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"        case HELP_COMMAND:"},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printHelp();"},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"        case DONE_COMMAND:"},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":"            runDone(input);"},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"        case TODO_COMMAND:"},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":"            runTodo(input);"},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":"            runDeadline(input);"},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"        case EVENTS_COMMAND:"},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"            runEvent(input);"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":"        case DELETE_COMMAND:"},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"            runDeleteCommand(input);"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"        case FIND_COMMAND:"},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"            runFindCommand(input);"},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"        case UNDO_COMMAND:"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":"            runUndoCommand(input);"},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"            FileManager.saveData();"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":"        default:"},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":"            runUnknownCommand(input);"},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":"        return false;"},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":"     * Marks the task specified by user as \u0027done\u0027"},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":"    private void runDone(String input) {"},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":"        String[] word \u003d input.split(\" \");"},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":"        int jobNumber \u003d 0;"},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":"            jobNumber \u003d Integer.parseInt(word[1]) - 1;"},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":"            // returns when there is no jobs in the list"},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":"            if (tasks.getCount() \u003d\u003d 0) {"},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printNoTaskWarning();"},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"                return;"},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"            markJobAsDone(tasks.get(jobNumber));"},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (IndexOutOfBoundsException | NullPointerException e) {"},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidIndexWarning(jobNumber);"},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":"     * Marks the task specified by user as \u0027not done\u0027."},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"    private void runUndoCommand(String input) {"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"        String[] word \u003d input.split(\" \");"},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":"        int jobNumber \u003d 0;"},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"ivanchongzhien"},"content":"            jobNumber \u003d Integer.parseInt(word[1]) - 1;"},{"lineNumber":140,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":"            // returns when there is no jobs in the list"},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"            if (tasks.getCount() \u003d\u003d 0) {"},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printNoTaskWarning();"},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":"                return;"},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":"            markJobAsUndone(tasks.get(jobNumber));"},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {"},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidIndexWarning(jobNumber);"},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":"     * Sets the done property of given task to true."},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints prompt on screen displaying the task that was marked."},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"     * @param task the task to be marked"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"    private void markJobAsDone(Task task) {"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"        task.setDone(true);"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(PROMPT_TASK_DONE);"},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"        task.printTask();"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":168,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"ivanchongzhien"},"content":"     * Sets the done property of a given task to false."},{"lineNumber":170,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints prompt on screen displaying the task that was unmarked."},{"lineNumber":171,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"ivanchongzhien"},"content":"     * @param task the task to be marked"},{"lineNumber":173,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"ivanchongzhien"},"content":"    private void markJobAsUndone(Task task) {"},{"lineNumber":175,"author":{"gitId":"ivanchongzhien"},"content":"        task.setDone(false);"},{"lineNumber":176,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(PROMPT_TASK_UNDONE);"},{"lineNumber":177,"author":{"gitId":"ivanchongzhien"},"content":"        task.printTask();"},{"lineNumber":178,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":179,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":181,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":182,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints every task in the list."},{"lineNumber":184,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning message if task list is empty, does not print empty list."},{"lineNumber":185,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"ivanchongzhien"},"content":"    private void runList() {"},{"lineNumber":187,"author":{"gitId":"ivanchongzhien"},"content":"        int numbering \u003d 1;"},{"lineNumber":188,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":189,"author":{"gitId":"ivanchongzhien"},"content":"        // prints warning message when task list is empty"},{"lineNumber":190,"author":{"gitId":"ivanchongzhien"},"content":"        if (tasks.getCount() \u003d\u003d 0) {"},{"lineNumber":191,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printNoTaskWarning();"},{"lineNumber":192,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":193,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":195,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(SHORT_LINE);"},{"lineNumber":196,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"TASK LIST:\");"},{"lineNumber":197,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(SHORT_LINE);"},{"lineNumber":198,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":199,"author":{"gitId":"ivanchongzhien"},"content":"        for (Task task : tasks.getTasks()) {"},{"lineNumber":200,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printTaskAsList(numbering, task);"},{"lineNumber":201,"author":{"gitId":"ivanchongzhien"},"content":"            numbering++;"},{"lineNumber":202,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":204,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":206,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds a task of type Todo into the task list."},{"lineNumber":208,"author":{"gitId":"ivanchongzhien"},"content":"     * Task description is parsed from user input."},{"lineNumber":209,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":211,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"ivanchongzhien"},"content":"    private void runTodo(String input) {"},{"lineNumber":213,"author":{"gitId":"ivanchongzhien"},"content":"        String job;"},{"lineNumber":214,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":215,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":216,"author":{"gitId":"ivanchongzhien"},"content":"            job \u003d Parser.parseDescription(input);"},{"lineNumber":217,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":218,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":219,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":220,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":222,"author":{"gitId":"ivanchongzhien"},"content":"        Todo newTask \u003d new Todo(job);"},{"lineNumber":223,"author":{"gitId":"ivanchongzhien"},"content":"        tasks.add(newTask);"},{"lineNumber":224,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printTaskAdded(newTask);"},{"lineNumber":225,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":227,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds a task of type Deadline into the task list."},{"lineNumber":229,"author":{"gitId":"ivanchongzhien"},"content":"     * Task description and deadline is parsed from user input."},{"lineNumber":230,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":232,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"ivanchongzhien"},"content":"    private void runDeadline(String input) {"},{"lineNumber":234,"author":{"gitId":"ivanchongzhien"},"content":"        String job;"},{"lineNumber":235,"author":{"gitId":"ivanchongzhien"},"content":"        String by;"},{"lineNumber":236,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":237,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":238,"author":{"gitId":"ivanchongzhien"},"content":"            job \u003d Parser.parseDescription(input, DEADLINE_DELIM);"},{"lineNumber":239,"author":{"gitId":"ivanchongzhien"},"content":"            by \u003d Parser.parseDate(input, DEADLINE_DELIM);"},{"lineNumber":240,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":241,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":242,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":243,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":244,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidDateFormatWarning();"},{"lineNumber":245,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":246,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":248,"author":{"gitId":"ivanchongzhien"},"content":"        Deadline newTask \u003d new Deadline(job, by);"},{"lineNumber":249,"author":{"gitId":"ivanchongzhien"},"content":"        tasks.add(newTask);"},{"lineNumber":250,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printTaskAdded(newTask);"},{"lineNumber":251,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":253,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds a task of type Event into the task list."},{"lineNumber":255,"author":{"gitId":"ivanchongzhien"},"content":"     * Task description and event time is parsed from user input."},{"lineNumber":256,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":258,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"ivanchongzhien"},"content":"    private void runEvent(String input) {"},{"lineNumber":260,"author":{"gitId":"ivanchongzhien"},"content":"        String job, at;"},{"lineNumber":261,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":262,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":263,"author":{"gitId":"ivanchongzhien"},"content":"            job \u003d Parser.parseDescription(input, EVENT_DELIM);"},{"lineNumber":264,"author":{"gitId":"ivanchongzhien"},"content":"            at \u003d Parser.parseDate(input, EVENT_DELIM);"},{"lineNumber":265,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":266,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":267,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":268,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":269,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidDateFormatWarning();"},{"lineNumber":270,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":271,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":273,"author":{"gitId":"ivanchongzhien"},"content":"        Event newTask \u003d new Event(job, at);"},{"lineNumber":274,"author":{"gitId":"ivanchongzhien"},"content":"        tasks.add(newTask);"},{"lineNumber":275,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printTaskAdded(newTask);"},{"lineNumber":276,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":278,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"ivanchongzhien"},"content":"     * Handles unrecognized input by printing error message."},{"lineNumber":280,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":282,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"ivanchongzhien"},"content":"    private void runUnknownCommand(String input) {"},{"lineNumber":284,"author":{"gitId":"ivanchongzhien"},"content":"        ui.printUnknownCommandWarning(input);"},{"lineNumber":285,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":287,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":288,"author":{"gitId":"ivanchongzhien"},"content":"     * Deletes a task specified by the user."},{"lineNumber":289,"author":{"gitId":"ivanchongzhien"},"content":"     * Task index is parsed from user input."},{"lineNumber":290,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":291,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":292,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"ivanchongzhien"},"content":"    private void runDeleteCommand(String input) {"},{"lineNumber":294,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":295,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d input.split(\" \");"},{"lineNumber":296,"author":{"gitId":"ivanchongzhien"},"content":"        int index \u003d 0;"},{"lineNumber":297,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":298,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":299,"author":{"gitId":"ivanchongzhien"},"content":"            index \u003d Integer.parseInt(words[1]) - 1;"},{"lineNumber":300,"author":{"gitId":"ivanchongzhien"},"content":"            if (tasks.contains(tasks.get(index))) {"},{"lineNumber":301,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printTaskDeleted(index);"},{"lineNumber":302,"author":{"gitId":"ivanchongzhien"},"content":"                tasks.remove(index);"},{"lineNumber":303,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":304,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":305,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":306,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":307,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidIndexWarning(index);"},{"lineNumber":308,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":311,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints tasks which contain the keyword specified by user."},{"lineNumber":313,"author":{"gitId":"ivanchongzhien"},"content":"     * Search keyword is parsed from user input."},{"lineNumber":314,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints warning message if no matches are found."},{"lineNumber":315,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":316,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":317,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":318,"author":{"gitId":"ivanchongzhien"},"content":"    private void runFindCommand(String input) {"},{"lineNumber":319,"author":{"gitId":"ivanchongzhien"},"content":"        int numbering \u003d 1;"},{"lineNumber":320,"author":{"gitId":"ivanchongzhien"},"content":"        int matches \u003d 0;"},{"lineNumber":321,"author":{"gitId":"ivanchongzhien"},"content":"        String keyword \u003d null;"},{"lineNumber":322,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":323,"author":{"gitId":"ivanchongzhien"},"content":"        // parse keyword from user input"},{"lineNumber":324,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":325,"author":{"gitId":"ivanchongzhien"},"content":"            keyword \u003d Parser.parseKeyword(input);"},{"lineNumber":326,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":327,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printInvalidInputWarning(input);"},{"lineNumber":328,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":329,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":331,"author":{"gitId":"ivanchongzhien"},"content":"        // collect tasks which match keyword"},{"lineNumber":332,"author":{"gitId":"ivanchongzhien"},"content":"        for (Task t : tasks.getTasks()) {"},{"lineNumber":333,"author":{"gitId":"ivanchongzhien"},"content":"            if (t.getDescription().contains(keyword)) {"},{"lineNumber":334,"author":{"gitId":"ivanchongzhien"},"content":"                matches++;"},{"lineNumber":335,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printTaskAsList(numbering, t);"},{"lineNumber":336,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":337,"author":{"gitId":"ivanchongzhien"},"content":"            numbering++;"},{"lineNumber":338,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":339,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":340,"author":{"gitId":"ivanchongzhien"},"content":"        // check if no matches"},{"lineNumber":341,"author":{"gitId":"ivanchongzhien"},"content":"        if (matches \u003d\u003d 0) {"},{"lineNumber":342,"author":{"gitId":"ivanchongzhien"},"content":"            ui.printNoMatchWarning(keyword);"},{"lineNumber":343,"author":{"gitId":"ivanchongzhien"},"content":"            return;"},{"lineNumber":344,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":345,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":346,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":348,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":349,"author":{"gitId":"ivanchongzhien"},"content":"     * Checks list capacity before a command is ran."},{"lineNumber":350,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":351,"author":{"gitId":"ivanchongzhien"},"content":"     * @param command command selected to run"},{"lineNumber":352,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws FullListException if list is full and selected command is not allowed when list is full."},{"lineNumber":353,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":354,"author":{"gitId":"ivanchongzhien"},"content":"    private void checkListCapacity(int command) throws FullListException {"},{"lineNumber":355,"author":{"gitId":"ivanchongzhien"},"content":"        Task.isFull \u003d (tasks.getCount() \u003d\u003d MAX_TASK);"},{"lineNumber":356,"author":{"gitId":"ivanchongzhien"},"content":"        if (Task.isFull \u0026\u0026 !isAllowedWhenListFull(command)) {"},{"lineNumber":357,"author":{"gitId":"ivanchongzhien"},"content":"            throw new FullListException();"},{"lineNumber":358,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":359,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":361,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":362,"author":{"gitId":"ivanchongzhien"},"content":"     * Checks if given command is allowed to run when list is full."},{"lineNumber":363,"author":{"gitId":"ivanchongzhien"},"content":"     * User is not allowed to add more tasks when list is full."},{"lineNumber":364,"author":{"gitId":"ivanchongzhien"},"content":"     * i.e. \"todo\", \"deadline\" and \"event\" commands are not allowed."},{"lineNumber":365,"author":{"gitId":"ivanchongzhien"},"content":"     * User is still allowed to view list, mark tasks as done, delete tasks, and find tasks with keywords."},{"lineNumber":366,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":367,"author":{"gitId":"ivanchongzhien"},"content":"     * @param command command to be checked"},{"lineNumber":368,"author":{"gitId":"ivanchongzhien"},"content":"     * @return true if command is allowed when list is full"},{"lineNumber":369,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":370,"author":{"gitId":"ivanchongzhien"},"content":"    private boolean isAllowedWhenListFull(int command) {"},{"lineNumber":371,"author":{"gitId":"ivanchongzhien"},"content":"        boolean isAllowed;"},{"lineNumber":372,"author":{"gitId":"ivanchongzhien"},"content":"        isAllowed \u003d !(command \u003d\u003d TODO_COMMAND || command \u003d\u003d DEADLINE_COMMAND || command \u003d\u003d EVENTS_COMMAND);"},{"lineNumber":373,"author":{"gitId":"ivanchongzhien"},"content":"        return isAllowed;"},{"lineNumber":374,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":375}},{"path":"src/main/java/duke/inputhandlers/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.inputhandlers;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramInts.*;"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramStrings.INPUT_DATE_FORMAT;"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramStrings.OUTPUT_DATE_FORMAT;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":" * Parse user input to determine command to be executed."},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":" * Also parses task details where applicable."},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"     * Parse user input into specified command."},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"     * @return an integer representing the command parsed"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"    public static int parseCommand(String input) {"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"            return BYE_COMMAND;"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"            return LIST_COMMAND;"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (input.equalsIgnoreCase(\"help\")) {"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"            return HELP_COMMAND;"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"done\")) {"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"            return DONE_COMMAND;"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"todo\")) {"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"            return TODO_COMMAND;"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"deadline\")) {"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"            return DEADLINE_COMMAND;"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"event\")) {"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"            return EVENTS_COMMAND;"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"delete\")) {"},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"            return DELETE_COMMAND;"},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"find\")) {"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"            return FIND_COMMAND;"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (startsWith(input, \"undo\")) {"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"            return UNDO_COMMAND;"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"            return UNKNOWN_COMMAND;"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":"     * Parses the description of a task from the user input string."},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"     * @return task description string"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws InvalidCommandException if input does not contain a description"},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"    public static String parseDescription(String input) throws InvalidCommandException {"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"        // split the input string into individual words"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d input.split(\" \");"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"        // if true, indicates that input string does not have any other words other than the original command"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"        if (words.length \u003c 2) {"},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"            throw new InvalidCommandException();"},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":"        return getDescriptionString(words);"},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":"     * (Overload of {@code parseDescription} method)"},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"     * Parse the description of a task from the user input string."},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"     * Delimiter is used to mark the end of task description in the user input, applicable for commands which have"},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":"     * further fields."},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input     full user input string"},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"     * @param delimiter string sequence to indicate end of task description"},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"     * @return task description string up till delimiter"},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws InvalidCommandException if input does not contain a description"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"    public static String parseDescription(String input, String delimiter) throws InvalidCommandException {"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"        // split the input string into individual words"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d input.split(\" \");"},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"        // if true, indicates that input string does not have any other words other than the original command"},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"        if (words.length \u003c 2) {"},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":"            throw new InvalidCommandException();"},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"        return getDescriptionString(words, delimiter);"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":"     * Obtains entire task description from user input until end of input."},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":"     * @param words array of strings consisting of user input split into individual words"},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":"     * @return task description as a single string"},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"    private static String getDescriptionString(String[] words) {"},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"        String description \u003d words[1];"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"        for (int i \u003d 2; i \u003c words.length; i++) {"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":"            description +\u003d \" \" + words[i];"},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":"        return description;"},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":"     * Obtains entire task description from user input until it reaches a delimiter."},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"     * @param words     array of strings consisting of user input split into individual words"},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"     * @param delimiter specifies the end of task description"},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"     * @return task description as a single string"},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":"    private static String getDescriptionString(String[] words, String delimiter) throws InvalidCommandException {"},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"        String description \u003d words[1];"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"        for (int i \u003d 2; i \u003c words.length; i++) {"},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":"            if (words[i].equalsIgnoreCase(delimiter)) {"},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"                break;"},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"            description +\u003d \" \" + words[i];"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":"        // handles case where user input does not contain task description"},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"        if (description.contains(delimiter)) {"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"            throw new InvalidCommandException();"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":"        return description;"},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":140,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"     * Parse time/date from user input."},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"     * Reformats date entered as {@code d-M-yyyy} into {@code dd MMMM, yyyy}."},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input     full user input string"},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":"     * @param delimiter string sequence marking the start of the date/time field"},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":"     * @return date/time string"},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws InvalidCommandException if specified delimiter is not found"},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"    public static String parseDate(String input, String delimiter) throws InvalidCommandException {"},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":"        // splits user input using delimiter, date/time string starts after delimiter"},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d input.split(delimiter);"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":"        // delimiter not found"},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"        if (words.length \u003d\u003d 1) {"},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":"            throw new InvalidCommandException();"},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"        String dateString \u003d words[1].trim();"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"        // reformats date string if it can be parsed (contains three \"-\")"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"        if (isDate(dateString)) {"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"            return convertToDate(dateString);"},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":"        // returns string as entered by user"},{"lineNumber":167,"author":{"gitId":"ivanchongzhien"},"content":"        return dateString;"},{"lineNumber":168,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":170,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"ivanchongzhien"},"content":"     * Reformats given date string to a different format: {@code OUTPUT_DATE_FORMAT}."},{"lineNumber":172,"author":{"gitId":"ivanchongzhien"},"content":"     * Date string is valid only if it follows specified format: {@code INPUT_DATE_FORMAT}."},{"lineNumber":173,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"ivanchongzhien"},"content":"     * @param string date string from parsed from user input"},{"lineNumber":175,"author":{"gitId":"ivanchongzhien"},"content":"     * @return reformatted date string"},{"lineNumber":176,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws DateTimeParseException if given date is invalid / wrong string format / values given are invalid"},{"lineNumber":177,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"ivanchongzhien"},"content":"    public static String convertToDate(String string) throws DateTimeParseException {"},{"lineNumber":179,"author":{"gitId":"ivanchongzhien"},"content":"        // specifies the format that user has to follow"},{"lineNumber":180,"author":{"gitId":"ivanchongzhien"},"content":"        DateTimeFormatter parseFormat \u003d DateTimeFormatter.ofPattern(INPUT_DATE_FORMAT);"},{"lineNumber":181,"author":{"gitId":"ivanchongzhien"},"content":"        LocalDate dateObj \u003d LocalDate.parse(string, parseFormat);"},{"lineNumber":182,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":183,"author":{"gitId":"ivanchongzhien"},"content":"        // specifies the format that date will be printed out"},{"lineNumber":184,"author":{"gitId":"ivanchongzhien"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(OUTPUT_DATE_FORMAT);"},{"lineNumber":185,"author":{"gitId":"ivanchongzhien"},"content":"        //noinspection UnnecessaryLocalVariable"},{"lineNumber":186,"author":{"gitId":"ivanchongzhien"},"content":"        String formattedString \u003d dateObj.format(outputFormat);"},{"lineNumber":187,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":188,"author":{"gitId":"ivanchongzhien"},"content":"        return formattedString;"},{"lineNumber":189,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":191,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"ivanchongzhien"},"content":"     * Checks if given string can be parsed as a formatted date."},{"lineNumber":193,"author":{"gitId":"ivanchongzhien"},"content":"     * Does not guarantee validity of date string."},{"lineNumber":194,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"ivanchongzhien"},"content":"     * @param string date string parsed from user input"},{"lineNumber":196,"author":{"gitId":"ivanchongzhien"},"content":"     * @return true if date string can be parsed"},{"lineNumber":197,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"ivanchongzhien"},"content":"    private static boolean isDate(String string) {"},{"lineNumber":199,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d string.split(\"-\");"},{"lineNumber":200,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":201,"author":{"gitId":"ivanchongzhien"},"content":"        return (words.length \u003d\u003d 3);"},{"lineNumber":202,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":204,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"ivanchongzhien"},"content":"     * Parses search keyword from user input string."},{"lineNumber":206,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input full user input string"},{"lineNumber":208,"author":{"gitId":"ivanchongzhien"},"content":"     * @return keyword string"},{"lineNumber":209,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws InvalidCommandException if no keyword is found"},{"lineNumber":210,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"ivanchongzhien"},"content":"    public static String parseKeyword(String input) throws InvalidCommandException {"},{"lineNumber":212,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":213,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d input.split(\" \");"},{"lineNumber":214,"author":{"gitId":"ivanchongzhien"},"content":"        if (words.length \u003c 2) {"},{"lineNumber":215,"author":{"gitId":"ivanchongzhien"},"content":"            throw new InvalidCommandException();"},{"lineNumber":216,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":218,"author":{"gitId":"ivanchongzhien"},"content":"        String[] keywords \u003d Arrays.copyOfRange(words, 1, words.length);"},{"lineNumber":219,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":220,"author":{"gitId":"ivanchongzhien"},"content":"        String keywordString \u003d \"\";"},{"lineNumber":221,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":222,"author":{"gitId":"ivanchongzhien"},"content":"        for (String eachWord : keywords) {"},{"lineNumber":223,"author":{"gitId":"ivanchongzhien"},"content":"            keywordString +\u003d eachWord;"},{"lineNumber":224,"author":{"gitId":"ivanchongzhien"},"content":"            keywordString +\u003d \" \";"},{"lineNumber":225,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":227,"author":{"gitId":"ivanchongzhien"},"content":"        return keywordString.trim();"},{"lineNumber":228,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":230,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"ivanchongzhien"},"content":"     * Tests if user input string starts with a particular command string."},{"lineNumber":232,"author":{"gitId":"ivanchongzhien"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"ivanchongzhien"},"content":"     * @param input   full user input string"},{"lineNumber":234,"author":{"gitId":"ivanchongzhien"},"content":"     * @param command string sequence of command being checked"},{"lineNumber":235,"author":{"gitId":"ivanchongzhien"},"content":"     * @return true if user input starts with command string"},{"lineNumber":236,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"ivanchongzhien"},"content":"    private static boolean startsWith(String input, String command) {"},{"lineNumber":238,"author":{"gitId":"ivanchongzhien"},"content":"        return input.toUpperCase().startsWith(command.toUpperCase());"},{"lineNumber":239,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":240}},{"path":"src/main/java/duke/storage/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"import duke.exception.DataErrorException;"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.FileIOStrings.*;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.Duke.tasks;"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.Duke.ui;"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":" * Manages file operations to read and store data locally."},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"public class FileManager {"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"     * Reads from existing data file if present. If no existing data is found, a new file will be created."},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"    public static void checkSavedData() {"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"            readFromFile();"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"            System.out.println(FILE_FOUND_MESSAGE);"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"            System.out.println(NO_FILE_FOUND_MESSAGE);"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"            createNewFile();"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"     * Writes existing tasks in the list into data file. Overwrites existing file data."},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"    public static void saveData() {"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"            writeToFile();"},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"            System.out.println(SAVE_FILE_ERROR_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"     * Creates a new data file (.txt) at specified {@code PATH}."},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":"    private static void createNewFile() {"},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"        File file \u003d new File(PATH);"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"            if (file.createNewFile()) {"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":"                System.out.println(CREATE_FILE_SUCCESS);"},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"            System.out.println(CREATE_FILE_ERROR);"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"            e.printStackTrace();"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"     * Reads input from data file line by line until EOF, converting each line into a task "},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"     * and adding the task to the task list."},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws FileNotFoundException if data file specified by {@code PATH} does not exist."},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":"    private static void readFromFile() throws FileNotFoundException {"},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"        int lineNumber \u003d 0;"},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":"        File dataFile \u003d new File(PATH);"},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"        Scanner reader \u003d new Scanner(dataFile);"},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"        while (reader.hasNext()) {"},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"            String line \u003d reader.nextLine();"},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":"            lineNumber++;"},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":"            try {"},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"                Task task \u003d formTask(line);"},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"                tasks.add(task);"},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"            } catch (DataErrorException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"                ui.printDataErrorWarning(lineNumber);"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"     * Converts each task in the task list to a string and writing it to the data file."},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws IOException if an IO error is encountered when writing to the file."},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":"    private static void writeToFile() throws IOException {"},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"        FileWriter writer \u003d new FileWriter(PATH);"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":"        for (Task t : tasks.getTasks()) {"},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":"            writer.write(formLine(t) + \u0027\\n\u0027);"},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":"        writer.close();"},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"     * Encodes the given task into a decodable and readable string representation for storage."},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"     * @param t task to be encoded"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":"     * @return string representation of the given task"},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":"    private static String formLine(Task t) {"},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":"        String line \u003d \"\";"},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":"        if (t instanceof Todo) {"},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d \"T\" + DELIM;"},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d (t.isDone() ? \"1\" : \"0\") + DELIM;"},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d t.getDescription();"},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (t instanceof Deadline) {"},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d \"D\" + DELIM;"},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d (t.isDone() ? \"1\" : \"0\") + DELIM;"},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d t.getDescription() + DELIM;"},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d ((Deadline) t).getDue();"},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"        } else if (t instanceof Event) {"},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d \"E\" + DELIM;"},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d (t.isDone() ? \"1\" : \"0\") + DELIM;"},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d t.getDescription() + DELIM;"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":"            line +\u003d ((Event) t).getAt();"},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":"        return line;"},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":"     * Decodes given string into a {@code Task} object."},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":"     * @param line string to be decoded"},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"     * @return {@code Task} object formed from given string"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"     * @throws DataErrorException if string cannot be decoded properly"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":"    private static Task formTask(String line) throws DataErrorException {"},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":"        String[] words \u003d line.split(DELIM);"},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":139,"author":{"gitId":"ivanchongzhien"},"content":"        // type of task"},{"lineNumber":140,"author":{"gitId":"ivanchongzhien"},"content":"        String type \u003d words[0];"},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"        // done"},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"        boolean isDone \u003d \"1\".equals(words[1]);"},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":"        // job description"},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":"        String job \u003d words[2];"},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":"        Task newTask;"},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"        switch (type) {"},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"        case \"D\":"},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":"            newTask \u003d new Deadline(job, words[3]);"},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":"        case \"E\":"},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":"            newTask \u003d new Event(job, words[3]);"},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":"        case \"T\":"},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"            newTask \u003d new Todo(job);"},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":"            break;"},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"        default:"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":"            throw new DataErrorException();"},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"        newTask.setDone(isDone);"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"        "},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"        return newTask;"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":166}},{"path":"src/main/java/duke/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Task;"},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":" * Represents the entire task list used to store user tasks for this program."},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":" * Encapsulates the methods and variables complementing the task list."},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"     * Creates a new, empty task list."},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"        return taskList;"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"     * Constructs a task list with the given data."},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"     * @param tasks an array list of {@code Tasks}"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"    public void setTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"        this.taskList \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"     * Fetches the current number of tasks in the task list."},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"     * "},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"     * @return the number of tasks currently in the list"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    public int getCount() {"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"        return taskList.size();"},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds a task to the task list."},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"    public void add(Task t) {"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"        taskList.add(t);"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":"     * Returns the task at the specified index of the task list."},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"    public Task get(int index) {"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":"        return taskList.get(index);"},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"     * Removes the task at the specified index from the task list."},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"    public void remove(int index) {"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"        taskList.remove(index);"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"     * Returns true if the {@code Task} is present in the task list."},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"    public boolean contains(Task t) {"},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":"        return taskList.contains(t);"},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":72}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Represents a task of type {@code Deadline}."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" * Deadlines have an additional field {@code due} which refers to the deadline of a particular task."},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class Deadline extends Task{"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    protected String due;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    public Deadline(String inputJob, String due) {"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"        super(inputJob);"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"        this.due \u003d due;"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"    public String getDue() {"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"        return due;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    public void setDue(String due) {"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"        this.due \u003d due;"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"    /** Label: [D] */"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"    public String addLabel(String s) {"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"        String label \u003d \"[D]\";"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"        label +\u003d s;"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"        return label;"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"     * String representation of a {@code Deadline} object is suffixed with the due date/time."},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"    public String addEnd(String s){"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"        String end \u003d \" (\" + \"by: \" + this.due + \")\";"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"        return s.concat(end);"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":40}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Represents a task of type {@code Event}."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" * Events have an additional field {@code at} which refers to the time a particular task is happening."},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"    protected String at;"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    public Event(String inputJob, String at){"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"        super(inputJob);"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    public String getAt() {"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"        return at;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    public void setAt(String at) {"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"    /** Label: [E] */"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    public String addLabel(String s){"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"        String label \u003d \"[E]\";"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"        label +\u003d s;"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":"        return label;"},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"     * String representation of an {@code Event} object is suffixed with the date/time of event."},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"    public String addEnd(String s){"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"        String end \u003d \" (\" + \"at: \" + this.at + \")\";"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"        return s.concat(end);"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":40}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Represents an abstract {@code Task} object that serves as a template for more specific {@code Task} types."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"    /** Task is initially not full. Updated each time list capacity is checked. */"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    public static boolean isFull \u003d false;"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    /** Task description not guaranteed to be filled. */"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    public Task() {"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"        this.description \u003d null;"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    /** Task is initialised with input string and set to not done. */"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    public Task(String inputJob) {"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"        this.description \u003d inputJob;"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"        return description;"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"    public void setDescription(String description) {"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"    public boolean isDone() {"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"        return isDone;"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"    public void setDone(boolean done) {"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"        isDone \u003d done;"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"     * Represents a {@code Task} object as a string and prints it. The done status of a task is represented "},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"     * by a box with an \u0027X\u0027 to show completion."},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"    public void printTask() {"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"        String doneBox \u003d \"[X] \";"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"        String emptyBox \u003d \"[ ] \";"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"        String output \u003d this.isDone ? doneBox : emptyBox;"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"        output +\u003d this.description;"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":"        output \u003d addLabel(output);"},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"        output \u003d addEnd(output);"},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(output);"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"    /** "},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds suffix to string representation of {@code Task} objects to display additional information."},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"    public abstract String addEnd(String s);"},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"     * Adds prefix to string representation of {@code Task} objects to identify the type of task."},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"     * (e.g. todo is labeled with a T in a box: {@code \"[T]\"})"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"    public abstract String addLabel(String s);"},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"}"},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":""}],"authorContributionMap":{"ivanchongzhien":71}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":" * Represents a task of type {@code Todo}."},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":" * The most basic type of task, with only a task description field."},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"public class Todo extends Task{"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"    public Todo(String inputJob) {"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"        super(inputJob);"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"    /** Label: [T] */"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"    public String addLabel(String s) {"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"        String label \u003d \"[T]\";"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"        label +\u003d s;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"        return label;"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"    /** No suffix required for {@code Todo}. */"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"    public String addEnd(String s) {"},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"        return s.concat(\"\");"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":26}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"import java.io.PrintStream;"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.Duke.tasks;"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"import static duke.constants.ProgramStrings.*;"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":" * Text UI of the Duke application"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":" */"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"public class TextUi {"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"    protected final Scanner in;"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"    protected final PrintStream out;"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":20,"author":{"gitId":"ivanchongzhien"},"content":"    public TextUi() {"},{"lineNumber":21,"author":{"gitId":"ivanchongzhien"},"content":"        this(System.in, System.out);"},{"lineNumber":22,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":24,"author":{"gitId":"ivanchongzhien"},"content":"    public TextUi(InputStream in, PrintStream out) {"},{"lineNumber":25,"author":{"gitId":"ivanchongzhien"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":26,"author":{"gitId":"ivanchongzhien"},"content":"        this.out \u003d out;"},{"lineNumber":27,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":29,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays confirm message to user that a task has been added."},{"lineNumber":31,"author":{"gitId":"ivanchongzhien"},"content":"     * The added task is printed along with the number of tasks currently in the list."},{"lineNumber":32,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ivanchongzhien"},"content":"    public void printTaskAdded(Task task) {"},{"lineNumber":34,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(PROMPT_TASK_ADDED);"},{"lineNumber":35,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(INDENT);"},{"lineNumber":36,"author":{"gitId":"ivanchongzhien"},"content":"        task.printTask();"},{"lineNumber":37,"author":{"gitId":"ivanchongzhien"},"content":"        printNumTasksLeft();"},{"lineNumber":38,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":39,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":41,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays confirm message to user that a task has been deleted."},{"lineNumber":43,"author":{"gitId":"ivanchongzhien"},"content":"     * The deleted task is printed along with the number of remaining tasks in the list."},{"lineNumber":44,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ivanchongzhien"},"content":"    public void printTaskDeleted(int index) {"},{"lineNumber":46,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"Task \" + (index + 1) + \" has been deleted:\");"},{"lineNumber":47,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(INDENT);"},{"lineNumber":48,"author":{"gitId":"ivanchongzhien"},"content":"        tasks.get(index).printTask();"},{"lineNumber":49,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"Tasks remaining: \" + (tasks.getCount() - 1) + \"\\n\");"},{"lineNumber":50,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":52,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints the task object in the list format with numbering."},{"lineNumber":54,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"ivanchongzhien"},"content":"    public void printTaskAsList(int numbering, Task task) {"},{"lineNumber":56,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(numbering + \". \");"},{"lineNumber":57,"author":{"gitId":"ivanchongzhien"},"content":"        task.printTask();"},{"lineNumber":58,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":60,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints the number of tasks currently in the task list."},{"lineNumber":62,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"ivanchongzhien"},"content":"    private static void printNumTasksLeft() {"},{"lineNumber":64,"author":{"gitId":"ivanchongzhien"},"content":"        String output \u003d Integer.toString(tasks.getCount());"},{"lineNumber":65,"author":{"gitId":"ivanchongzhien"},"content":"        // Check for plural or singular form"},{"lineNumber":66,"author":{"gitId":"ivanchongzhien"},"content":"        output +\u003d (tasks.getCount() \u003d\u003d 1) ? \" task\" : \" tasks\";"},{"lineNumber":67,"author":{"gitId":"ivanchongzhien"},"content":"        output +\u003d \" in the list\";"},{"lineNumber":68,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":69,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(output);"},{"lineNumber":70,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":72,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays header for listing search results."},{"lineNumber":74,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"ivanchongzhien"},"content":"    public void printSearchResultsHeader(String keyword) {"},{"lineNumber":76,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"SEARCH RESULTS FOR \\\"\" + keyword + \"\\\":\");"},{"lineNumber":77,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":79,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when entered input is not recognised by the program."},{"lineNumber":81,"author":{"gitId":"ivanchongzhien"},"content":"     * User\u0027s invalid input is echoed back to the user along with a prompt to utilise the {@code help} command."},{"lineNumber":82,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"ivanchongzhien"},"content":"    public void printUnknownCommandWarning(String input) {"},{"lineNumber":84,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"No idea what \\\"\" + input + \"\\\" means!\");"},{"lineNumber":85,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(ENTER_HELP_FOR_LIST_OF_COMMANDS);"},{"lineNumber":86,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":88,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when entered input is recognised but it either does not follow the required format"},{"lineNumber":90,"author":{"gitId":"ivanchongzhien"},"content":"     * or lacks required parameters."},{"lineNumber":91,"author":{"gitId":"ivanchongzhien"},"content":"     * User\u0027s invalid input is echoed back to the user along with a prompt to utilise the {@code help} command."},{"lineNumber":92,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"ivanchongzhien"},"content":"    public void printInvalidInputWarning(String input) {"},{"lineNumber":94,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"Wrong format: \\\"\" + input + \"\\\" !\");"},{"lineNumber":95,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(ENTER_HELP_FOR_LIST_OF_COMMANDS);"},{"lineNumber":96,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":98,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when user attempts to view or manipulate tasks when task list is empty."},{"lineNumber":100,"author":{"gitId":"ivanchongzhien"},"content":"     * User is also prompted to utilise the {@code help} command."},{"lineNumber":101,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"ivanchongzhien"},"content":"    public void printNoTaskWarning() {"},{"lineNumber":103,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"You don\u0027t have any tasks ! Enter a task\");"},{"lineNumber":104,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(ENTER_HELP_FOR_LIST_OF_COMMANDS);"},{"lineNumber":105,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":107,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when user enters an invalid index for certain commands."},{"lineNumber":109,"author":{"gitId":"ivanchongzhien"},"content":"     * User is shown a different warning depending on whether the entered index is too small or too large."},{"lineNumber":110,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"ivanchongzhien"},"content":"    public void printInvalidIndexWarning(int jobNumber) {"},{"lineNumber":112,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(jobNumber \u003c\u003d 0 ? JOB_NUMBER_TOO_SMALL : JOB_NUMBER_TOO_BIG);"},{"lineNumber":113,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(ENTER_HELP_FOR_LIST_OF_COMMANDS);"},{"lineNumber":114,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":116,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when list is full and user attempts to add new commands."},{"lineNumber":118,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"ivanchongzhien"},"content":"    public void printListFullWarning() {"},{"lineNumber":120,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(LIST_FULL_WARNING);"},{"lineNumber":121,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(LIST_FULL_WARNING_2);"},{"lineNumber":122,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(PROMPT_ENTER_BYE_TO_EXIT);"},{"lineNumber":123,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":125,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays prompt to user when {@code find} query returns no results."},{"lineNumber":127,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"ivanchongzhien"},"content":"    public void printNoMatchWarning(String keyword) {"},{"lineNumber":129,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(NO_MATCH_WARNING);"},{"lineNumber":130,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(INDENT + keyword + \u0027\\n\u0027);"},{"lineNumber":131,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":133,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning when encounter error reading from data file. Includes line where error occurred for easy"},{"lineNumber":135,"author":{"gitId":"ivanchongzhien"},"content":"     * troubleshooting."},{"lineNumber":136,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"ivanchongzhien"},"content":"    public void printDataErrorWarning(int line) {"},{"lineNumber":138,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"Error forming task. Check formatting at line \" + line + \" in data file!\");"},{"lineNumber":139,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println();"},{"lineNumber":140,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":142,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays warning to user when entered date format is wrong."},{"lineNumber":144,"author":{"gitId":"ivanchongzhien"},"content":"     * User is prompted to utilise {@code help} command."},{"lineNumber":145,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"ivanchongzhien"},"content":"    public void printInvalidDateFormatWarning() {"},{"lineNumber":147,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(INVALID_DATE_FORMAT_WARNING);"},{"lineNumber":148,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(ENTER_HELP_FOR_LIST_OF_COMMANDS);"},{"lineNumber":149,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"ivanchongzhien"},"content":"    "},{"lineNumber":151,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"ivanchongzhien"},"content":"     * Prints a manual for the user specifying every command available in Duke along with the required parameters and"},{"lineNumber":153,"author":{"gitId":"ivanchongzhien"},"content":"     * formatting."},{"lineNumber":154,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"ivanchongzhien"},"content":"    public void printHelp() {"},{"lineNumber":156,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(SHORT_LINE);"},{"lineNumber":157,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(\"COMMAND LIST:\");"},{"lineNumber":158,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(SHORT_LINE);"},{"lineNumber":159,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(TODO_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":160,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(DEADLINE_COMMAND_FORMAT);"},{"lineNumber":161,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(DATE_FORMAT + \u0027\\n\u0027);"},{"lineNumber":162,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(EVENT_COMMAND_FORMAT);"},{"lineNumber":163,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(DATE_FORMAT + \u0027\\n\u0027);"},{"lineNumber":164,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(LIST_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":165,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(DONE_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":166,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(UNDO_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":167,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(DELETE_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":168,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(FIND_COMMAND_FORMAT + \u0027\\n\u0027);"},{"lineNumber":169,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(PROMPT_ENTER_BYE_TO_EXIT);"},{"lineNumber":170,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(SHORT_LINE + \u0027\\n\u0027);"},{"lineNumber":171,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":173,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays start message."},{"lineNumber":175,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"ivanchongzhien"},"content":"    public void printHello() {"},{"lineNumber":177,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(STRAIGHT_LINE);"},{"lineNumber":178,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(ALLO_MESSAGE);"},{"lineNumber":179,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(STRAIGHT_LINE);"},{"lineNumber":180,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":182,"author":{"gitId":"ivanchongzhien"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"ivanchongzhien"},"content":"     * Displays exit message."},{"lineNumber":184,"author":{"gitId":"ivanchongzhien"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"ivanchongzhien"},"content":"    public void printBye() {"},{"lineNumber":186,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(STRAIGHT_LINE);"},{"lineNumber":187,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.print(BYE_MESSAGE);"},{"lineNumber":188,"author":{"gitId":"ivanchongzhien"},"content":"        System.out.println(STRAIGHT_LINE);"},{"lineNumber":189,"author":{"gitId":"ivanchongzhien"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"ivanchongzhien"},"content":"}"}],"authorContributionMap":{"ivanchongzhien":190}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ivanchongzhien"},"content":"some work"},{"lineNumber":2,"author":{"gitId":"ivanchongzhien"},"content":"todo some work"},{"lineNumber":3,"author":{"gitId":"ivanchongzhien"},"content":"deadline some work /by some time"},{"lineNumber":4,"author":{"gitId":"ivanchongzhien"},"content":"deadline wrong"},{"lineNumber":5,"author":{"gitId":"ivanchongzhien"},"content":"event some work /at some time"},{"lineNumber":6,"author":{"gitId":"ivanchongzhien"},"content":"event wrong"},{"lineNumber":7,"author":{"gitId":"ivanchongzhien"},"content":"list"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"done -1"},{"lineNumber":10,"author":{"gitId":"ivanchongzhien"},"content":"done 10"},{"lineNumber":11,"author":{"gitId":"ivanchongzhien"},"content":"done abc"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"list"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":"delete 2"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":"list"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":"deadline quiz homework /by 24/3/2021"},{"lineNumber":16,"author":{"gitId":"ivanchongzhien"},"content":"find quiz"},{"lineNumber":17,"author":{"gitId":"ivanchongzhien"},"content":"find"},{"lineNumber":18,"author":{"gitId":"ivanchongzhien"},"content":"help"},{"lineNumber":19,"author":{"gitId":"ivanchongzhien"},"content":"bye"}],"authorContributionMap":{"ivanchongzhien":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"ivanchongzhien"},"content":"del /q ..\\bin\\*"},{"lineNumber":9,"author":{"gitId":"ivanchongzhien"},"content":"del /q \"duke_data.txt\""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"ivanchongzhien"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\constants\\*.java^"},{"lineNumber":13,"author":{"gitId":"ivanchongzhien"},"content":" ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\inputhandlers\\*.java ..\\src\\main\\java\\duke\\storage\\*.java^"},{"lineNumber":14,"author":{"gitId":"ivanchongzhien"},"content":" ..\\src\\main\\java\\duke\\tasks\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"},{"lineNumber":15,"author":{"gitId":"ivanchongzhien"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"ivanchongzhien"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"ivanchongzhien":7,"-":19}}]
