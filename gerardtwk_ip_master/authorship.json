[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"By: `Gerard Tan Wei Kiat` Since: `March 2021`"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"- [Duke User Guide](#duke-user-guide)"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"    * [1. Introduction](#1-introduction)"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"    * [2. Quick Start](#2-quick-start)"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    * [3. Features](#3-features)"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"        + [3.1 Adding a Todo task: `todo`](#31-adding-a-todo-task-todo)"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"        + [3.2 Adding a Deadline task: `deadline`](#32-adding-a-deadline-task-deadline)"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"        + [3.3 Adding an Event task: `event`](#33-adding-an-event-task-event)"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"        + [3.4 Listing all tasks: `list`](#34-listing-all-tasks-list)"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"        + [3.5 Completing a task: `done`](#35-completing-a-task-done)"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"        + [3.6 Deleting a task: `delete`](#36-deleting-a-task-delete)"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"        + [3.7 Searching tasks: `find`](#37-searching-tasks-find)"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"        + [3.8 Exiting Duke: `bye`](#38-exiting-duke-bye)"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"        + [3.9 Saving all tasks](#39-saving-all-tasks)"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    * [4. Frequently Asked Questions (FAQ)](#4-frequently-asked-questions-faq)"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    * [5. Command Summary](#5-command-summary)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"## 1. Introduction"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"Duke is a command-line style personal assistant application that aims to help you in managing and tracking"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"your daily tasks."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"## 2. Quick Start"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"Prerequisites: JDK 11"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"1. Ensure that you have `Java 11` installed on your computer."},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"2. Download the latest `ip.jar` from [here](https://github.com/gerardtwk/ip/releases/tag/A-Release)."},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"3. Move `ip.jar` into a folder of your choice. This will be the **installation directory** of `ip.jar`."},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"4. Launch a `command prompt` and `cd` to the installation directory of `ip.jar`."},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"5. To run `Duke`, run the command `java -jar ip.jar` and Duke will greet you with the following welcome message:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"![Welcome message of Duke](DukeWelcomeMsg.jpg)"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"## 3. Features"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"**NOTE:** The commands listed below must be entered as **lowercase** letters and **must not contain \u0027|\u0027 as input.**"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"### 3.1 Adding a Todo task: `todo`"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"Adds a Todo task to the existing list of tasks maintained by Duke."},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"Format: `todo \u003ctask_description\u003e`"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"Example: `todo clear the trash`"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"![Adding a Todo task](AddTodoTask.jpg)"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"### 3.2 Adding a Deadline task: `deadline`"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"Adds a Deadline task to the existing list of tasks maintained by Duke."},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"Format: `deadline \u003ctask_description\u003e /by \u003cdue_date\u003e`"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"Example: `deadline submit assignment /by 15th March 2021 4pm`"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"![Adding a Deadline task](AddDeadlineTask.jpg)"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"### 3.3 Adding an Event task: `event`"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"Adds an Event task to the existing list of tasks maintained by Duke."},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":"Format: `event \u003ctask_description\u003e /at \u003ctimeframe\u003e`"},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"Example: `event birthday party /at 15th June 2021 2pm to 4pm`"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":"![Adding an Event task](AddEventTask.jpg)"},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"### 3.4 Listing all tasks: `list`"},{"lineNumber":78,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"Displays a list of all tasks maintained by Duke."},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":"Format: `list`"},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":84,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":85,"author":{"gitId":"gerardtwk"},"content":"![Listing all tasks](ListAllTasks.jpg)"},{"lineNumber":86,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":87,"author":{"gitId":"gerardtwk"},"content":"### 3.5 Completing a task: `done`"},{"lineNumber":88,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":89,"author":{"gitId":"gerardtwk"},"content":"Marks the specified task as completed."},{"lineNumber":90,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":91,"author":{"gitId":"gerardtwk"},"content":"Format: `done \u003ctask_number\u003e`"},{"lineNumber":92,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":93,"author":{"gitId":"gerardtwk"},"content":"Example: `done 1`"},{"lineNumber":94,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":95,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":96,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":97,"author":{"gitId":"gerardtwk"},"content":"![Completing a task](CompletedTask.jpg)"},{"lineNumber":98,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":99,"author":{"gitId":"gerardtwk"},"content":"### 3.6 Deleting a task: `delete`"},{"lineNumber":100,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":101,"author":{"gitId":"gerardtwk"},"content":"Deletes the specified task from the list of tasks maintained by Duke."},{"lineNumber":102,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":103,"author":{"gitId":"gerardtwk"},"content":"Format: `delete \u003ctask_number\u003e`"},{"lineNumber":104,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":105,"author":{"gitId":"gerardtwk"},"content":"Example: `delete 1`"},{"lineNumber":106,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":107,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":108,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":109,"author":{"gitId":"gerardtwk"},"content":"![Deleting a task](DeleteTask.jpg)"},{"lineNumber":110,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":111,"author":{"gitId":"gerardtwk"},"content":"### 3.7 Searching tasks: `find`"},{"lineNumber":112,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":113,"author":{"gitId":"gerardtwk"},"content":"Search all tasks that contains the provided keyword."},{"lineNumber":114,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":115,"author":{"gitId":"gerardtwk"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":116,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":117,"author":{"gitId":"gerardtwk"},"content":"Example: `find 4pm`"},{"lineNumber":118,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":119,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":120,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":121,"author":{"gitId":"gerardtwk"},"content":"![Searching Tasks](SearchingTasks.jpg)"},{"lineNumber":122,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":123,"author":{"gitId":"gerardtwk"},"content":"### 3.8 Exiting Duke: `bye`"},{"lineNumber":124,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":125,"author":{"gitId":"gerardtwk"},"content":"Exits the Duke program."},{"lineNumber":126,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":127,"author":{"gitId":"gerardtwk"},"content":"Format: `bye`"},{"lineNumber":128,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":129,"author":{"gitId":"gerardtwk"},"content":"*Note: Even though the usage of `CTRL+C` or `CTRL+Z` will execute the `bye` command, but **please do not do it** as it "},{"lineNumber":130,"author":{"gitId":"gerardtwk"},"content":"is not guaranteed that your data will be saved properly.*"},{"lineNumber":131,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":132,"author":{"gitId":"gerardtwk"},"content":"Expected Output:"},{"lineNumber":133,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":134,"author":{"gitId":"gerardtwk"},"content":"![Exit message of Duke](ExitingDuke.jpg)"},{"lineNumber":135,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":136,"author":{"gitId":"gerardtwk"},"content":"### 3.9 Saving all tasks"},{"lineNumber":137,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":138,"author":{"gitId":"gerardtwk"},"content":"The list of tasks maintained by Duke are automatically saved into `saveFile.txt` upon the successful execution of a "},{"lineNumber":139,"author":{"gitId":"gerardtwk"},"content":"`todo`, `deadline`, `event`, `done`, `delete` or `bye` command. "},{"lineNumber":140,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":141,"author":{"gitId":"gerardtwk"},"content":"Tasks saved in `saveFile.txt` are automatically loaded whenever Duke starts."},{"lineNumber":142,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":143,"author":{"gitId":"gerardtwk"},"content":"## 4. Frequently Asked Questions (FAQ)"},{"lineNumber":144,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":145,"author":{"gitId":"gerardtwk"},"content":"**Q1**: Where is `saveFile.txt` located after I close the program?"},{"lineNumber":146,"author":{"gitId":"gerardtwk"},"content":"\u003e `saveFile.txt` is located in the installation directory of Duke. "},{"lineNumber":147,"author":{"gitId":"gerardtwk"},"content":"\u003e  If it is not located there, Duke will automatically create it for you in the installation directory."},{"lineNumber":148,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":149,"author":{"gitId":"gerardtwk"},"content":"**Q2**: How can I transfer my saved tasks information to another computer?"},{"lineNumber":150,"author":{"gitId":"gerardtwk"},"content":"\u003e Run Duke on the other computer and overwrite the empty `saveFile.txt` created, with the `saveFile.txt` that"},{"lineNumber":151,"author":{"gitId":"gerardtwk"},"content":"\u003e contains the data of your previous Duke usage."},{"lineNumber":152,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":153,"author":{"gitId":"gerardtwk"},"content":"## 5. Command Summary"},{"lineNumber":154,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":155,"author":{"gitId":"gerardtwk"},"content":"Command | Format | Example |"},{"lineNumber":156,"author":{"gitId":"gerardtwk"},"content":"------- | ------- | ------- | "},{"lineNumber":157,"author":{"gitId":"gerardtwk"},"content":"todo | `todo \u003ctask_description\u003e` | `todo clear the trash` |"},{"lineNumber":158,"author":{"gitId":"gerardtwk"},"content":"deadline | `deadline \u003ctask_description\u003e /by \u003cdue_date\u003e` | `deadline submit assignment /by 15th March 2021 4pm` |"},{"lineNumber":159,"author":{"gitId":"gerardtwk"},"content":"event | `event \u003ctask_description\u003e /at \u003ctimeframe\u003e` | `event birthday party /at 15th June 2021 2pm to 4pm` |"},{"lineNumber":160,"author":{"gitId":"gerardtwk"},"content":"list | `list` | - |"},{"lineNumber":161,"author":{"gitId":"gerardtwk"},"content":"done | `done \u003ctask_number\u003e` | `done 1` |"},{"lineNumber":162,"author":{"gitId":"gerardtwk"},"content":"delete | `delete \u003ctask_number\u003e` | `delete 1` |"},{"lineNumber":163,"author":{"gitId":"gerardtwk"},"content":"find | `find \u003ckeyword\u003e` | `find 4pm` |"},{"lineNumber":164,"author":{"gitId":"gerardtwk"},"content":"bye | `bye` | - |"}],"authorContributionMap":{"gerardtwk":155,"-":9}},{"path":"saveFile.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"T | 1 | hello"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"D | 1 | deadline | 8pm"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"E | 1 | event | 10pm"}],"authorContributionMap":{"gerardtwk":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"    private static final String DEADLINE_SYMBOL \u003d \"D\";"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"    private String by;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"        this.by \u003d by;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"     * Get the current task instance\u0027s output String format, to be used for saving it into the disk."},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"     * This method overrides the getSaveFormatString() implementation in Task class."},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representing the save file format of the current task instance."},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    public String getSaveFormatString() {"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"        return DEADLINE_SYMBOL + FILE_DELIMITER_WITH_SPACE + super.getSaveFormatString() +"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"                FILE_DELIMITER_WITH_SPACE + this.by;"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"     * Get a String representation of the current task instance, to be used for displaying"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"     * task information of the current task instance to the user. This method overrides the"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"     * toString() implementation in Task class."},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representation of the current task instance."},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"        return String.format(\"[%s]%s (by: %s)\", DEADLINE_SYMBOL, super.toString(), this.by);"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":33}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":" * Main class of Duke."},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":" */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"    private static final String SAVE_FILE_PATH \u003d \"saveFile.txt\";"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"    private Ui ui;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"    private Storage storage;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    private TaskList tasks;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    private Parser parser;"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"    public Duke(String filePath) {"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"        ui \u003d new Ui();"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"        storage \u003d new Storage(ui, filePath);"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"        tasks \u003d new TaskList(storage.loadStoredTasksData());"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"        ui.setTaskList(tasks);"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"        storage.setTaskList(tasks);"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"        parser \u003d new Parser(ui, storage, tasks);"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"     * Runs the overall flow of Duke."},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"    private void run() {"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"        ui.printWelcomeMsg();"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"        String command;"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"        boolean isExit;"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"        do {"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"            command \u003d ui.getCommandFromUser();"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"            parser.handleCommand(command);"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"            isExit \u003d parser.isExit();"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"        } while (!isExit);"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"        ui.closeScanner();"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"     * Main entry point of the application."},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"        new Duke(SAVE_FILE_PATH).run();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerardtwk":38,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"    public DukeException(String errorMsg) {"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"        super(errorMsg);"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"    private static final String EVENT_SYMBOL \u003d \"E\";"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"    private String at;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"    public Event(String description, String at) {"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"        this.at \u003d at;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"     * Get the current task instance\u0027s output String format, to be used for saving it into the disk."},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"     * This method overrides the getSaveFormatString() implementation in Task class."},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representing the save file format of the current task instance."},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    public String getSaveFormatString() {"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"        return EVENT_SYMBOL + FILE_DELIMITER_WITH_SPACE + super.getSaveFormatString() +"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"                FILE_DELIMITER_WITH_SPACE + this.at;"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"     * Get a String representation of the current task instance, to be used for displaying"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"     * task information of the current task instance to the user. This method overrides the"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"     * toString() implementation in Task class."},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representation of the current task instance."},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"        return String.format(\"[%s]%s (at: %s)\", EVENT_SYMBOL, super.toString(), this.at);"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":33}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":" * Handles parsing of the user input and execution of the respective commands requested by user."},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":" */"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"    private static final String ILLEGAL_CHAR_STR \u003d \"|\";"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"    private static final String TODO_CMD \u003d \"todo\";"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"    private static final String DEADLINE_CMD \u003d \"deadline\";"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    private static final String EVENT_CMD \u003d \"event\";"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    private static final String FIND_CMD \u003d \"find\";"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"    private static final String LIST_CMD \u003d \"list\";"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"    private static final String DONE_CMD \u003d \"done\";"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"    private static final String DELETE_CMD \u003d \"delete\";"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"    private static final String BYE_CMD \u003d \"bye\";"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"    private static final String TODO_CMD_VALID_START_STR \u003d \"todo \";"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"    private static final String DEADLINE_CMD_VALID_START_STR \u003d \"deadline \";"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    private static final String EVENT_CMD_VALID_START_STR \u003d \"event \";"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    private static final String FIND_CMD_VALID_START_STR \u003d \"find \";"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    private static final String DONE_CMD_VALID_START_STR \u003d \"done \";"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    private static final String DELETE_CMD_VALID_START_STR \u003d \"delete \";"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    private static final String BY_VALID_STR \u003d \" /by \";"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    private static final String AT_VALID_STR \u003d \" /at \";"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    private static final int INVALID_INDEX \u003d -1;"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"    private static final int TODO_CMD_DESCRIPTION_INDEX \u003d 5;"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"    private static final int DEADLINE_CMD_DESCRIPTION_INDEX \u003d 0;"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"    private static final int EVENT_CMD_DESCRIPTION_INDEX \u003d 0;"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"    private static final int FIND_CMD_KEYWORD_INDEX \u003d 5;"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"    private static final int DEADLINE_CMD_REQUEST_INDEX \u003d 9;"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"    private static final int EVENT_CMD_REQUEST_INDEX \u003d 6;"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    private static final int DONE_CMD_TASK_NUM_INDEX \u003d 5;"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"    private static final int DELETE_CMD_TASK_NUM_INDEX \u003d 7;"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    private static final int NUM_CHARS_TO_BY_CONTENT_INDEX \u003d 4;"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"    private static final int NUM_CHARS_TO_AT_CONTENT_INDEX \u003d 4;"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    private Ui ui;"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"    private Storage storage;"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"    private TaskList tasks;"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"    private boolean isExit;"},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"    public Parser(Ui ui, Storage storage, TaskList tasks) {"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"        this.ui \u003d ui;"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"        this.storage \u003d storage;"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"        this.isExit \u003d false;"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"     * Parses the command entered by the user and execute the respective command method."},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"     * @param command command entered by user."},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"    public void handleCommand(String command) {"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"            if (command.contains(ILLEGAL_CHAR_STR)) {"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":"                illegalCharStrInCommand();"},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(TODO_CMD)) {"},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":"                storeTodoTask(command);"},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(DEADLINE_CMD)) {"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":"                storeDeadlineTask(command);"},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(EVENT_CMD)) {"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":"                storeEventTask(command);"},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(FIND_CMD)) {"},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"                findTasks(command);"},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.equals(LIST_CMD)) {"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"                displayStoredTasks();"},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(DONE_CMD)) {"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"                markTaskAsDone(command);"},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.startsWith(DELETE_CMD)) {"},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":"                deleteTask(command);"},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":"            } else if (command.equals(BYE_CMD)) {"},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":"                exitMsg();"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":"                invalidCommand();"},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":"            commandErrorMsg(e);"},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"    private void illegalCharStrInCommand() throws DukeException {"},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":"        throw new DukeException(\"OOPS!!! The character \u0027|\u0027 is not allowed as input! :-(\");"},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"    private void storeTodoTask(String command) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(TODO_CMD)) {"},{"lineNumber":85,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":86,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":88,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(TODO_CMD_VALID_START_STR)) {"},{"lineNumber":89,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for todo command is: \u0027todo task_description\u0027\");"},{"lineNumber":90,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":92,"author":{"gitId":"gerardtwk"},"content":"        String description \u003d command.substring(TODO_CMD_DESCRIPTION_INDEX).strip();"},{"lineNumber":93,"author":{"gitId":"gerardtwk"},"content":"        storeTask(new Todo(description));"},{"lineNumber":94,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":96,"author":{"gitId":"gerardtwk"},"content":"    private void storeDeadlineTask(String command) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(DEADLINE_CMD)) {"},{"lineNumber":98,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":99,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":101,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(DEADLINE_CMD_VALID_START_STR)) {"},{"lineNumber":102,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for deadline command is: \" +"},{"lineNumber":103,"author":{"gitId":"gerardtwk"},"content":"                    \"\u0027deadline task_description /by due_date\u0027\");"},{"lineNumber":104,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":106,"author":{"gitId":"gerardtwk"},"content":"        String request \u003d command.substring(DEADLINE_CMD_REQUEST_INDEX).strip();"},{"lineNumber":107,"author":{"gitId":"gerardtwk"},"content":"        int indexOfBy \u003d request.indexOf(BY_VALID_STR);"},{"lineNumber":108,"author":{"gitId":"gerardtwk"},"content":"        if (indexOfBy \u003d\u003d INVALID_INDEX) {"},{"lineNumber":109,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for deadline command is: \" +"},{"lineNumber":110,"author":{"gitId":"gerardtwk"},"content":"                    \"\u0027deadline task_description /by due_date\u0027\");"},{"lineNumber":111,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":113,"author":{"gitId":"gerardtwk"},"content":"        String description \u003d request.substring(DEADLINE_CMD_DESCRIPTION_INDEX, indexOfBy).strip();"},{"lineNumber":114,"author":{"gitId":"gerardtwk"},"content":"        String by \u003d request.substring(indexOfBy + NUM_CHARS_TO_BY_CONTENT_INDEX).strip();"},{"lineNumber":115,"author":{"gitId":"gerardtwk"},"content":"        storeTask(new Deadline(description, by));"},{"lineNumber":116,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":118,"author":{"gitId":"gerardtwk"},"content":"    private void storeEventTask(String command) throws DukeException {"},{"lineNumber":119,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(EVENT_CMD)) {"},{"lineNumber":120,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":121,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":123,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(EVENT_CMD_VALID_START_STR)) {"},{"lineNumber":124,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for event command is: \" +"},{"lineNumber":125,"author":{"gitId":"gerardtwk"},"content":"                    \"\u0027event task_description /at timeframe\u0027\");"},{"lineNumber":126,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":128,"author":{"gitId":"gerardtwk"},"content":"        String request \u003d command.substring(EVENT_CMD_REQUEST_INDEX).strip();"},{"lineNumber":129,"author":{"gitId":"gerardtwk"},"content":"        int indexOfAt \u003d request.indexOf(AT_VALID_STR);"},{"lineNumber":130,"author":{"gitId":"gerardtwk"},"content":"        if (indexOfAt \u003d\u003d INVALID_INDEX) {"},{"lineNumber":131,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for event command is: \" +"},{"lineNumber":132,"author":{"gitId":"gerardtwk"},"content":"                    \"\u0027event task_description /at timeframe\u0027\");"},{"lineNumber":133,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":135,"author":{"gitId":"gerardtwk"},"content":"        String description \u003d request.substring(EVENT_CMD_DESCRIPTION_INDEX, indexOfAt).strip();"},{"lineNumber":136,"author":{"gitId":"gerardtwk"},"content":"        String at \u003d request.substring(indexOfAt + NUM_CHARS_TO_AT_CONTENT_INDEX).strip();"},{"lineNumber":137,"author":{"gitId":"gerardtwk"},"content":"        storeTask(new Event(description, at));"},{"lineNumber":138,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":140,"author":{"gitId":"gerardtwk"},"content":"    private void storeTask(Task taskToStore) {"},{"lineNumber":141,"author":{"gitId":"gerardtwk"},"content":"        tasks.addTask(taskToStore);"},{"lineNumber":142,"author":{"gitId":"gerardtwk"},"content":"        storage.saveStoredTasksData();"},{"lineNumber":143,"author":{"gitId":"gerardtwk"},"content":"        ui.printStoreTaskMsg(taskToStore, tasks.getTaskCount());"},{"lineNumber":144,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":146,"author":{"gitId":"gerardtwk"},"content":"    private void findTasks(String command) throws DukeException {"},{"lineNumber":147,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(FIND_CMD)) {"},{"lineNumber":148,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The keyword for a find command cannot be empty.\");"},{"lineNumber":149,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":151,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(FIND_CMD_VALID_START_STR)) {"},{"lineNumber":152,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for find command is: \u0027find keyword\u0027\");"},{"lineNumber":153,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":155,"author":{"gitId":"gerardtwk"},"content":"        String keyword \u003d command.substring(FIND_CMD_KEYWORD_INDEX).strip();"},{"lineNumber":156,"author":{"gitId":"gerardtwk"},"content":"        TaskList tasksFound \u003d tasks.findTasksByKeyword(keyword);"},{"lineNumber":157,"author":{"gitId":"gerardtwk"},"content":"        ui.printTasksFound(tasksFound);"},{"lineNumber":158,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":160,"author":{"gitId":"gerardtwk"},"content":"    private void displayStoredTasks() {"},{"lineNumber":161,"author":{"gitId":"gerardtwk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":162,"author":{"gitId":"gerardtwk"},"content":"            ui.printEmptyTaskListMsg();"},{"lineNumber":163,"author":{"gitId":"gerardtwk"},"content":"            return;"},{"lineNumber":164,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"gerardtwk"},"content":"        ui.printStoredTasks();"},{"lineNumber":166,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":168,"author":{"gitId":"gerardtwk"},"content":"    private void markTaskAsDone(String command) throws DukeException {"},{"lineNumber":169,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(DONE_CMD)) {"},{"lineNumber":170,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The task number of a done command cannot be empty.\");"},{"lineNumber":171,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":173,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(DONE_CMD_VALID_START_STR)) {"},{"lineNumber":174,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for done command is: \u0027done task_number\u0027\");"},{"lineNumber":175,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":177,"author":{"gitId":"gerardtwk"},"content":"        String taskNumber \u003d command.substring(DONE_CMD_TASK_NUM_INDEX).strip();"},{"lineNumber":178,"author":{"gitId":"gerardtwk"},"content":"        int indexOfTaskToMark;"},{"lineNumber":179,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"gerardtwk"},"content":"            indexOfTaskToMark \u003d Integer.parseInt(taskNumber) - 1;"},{"lineNumber":181,"author":{"gitId":"gerardtwk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":182,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for done command is: \u0027done task_number\u0027\");"},{"lineNumber":183,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":185,"author":{"gitId":"gerardtwk"},"content":"        boolean isValidTaskIndex \u003d (indexOfTaskToMark \u003e\u003d 0) \u0026\u0026 (indexOfTaskToMark \u003c tasks.getTaskCount());"},{"lineNumber":186,"author":{"gitId":"gerardtwk"},"content":"        if (!isValidTaskIndex) {"},{"lineNumber":187,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! You entered an invalid task number!\");"},{"lineNumber":188,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"gerardtwk"},"content":"        Task taskToMark \u003d tasks.getTaskAt(indexOfTaskToMark);"},{"lineNumber":190,"author":{"gitId":"gerardtwk"},"content":"        taskToMark.markAsDone();"},{"lineNumber":191,"author":{"gitId":"gerardtwk"},"content":"        storage.saveStoredTasksData();"},{"lineNumber":192,"author":{"gitId":"gerardtwk"},"content":"        ui.printMarkTaskAsDoneMsg(taskToMark);"},{"lineNumber":193,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":195,"author":{"gitId":"gerardtwk"},"content":"    private void deleteTask(String command) throws DukeException {"},{"lineNumber":196,"author":{"gitId":"gerardtwk"},"content":"        if (command.equals(DELETE_CMD)) {"},{"lineNumber":197,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The task number of a delete command cannot be empty.\");"},{"lineNumber":198,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":200,"author":{"gitId":"gerardtwk"},"content":"        if (!command.startsWith(DELETE_CMD_VALID_START_STR)) {"},{"lineNumber":201,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for delete command is: \u0027delete task_number\u0027\");"},{"lineNumber":202,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":204,"author":{"gitId":"gerardtwk"},"content":"        String taskNumber \u003d command.substring(DELETE_CMD_TASK_NUM_INDEX).strip();"},{"lineNumber":205,"author":{"gitId":"gerardtwk"},"content":"        int indexOfTaskToDelete;"},{"lineNumber":206,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":207,"author":{"gitId":"gerardtwk"},"content":"            indexOfTaskToDelete \u003d Integer.parseInt(taskNumber) - 1;"},{"lineNumber":208,"author":{"gitId":"gerardtwk"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":209,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! The correct syntax for delete command is: \u0027delete task_number\u0027\");"},{"lineNumber":210,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":212,"author":{"gitId":"gerardtwk"},"content":"        boolean isValidTaskIndex \u003d (indexOfTaskToDelete \u003e\u003d 0) \u0026\u0026 (indexOfTaskToDelete \u003c tasks.getTaskCount());"},{"lineNumber":213,"author":{"gitId":"gerardtwk"},"content":"        if (!isValidTaskIndex) {"},{"lineNumber":214,"author":{"gitId":"gerardtwk"},"content":"            throw new DukeException(\"OOPS!!! You entered an invalid task number!\");"},{"lineNumber":215,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"gerardtwk"},"content":"        Task deletedTask \u003d tasks.deleteTaskAt(indexOfTaskToDelete);"},{"lineNumber":217,"author":{"gitId":"gerardtwk"},"content":"        storage.saveStoredTasksData();"},{"lineNumber":218,"author":{"gitId":"gerardtwk"},"content":"        ui.printDeleteTaskMsg(deletedTask);"},{"lineNumber":219,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":221,"author":{"gitId":"gerardtwk"},"content":"    private void exitMsg() {"},{"lineNumber":222,"author":{"gitId":"gerardtwk"},"content":"        isExit \u003d true;"},{"lineNumber":223,"author":{"gitId":"gerardtwk"},"content":"        ui.printExitMsg();"},{"lineNumber":224,"author":{"gitId":"gerardtwk"},"content":"        storage.saveStoredTasksData();"},{"lineNumber":225,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":227,"author":{"gitId":"gerardtwk"},"content":"    private void invalidCommand() throws DukeException {"},{"lineNumber":228,"author":{"gitId":"gerardtwk"},"content":"        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":229,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":231,"author":{"gitId":"gerardtwk"},"content":"    private void commandErrorMsg(DukeException e) {"},{"lineNumber":232,"author":{"gitId":"gerardtwk"},"content":"        ui.printCommandErrorMsg(e.getMessage());"},{"lineNumber":233,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":235,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":236,"author":{"gitId":"gerardtwk"},"content":"     * Indicates if the user wants to terminate the program."},{"lineNumber":237,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":238,"author":{"gitId":"gerardtwk"},"content":"     * @return a boolean indicating if the user had entered either a \"bye\" command or a CTRL+C or a CTRL+Z"},{"lineNumber":239,"author":{"gitId":"gerardtwk"},"content":"     * to terminate the program."},{"lineNumber":240,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"gerardtwk"},"content":"    public boolean isExit() {"},{"lineNumber":242,"author":{"gitId":"gerardtwk"},"content":"        return isExit;"},{"lineNumber":243,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":244}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":" * Handles the loading and storing of tasks data, from and to the hard disk."},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"    private static final String FILE_DELIMITER_REGEX \u003d \"\\\\|\";"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"    private static final int PRESERVE_EMPTY_STR_ON_SPLIT \u003d -1;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"    private static final String TODO_SYMBOL \u003d \"T\";"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"    private static final String DEADLINE_SYMBOL \u003d \"D\";"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    private static final String EVENT_SYMBOL \u003d \"E\";"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    private static final int TODO_RECORD_LENGTH \u003d 3;"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    private static final int DEADLINE_RECORD_LENGTH \u003d 4;"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    private static final int EVENT_RECORD_LENGTH \u003d 4;"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    private static final int TASK_RECORD_SYMBOL_INDEX \u003d 0;"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    private static final int TASK_RECORD_IS_DONE_STATUS_INDEX \u003d 1;"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    private static final int TASK_RECORD_DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"    private static final int TASK_RECORD_DESCRIPTION_2_INDEX \u003d 3;"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_DONE_STATUS \u003d \"1\";"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_NOT_DONE_STATUS \u003d \"0\";"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"    private Ui ui;"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"    private File saveFile;"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    private TaskList tasks;"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    public Storage(Ui ui, String filePath) {"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"        this.ui \u003d ui;"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"        this.saveFile \u003d new File(filePath);"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"     * Sets tasks to be used by the Storage class."},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"     * @param tasks contains the list of tasks loaded from the save file."},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"    public void setTaskList(TaskList tasks) {"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"     * Load the list of tasks saved within the save file."},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"     * @return an ArrayList of tasks loaded from the save file."},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":"    public ArrayList\u003cTask\u003e loadStoredTasksData() {"},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"        ArrayList\u003cTask\u003e storedTasks;"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"            storedTasks \u003d readFromSaveFile();"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"            createNewFile();"},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":"            storedTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks;"},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"    private ArrayList\u003cTask\u003e readFromSaveFile() throws FileNotFoundException {"},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"        ArrayList\u003cTask\u003e storedTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"        Scanner saveFileScanner \u003d new Scanner(saveFile);"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"        int lineNum \u003d 0;"},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"        while (saveFileScanner.hasNextLine()) {"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"            lineNum++;"},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"            String[] currentTaskRecordInfoWords \u003d saveFileScanner.nextLine().split(FILE_DELIMITER_REGEX,"},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":"                    PRESERVE_EMPTY_STR_ON_SPLIT);"},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":"            stripWhiteSpacesForEachWord(currentTaskRecordInfoWords);"},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":"            processCurrentTaskRecord(currentTaskRecordInfoWords, lineNum, storedTasks);"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":"        saveFileScanner.close();"},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks;"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":"    private void stripWhiteSpacesForEachWord(String[] currentTaskRecordInfoWords) {"},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c currentTaskRecordInfoWords.length; i++) {"},{"lineNumber":78,"author":{"gitId":"gerardtwk"},"content":"            currentTaskRecordInfoWords[i] \u003d currentTaskRecordInfoWords[i].strip();"},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":"    private void processCurrentTaskRecord(String[] currentTaskRecordInfoWords, int lineNum,"},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"                                          ArrayList\u003cTask\u003e storedTasks) {"},{"lineNumber":84,"author":{"gitId":"gerardtwk"},"content":"        Task currentTask;"},{"lineNumber":85,"author":{"gitId":"gerardtwk"},"content":"        boolean isValidTodoRecord \u003d currentTaskRecordInfoWords[TASK_RECORD_SYMBOL_INDEX].equals(TODO_SYMBOL) \u0026\u0026"},{"lineNumber":86,"author":{"gitId":"gerardtwk"},"content":"                (currentTaskRecordInfoWords.length \u003d\u003d TODO_RECORD_LENGTH);"},{"lineNumber":87,"author":{"gitId":"gerardtwk"},"content":"        boolean isValidDeadlineRecord \u003d currentTaskRecordInfoWords[TASK_RECORD_SYMBOL_INDEX].equals(DEADLINE_SYMBOL) \u0026\u0026"},{"lineNumber":88,"author":{"gitId":"gerardtwk"},"content":"                (currentTaskRecordInfoWords.length \u003d\u003d DEADLINE_RECORD_LENGTH);"},{"lineNumber":89,"author":{"gitId":"gerardtwk"},"content":"        boolean isValidEventRecord \u003d currentTaskRecordInfoWords[TASK_RECORD_SYMBOL_INDEX].equals(EVENT_SYMBOL) \u0026\u0026"},{"lineNumber":90,"author":{"gitId":"gerardtwk"},"content":"                (currentTaskRecordInfoWords.length \u003d\u003d EVENT_RECORD_LENGTH);"},{"lineNumber":91,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":92,"author":{"gitId":"gerardtwk"},"content":"        if (isValidTodoRecord) {"},{"lineNumber":93,"author":{"gitId":"gerardtwk"},"content":"            currentTask \u003d new Todo(currentTaskRecordInfoWords[TASK_RECORD_DESCRIPTION_INDEX]);"},{"lineNumber":94,"author":{"gitId":"gerardtwk"},"content":"        } else if (isValidDeadlineRecord) {"},{"lineNumber":95,"author":{"gitId":"gerardtwk"},"content":"            currentTask \u003d new Deadline(currentTaskRecordInfoWords[TASK_RECORD_DESCRIPTION_INDEX],"},{"lineNumber":96,"author":{"gitId":"gerardtwk"},"content":"                    currentTaskRecordInfoWords[TASK_RECORD_DESCRIPTION_2_INDEX]);"},{"lineNumber":97,"author":{"gitId":"gerardtwk"},"content":"        } else if (isValidEventRecord) {"},{"lineNumber":98,"author":{"gitId":"gerardtwk"},"content":"            currentTask \u003d new Event(currentTaskRecordInfoWords[TASK_RECORD_DESCRIPTION_INDEX],"},{"lineNumber":99,"author":{"gitId":"gerardtwk"},"content":"                    currentTaskRecordInfoWords[TASK_RECORD_DESCRIPTION_2_INDEX]);"},{"lineNumber":100,"author":{"gitId":"gerardtwk"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"gerardtwk"},"content":"            ui.printBadTaskRecordFormatErrorMsg(lineNum);"},{"lineNumber":102,"author":{"gitId":"gerardtwk"},"content":"            return;"},{"lineNumber":103,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":105,"author":{"gitId":"gerardtwk"},"content":"        if (currentTaskRecordInfoWords[TASK_RECORD_IS_DONE_STATUS_INDEX].equals(IS_DONE_STATUS)) {"},{"lineNumber":106,"author":{"gitId":"gerardtwk"},"content":"            currentTask.markAsDone();"},{"lineNumber":107,"author":{"gitId":"gerardtwk"},"content":"        } else if (!currentTaskRecordInfoWords[TASK_RECORD_IS_DONE_STATUS_INDEX].equals(IS_NOT_DONE_STATUS)) {"},{"lineNumber":108,"author":{"gitId":"gerardtwk"},"content":"            ui.printBadTaskRecordFormatErrorMsg(lineNum);"},{"lineNumber":109,"author":{"gitId":"gerardtwk"},"content":"            return;"},{"lineNumber":110,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"gerardtwk"},"content":"        storedTasks.add(currentTask);"},{"lineNumber":112,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":114,"author":{"gitId":"gerardtwk"},"content":"    private void createNewFile() {"},{"lineNumber":115,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"gerardtwk"},"content":"            if (saveFile.createNewFile()) {"},{"lineNumber":117,"author":{"gitId":"gerardtwk"},"content":"                ui.printCreatedSaveFileMsg(saveFile.getAbsolutePath());"},{"lineNumber":118,"author":{"gitId":"gerardtwk"},"content":"                return;"},{"lineNumber":119,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"gerardtwk"},"content":"            throw new IOException();"},{"lineNumber":121,"author":{"gitId":"gerardtwk"},"content":"        } catch (IOException e) {"},{"lineNumber":122,"author":{"gitId":"gerardtwk"},"content":"            ui.printCreateSaveFileErrorMsg(saveFile.getAbsolutePath());"},{"lineNumber":123,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":126,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"gerardtwk"},"content":"     * Save the entire task list into the save file."},{"lineNumber":128,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"gerardtwk"},"content":"    public void saveStoredTasksData() {"},{"lineNumber":130,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"gerardtwk"},"content":"            writeToSaveFile();"},{"lineNumber":132,"author":{"gitId":"gerardtwk"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"gerardtwk"},"content":"            ui.printWritingSaveFileErrorMsg(saveFile.getAbsolutePath());"},{"lineNumber":134,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":137,"author":{"gitId":"gerardtwk"},"content":"    private void writeToSaveFile() throws IOException {"},{"lineNumber":138,"author":{"gitId":"gerardtwk"},"content":"        FileWriter saveFileWriter \u003d new FileWriter(saveFile);"},{"lineNumber":139,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"},{"lineNumber":140,"author":{"gitId":"gerardtwk"},"content":"            Task currentTask \u003d tasks.getTaskAt(i);"},{"lineNumber":141,"author":{"gitId":"gerardtwk"},"content":"            saveFileWriter.write(currentTask.getSaveFormatString() + \"\\n\");"},{"lineNumber":142,"author":{"gitId":"gerardtwk"},"content":"            saveFileWriter.flush();"},{"lineNumber":143,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"gerardtwk"},"content":"        saveFileWriter.close();"},{"lineNumber":145,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":146}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_DONE_STATUS_ICON \u003d \"X\";"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_NOT_DONE_STATUS_ICON \u003d \" \";"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_DONE_STATUS \u003d \"1\";"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"    private static final String IS_NOT_DONE_STATUS \u003d \"0\";"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"    public static final String FILE_DELIMITER_WITH_SPACE \u003d \" | \";"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    private String getDescription() {"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"        return this.description;"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"    private String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"        return (this.isDone ? IS_DONE_STATUS_ICON : IS_NOT_DONE_STATUS_ICON);"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"     * Mark the current task instance as done."},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"    public void markAsDone() {"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"        this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"     * Get the current task instance\u0027s output String format, to be used for saving it into the disk."},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representing the save file format of the current task instance."},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"    public String getSaveFormatString() {"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"        return (this.isDone ? IS_DONE_STATUS : IS_NOT_DONE_STATUS) + FILE_DELIMITER_WITH_SPACE + this.getDescription();"},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"     * Get a String representation of the current task instance, to be used for displaying"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"     * task information of the current task instance to the user."},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representation of the current task instance."},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":50}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":" * Maintains a list of tasks provided by the user, and handles operations relating to the list."},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"    private ArrayList\u003cTask\u003e storedTasks;"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    public TaskList(ArrayList\u003cTask\u003e storedTasks) {"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"        this.storedTasks \u003d storedTasks;"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"    public void addTask(Task taskToAdd) {"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"        storedTasks.add(taskToAdd);"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    public Task getTaskAt(int taskIndex) {"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks.get(taskIndex);"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    public Task deleteTaskAt(int taskIndex) {"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks.remove(taskIndex);"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"    public TaskList findTasksByKeyword(String keyword) {"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"        ArrayList\u003cTask\u003e tasksFound \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"        for (Task currentTask : storedTasks) {"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"            if (currentTask.toString().contains(keyword)) {"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"                tasksFound.add(currentTask);"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"        return new TaskList(tasksFound);"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":"    public boolean isEmpty() {"},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks.isEmpty();"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"    public int getTaskCount() {"},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"        return storedTasks.size();"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":42}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"    private static final String TODO_SYMBOL \u003d \"T\";"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"     * Get the current task instance\u0027s output String format, to be used for saving it into the disk."},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"     * This method overrides the getSaveFormatString() implementation in Task class."},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representing the save file format of the current task instance."},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":"    public String getSaveFormatString() {"},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"        return TODO_SYMBOL + FILE_DELIMITER_WITH_SPACE + super.getSaveFormatString();"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"     * Get a String representation of the current task instance, to be used for displaying"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"     * task information of the current task instance to the user. This method overrides the"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"     * toString() implementation in Task class."},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":"     * @return a String representation of the current task instance."},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"        return String.format(\"[%s]%s\", TODO_SYMBOL, super.toString());"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"}"}],"authorContributionMap":{"gerardtwk":30}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerardtwk"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":2,"author":{"gitId":"gerardtwk"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":4,"author":{"gitId":"gerardtwk"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"gerardtwk"},"content":" * Handles all user interactions with the user."},{"lineNumber":6,"author":{"gitId":"gerardtwk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"gerardtwk"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"gerardtwk"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":9,"author":{"gitId":"gerardtwk"},"content":"    private Scanner scanner;"},{"lineNumber":10,"author":{"gitId":"gerardtwk"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":12,"author":{"gitId":"gerardtwk"},"content":"    public Ui() {"},{"lineNumber":13,"author":{"gitId":"gerardtwk"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":14,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":16,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gerardtwk"},"content":"     * Sets tasks to be used by the Ui class."},{"lineNumber":18,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"gerardtwk"},"content":"     * @param tasks contains the list of tasks loaded from the save file."},{"lineNumber":20,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"gerardtwk"},"content":"    public void setTaskList(TaskList tasks) {"},{"lineNumber":22,"author":{"gitId":"gerardtwk"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":23,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":25,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"gerardtwk"},"content":"     * Prints an error message informing the user that there is a line of badly"},{"lineNumber":27,"author":{"gitId":"gerardtwk"},"content":"     * formatted record in the save file."},{"lineNumber":28,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"gerardtwk"},"content":"     * @param lineNum line number in the save file that contains the badly formatted record."},{"lineNumber":30,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"gerardtwk"},"content":"    public void printBadTaskRecordFormatErrorMsg(int lineNum) {"},{"lineNumber":32,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Bad task record format detected at line \" + lineNum + \" in save file! \" +"},{"lineNumber":33,"author":{"gitId":"gerardtwk"},"content":"                \"Skipping this record...\");"},{"lineNumber":34,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":36,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that a save file has been successfully created."},{"lineNumber":38,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"gerardtwk"},"content":"     * @param saveFilePath absolute path of the newly created save file."},{"lineNumber":40,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"gerardtwk"},"content":"    public void printCreatedSaveFileMsg(String saveFilePath) {"},{"lineNumber":42,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Created a new save file called \u0027\" + saveFilePath + \"\u0027\");"},{"lineNumber":43,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":45,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that Duke is unable to create a save file."},{"lineNumber":47,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"gerardtwk"},"content":"     * @param saveFilePath absolute path of the save file that Duke fails to create."},{"lineNumber":49,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"gerardtwk"},"content":"    public void printCreateSaveFileErrorMsg(String saveFilePath) {"},{"lineNumber":51,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" OPPS! An I/O Error occurred when attempting to create the save file \" +"},{"lineNumber":52,"author":{"gitId":"gerardtwk"},"content":"                \"\u0027\" + saveFilePath + \"\u0027!\");"},{"lineNumber":53,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":55,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"gerardtwk"},"content":"     * Display the Ui logo and welcome message of Duke."},{"lineNumber":57,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"gerardtwk"},"content":"    public void printWelcomeMsg() {"},{"lineNumber":59,"author":{"gitId":"gerardtwk"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":60,"author":{"gitId":"gerardtwk"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":61,"author":{"gitId":"gerardtwk"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":62,"author":{"gitId":"gerardtwk"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":63,"author":{"gitId":"gerardtwk"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":64,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":65,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(logo);"},{"lineNumber":66,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\");"},{"lineNumber":67,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Before we begin, do note that I am only able to accept lowercase\\n\" +"},{"lineNumber":68,"author":{"gitId":"gerardtwk"},"content":"                \"commands and I am not able to accept the character \u0027|\u0027 as input.\\n\");"},{"lineNumber":69,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"Now, what can I do for you?\");"},{"lineNumber":70,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":71,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":73,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"gerardtwk"},"content":"     * Get a line of input as command from user."},{"lineNumber":75,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"gerardtwk"},"content":"     * @return the String containing the command entered by user."},{"lineNumber":77,"author":{"gitId":"gerardtwk"},"content":"     * If the user entered either a CTRL+C or CTRL+Z, a \"bye\" command is returned instead."},{"lineNumber":78,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"gerardtwk"},"content":"    public String getCommandFromUser() {"},{"lineNumber":80,"author":{"gitId":"gerardtwk"},"content":"        String command;"},{"lineNumber":81,"author":{"gitId":"gerardtwk"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"gerardtwk"},"content":"            command \u003d scanner.nextLine().strip();"},{"lineNumber":83,"author":{"gitId":"gerardtwk"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":84,"author":{"gitId":"gerardtwk"},"content":"            command \u003d \"bye\";"},{"lineNumber":85,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"gerardtwk"},"content":"        return command;"},{"lineNumber":87,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":89,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that Duke is unable to write into the save file."},{"lineNumber":91,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"gerardtwk"},"content":"     * @param saveFilePath absolute path of the save file that Duke fails to write into."},{"lineNumber":93,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"gerardtwk"},"content":"    public void printWritingSaveFileErrorMsg(String saveFilePath) {"},{"lineNumber":95,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" OPPS! An I/O Error occurred when attempting to write into \" +"},{"lineNumber":96,"author":{"gitId":"gerardtwk"},"content":"                \"\u0027\" + saveFilePath + \"\u0027!\");"},{"lineNumber":97,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":99,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user of the results of either a todo/deadline/event command."},{"lineNumber":101,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"gerardtwk"},"content":"     * @param taskStored user provided task that has just been stored into the task list."},{"lineNumber":103,"author":{"gitId":"gerardtwk"},"content":"     * @param taskCount  number of tasks that had been stored into the task list."},{"lineNumber":104,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"gerardtwk"},"content":"    public void printStoreTaskMsg(Task taskStored, int taskCount) {"},{"lineNumber":106,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":107,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Got it. I\u0027ve added this task:\");"},{"lineNumber":108,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"   \" + taskStored);"},{"lineNumber":109,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Now you have \" + taskCount + \" tasks in the list.\");"},{"lineNumber":110,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":111,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":113,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"gerardtwk"},"content":"     * Display the contents of the search results of the \u0027find\u0027 command."},{"lineNumber":115,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"gerardtwk"},"content":"     * @param tasksFound a tasklist object containing a list of tasks found,"},{"lineNumber":117,"author":{"gitId":"gerardtwk"},"content":"     *                   that match the keyword provided by user."},{"lineNumber":118,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"gerardtwk"},"content":"    public void printTasksFound(TaskList tasksFound) {"},{"lineNumber":120,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":121,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Here are the matching tasks in your list:\");"},{"lineNumber":122,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c tasksFound.getTaskCount(); i++) {"},{"lineNumber":123,"author":{"gitId":"gerardtwk"},"content":"            Task currentTask \u003d tasksFound.getTaskAt(i);"},{"lineNumber":124,"author":{"gitId":"gerardtwk"},"content":"            System.out.printf(\" %d.%s\\n\", (i + 1), currentTask);"},{"lineNumber":125,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":127,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":129,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that the task list is empty."},{"lineNumber":131,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"gerardtwk"},"content":"    public void printEmptyTaskListMsg() {"},{"lineNumber":133,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":134,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" You have no tasks in your list! :)\");"},{"lineNumber":135,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":136,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":138,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"gerardtwk"},"content":"     * Display the contents of the task list."},{"lineNumber":140,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"gerardtwk"},"content":"    public void printStoredTasks() {"},{"lineNumber":142,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":143,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Here are the tasks in your list:\");"},{"lineNumber":144,"author":{"gitId":"gerardtwk"},"content":"        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"},{"lineNumber":145,"author":{"gitId":"gerardtwk"},"content":"            Task currentTask \u003d tasks.getTaskAt(i);"},{"lineNumber":146,"author":{"gitId":"gerardtwk"},"content":"            System.out.printf(\" %d.%s\\n\", (i + 1), currentTask);"},{"lineNumber":147,"author":{"gitId":"gerardtwk"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":149,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":151,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that the requested task has been marked as done."},{"lineNumber":153,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"gerardtwk"},"content":"     * @param taskMarked user requested task that has just been marked as done."},{"lineNumber":155,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"gerardtwk"},"content":"    public void printMarkTaskAsDoneMsg(Task taskMarked) {"},{"lineNumber":157,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":158,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":159,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"   \" + taskMarked);"},{"lineNumber":160,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":161,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":163,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"gerardtwk"},"content":"     * Informs the user that the requested task has been deleted from the task list."},{"lineNumber":165,"author":{"gitId":"gerardtwk"},"content":"     * Also informs the user about the number of tasks left in the task list."},{"lineNumber":166,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"gerardtwk"},"content":"     * @param deletedTask user requested task that has just been deleted off from the task list."},{"lineNumber":168,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"gerardtwk"},"content":"    public void printDeleteTaskMsg(Task deletedTask) {"},{"lineNumber":170,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":171,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Noted. I\u0027ve removed this task:\");"},{"lineNumber":172,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\"   \" + deletedTask);"},{"lineNumber":173,"author":{"gitId":"gerardtwk"},"content":"        System.out.println((tasks.isEmpty()) ? \" Now you have no more tasks left in the list! :)\" :"},{"lineNumber":174,"author":{"gitId":"gerardtwk"},"content":"                \" Now you have \" + tasks.getTaskCount() + \" tasks in the list.\");"},{"lineNumber":175,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":176,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":178,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"gerardtwk"},"content":"     * Display the exit message of Duke."},{"lineNumber":180,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"gerardtwk"},"content":"    public void printExitMsg() {"},{"lineNumber":182,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":183,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" Bye. Hope to see you again soon!\");"},{"lineNumber":184,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":185,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":187,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"gerardtwk"},"content":"     * Printing of error messages caused by either illegal characters, invalid command syntax"},{"lineNumber":189,"author":{"gitId":"gerardtwk"},"content":"     * or unknown commands entered by the user."},{"lineNumber":190,"author":{"gitId":"gerardtwk"},"content":"     *"},{"lineNumber":191,"author":{"gitId":"gerardtwk"},"content":"     * @param errorMsg error message containing user friendly explanation about the reason"},{"lineNumber":192,"author":{"gitId":"gerardtwk"},"content":"     *                 why the error occurred."},{"lineNumber":193,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"gerardtwk"},"content":"    public void printCommandErrorMsg(String errorMsg) {"},{"lineNumber":195,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":196,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(\" \" + errorMsg);"},{"lineNumber":197,"author":{"gitId":"gerardtwk"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":198,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"gerardtwk"},"content":""},{"lineNumber":200,"author":{"gitId":"gerardtwk"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"gerardtwk"},"content":"     * Close the scanner used by Duke. This is the last method to be invoked by"},{"lineNumber":202,"author":{"gitId":"gerardtwk"},"content":"     * Duke before shutdown."},{"lineNumber":203,"author":{"gitId":"gerardtwk"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"gerardtwk"},"content":"    public void closeScanner() {"},{"lineNumber":205,"author":{"gitId":"gerardtwk"},"content":"        scanner.close();"},{"lineNumber":206,"author":{"gitId":"gerardtwk"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"gerardtwk"},"content":"}"},{"lineNumber":208,"author":{"gitId":"gerardtwk"},"content":""}],"authorContributionMap":{"gerardtwk":208}}]
