[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":"Duke is a **desktop app for managing a schedule planner, optimized for use"},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"via a Command Line Interface** (CLI). "},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"If you can type fast, Duke can get your schedule planning"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"done faster than traditional GUI apps."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":"* Quick Start"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"* User Notes "},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":"* Features"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"  * Adding a todo: `todo`"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"  * Adding an event: `event`"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"  * Adding a deadline: `deadline`"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"  * Listing all tasks: `list`  "},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"  * Marking a task as done: `done`"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"  * Deleting a task: `delete`"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"  * Search for a task: `find`"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"  * Exiting the program: `bye`"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"  * Saving the data"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"  * Editing the data file"},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"* FAQ"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"* Command Summary"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"* Attribution"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"----"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"## Quick Start"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"2. Download the latest `Duke_ip.jar` "},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"   from [here](https://github.com/Leeyp/ip/releases)."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"3. Copy the file to the folder you want to use "},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"   as the home folder for your Duke."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"4. Open your Command Line Terminal in that folder where `Duke_ip.jar` is "},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"   located. Run Duke with `java -jar Duke_ip.jar`."},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"   "},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"5. Type the command in the command box and press Enter to execute"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"   it. e.g. typing `list` and pressing Enter will show a list of "},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"   all current tasks."},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":"   Some example commands you can try:"},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"   * `list`: Lists all tasks"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"    * `todo homework`: Adds a Todo task named `homework` to the Task List"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":"    * `done 1`: Marks the 1st task shown in the current list (currently: `todo homework`) as done."},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"    * `delete 1`: Deletes the 1st task shown in the current list (currently: `todo homework`)."},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"    * `bye`: Exits the app."},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"    "},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"6. Refer to the **Features** below for details of each command."},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"____"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"## User Notes"},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"_Notes about the command format:_"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"* _Words in `UPPER_CASE` are the parameters to be supplied by the user."},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"e.g. in `done TASK_INDEX`, `TASK_INDEX` is a parameter which can be used as `done 1`._"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"  "},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"* _If a parameter is expected only once in the command but you specified it multiple times, only the first occurrence of the parameter will be recognised."},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"e.g. if you specify `/at 2pm /at 5pm`, the command will be recognised as `/at \"2pm /at 5pm\"`, giving the result: `(at: 2pm /at 5pm)`._"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"* _Extraneous parameters for commands that do not take in parameters (such as `list` and `bye`) will be ignored."},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"e.g. if the command specifies `bye 123`, it will be interpreted as `bye`._"},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"_Notes about Tasks in Duke:_"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":"* There are three types of Tasks used in Duke: `Todo`, `Event`, and `Deadline`."},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":"    * These tasks differ in how they record `TIME` data parameter supplied by the user."},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":"    * `TIME` data parameter is a string, that will not be validated by Duke. Users can supply any string input to help them "},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"    remember their event or deadline times."},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":"* A `Todo` is a task which does not record `TIME` data."},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":"* An `Event` is a task that is meant to be performed during a certain `TIME`, as supplied by the user."},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":"* A `Deadline` is a task that is meant to be completed before a certain `TIME`, as supplied by the user."},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":"* A Task stored in Duke follows the format:"},{"lineNumber":75,"author":{"gitId":"Leeyp"},"content":"    * `[type (T/E/D)][isDone (Y/N)] taskDescription (time, if any)`"},{"lineNumber":76,"author":{"gitId":"Leeyp"},"content":"* Examples:"},{"lineNumber":77,"author":{"gitId":"Leeyp"},"content":"    * `Todo: ` `[T][N] myTodo`"},{"lineNumber":78,"author":{"gitId":"Leeyp"},"content":"    * `Event:` `[E][N] myEvent (at: event time)`"},{"lineNumber":79,"author":{"gitId":"Leeyp"},"content":"    * `Deadline:` `[D][Y] myDeadline (by: deadline time)`"},{"lineNumber":80,"author":{"gitId":"Leeyp"},"content":"____"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":83,"author":{"gitId":"Leeyp"},"content":"### Adding a todo: `todo`"},{"lineNumber":84,"author":{"gitId":"Leeyp"},"content":"Adds a task to be done at an unspecified time to Duke\u0027s Task List."},{"lineNumber":85,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":86,"author":{"gitId":"Leeyp"},"content":"Format: `todo TASK`"},{"lineNumber":87,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":88,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":89,"author":{"gitId":"Leeyp"},"content":"* `todo read book` creates `[T][N] read book`"},{"lineNumber":90,"author":{"gitId":"Leeyp"},"content":"* `todo my homework` creates `[T][N] my homework`"},{"lineNumber":91,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":92,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":93,"author":{"gitId":"Leeyp"},"content":"### Adding an event: `event`"},{"lineNumber":94,"author":{"gitId":"Leeyp"},"content":"Adds an event to be done during a certain time to Duke\u0027s Task List."},{"lineNumber":95,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":96,"author":{"gitId":"Leeyp"},"content":"Format: `event TASK /at TIME`"},{"lineNumber":97,"author":{"gitId":"Leeyp"},"content":"* The `TIME` specified can be any text string, Duke will not validate the data."},{"lineNumber":98,"author":{"gitId":"Leeyp"},"content":"* The `/at` tag must be provided for Duke to recognise the `TIME` parameter. Otherwise, "},{"lineNumber":99,"author":{"gitId":"Leeyp"},"content":"the input will be flagged as invalid."},{"lineNumber":100,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":101,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":102,"author":{"gitId":"Leeyp"},"content":"* `event seminar /at 4-6pm` creates `[E][N] seminar (at: 4-6pm)`"},{"lineNumber":103,"author":{"gitId":"Leeyp"},"content":"* `event zoom lecture /at 9-10am` creates `[E][N] zoom lecture (at: 9-10am)`"},{"lineNumber":104,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":105,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":106,"author":{"gitId":"Leeyp"},"content":"### Adding an deadline: `deadline`"},{"lineNumber":107,"author":{"gitId":"Leeyp"},"content":"Adds a deadline to be done by a certain time to Duke\u0027s Task List."},{"lineNumber":108,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":109,"author":{"gitId":"Leeyp"},"content":"Format: `deadline TASK /by TIME`"},{"lineNumber":110,"author":{"gitId":"Leeyp"},"content":"* The `TIME` specified can be any text string, Duke will not validate the data."},{"lineNumber":111,"author":{"gitId":"Leeyp"},"content":"* The `/by` tag must be provided for Duke to recognise the `TIME` parameter. Otherwise,"},{"lineNumber":112,"author":{"gitId":"Leeyp"},"content":"  the input will be flagged as invalid."},{"lineNumber":113,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":114,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":115,"author":{"gitId":"Leeyp"},"content":"* `deadline essay /by Friday 6pm` creates `[D][N] essay (by: Friday 6pm)`"},{"lineNumber":116,"author":{"gitId":"Leeyp"},"content":"* `deadline Lab Assignment /by 5 Mar 9am` creates `[D][N] Lab Assignment (by: 5 Mar 9am)`"},{"lineNumber":117,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":118,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":119,"author":{"gitId":"Leeyp"},"content":"### Listing all tasks: `list`"},{"lineNumber":120,"author":{"gitId":"Leeyp"},"content":"Shows a list of all tasks in Duke\u0027s Task List."},{"lineNumber":121,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":122,"author":{"gitId":"Leeyp"},"content":"Format: `list`"},{"lineNumber":123,"author":{"gitId":"Leeyp"},"content":"![img_1.png](img_1.png)"},{"lineNumber":124,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":125,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":126,"author":{"gitId":"Leeyp"},"content":"### Marking a task as done: `done`"},{"lineNumber":127,"author":{"gitId":"Leeyp"},"content":"Marks a task as done in Duke\u0027s Task List."},{"lineNumber":128,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":129,"author":{"gitId":"Leeyp"},"content":"Changes the \"N\" stored in a Task (\"N\" for \"No\") into a \"Y\" (\"Y\" for \"Yes\")."},{"lineNumber":130,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":131,"author":{"gitId":"Leeyp"},"content":"Format: `done TASK_INDEX`"},{"lineNumber":132,"author":{"gitId":"Leeyp"},"content":"* Marks a task as done at the specified `TASK_INDEX`."},{"lineNumber":133,"author":{"gitId":"Leeyp"},"content":"* The task index refers to the index number shown in the displayed task list."},{"lineNumber":134,"author":{"gitId":"Leeyp"},"content":"* The index **must be a valid task number present in `list`**."},{"lineNumber":135,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":136,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":137,"author":{"gitId":"Leeyp"},"content":"* `done 1` marks the first task as shown in `list` as done."},{"lineNumber":138,"author":{"gitId":"Leeyp"},"content":"* If `[T][N] read book` was the first task that was marked as done, "},{"lineNumber":139,"author":{"gitId":"Leeyp"},"content":"it will now become `[T][Y] read book`."},{"lineNumber":140,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":141,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":142,"author":{"gitId":"Leeyp"},"content":"### Deleting a task: `delete`"},{"lineNumber":143,"author":{"gitId":"Leeyp"},"content":"Deletes a specified task in Duke\u0027s Task List."},{"lineNumber":144,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":145,"author":{"gitId":"Leeyp"},"content":"Format: `delete TASK_INDEX`"},{"lineNumber":146,"author":{"gitId":"Leeyp"},"content":"* Deletes the task at the specified `TASK_INDEX`."},{"lineNumber":147,"author":{"gitId":"Leeyp"},"content":"* The task index refers to the index number shown in the displayed task list."},{"lineNumber":148,"author":{"gitId":"Leeyp"},"content":"* The index **must be a valid task number present in `list`**."},{"lineNumber":149,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":150,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":151,"author":{"gitId":"Leeyp"},"content":"* `delete 1` deletes the first task as shown in `list`."},{"lineNumber":152,"author":{"gitId":"Leeyp"},"content":"* If `[T][N] read book` was the task that was deleted,"},{"lineNumber":153,"author":{"gitId":"Leeyp"},"content":"  it will no longer exist. The subsequent tasks will be moved"},{"lineNumber":154,"author":{"gitId":"Leeyp"},"content":"  forward in the list."},{"lineNumber":155,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":156,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":157,"author":{"gitId":"Leeyp"},"content":"### Search for a task: `find`"},{"lineNumber":158,"author":{"gitId":"Leeyp"},"content":"Lists all tasks that contains a certain keyword in Duke\u0027s Task List."},{"lineNumber":159,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":160,"author":{"gitId":"Leeyp"},"content":"Format: `find KEYWORD`"},{"lineNumber":161,"author":{"gitId":"Leeyp"},"content":"* The `KEYWORD` can be any user-supplied string."},{"lineNumber":162,"author":{"gitId":"Leeyp"},"content":"* Duke will show a list of all tasks that contain `KEYWORD` in "},{"lineNumber":163,"author":{"gitId":"Leeyp"},"content":"its task description."},{"lineNumber":164,"author":{"gitId":"Leeyp"},"content":"  * In other words, the results of `find` are a subset of the results of `list`."},{"lineNumber":165,"author":{"gitId":"Leeyp"},"content":"  "},{"lineNumber":166,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":167,"author":{"gitId":"Leeyp"},"content":"Examples:"},{"lineNumber":168,"author":{"gitId":"Leeyp"},"content":"* `find work` returns the tasks `homework` and `do housework`."},{"lineNumber":169,"author":{"gitId":"Leeyp"},"content":"* `find book` returns the tasks `read book`, `book a taxi`, and `Fix Macbook`."},{"lineNumber":170,"author":{"gitId":"Leeyp"},"content":"![img_2.png](img_2.png)"},{"lineNumber":171,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":172,"author":{"gitId":"Leeyp"},"content":"  \u003cbr /\u003e"},{"lineNumber":173,"author":{"gitId":"Leeyp"},"content":"### Exiting the program: `bye`"},{"lineNumber":174,"author":{"gitId":"Leeyp"},"content":"Exits the program."},{"lineNumber":175,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":176,"author":{"gitId":"Leeyp"},"content":"Format: `bye`"},{"lineNumber":177,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":178,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":179,"author":{"gitId":"Leeyp"},"content":"### Saving the data"},{"lineNumber":180,"author":{"gitId":"Leeyp"},"content":"Duke Task List data are saved in the hard disk automatically after any command that changes the data. "},{"lineNumber":181,"author":{"gitId":"Leeyp"},"content":"There is no need to save manually."},{"lineNumber":182,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":183,"author":{"gitId":"Leeyp"},"content":"\u003cbr /\u003e"},{"lineNumber":184,"author":{"gitId":"Leeyp"},"content":"### Editing the data file"},{"lineNumber":185,"author":{"gitId":"Leeyp"},"content":"Duke Task List data is saved as a text file `[JAR file location]/data.txt`."},{"lineNumber":186,"author":{"gitId":"Leeyp"},"content":"Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":187,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":188,"author":{"gitId":"Leeyp"},"content":"**_Caution: If your changes to the data file makes its format invalid, "},{"lineNumber":189,"author":{"gitId":"Leeyp"},"content":"Duke will not run._** Please manually fix the data in the file into the correct format, otherwise delete all the invalid data in order "},{"lineNumber":190,"author":{"gitId":"Leeyp"},"content":"for Duke to resume operation."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"Leeyp"},"content":"____"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"Leeyp"},"content":"## FAQ"},{"lineNumber":195,"author":{"gitId":"Leeyp"},"content":"**Q:** How do I transfer my data to another Computer?"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"Leeyp"},"content":"**A:** Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Duke saved file."},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"Leeyp"},"content":"____"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"Leeyp"},"content":"# Command Summary"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"Leeyp"},"content":"Action | Format, Examples"},{"lineNumber":204,"author":{"gitId":"Leeyp"},"content":"------------ | ---------------"},{"lineNumber":205,"author":{"gitId":"Leeyp"},"content":"**Add Todo**  | `todo TASK` \u003cbr /\u003ee.g. `todo read book`, `todo my homework`"},{"lineNumber":206,"author":{"gitId":"Leeyp"},"content":"**Add Event**  | `event TASK /at TIME` \u003cbr /\u003e e.g. `event seminar /at 4-6pm`, `event zoom lecture /at 9-10am`"},{"lineNumber":207,"author":{"gitId":"Leeyp"},"content":"**Add Deadline**  | `deadline TASK /by TIME` \u003cbr /\u003ee.g. `deadline essay /by Friday 6pm`, `deadline Lab Assignment /by 5 Mar 9am`"},{"lineNumber":208,"author":{"gitId":"Leeyp"},"content":"**List tasks**  | `list` "},{"lineNumber":209,"author":{"gitId":"Leeyp"},"content":"**Mark Task as Done**  | `done TASK_INDEX` \u003cbr /\u003ee.g. `done 3`"},{"lineNumber":210,"author":{"gitId":"Leeyp"},"content":"**Delete**  | `delete TASK_INDEX` \u003cbr /\u003ee.g. `delete 1`"},{"lineNumber":211,"author":{"gitId":"Leeyp"},"content":"**Find**  | `find KEYWORD` \u003cbr /\u003ee.g. `find work`, `find essay`"},{"lineNumber":212,"author":{"gitId":"Leeyp"},"content":"**Exit**  | `bye`"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"Leeyp"},"content":"# Attribution"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"Leeyp"},"content":"The format of this User Guide was  adapted from [AddressBook Level 3(AB3) User Guide](https://se-education.org/addressbook-level3/UserGuide.html)."}],"authorContributionMap":{"Leeyp":196,"-":20}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"public enum Command {"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"    BYE, LIST, DONE, TODO, EVENT, DEADLINE, INVALID, DELETE, FIND"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":5}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":" * Represents a Deadline subclass object that contains description, whether Task is done,"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":" * and also Deadline Time which is inputted with keyword \"/by\""},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":"    protected String by;"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"        this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" * The main driver for the Duke program"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":" * a to-do list tracker that allows users to input 3 types of tasks:"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":" * Todos, Events, and Deadlines"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":" * as well as the functions to delete, find, or mark a task as done."},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"            Storage.loadData(Storage.filepath);"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"        } catch (IOException e) {"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"            Ui.showLoadingError(e);"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"        Ui.welcomeMessage();"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"        Parser.input \u003d Parser.getInput(Parser.in);"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"        Command command;"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":"        while (!Parser.isBye()) {"},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"            if (Parser.isList()) {"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.LIST;"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isDone()) {"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.DONE;"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isTodo()) {"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.TODO;"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isFind()) {"},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.FIND;"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isEvent()) {"},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.EVENT;"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isDelete()) {"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.DELETE;"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"            } else if (Parser.isDeadline()) {"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.DEADLINE;"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"                command \u003d Command.INVALID;"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"                Parser.executeCommand(Parser.input, command);"},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"            } catch (InvalidCommandException e) {"},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"                Ui.showInvalidCommandError();"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"            } catch (EmptyInputException e) {"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"                Ui.showEmptyInputError();"},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"                Ui.showNoTimeAddedError();"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"            } catch (InvalidEventTimeException e) {"},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"                Ui.showInvalidEventTimeError();"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"            } catch (InvalidDeadlineTimeException e) {"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":"                Ui.showInvalidDeadlineTimeError();"},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"                Ui.showInvalidIntegerTaskIndexError();"},{"lineNumber":59,"author":{"gitId":"Leeyp"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":"                Ui.showTaskIndexNotExistsError();"},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":"            Storage.saveData();"},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"            System.out.println();"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":"            Parser.input \u003d Parser.getInput(Parser.in);"},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"        Ui.exitMessage();"},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Leeyp":72,"-":3}},{"path":"src/main/java/duke/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"public class EmptyInputException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":4}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":" * Represents a Event subclass object that contains description, whether Task is done,"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":" * and also Event Time which is inputted with keyword \"/at\""},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"    protected String at;"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"    public Event(String description, String at) {"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"        return \"[E]\" + super.toString() + \"(at:\" + at + \")\";"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":19}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"public class InvalidCommandException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":4}},{"path":"src/main/java/duke/InvalidDeadlineTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"public class InvalidDeadlineTimeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":4}},{"path":"src/main/java/duke/InvalidEventTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"public class InvalidEventTimeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":4}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" * A class containing the methods necessary to perform parse the user input in the Duke program"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":" * and contains the fixed-length constants of each command to help parse the information"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":" * Also executes the commands after receiving user input."},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"    public static final int DONE_START \u003d 5;"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"    public static final int FIND_START \u003d 5;"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    public static final int TODO_START \u003d 5;"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"    public static final int EVENT_START \u003d 6;"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"    public static final int DEADLINE_START \u003d 9;"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"    public static final int DELETE_START \u003d 7;"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"    public static Scanner in \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"    public static String input;"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"     * Main driver command for Duke program that parses user input and executes the appropriate command"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"     * Using a switch statement to choose the corresponding command,"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"     * and calls methods from Ui and TaskList classes to perform the appropriate actions"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"     * Throws exceptions if requirements are violated"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"     * @param c     the command from Parser to be executed"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"     * @throws InvalidCommandException      if user input an unrecognised Command"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"     * @throws EmptyInputException          if empty string as input"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"     * @throws InvalidEventTimeException    if /at is not found when adding a new Event"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"     * @throws InvalidDeadlineTimeException if /by is not found when adding a new Deadline"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"    public static void executeCommand(String input, Command c)"},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"            throws InvalidCommandException, EmptyInputException, InvalidEventTimeException,"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"                    InvalidDeadlineTimeException {"},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"        switch (c) {"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"        case LIST:"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"            Ui.listBeginMessage();"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"            TaskList.enumerateTasks();"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":"        case DONE:"},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"            TaskList.markTaskAsDone(input);"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":"        case FIND:"},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"            Ui.findTaskMessage();"},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"            TaskList.findTasks(input);"},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"        case DELETE:"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"            TaskList.deleteTask(input);"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"            TaskList.decrementTasks();"},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"        case TODO:"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"            verifyValidInput(input, c);"},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewTodo(input);"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"            Ui.confirmNewTaskMessage();"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":"            TaskList.incrementTasks();"},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"        case EVENT:"},{"lineNumber":59,"author":{"gitId":"Leeyp"},"content":"            verifyValidInput(input, c);"},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewEvent(input);"},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"            Ui.confirmNewTaskMessage();"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"            TaskList.incrementTasks();"},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":"        case DEADLINE:"},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"            verifyValidInput(input, c);"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewDeadline(input);"},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":"            Ui.confirmNewTaskMessage();"},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":"            TaskList.incrementTasks();"},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"        case INVALID:"},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":"            throw new InvalidCommandException();"},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":76,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Leeyp"},"content":"     * Ensures that the input for adding a new Task is valid"},{"lineNumber":78,"author":{"gitId":"Leeyp"},"content":"     * Such as a valid time for Events and Deadlines"},{"lineNumber":79,"author":{"gitId":"Leeyp"},"content":"     * and prevents empty task inputs."},{"lineNumber":80,"author":{"gitId":"Leeyp"},"content":"     * Throws exceptions if requirements are violated"},{"lineNumber":81,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":83,"author":{"gitId":"Leeyp"},"content":"     * @param c     the command from Parser to be executed"},{"lineNumber":84,"author":{"gitId":"Leeyp"},"content":"     * @throws EmptyInputException          if empty string as input"},{"lineNumber":85,"author":{"gitId":"Leeyp"},"content":"     * @throws InvalidEventTimeException    if /at is not found when adding a new Event"},{"lineNumber":86,"author":{"gitId":"Leeyp"},"content":"     * @throws InvalidDeadlineTimeException if /by is not found when adding a new Deadline"},{"lineNumber":87,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Leeyp"},"content":"    static void verifyValidInput(String input, Command c)"},{"lineNumber":89,"author":{"gitId":"Leeyp"},"content":"            throws EmptyInputException, InvalidEventTimeException, InvalidDeadlineTimeException {"},{"lineNumber":90,"author":{"gitId":"Leeyp"},"content":"        if (isEmptyInput(input, c)) {"},{"lineNumber":91,"author":{"gitId":"Leeyp"},"content":"            throw new EmptyInputException();"},{"lineNumber":92,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":94,"author":{"gitId":"Leeyp"},"content":"        switch (c) {"},{"lineNumber":95,"author":{"gitId":"Leeyp"},"content":"        case EVENT:"},{"lineNumber":96,"author":{"gitId":"Leeyp"},"content":"            if (validEventTime(input)) {"},{"lineNumber":97,"author":{"gitId":"Leeyp"},"content":"                break;"},{"lineNumber":98,"author":{"gitId":"Leeyp"},"content":"            } else {"},{"lineNumber":99,"author":{"gitId":"Leeyp"},"content":"                throw new InvalidEventTimeException();"},{"lineNumber":100,"author":{"gitId":"Leeyp"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"Leeyp"},"content":"        case DEADLINE:"},{"lineNumber":102,"author":{"gitId":"Leeyp"},"content":"            if (validDeadlineTime(input)) {"},{"lineNumber":103,"author":{"gitId":"Leeyp"},"content":"                break;"},{"lineNumber":104,"author":{"gitId":"Leeyp"},"content":"            } else {"},{"lineNumber":105,"author":{"gitId":"Leeyp"},"content":"                throw new InvalidDeadlineTimeException();"},{"lineNumber":106,"author":{"gitId":"Leeyp"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":110,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Leeyp"},"content":"     * Verifies that the Deadline Time as part of the input is valid"},{"lineNumber":112,"author":{"gitId":"Leeyp"},"content":"     * Ensures that the substring \"/by\" is part of the input"},{"lineNumber":113,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":115,"author":{"gitId":"Leeyp"},"content":"     * @return Nothing."},{"lineNumber":116,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"Leeyp"},"content":"    private static boolean validDeadlineTime(String input) {"},{"lineNumber":118,"author":{"gitId":"Leeyp"},"content":"        return input.substring(getTimePosition(input), getTimePosition(input) + 3).equals(\"/by\");"},{"lineNumber":119,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":121,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"Leeyp"},"content":"     * Verifies that the Event Time as part of the input is valid"},{"lineNumber":123,"author":{"gitId":"Leeyp"},"content":"     * Ensures that the substring \"/at\" is part of the input"},{"lineNumber":124,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":126,"author":{"gitId":"Leeyp"},"content":"     * @return Nothing."},{"lineNumber":127,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Leeyp"},"content":"    private static boolean validEventTime(String input) {"},{"lineNumber":129,"author":{"gitId":"Leeyp"},"content":"        return (input.substring(getTimePosition(input), getTimePosition(input) + 3).equals(\"/at\"));"},{"lineNumber":130,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":132,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"Leeyp"},"content":"     * Determines if the input when adding a new Task is empty"},{"lineNumber":134,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":136,"author":{"gitId":"Leeyp"},"content":"     * @param c     the command from Parser to be executed"},{"lineNumber":137,"author":{"gitId":"Leeyp"},"content":"     * @return Nothing."},{"lineNumber":138,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"Leeyp"},"content":"    private static boolean isEmptyInput(String input, Command c) {"},{"lineNumber":140,"author":{"gitId":"Leeyp"},"content":"        return switch (c) {"},{"lineNumber":141,"author":{"gitId":"Leeyp"},"content":"            case TODO -\u003e (input.substring(TODO_START).strip().equals(\"\"));"},{"lineNumber":142,"author":{"gitId":"Leeyp"},"content":"            case EVENT -\u003e input.substring(EVENT_START, getTimePosition(input)).strip().equals(\"\");"},{"lineNumber":143,"author":{"gitId":"Leeyp"},"content":"            case DEADLINE -\u003e (input.substring(DEADLINE_START, getTimePosition(input)).strip().equals(\"\"));"},{"lineNumber":144,"author":{"gitId":"Leeyp"},"content":"            default -\u003e false;"},{"lineNumber":145,"author":{"gitId":"Leeyp"},"content":"        };"},{"lineNumber":146,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":148,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"Leeyp"},"content":"     * Returns the position of the \u0027/\u0027 character in the input string."},{"lineNumber":150,"author":{"gitId":"Leeyp"},"content":"     * If the position is not found, the parent function \"verifyValidInput\" would throw exception."},{"lineNumber":151,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":153,"author":{"gitId":"Leeyp"},"content":"     * @return \u0027/\u0027 position"},{"lineNumber":154,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"Leeyp"},"content":"    static int getTimePosition(String input) {"},{"lineNumber":156,"author":{"gitId":"Leeyp"},"content":"        return input.indexOf(\u0027/\u0027);"},{"lineNumber":157,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":159,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"Leeyp"},"content":"     * Returns the position where the time information should start in the input string."},{"lineNumber":161,"author":{"gitId":"Leeyp"},"content":"     * If the position is not found, the parent function \"verifyValidInput\" would throw exception."},{"lineNumber":162,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":164,"author":{"gitId":"Leeyp"},"content":"     * @return time information position"},{"lineNumber":165,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"Leeyp"},"content":"    static String getTime(String input) {"},{"lineNumber":167,"author":{"gitId":"Leeyp"},"content":"        int timePosition \u003d getTimePosition(input);"},{"lineNumber":168,"author":{"gitId":"Leeyp"},"content":"        return input.substring(timePosition + 3);"},{"lineNumber":169,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":171,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"Leeyp"},"content":"     * Returns the integer that should be found after the \"Done\" command"},{"lineNumber":173,"author":{"gitId":"Leeyp"},"content":"     * that represents the task index to be marked as completed."},{"lineNumber":174,"author":{"gitId":"Leeyp"},"content":"     * Throws exception in Duke if the integer is invalid."},{"lineNumber":175,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":177,"author":{"gitId":"Leeyp"},"content":"     * @return Task Index to be marked as completed"},{"lineNumber":178,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"Leeyp"},"content":"    static int getCompletedTaskIndex(String input) {"},{"lineNumber":180,"author":{"gitId":"Leeyp"},"content":"        return (Integer.parseInt(input.substring(DONE_START)) - 1);"},{"lineNumber":181,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":183,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"Leeyp"},"content":"     * Returns the string that should be found after the \"Find\" command"},{"lineNumber":185,"author":{"gitId":"Leeyp"},"content":"     * that represents the keyword to be searched for."},{"lineNumber":186,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":187,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":188,"author":{"gitId":"Leeyp"},"content":"     * @return keyword to be searched for"},{"lineNumber":189,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"Leeyp"},"content":"    static String getTaskToFind(String input) {"},{"lineNumber":191,"author":{"gitId":"Leeyp"},"content":"        return input.substring(FIND_START);"},{"lineNumber":192,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":194,"author":{"gitId":"Leeyp"},"content":"    static boolean isBye() {"},{"lineNumber":195,"author":{"gitId":"Leeyp"},"content":"        return input.equals(\"bye\");"},{"lineNumber":196,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":198,"author":{"gitId":"Leeyp"},"content":"    static boolean isDeadline() {"},{"lineNumber":199,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 8 \u0026\u0026 input.substring(0, 8).equals(\"deadline\");"},{"lineNumber":200,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":202,"author":{"gitId":"Leeyp"},"content":"    static boolean isEvent() {"},{"lineNumber":203,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 5 \u0026\u0026 input.substring(0, 5).equals(\"event\");"},{"lineNumber":204,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":206,"author":{"gitId":"Leeyp"},"content":"    static boolean isTodo() {"},{"lineNumber":207,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 4 \u0026\u0026 input.substring(0, 4).equals(\"todo\");"},{"lineNumber":208,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":210,"author":{"gitId":"Leeyp"},"content":"    static boolean isFind() {"},{"lineNumber":211,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 4 \u0026\u0026 input.substring(0, 4).equals(\"find\");"},{"lineNumber":212,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":214,"author":{"gitId":"Leeyp"},"content":"    static boolean isList() {"},{"lineNumber":215,"author":{"gitId":"Leeyp"},"content":"        return input.equals(\"list\");"},{"lineNumber":216,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":218,"author":{"gitId":"Leeyp"},"content":"    static boolean isDelete() {"},{"lineNumber":219,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 6 \u0026\u0026 input.substring(0, 6).equals(\"delete\");"},{"lineNumber":220,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":222,"author":{"gitId":"Leeyp"},"content":"    static boolean isDone() {"},{"lineNumber":223,"author":{"gitId":"Leeyp"},"content":"        return input.length() \u003e 4 \u0026\u0026 input.substring(0, 4).equals(\"done\");"},{"lineNumber":224,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":226,"author":{"gitId":"Leeyp"},"content":"    static String getInput(Scanner in) {"},{"lineNumber":227,"author":{"gitId":"Leeyp"},"content":"        String input;"},{"lineNumber":228,"author":{"gitId":"Leeyp"},"content":"        input \u003d in.nextLine();"},{"lineNumber":229,"author":{"gitId":"Leeyp"},"content":"        return input;"},{"lineNumber":230,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":232,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":232}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":" * A class containing the methods necessary to perform file storage in Duke"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":" * including saving the file and loading the file"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":" * includes methods to parse the input from file to be loaded into the Duke program"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":" * where the list of tasks can be displayed exactly the same."},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"    public static final int NEW_TASK_INDEX \u003d 6;"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"    public static String filepath \u003d \"data.txt\";"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"     * Method to load the data from a previously-saved Duke file"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"     * unless the file is not found, then prints a different welcome message"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"     * @param filepath the path to load the file from"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"     * @throws IOException if there is an error reading the file"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":"    static void loadData(String filepath) throws IOException {"},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"        File f \u003d new File(filepath);"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"        if (f.createNewFile()) {"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"            System.out.println(\"Welcome to Duke. Is this your first time using Duke on this machine?\");"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"            System.out.println(\"Your previous Task list from Duke has been loaded! :-)\");"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"            processFileContents(filepath);"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"     * Saves the content of \"List\" command into a text file"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"     * that can be be processed later by the loadData method."},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"    static void saveData() {"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"            String data \u003d getAllTaskListData();"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"            writeToFile(filepath, data);"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"            System.out.println(\"No items to add to file\");"},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"     * Reads the contents from a loaded Duke file"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"     * and processes line by line"},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"     * @param filepath the path to load the file from"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":"     * @throws FileNotFoundException if there file does not exist"},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"    private static void processFileContents(String filepath) throws FileNotFoundException {"},{"lineNumber":59,"author":{"gitId":"Leeyp"},"content":"        File f \u003d new File(filepath); // create a File for the given file path"},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"        while (s.hasNext()) {"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"            String line \u003d s.nextLine();"},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":"            processFileInputLines(line);"},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":"     * Parses one line from a Duke saved file"},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":"     * and adds the corresponding new Task into the corresponding Duke Task List"},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"     * Will also mark the task as Done if it is already marked as completed inside the file"},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":"     * @param fileLine one line of input in the file"},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":"    private static void processFileInputLines(String fileLine) {"},{"lineNumber":75,"author":{"gitId":"Leeyp"},"content":"        char taskType \u003d getTaskType(fileLine);"},{"lineNumber":76,"author":{"gitId":"Leeyp"},"content":"        char isDone \u003d getDone(fileLine);"},{"lineNumber":77,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":78,"author":{"gitId":"Leeyp"},"content":"        TaskList.incrementTasks();"},{"lineNumber":79,"author":{"gitId":"Leeyp"},"content":"        addNewTaskFromFile(fileLine, taskType);"},{"lineNumber":80,"author":{"gitId":"Leeyp"},"content":"        markCompletedTaskFromFile(isDone);"},{"lineNumber":81,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":82,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":84,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Leeyp"},"content":"     * Checks if a given Task is marked as Done from a saved file"},{"lineNumber":86,"author":{"gitId":"Leeyp"},"content":"     * and marks it as Done in the Task List if true."},{"lineNumber":87,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Leeyp"},"content":"     * @param isDone character indicating if a task is done"},{"lineNumber":89,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Leeyp"},"content":"    private static void markCompletedTaskFromFile(char isDone) {"},{"lineNumber":91,"author":{"gitId":"Leeyp"},"content":"        if (isDone \u003d\u003d \u0027Y\u0027) {"},{"lineNumber":92,"author":{"gitId":"Leeyp"},"content":"            TaskList.tasks.get(TaskList.maxTaskIndex - 1).markAsDone();"},{"lineNumber":93,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":96,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Leeyp"},"content":"     * Executes commands to identify the new Task that was loaded from the Duke saved file"},{"lineNumber":98,"author":{"gitId":"Leeyp"},"content":"     * and adds the corresponding new Task into the corresponding Duke Task List"},{"lineNumber":99,"author":{"gitId":"Leeyp"},"content":"     * Will also directly process the time data for Deadlines and Events"},{"lineNumber":100,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"Leeyp"},"content":"     * @param fileLine one line of input in the file"},{"lineNumber":102,"author":{"gitId":"Leeyp"},"content":"     * @param taskType the character indicating the task type in the file"},{"lineNumber":103,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Leeyp"},"content":"    private static void addNewTaskFromFile(String fileLine, char taskType) {"},{"lineNumber":105,"author":{"gitId":"Leeyp"},"content":"        String description;"},{"lineNumber":106,"author":{"gitId":"Leeyp"},"content":"        switch (taskType) {"},{"lineNumber":107,"author":{"gitId":"Leeyp"},"content":"        case (\u0027T\u0027):"},{"lineNumber":108,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewTodo(\"todo\" + fileLine.substring(NEW_TASK_INDEX));"},{"lineNumber":109,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"Leeyp"},"content":"        case (\u0027D\u0027):"},{"lineNumber":111,"author":{"gitId":"Leeyp"},"content":"            int deadlineIndex \u003d fileLine.indexOf(\"(by:\");"},{"lineNumber":112,"author":{"gitId":"Leeyp"},"content":"            description \u003d fileLine.substring(NEW_TASK_INDEX, deadlineIndex);"},{"lineNumber":113,"author":{"gitId":"Leeyp"},"content":"            String deadline \u003d getTimeFromFile(fileLine, deadlineIndex);"},{"lineNumber":114,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewDeadline(\"deadline\" + description + \"/by\" + deadline);"},{"lineNumber":115,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":116,"author":{"gitId":"Leeyp"},"content":"        case (\u0027E\u0027):"},{"lineNumber":117,"author":{"gitId":"Leeyp"},"content":"            int eventIndex \u003d fileLine.indexOf(\"(at:\");"},{"lineNumber":118,"author":{"gitId":"Leeyp"},"content":"            description \u003d fileLine.substring(NEW_TASK_INDEX, eventIndex);"},{"lineNumber":119,"author":{"gitId":"Leeyp"},"content":"            String event \u003d getTimeFromFile(fileLine, eventIndex);"},{"lineNumber":120,"author":{"gitId":"Leeyp"},"content":"            TaskList.addNewEvent(\"event\" + description + \"/at\" + event);"},{"lineNumber":121,"author":{"gitId":"Leeyp"},"content":"            break;"},{"lineNumber":122,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":125,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"Leeyp"},"content":"     * Returns the substring where the event or deadline time would be"},{"lineNumber":127,"author":{"gitId":"Leeyp"},"content":"     * The input is guaranteed to be correct because the Duke saved file is of a fixed length format"},{"lineNumber":128,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"Leeyp"},"content":"     * @param fileLine  one line of input in the file"},{"lineNumber":130,"author":{"gitId":"Leeyp"},"content":"     * @param timeIndex the position in the string indicating where time information starts"},{"lineNumber":131,"author":{"gitId":"Leeyp"},"content":"     * @return string containing time information for Deadline or Event"},{"lineNumber":132,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"Leeyp"},"content":"    private static String getTimeFromFile(String fileLine, int timeIndex) {"},{"lineNumber":134,"author":{"gitId":"Leeyp"},"content":"        return fileLine.substring(timeIndex + 4, fileLine.length() - 1);"},{"lineNumber":135,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":137,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Leeyp"},"content":"     * Saves the Task List to the file"},{"lineNumber":139,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"Leeyp"},"content":"     * @param filePath  path where file is stored"},{"lineNumber":141,"author":{"gitId":"Leeyp"},"content":"     * @param textToAdd text to be written to the file"},{"lineNumber":142,"author":{"gitId":"Leeyp"},"content":"     * @throws IOException if error writing to file"},{"lineNumber":143,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"Leeyp"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {"},{"lineNumber":145,"author":{"gitId":"Leeyp"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":146,"author":{"gitId":"Leeyp"},"content":"        fw.write(textToAdd);"},{"lineNumber":147,"author":{"gitId":"Leeyp"},"content":"        fw.close();"},{"lineNumber":148,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":150,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"Leeyp"},"content":"     * Saves the Task List data into a single String"},{"lineNumber":152,"author":{"gitId":"Leeyp"},"content":"     * and returns it to be written to the saved file"},{"lineNumber":153,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"Leeyp"},"content":"     * @return String containing List of Tasks"},{"lineNumber":155,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Leeyp"},"content":"    private static String getAllTaskListData() {"},{"lineNumber":157,"author":{"gitId":"Leeyp"},"content":"        String data \u003d \"\";"},{"lineNumber":158,"author":{"gitId":"Leeyp"},"content":"        for (int i \u003d 0; i \u003c TaskList.maxTaskIndex; i++) {"},{"lineNumber":159,"author":{"gitId":"Leeyp"},"content":"            data \u003d data + (TaskList.tasks.get(i).toString()) + \"\\n\";"},{"lineNumber":160,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Leeyp"},"content":"        return data;"},{"lineNumber":162,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":164,"author":{"gitId":"Leeyp"},"content":"    private static char getTaskType(String fileLine) {"},{"lineNumber":165,"author":{"gitId":"Leeyp"},"content":"        return fileLine.charAt(1);"},{"lineNumber":166,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":168,"author":{"gitId":"Leeyp"},"content":"    private static char getDone(String fileLine) {"},{"lineNumber":169,"author":{"gitId":"Leeyp"},"content":"        return fileLine.charAt(4);"},{"lineNumber":170,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":171}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":" * Represents a Task superclass object that contains a description, and whether the Task is Done."},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"    public String getStatusIcon() {"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"        return (isDone ? \"Y\" : \"N\"); //return Y or N symbols"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"    public String getDescription() {"},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"        return description;"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"    public void markAsDone() {"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"        isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"        return (\"[\" + this.getStatusIcon() + \"] \" + description);"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":30}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" * A class containing the methods necessary to perform task-related functions in the Duke program"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":" * and contains the objects for storing the task information"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"    public static int maxTaskIndex \u003d 0;"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"     * Prints tasks that match the keyword that the user wishes to search for"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"     * Along with their Task index in the Task List"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"    static void findTasks(String input) {"},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"        String keyword \u003d Parser.getTaskToFind(input);"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"        int currentTaskIndex;"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"        for (int i \u003d 0; i \u003c maxTaskIndex; i++) {"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"            currentTaskIndex \u003d i + 1;"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":"            if (tasks.get(i).description.contains(keyword)) {"},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"                System.out.println(currentTaskIndex + \".\" + tasks.get(i).toString());"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"     * Prints all tasks in the Task List"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"     * Along with their Task index"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"    static void enumerateTasks() {"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"        int currentTaskIndex;"},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"        for (int i \u003d 0; i \u003c maxTaskIndex; i++) {"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"            currentTaskIndex \u003d i + 1;"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"            System.out.println(currentTaskIndex + \".\" + tasks.get(i).toString());"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"     * Deletes a task from the Task List"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":"     * by obtaining their Task index from the input"},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"    static void deleteTask(String input) {"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":"        int taskNumberToDelete \u003d (Integer.parseInt(input.substring(Parser.DELETE_START).strip()) - 1);"},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"        Ui.deletedTaskMessage(taskNumberToDelete);"},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"        tasks.remove(taskNumberToDelete);"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"     * Marks a task from the Task List as Done"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":"     * by obtaining their Task index from the input"},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"     * and prints out the Completed Task Message from Ui."},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"    static void markTaskAsDone(String input) {"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"        int completedTaskIndex \u003d Parser.getCompletedTaskIndex(input);"},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":"        tasks.get(completedTaskIndex).markAsDone();"},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":"        Ui.completedTaskMessage(completedTaskIndex);"},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":"     * Adds a new Deadline to the Task List"},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":"     * Parses the deadline time by searching for \u0027by\u0027 in the input string"},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"     * and adds both the description of the task and its corresponding deadline time"},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":"     * to the Task List by constructing a new Deadline object."},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Leeyp"},"content":"    public static void addNewDeadline(String input) {"},{"lineNumber":76,"author":{"gitId":"Leeyp"},"content":"        tasks.add(new Deadline(input.substring(Parser.DEADLINE_START, Parser.getTimePosition(input)), Parser.getTime(input)));"},{"lineNumber":77,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":79,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Leeyp"},"content":"     * Adds a new Event to the Task List"},{"lineNumber":81,"author":{"gitId":"Leeyp"},"content":"     * Parses the event duration by searching for \u0027at\u0027 in the input string"},{"lineNumber":82,"author":{"gitId":"Leeyp"},"content":"     * and adds both the description of the task and its corresponding event time"},{"lineNumber":83,"author":{"gitId":"Leeyp"},"content":"     * to the Task List by constructing a new Event object."},{"lineNumber":84,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":86,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Leeyp"},"content":"    public static void addNewEvent(String input) {"},{"lineNumber":88,"author":{"gitId":"Leeyp"},"content":"        tasks.add(new Event(input.substring(Parser.EVENT_START, Parser.getTimePosition(input)), Parser.getTime(input)));"},{"lineNumber":89,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":91,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Leeyp"},"content":"     * Adds a new Todo to the Task List"},{"lineNumber":93,"author":{"gitId":"Leeyp"},"content":"     * There is no time duration involved for a todo object"},{"lineNumber":94,"author":{"gitId":"Leeyp"},"content":"     * and adds the description of the task"},{"lineNumber":95,"author":{"gitId":"Leeyp"},"content":"     * to the Task List by constructing a new Todo object."},{"lineNumber":96,"author":{"gitId":"Leeyp"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"Leeyp"},"content":"     * @param input the user input from Duke"},{"lineNumber":98,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Leeyp"},"content":"    public static void addNewTodo(String input) {"},{"lineNumber":100,"author":{"gitId":"Leeyp"},"content":"        tasks.add(new ToDo(input.substring(Parser.TODO_START)));"},{"lineNumber":101,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":103,"author":{"gitId":"Leeyp"},"content":"    public static void incrementTasks() {"},{"lineNumber":104,"author":{"gitId":"Leeyp"},"content":"        maxTaskIndex++;"},{"lineNumber":105,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":107,"author":{"gitId":"Leeyp"},"content":"    static void decrementTasks() {"},{"lineNumber":108,"author":{"gitId":"Leeyp"},"content":"        maxTaskIndex--;"},{"lineNumber":109,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":110}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":" * Represents a Todo subclass object that is similar to the Task object."},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":16}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Leeyp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":3,"author":{"gitId":"Leeyp"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":5,"author":{"gitId":"Leeyp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Leeyp"},"content":" * A class containing the methods necessary to display Ui messages to user"},{"lineNumber":7,"author":{"gitId":"Leeyp"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Leeyp"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":10,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":11,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user calls \"List\""},{"lineNumber":13,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Leeyp"},"content":"    static void listBeginMessage() {"},{"lineNumber":15,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":16,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":18,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user calls \"Find\""},{"lineNumber":20,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Leeyp"},"content":"    static void findTaskMessage() {"},{"lineNumber":22,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":23,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":25,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user deletes a task"},{"lineNumber":27,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Leeyp"},"content":"    static void deletedTaskMessage(int deletedTaskIndex) {"},{"lineNumber":29,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":30,"author":{"gitId":"Leeyp"},"content":"        System.out.println(TaskList.tasks.get(deletedTaskIndex));"},{"lineNumber":31,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Now you have \" + (TaskList.maxTaskIndex - 1) + \" tasks in the list.\" + \"\\n\");"},{"lineNumber":32,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":34,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user marks a Task as Done"},{"lineNumber":36,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Leeyp"},"content":"    static void completedTaskMessage(int completedTaskIndex) {"},{"lineNumber":38,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":39,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"[\" + TaskList.tasks.get(completedTaskIndex).getStatusIcon() + \"] \" + TaskList.tasks.get(completedTaskIndex).getDescription() + \"\\n\");"},{"lineNumber":40,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":42,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user enters Duke"},{"lineNumber":44,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Leeyp"},"content":"    static void welcomeMessage() {"},{"lineNumber":46,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":47,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"What can I do for you?\\n\");"},{"lineNumber":48,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":50,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message when user exits Duke"},{"lineNumber":52,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Leeyp"},"content":"    static void exitMessage() {"},{"lineNumber":54,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\\n\");"},{"lineNumber":55,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":57,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Leeyp"},"content":"     * Prints Ui message after user adds a new Task"},{"lineNumber":59,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Leeyp"},"content":"    static void confirmNewTaskMessage() {"},{"lineNumber":61,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":62,"author":{"gitId":"Leeyp"},"content":"        System.out.println(TaskList.tasks.get(TaskList.maxTaskIndex));"},{"lineNumber":63,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":64,"author":{"gitId":"Leeyp"},"content":"        int numTasks \u003d getNumTasks();"},{"lineNumber":65,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Now you have \" + numTasks + \" tasks in the list.\");"},{"lineNumber":66,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":68,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if IO Error"},{"lineNumber":70,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Leeyp"},"content":"    static void showLoadingError(IOException e) {"},{"lineNumber":72,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"Can\u0027t load from file: \" + e.getMessage());"},{"lineNumber":73,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":75,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User inputs Task Index that does not exist in the List"},{"lineNumber":77,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Leeyp"},"content":"    static void showTaskIndexNotExistsError() {"},{"lineNumber":79,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! You need to add valid Task Index to be done or deleted!!\");"},{"lineNumber":80,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":82,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User inputs non-integer in Task Index field"},{"lineNumber":84,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Leeyp"},"content":"    static void showInvalidIntegerTaskIndexError() {"},{"lineNumber":86,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! I don\u0027t recognise the number to process Task Index to be done or deleted!!\");"},{"lineNumber":87,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":89,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User does not input valid time in Deadline with keyword \u0027/by\u0027."},{"lineNumber":91,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Leeyp"},"content":"    static void showInvalidDeadlineTimeError() {"},{"lineNumber":93,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! You need to add time for new Deadline with keyword \u0027/by\u0027!!\");"},{"lineNumber":94,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":96,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User does not input valid time in Event with keyword \u0027/at\u0027."},{"lineNumber":98,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Leeyp"},"content":"    static void showInvalidEventTimeError() {"},{"lineNumber":100,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! You need to add time for new Event with keyword \u0027/at\u0027!!\");"},{"lineNumber":101,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":103,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User did not even input time at all."},{"lineNumber":105,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Leeyp"},"content":"    static void showNoTimeAddedError() {"},{"lineNumber":107,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! You need to add time for new Event or Deadline with \u0027/at\u0027 or \u0027/by\u0027!!\");"},{"lineNumber":108,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":110,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User did not even input Task description at all."},{"lineNumber":112,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"Leeyp"},"content":"    static void showEmptyInputError() {"},{"lineNumber":114,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! The description of a new task cannot be empty.\");"},{"lineNumber":115,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":117,"author":{"gitId":"Leeyp"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Leeyp"},"content":"     * Prints Exception message if User did not input valid Command keyword"},{"lineNumber":119,"author":{"gitId":"Leeyp"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Leeyp"},"content":"    static void showInvalidCommandError() {"},{"lineNumber":121,"author":{"gitId":"Leeyp"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":122,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":124,"author":{"gitId":"Leeyp"},"content":""},{"lineNumber":125,"author":{"gitId":"Leeyp"},"content":"    private static int getNumTasks() {"},{"lineNumber":126,"author":{"gitId":"Leeyp"},"content":"        return TaskList.maxTaskIndex + 1;"},{"lineNumber":127,"author":{"gitId":"Leeyp"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Leeyp"},"content":"}"}],"authorContributionMap":{"Leeyp":128}}]
