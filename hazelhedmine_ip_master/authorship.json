[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"    private final Storage storage;"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    private final Ui ui;"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"    private final TaskList taskList;"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    private final Parser parser;"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"        new Duke(filePath).run();"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"    public Duke(String filePath) {"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"        storage \u003d new Storage();"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"        parser \u003d new Parser(taskList);"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"            storage.loadFromFile(filePath + \"/duke.txt\", taskList);"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"            ui.printHorizontalLine();"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"            ui.printFileCreatedMessage(filePath);"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"    public void run() {"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"        ui.printStartingMessage();"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"        boolean isExit \u003d false;"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"        while (!isExit) {"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"            isExit \u003d parser.determineCommand();"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hazelhedmine":46,"-":2}},{"path":"src/main/java/duke/exception/DescriptionFieldEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class DescriptionFieldEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/exception/MultipleTimeFieldsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class MultipleTimeFieldsException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/exception/TimeFieldEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class TimeFieldEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"    private final TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    private final Ui ui;"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"    public Parser(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"        ui \u003d new Ui();"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    public boolean determineCommand() {"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"        int COMMAND_TASK_SEPARATOR \u003d 2;"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        boolean isExit \u003d false;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"        String[] command \u003d splitInputLine(COMMAND_TASK_SEPARATOR);"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"        ui.printHorizontalLine();"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"        switch (command[0].toLowerCase()) {"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        case \"list\":"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"            taskList.printListMessage();"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"        case \"done\":"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"            taskList.markTaskAsDone(command);"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"        case \"deadline\":"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addDeadline(command);"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"        case \"event\":"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addEvent(command);"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"        case \"todo\":"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addToDo(command);"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"        case \"delete\":"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"            taskList.deleteTask(command);"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"        case \"bye\":"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"            isExit \u003d true;"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"            ui.printByeMessage();"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"        default:"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"            printCommandDoesNotExistMessage();"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"        ui.printHorizontalLine();"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"        return isExit;"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"    public void printCommandDoesNotExistMessage() {"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: there is no such command, try again!\");"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"    public String[] splitInputLine(int COMMAND_TASK_SEPARATOR) {"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"        Scanner userInput \u003d new Scanner(System.in);"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"        String inputLine \u003d userInput.nextLine().trim();"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"        String[] command \u003d inputLine.split(\" \", COMMAND_TASK_SEPARATOR);"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"        return command;"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":68}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    public void saveToFile(TaskList taskList) {"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"            FileWriter fw \u003d new FileWriter(filePath + \"/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"            ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"            for (Task task: tasks) {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"                String taskDoneStatus \u003d task.getStatus().trim();"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"                String line \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"                switch (task.getTaskType()) {"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"                case \"todo\":"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"todo\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription();"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"                case \"deadline\":"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"                    Deadline deadline \u003d (Deadline) task;"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"deadline\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription() + \"||\" + deadline.getBy();"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"                case \"event\":"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"                    Event event \u003d (Event) task;"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"event\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription() + \"||\" + event.getAt();"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"                fw.write(line + \"\\n\");"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"            fw.close();"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"                System.out.println(\"ERROR: something went wrong! :(\");"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"    public void loadFromFile(String filePath, TaskList taskList) throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"        Scanner s \u003d new Scanner(file);"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"        while (s.hasNext()) {"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"            String line \u003d s.nextLine();"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"            String[] taskDetails \u003d line.split(\"\\\\|\\\\|\");"},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"            String doneStatus \u003d taskDetails[1];"},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"            switch (taskDetails[0]) {"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"            case \"todo\":"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"                ToDo todo \u003d new ToDo(taskDetails[2]);"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"                    todo.markAsDone();"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(todo);"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"            case \"deadline\":"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"                Deadline deadline \u003d new Deadline(taskDetails[2], taskDetails[3]);"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"                    deadline.markAsDone();"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(deadline);"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"            case \"event\":"},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"                Event event \u003d new Event(taskDetails[2], taskDetails[3]);"},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":"                    event.markAsDone();"},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(event);"},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":80}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return \"deadline\";"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public String getBy() {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        return by;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":23}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return \"event\";"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public String getAt() {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        return at;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":23}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return description;"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getStatus() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return (isDone ? \"[X] \" : \"[ ] \");"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public void setDescription(String description) {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"        this.isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"        return this.getStatus() + description;"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"        return \"task\";"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":36}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.DescriptionFieldEmptyException;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.MultipleTimeFieldsException;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.TimeFieldEmptyException;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    private final int COMMAND_TASK_SEPARATOR \u003d 2;"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"        return tasks;"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"    public void printListMessage() {"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Here are the tasks in your list:\");"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"        for (Task task: tasks) {"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"            System.out.println(\" \" + (tasks.indexOf(task) + 1) + \".\" + task.toString());"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"    public void markTaskAsDone(String[] command) {"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"        Task task;"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"            int doneTaskNumber \u003d Integer.parseInt(command[1]);"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"            task \u003d tasks.get(doneTaskNumber - 1);"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"            task.markAsDone();"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"            printDoneMessage(task);"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"            printNonExistentTaskMessage();"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"            printNotANumberMessage();"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"    public static void printDoneMessage(Task task) {"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"   \" + task.toString());"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"    public void addDeadline(String[] command) {"},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"        String[] description;"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"            description \u003d command[1].split(\"/by\", COMMAND_TASK_SEPARATOR);"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"            checkForValidDeadlineInput(description);"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"            Deadline deadline \u003d new Deadline(description[0].trim(), description[1].trim());"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(deadline);"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(deadline);"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DescriptionFieldEmptyException e) {"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"            printDescriptionFieldEmptyMessage();"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"        } catch (TimeFieldEmptyException e) {"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"            printTimeFieldEmptyMessage();"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"        } catch (MultipleTimeFieldsException e) {"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"            printTooManyTimeFieldsMessage();"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":"    public void addEvent(String[] command) {"},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"        String[] description;"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":"            description \u003d command[1].split(\"/at\", COMMAND_TASK_SEPARATOR);"},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":"            checkForValidEventInput(description);"},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":"            Event event \u003d new Event(description[0].trim(), description[1].trim());"},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(event);"},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(event);"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":81,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DescriptionFieldEmptyException e) {"},{"lineNumber":82,"author":{"gitId":"hazelhedmine"},"content":"            printDescriptionFieldEmptyMessage();"},{"lineNumber":83,"author":{"gitId":"hazelhedmine"},"content":"        } catch (TimeFieldEmptyException e) {"},{"lineNumber":84,"author":{"gitId":"hazelhedmine"},"content":"            printTimeFieldEmptyMessage();"},{"lineNumber":85,"author":{"gitId":"hazelhedmine"},"content":"        } catch (MultipleTimeFieldsException e) {"},{"lineNumber":86,"author":{"gitId":"hazelhedmine"},"content":"            printTooManyTimeFieldsMessage();"},{"lineNumber":87,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":90,"author":{"gitId":"hazelhedmine"},"content":"    public void addToDo(String[] command) {"},{"lineNumber":91,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"hazelhedmine"},"content":"            ToDo toDo \u003d new ToDo(command[1]);"},{"lineNumber":93,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(toDo);"},{"lineNumber":94,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(toDo);"},{"lineNumber":95,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":96,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":97,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":100,"author":{"gitId":"hazelhedmine"},"content":"    public  void printAddedMessage(Task task) {"},{"lineNumber":101,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Alright, I\u0027ve added this task:\\n   \" + task.toString() + \"\\n\""},{"lineNumber":102,"author":{"gitId":"hazelhedmine"},"content":"                + \" Now you have \" + tasks.size() + \" tasks in your list.\");"},{"lineNumber":103,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":105,"author":{"gitId":"hazelhedmine"},"content":"    public  void deleteTask(String[] command) {"},{"lineNumber":106,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"hazelhedmine"},"content":"            int taskNumberToBeDeleted \u003d Integer.parseInt(command[1]);"},{"lineNumber":108,"author":{"gitId":"hazelhedmine"},"content":"            Task deletedTask \u003d tasks.get(taskNumberToBeDeleted - 1);"},{"lineNumber":109,"author":{"gitId":"hazelhedmine"},"content":"            tasks.remove(deletedTask);"},{"lineNumber":110,"author":{"gitId":"hazelhedmine"},"content":"            printDeletedMessage(deletedTask);"},{"lineNumber":111,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":112,"author":{"gitId":"hazelhedmine"},"content":"            printNonExistentTaskMessage();"},{"lineNumber":113,"author":{"gitId":"hazelhedmine"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":114,"author":{"gitId":"hazelhedmine"},"content":"            printNotANumberMessage();"},{"lineNumber":115,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":118,"author":{"gitId":"hazelhedmine"},"content":"    public void printDeletedMessage(Task task) {"},{"lineNumber":119,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Alright, I\u0027ve deleted this task:\\n   \" + task.toString() + \"\\n\""},{"lineNumber":120,"author":{"gitId":"hazelhedmine"},"content":"                + \" Now you have \" + tasks.size() + \" tasks in your list.\");"},{"lineNumber":121,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":123,"author":{"gitId":"hazelhedmine"},"content":"    public void checkForValidDeadlineInput(String[] input) throws DescriptionFieldEmptyException,"},{"lineNumber":124,"author":{"gitId":"hazelhedmine"},"content":"            TimeFieldEmptyException,"},{"lineNumber":125,"author":{"gitId":"hazelhedmine"},"content":"            MultipleTimeFieldsException {"},{"lineNumber":126,"author":{"gitId":"hazelhedmine"},"content":"        if (input[0].trim().equals(\"\")) {"},{"lineNumber":127,"author":{"gitId":"hazelhedmine"},"content":"            throw new DescriptionFieldEmptyException();"},{"lineNumber":128,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].contains(\"/by\")) {"},{"lineNumber":129,"author":{"gitId":"hazelhedmine"},"content":"            throw new MultipleTimeFieldsException();"},{"lineNumber":130,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].trim().equals(\"\")) {"},{"lineNumber":131,"author":{"gitId":"hazelhedmine"},"content":"            throw new TimeFieldEmptyException();"},{"lineNumber":132,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":135,"author":{"gitId":"hazelhedmine"},"content":"    public void checkForValidEventInput(String[] input) throws DescriptionFieldEmptyException,"},{"lineNumber":136,"author":{"gitId":"hazelhedmine"},"content":"            TimeFieldEmptyException,"},{"lineNumber":137,"author":{"gitId":"hazelhedmine"},"content":"            MultipleTimeFieldsException {"},{"lineNumber":138,"author":{"gitId":"hazelhedmine"},"content":"        if (input[0].trim().equals(\"\")) {"},{"lineNumber":139,"author":{"gitId":"hazelhedmine"},"content":"            throw new DescriptionFieldEmptyException();"},{"lineNumber":140,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].contains(\"/at\")) {"},{"lineNumber":141,"author":{"gitId":"hazelhedmine"},"content":"            throw new MultipleTimeFieldsException();"},{"lineNumber":142,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].trim().equals(\"\")) {"},{"lineNumber":143,"author":{"gitId":"hazelhedmine"},"content":"            throw new TimeFieldEmptyException();"},{"lineNumber":144,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":147,"author":{"gitId":"hazelhedmine"},"content":"    public void printDescriptionFieldEmptyMessage() {"},{"lineNumber":148,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: the description field of a task cannot be empty :(\");"},{"lineNumber":149,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":151,"author":{"gitId":"hazelhedmine"},"content":"    public void printTimeFieldEmptyMessage() {"},{"lineNumber":152,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: the time field of a task cannot be empty :(\");"},{"lineNumber":153,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":155,"author":{"gitId":"hazelhedmine"},"content":"    public void printMissingFieldsMessage() {"},{"lineNumber":156,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: make sure that you\u0027ve input a description and time field!\");"},{"lineNumber":157,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":159,"author":{"gitId":"hazelhedmine"},"content":"    public void printTooManyTimeFieldsMessage() {"},{"lineNumber":160,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: too many timings, try again with just one!\");"},{"lineNumber":161,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":163,"author":{"gitId":"hazelhedmine"},"content":"    public void printNonExistentTaskMessage() {"},{"lineNumber":164,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: this task number doesn\u0027t exist!\");"},{"lineNumber":165,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":167,"author":{"gitId":"hazelhedmine"},"content":"    public void printNotANumberMessage() {"},{"lineNumber":168,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: this is not a task number!\");"},{"lineNumber":169,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":170}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"        return \"todo\";"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":17}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    public void printHorizontalLine() {"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"    public void printStartingMessage() {"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Hello from\");"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"  ____        _        \\n\""},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"                + \" |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"                + \" | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"                + \" | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"                + \" |____/ \\\\__,_|_|\\\\_\\\\___|\\n\");"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Hello! I\u0027m Duke.\");"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" What can I do for you?\");"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    public void printByeMessage() {"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Bye. Hope to see you again soon!\");"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"    public void printFileCreatedMessage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" I\u0027ve created a text file at \" + filePath + \" to save your tasks!\");"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":"LiSt"},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"deadliNE return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"list"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"delete 5"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"delete 2"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"done 0"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"done hehe"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"list"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"deadline plan day /by"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"deadline /by 11pm"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"deadline /by"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"deadline plan /by today /by tmr"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"todo"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"blah"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"bye"}],"authorContributionMap":{"hazelhedmine":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"hazelhedmine":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"hazelhedmine":1,"-":37}}]
