[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":"Duke is an application that uses the command line to manage and save your tasks!"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"## Setting up Duke using JAR file"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"1. Download the Duke JAR file into your desired folder."},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"2. On your terminal, navigate to the folder containing the Duke JAR file. "},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"3. Use the `java -jar` command, e.g. `java -jar Duke.jar`."},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"4. If the setup is correct, you should see something like the below:"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"   ````  "},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"   Hello from"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    ____        _        "},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"   |  _ \\ _   _| | _____"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"   ````"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   "},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"### 1. Todo"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"Adds a task of type \u0027todo\u0027 into the task list."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"Format: `todo \u003cdescription\u003e`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"* Input: `todo read book`"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"* Output: "},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"   Alright, I\u0027ve added this task:"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"   [T][ ] read book"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"   Now you have 1 tasks in your list."},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"  "},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"### 2. Deadline"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"Adds a task of type \u0027deadline\u0027 into the task list."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"Format: `deadline \u003cdescription\u003e /by \u003cdate\u003e \u003ctiming\u003e`"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"* Format for date: `yyyy-mm-dd`"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"* Format for time: `hh:mm`"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"* Input: `deadline submit assignment /by 2021-02-24 23:00`"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"   Alright, I\u0027ve added this task:"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"   [D][ ] submit assignment (by: Feb 24 2021, 11:00 PM)"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"   Now you have 2 tasks in your list."},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"### 3. Event"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"Adds a task of type \u0027event\u0027 into the task list."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"Format: `event \u003cdescription\u003e /at \u003cdate\u003e \u003ctiming\u003e`"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"* Format for date: `yyyy-mm-dd`"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"* Format for time: `hh:mm`"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"* Input: `event project meeting /at 2019-05-23 13:00`"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"   Alright, I\u0027ve added this task:"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"   [E][ ] project meeting (at: May 23 2019, 01:00 PM)"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"   Now you have 3 tasks in your list."},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"### 4. Done"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":"Marks a task as done."},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"* Input: `done 1`"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":81,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":82,"author":{"gitId":"hazelhedmine"},"content":"   Nice! I\u0027ve marked this task as done:"},{"lineNumber":83,"author":{"gitId":"hazelhedmine"},"content":"   [T][X] read book"},{"lineNumber":84,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":85,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":86,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":87,"author":{"gitId":"hazelhedmine"},"content":"### 5. List"},{"lineNumber":88,"author":{"gitId":"hazelhedmine"},"content":"Lists out all the task in your current task list."},{"lineNumber":89,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":90,"author":{"gitId":"hazelhedmine"},"content":"Format: `list`"},{"lineNumber":91,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":92,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":93,"author":{"gitId":"hazelhedmine"},"content":"* Input: `list`"},{"lineNumber":94,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":95,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":96,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":97,"author":{"gitId":"hazelhedmine"},"content":"   Here are the tasks in your list:"},{"lineNumber":98,"author":{"gitId":"hazelhedmine"},"content":"   1.[T][X] borrow book"},{"lineNumber":99,"author":{"gitId":"hazelhedmine"},"content":"   2.[D][ ] submit assignment (by: Feb 24 2021, 11:00 PM)"},{"lineNumber":100,"author":{"gitId":"hazelhedmine"},"content":"   3.[E][ ] project meeting (at: May 23 2019, 01:00 PM)"},{"lineNumber":101,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":102,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":103,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":104,"author":{"gitId":"hazelhedmine"},"content":"### 6. Delete"},{"lineNumber":105,"author":{"gitId":"hazelhedmine"},"content":"Deletes a task from the task list."},{"lineNumber":106,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":107,"author":{"gitId":"hazelhedmine"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":108,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":109,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":110,"author":{"gitId":"hazelhedmine"},"content":"* Input: `delete 3`"},{"lineNumber":111,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":112,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":113,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":114,"author":{"gitId":"hazelhedmine"},"content":"   Alright, I\u0027ve deleted this task:"},{"lineNumber":115,"author":{"gitId":"hazelhedmine"},"content":"   [E][ ] project meeting (at: May 23 2019, 01:00 PM)"},{"lineNumber":116,"author":{"gitId":"hazelhedmine"},"content":"   Now you have 2 tasks in your list."},{"lineNumber":117,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":118,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":119,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":120,"author":{"gitId":"hazelhedmine"},"content":"### 5. Find"},{"lineNumber":121,"author":{"gitId":"hazelhedmine"},"content":"Finds and lists out tasks with descriptions containing the keyword."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"hazelhedmine"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":126,"author":{"gitId":"hazelhedmine"},"content":"* Input: `find book`"},{"lineNumber":127,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":128,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":129,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":130,"author":{"gitId":"hazelhedmine"},"content":"   Here are the matching tasks in your list:"},{"lineNumber":131,"author":{"gitId":"hazelhedmine"},"content":"   1.[T][X] borrow book"},{"lineNumber":132,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":133,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  "},{"lineNumber":135,"author":{"gitId":"hazelhedmine"},"content":"### 5. Bye"},{"lineNumber":136,"author":{"gitId":"hazelhedmine"},"content":"Exits the application."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"hazelhedmine"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"hazelhedmine"},"content":"Example:"},{"lineNumber":141,"author":{"gitId":"hazelhedmine"},"content":"* Input: `bye`"},{"lineNumber":142,"author":{"gitId":"hazelhedmine"},"content":"* Output:"},{"lineNumber":143,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":144,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":145,"author":{"gitId":"hazelhedmine"},"content":"   Bye. Hope to see you again soon!"},{"lineNumber":146,"author":{"gitId":"hazelhedmine"},"content":"  ____________________________________________________________"},{"lineNumber":147,"author":{"gitId":"hazelhedmine"},"content":"  ````"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"hazelhedmine"},"content":"## Summary of Commands"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"hazelhedmine"},"content":"Command | Purpose | Format"},{"lineNumber":152,"author":{"gitId":"hazelhedmine"},"content":"-------|---------|-------------"},{"lineNumber":153,"author":{"gitId":"hazelhedmine"},"content":"todo | Adds a task of type \u0027todo\u0027 | `todo \u003cdescription\u003e`"},{"lineNumber":154,"author":{"gitId":"hazelhedmine"},"content":"deadline | Adds a task of type \u0027deadline\u0027 | `deadline \u003cdescription\u003e /by \u003cdate\u003e \u003ctime\u003e`"},{"lineNumber":155,"author":{"gitId":"hazelhedmine"},"content":"event | Adds a task of type \u0027event\u0027 | `event \u003cdescription\u003e /at \u003cdate\u003e \u003ctime\u003e`"},{"lineNumber":156,"author":{"gitId":"hazelhedmine"},"content":"done | Marks a task as done | `done \u003ctask number\u003e`"},{"lineNumber":157,"author":{"gitId":"hazelhedmine"},"content":"list | Prints the task lisk | `list`"},{"lineNumber":158,"author":{"gitId":"hazelhedmine"},"content":"delete | Deletes a task | `delete \u003ctask number\u003e`"},{"lineNumber":159,"author":{"gitId":"hazelhedmine"},"content":"find | Finds tasks containing a keyword | `find \u003ckeyword\u003e`"},{"lineNumber":160,"author":{"gitId":"hazelhedmine"},"content":"bye | Exits application | `bye`"}],"authorContributionMap":{"hazelhedmine":142,"-":18}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":" * Starts Duke for user."},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    private final Storage storage;"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"    private final Ui ui;"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    private final TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"    private final Parser parser;"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"    public static void main(String[] args) {"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"        new Duke(filePath).run();"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"     * Determines if duke.txt should be created."},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"     * @param filePath File path of duke.txt."},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"    public Duke(String filePath) {"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"        ui \u003d new Ui();"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"        storage \u003d new Storage();"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"        parser \u003d new Parser(taskList);"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"            storage.loadFromFile(filePath + \"/duke.txt\", taskList);"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"            ui.printHorizontalLine();"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"            ui.printFileCreatedMessage(filePath);"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"     * Runs Duke and takes in user input until exit command is called."},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"    public void run() {"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"        ui.printStartingMessage();"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"        boolean isExit \u003d false;"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"        while (!isExit) {"},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"            isExit \u003d parser.determineCommand();"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"        storage.saveToFile(taskList);"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hazelhedmine":57,"-":2}},{"path":"src/main/java/duke/exception/DescriptionFieldEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class DescriptionFieldEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/exception/MultipleTimeFieldsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class MultipleTimeFieldsException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/exception/TimeFieldEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class TimeFieldEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":4}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":" * Makes sense of user command."},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":" */"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"    private final TaskList taskList;"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    private final Ui ui;"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"     * Constructs Parser."},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"     * @param taskList Current list of tasks."},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"    public Parser(TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"     * Determines the command from user input."},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"     * @return Command to exit program."},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"    public boolean determineCommand() {"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"        int COMMAND_TASK_SEPARATOR \u003d 2;"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"        boolean isExit \u003d false;"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"        String[] command \u003d splitInputLine(COMMAND_TASK_SEPARATOR);"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"        ui.printHorizontalLine();"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"        switch (command[0].toLowerCase()) {"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"        case \"list\":"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"            taskList.printListMessage();"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"        case \"done\":"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"            taskList.markTaskAsDone(command);"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"        case \"deadline\":"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addDeadline(command);"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"        case \"event\":"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addEvent(command);"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"        case \"todo\":"},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"            taskList.addToDo(command);"},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"        case \"delete\":"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"            taskList.deleteTask(command);"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"        case \"find\":"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"            taskList.findTask(command);"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"        case \"bye\":"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"            isExit \u003d true;"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"            ui.printByeMessage();"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"            printCommandDoesNotExistMessage();"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"        ui.printHorizontalLine();"},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":"        return isExit;"},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":"     * Prints message when command does not exist."},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":"    public void printCommandDoesNotExistMessage() {"},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: there is no such command, try again!\");"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":81,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"hazelhedmine"},"content":"     * Splits input line to determine command."},{"lineNumber":83,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"hazelhedmine"},"content":"     * @param COMMAND_TASK_SEPARATOR Separate input line to command and task details."},{"lineNumber":85,"author":{"gitId":"hazelhedmine"},"content":"     * @return Type of command that user inputted."},{"lineNumber":86,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"hazelhedmine"},"content":"    public String[] splitInputLine(int COMMAND_TASK_SEPARATOR) {"},{"lineNumber":88,"author":{"gitId":"hazelhedmine"},"content":"        Scanner userInput \u003d new Scanner(System.in);"},{"lineNumber":89,"author":{"gitId":"hazelhedmine"},"content":"        String inputLine \u003d userInput.nextLine().trim();"},{"lineNumber":90,"author":{"gitId":"hazelhedmine"},"content":"        String[] command \u003d inputLine.split(\" \", COMMAND_TASK_SEPARATOR);"},{"lineNumber":91,"author":{"gitId":"hazelhedmine"},"content":"        return command;"},{"lineNumber":92,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":93}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":" * Loads tasks from duke.txt or creates duke.txt if it doesn\u0027t exist"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":" * and saves tasks to duke.txt."},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":" */"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"     * Saves tasks to duke.txt."},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"     * @param taskList List of current tasks."},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"    public void saveToFile(TaskList taskList) {"},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"        String filePath \u003d new File(\"\").getAbsolutePath();"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"            FileWriter fw \u003d new FileWriter(filePath + \"/duke.txt\");"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"            ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"            for (Task task: tasks) {"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"                String taskDoneStatus \u003d task.getStatus().trim();"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"                String line \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"                switch (task.getTaskType()) {"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"                case \"todo\":"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"todo\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription();"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"                case \"deadline\":"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"                    Deadline deadline \u003d (Deadline) task;"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"deadline\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription() + \"||\" + deadline.getBy();"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"                case \"event\":"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"                    Event event \u003d (Event) task;"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"                    line \u003d \"event\" + \"||\" + taskDoneStatus + \"||\" + task.getDescription() + \"||\" + event.getAt();"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"                    break;"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"                fw.write(line + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"            fw.close();"},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"                System.out.println(\"ERROR: something went wrong! :(\");"},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"     * Loads tasks from duke.txt."},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"     * @param filePath File path of duke.txt."},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"     * @param taskList List of tasks in duke.txt"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"     * @throws FileNotFoundException If duke.txt does not exist."},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"    public void loadFromFile(String filePath, TaskList taskList) throws FileNotFoundException {"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"        Scanner s \u003d new Scanner(file);"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":"        while (s.hasNext()) {"},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"            String line \u003d s.nextLine();"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"            String[] taskDetails \u003d line.split(\"\\\\|\\\\|\");"},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"            String doneStatus \u003d taskDetails[1];"},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"            switch (taskDetails[0]) {"},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":"            case \"todo\":"},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":"                ToDo todo \u003d new ToDo(taskDetails[2]);"},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":"                    todo.markAsDone();"},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(todo);"},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":"            case \"deadline\":"},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"                Deadline deadline \u003d new Deadline(taskDetails[2], taskDetails[3]);"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":"                    deadline.markAsDone();"},{"lineNumber":81,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(deadline);"},{"lineNumber":83,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":84,"author":{"gitId":"hazelhedmine"},"content":"            case \"event\":"},{"lineNumber":85,"author":{"gitId":"hazelhedmine"},"content":"                Event event \u003d new Event(taskDetails[2], taskDetails[3]);"},{"lineNumber":86,"author":{"gitId":"hazelhedmine"},"content":"                if (doneStatus.equals(\"[X]\")) {"},{"lineNumber":87,"author":{"gitId":"hazelhedmine"},"content":"                    event.markAsDone();"},{"lineNumber":88,"author":{"gitId":"hazelhedmine"},"content":"                }"},{"lineNumber":89,"author":{"gitId":"hazelhedmine"},"content":"                tasks.add(event);"},{"lineNumber":90,"author":{"gitId":"hazelhedmine"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"hazelhedmine"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":94,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":96,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":96}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return \"deadline\";"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public String getBy() {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        return by;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":23}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return \"event\";"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public String getAt() {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        return at;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":23}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"        return description;"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    public String getStatus() {"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"        return (isDone ? \"[X] \" : \"[ ] \");"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    public void markAsDone() {"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        this.isDone \u003d true;"},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        return this.getStatus() + description;"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"        return \"task\";"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":32}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.DescriptionFieldEmptyException;"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.MultipleTimeFieldsException;"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"import duke.exception.TimeFieldEmptyException;"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":" * Tasklist to store current task list and contains methods to"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":" * add, delete, find and mark ToDo, Event, Deadline tasks as done."},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":" */"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"public class TaskList {"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"    private final int COMMAND_TASK_SEPARATOR \u003d 2;"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"     * Constructs TaskList."},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"     * Gets tasks."},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"     * @return Current tasks."},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"        return tasks;"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"     * Prints every task in tasks."},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"    public void printListMessage() {"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Here are the tasks in your list:\");"},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"        for (Task task: tasks) {"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"            System.out.println(\" \" + (tasks.indexOf(task) + 1) + \".\" + task.toString());"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":48,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"hazelhedmine"},"content":"     * Marks task as done."},{"lineNumber":50,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"hazelhedmine"},"content":"     * @param command Index of task to be marked as done."},{"lineNumber":52,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"hazelhedmine"},"content":"    public void markTaskAsDone(String[] command) {"},{"lineNumber":54,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"hazelhedmine"},"content":"            int doneTaskNumber \u003d Integer.parseInt(command[1]);"},{"lineNumber":56,"author":{"gitId":"hazelhedmine"},"content":"            Task task \u003d tasks.get(doneTaskNumber - 1);"},{"lineNumber":57,"author":{"gitId":"hazelhedmine"},"content":"            task.markAsDone();"},{"lineNumber":58,"author":{"gitId":"hazelhedmine"},"content":"            printDoneMessage(task);"},{"lineNumber":59,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitId":"hazelhedmine"},"content":"            printNonExistentTaskMessage();"},{"lineNumber":61,"author":{"gitId":"hazelhedmine"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":62,"author":{"gitId":"hazelhedmine"},"content":"            printNotANumberMessage();"},{"lineNumber":63,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":66,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"hazelhedmine"},"content":"     * Prints message when task is marked as done."},{"lineNumber":68,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"hazelhedmine"},"content":"     * @param task Task that was marked as done."},{"lineNumber":70,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"hazelhedmine"},"content":"    public static void printDoneMessage(Task task) {"},{"lineNumber":72,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":73,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"   \" + task.toString());"},{"lineNumber":74,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":76,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"hazelhedmine"},"content":"     * Adds a Deadline task to tasks"},{"lineNumber":78,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"hazelhedmine"},"content":"     * @param command User input for Deadline task description and time."},{"lineNumber":80,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"hazelhedmine"},"content":"    public void addDeadline(String[] command) {"},{"lineNumber":82,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"hazelhedmine"},"content":"            String[] description \u003d command[1].split(\"/by\", COMMAND_TASK_SEPARATOR);"},{"lineNumber":84,"author":{"gitId":"hazelhedmine"},"content":"            String[] splitDateAndTime \u003d description[1].trim().split(\" \");"},{"lineNumber":85,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":86,"author":{"gitId":"hazelhedmine"},"content":"            checkForValidDeadlineInput(description);"},{"lineNumber":87,"author":{"gitId":"hazelhedmine"},"content":"            String formattedDateAndTime \u003d checkForValidDateAndTime("},{"lineNumber":88,"author":{"gitId":"hazelhedmine"},"content":"                    splitDateAndTime[0], splitDateAndTime[1]);"},{"lineNumber":89,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":90,"author":{"gitId":"hazelhedmine"},"content":"            Deadline deadline \u003d new Deadline(description[0].trim(), formattedDateAndTime.trim());"},{"lineNumber":91,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(deadline);"},{"lineNumber":92,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":93,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(deadline);"},{"lineNumber":94,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":96,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DescriptionFieldEmptyException e) {"},{"lineNumber":97,"author":{"gitId":"hazelhedmine"},"content":"            printDescriptionFieldEmptyMessage();"},{"lineNumber":98,"author":{"gitId":"hazelhedmine"},"content":"        } catch (TimeFieldEmptyException e) {"},{"lineNumber":99,"author":{"gitId":"hazelhedmine"},"content":"            printTimeFieldEmptyMessage();"},{"lineNumber":100,"author":{"gitId":"hazelhedmine"},"content":"        } catch (MultipleTimeFieldsException e) {"},{"lineNumber":101,"author":{"gitId":"hazelhedmine"},"content":"            printTooManyTimeFieldsMessage();"},{"lineNumber":102,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":103,"author":{"gitId":"hazelhedmine"},"content":"            printInvalidDateAndTimeFormat();"},{"lineNumber":104,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":107,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"hazelhedmine"},"content":"     * Adds an Event task to tasks"},{"lineNumber":109,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"hazelhedmine"},"content":"     * @param command User input for Event task description and time."},{"lineNumber":111,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"hazelhedmine"},"content":"    public void addEvent(String[] command) {"},{"lineNumber":113,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"hazelhedmine"},"content":"            String[] description \u003d command[1].split(\"/at\", COMMAND_TASK_SEPARATOR);"},{"lineNumber":115,"author":{"gitId":"hazelhedmine"},"content":"            String[] splitDateAndTime \u003d description[1].trim().split(\" \");"},{"lineNumber":116,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":117,"author":{"gitId":"hazelhedmine"},"content":"            checkForValidEventInput(description);"},{"lineNumber":118,"author":{"gitId":"hazelhedmine"},"content":"            String formattedDateAndTime \u003d checkForValidDateAndTime("},{"lineNumber":119,"author":{"gitId":"hazelhedmine"},"content":"                    splitDateAndTime[0], splitDateAndTime[1]);"},{"lineNumber":120,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":121,"author":{"gitId":"hazelhedmine"},"content":"            Event event \u003d new Event(description[0].trim(), formattedDateAndTime.trim());"},{"lineNumber":122,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(event);"},{"lineNumber":123,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":124,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(event);"},{"lineNumber":125,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":126,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":127,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DescriptionFieldEmptyException e) {"},{"lineNumber":128,"author":{"gitId":"hazelhedmine"},"content":"            printDescriptionFieldEmptyMessage();"},{"lineNumber":129,"author":{"gitId":"hazelhedmine"},"content":"        } catch (TimeFieldEmptyException e) {"},{"lineNumber":130,"author":{"gitId":"hazelhedmine"},"content":"            printTimeFieldEmptyMessage();"},{"lineNumber":131,"author":{"gitId":"hazelhedmine"},"content":"        } catch (MultipleTimeFieldsException e) {"},{"lineNumber":132,"author":{"gitId":"hazelhedmine"},"content":"            printTooManyTimeFieldsMessage();"},{"lineNumber":133,"author":{"gitId":"hazelhedmine"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":134,"author":{"gitId":"hazelhedmine"},"content":"            printInvalidDateAndTimeFormat();"},{"lineNumber":135,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":138,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"hazelhedmine"},"content":"     * Adds a ToDo task to tasks"},{"lineNumber":140,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"hazelhedmine"},"content":"     * @param command User input for ToDo task description and time."},{"lineNumber":142,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"hazelhedmine"},"content":"    public void addToDo(String[] command) {"},{"lineNumber":144,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":145,"author":{"gitId":"hazelhedmine"},"content":"            ToDo toDo \u003d new ToDo(command[1]);"},{"lineNumber":146,"author":{"gitId":"hazelhedmine"},"content":"            tasks.add(toDo);"},{"lineNumber":147,"author":{"gitId":"hazelhedmine"},"content":"            printAddedMessage(toDo);"},{"lineNumber":148,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":149,"author":{"gitId":"hazelhedmine"},"content":"            printMissingFieldsMessage();"},{"lineNumber":150,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":153,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"hazelhedmine"},"content":"     * Prints message when task is added."},{"lineNumber":155,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"hazelhedmine"},"content":"     * @param task Task to be printed."},{"lineNumber":157,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"hazelhedmine"},"content":"    public void printAddedMessage(Task task) {"},{"lineNumber":159,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Alright, I\u0027ve added this task:\\n   \" + task.toString() + \"\\n\""},{"lineNumber":160,"author":{"gitId":"hazelhedmine"},"content":"                + \" Now you have \" + tasks.size() + \" tasks in your list.\");"},{"lineNumber":161,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":163,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"hazelhedmine"},"content":"     * Deletes task."},{"lineNumber":165,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"hazelhedmine"},"content":"     * @param command Index of task to be deleted."},{"lineNumber":167,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"hazelhedmine"},"content":"    public void deleteTask(String[] command) {"},{"lineNumber":169,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"hazelhedmine"},"content":"            int taskNumberToBeDeleted \u003d Integer.parseInt(command[1]);"},{"lineNumber":171,"author":{"gitId":"hazelhedmine"},"content":"            Task deletedTask \u003d tasks.get(taskNumberToBeDeleted - 1);"},{"lineNumber":172,"author":{"gitId":"hazelhedmine"},"content":"            tasks.remove(deletedTask);"},{"lineNumber":173,"author":{"gitId":"hazelhedmine"},"content":"            printDeletedMessage(deletedTask);"},{"lineNumber":174,"author":{"gitId":"hazelhedmine"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":175,"author":{"gitId":"hazelhedmine"},"content":"            printNonExistentTaskMessage();"},{"lineNumber":176,"author":{"gitId":"hazelhedmine"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":177,"author":{"gitId":"hazelhedmine"},"content":"            printNotANumberMessage();"},{"lineNumber":178,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":181,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"hazelhedmine"},"content":"     * Prints task that was deleted"},{"lineNumber":183,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"hazelhedmine"},"content":"     * @param task Task that was deleted."},{"lineNumber":185,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"hazelhedmine"},"content":"    public void printDeletedMessage(Task task) {"},{"lineNumber":187,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Alright, I\u0027ve deleted this task:\\n   \" + task.toString() + \"\\n\""},{"lineNumber":188,"author":{"gitId":"hazelhedmine"},"content":"                + \" Now you have \" + tasks.size() + \" tasks in your list.\");"},{"lineNumber":189,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":191,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"hazelhedmine"},"content":"     * Finds task containing a keyword given by user."},{"lineNumber":193,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"hazelhedmine"},"content":"     * @param command User input for keyword to search."},{"lineNumber":195,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"hazelhedmine"},"content":"    public void findTask(String[] command) {"},{"lineNumber":197,"author":{"gitId":"hazelhedmine"},"content":"        try {"},{"lineNumber":198,"author":{"gitId":"hazelhedmine"},"content":"            boolean hasTask \u003d false;"},{"lineNumber":199,"author":{"gitId":"hazelhedmine"},"content":"            printMatchingTaskList();"},{"lineNumber":200,"author":{"gitId":"hazelhedmine"},"content":"            hasTask \u003d listKeywordTasks(command[1].trim(), hasTask);"},{"lineNumber":201,"author":{"gitId":"hazelhedmine"},"content":"            keywordTaskListEmpty(hasTask);"},{"lineNumber":202,"author":{"gitId":"hazelhedmine"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":203,"author":{"gitId":"hazelhedmine"},"content":"            printFindTaskKeywordEmptyMessage();"},{"lineNumber":204,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":207,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"hazelhedmine"},"content":"     * Lists all tasks containing the keyword."},{"lineNumber":209,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"hazelhedmine"},"content":"     * @param command Keyword to search for."},{"lineNumber":211,"author":{"gitId":"hazelhedmine"},"content":"     * @param hasTask True if tasks with the keyword exists."},{"lineNumber":212,"author":{"gitId":"hazelhedmine"},"content":"     * @return If there exists at least one task containing keyword."},{"lineNumber":213,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"hazelhedmine"},"content":"    public boolean listKeywordTasks(String command, boolean hasTask) {"},{"lineNumber":215,"author":{"gitId":"hazelhedmine"},"content":"        for (Task task: tasks) {"},{"lineNumber":216,"author":{"gitId":"hazelhedmine"},"content":"            String keyword \u003d command.trim();"},{"lineNumber":217,"author":{"gitId":"hazelhedmine"},"content":"            if (!task.getDescription().contains(keyword)) {"},{"lineNumber":218,"author":{"gitId":"hazelhedmine"},"content":"                continue;"},{"lineNumber":219,"author":{"gitId":"hazelhedmine"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"hazelhedmine"},"content":"            printFoundTaskMessage(task);"},{"lineNumber":221,"author":{"gitId":"hazelhedmine"},"content":"            hasTask \u003d true;"},{"lineNumber":222,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"hazelhedmine"},"content":"        return hasTask;"},{"lineNumber":224,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":226,"author":{"gitId":"hazelhedmine"},"content":"    public void printFoundTaskMessage(Task task) {"},{"lineNumber":227,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" \" + (tasks.indexOf(task) + 1) + \".\" + task.toString());"},{"lineNumber":228,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":230,"author":{"gitId":"hazelhedmine"},"content":"    private void keywordTaskListEmpty(boolean hasTask) {"},{"lineNumber":231,"author":{"gitId":"hazelhedmine"},"content":"        if (!hasTask) {"},{"lineNumber":232,"author":{"gitId":"hazelhedmine"},"content":"            printKeywordNotFoundMessage();"},{"lineNumber":233,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":236,"author":{"gitId":"hazelhedmine"},"content":"    public void printMatchingTaskList() {"},{"lineNumber":237,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Here are the matching tasks in your list:\");"},{"lineNumber":238,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":240,"author":{"gitId":"hazelhedmine"},"content":"    public void printKeywordNotFoundMessage() {"},{"lineNumber":241,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" There are no tasks with that keyword!\");"},{"lineNumber":242,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":244,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"hazelhedmine"},"content":"     * Checks for valid input for Deadline task."},{"lineNumber":246,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":247,"author":{"gitId":"hazelhedmine"},"content":"     * @param input User input for Deadline task description and time."},{"lineNumber":248,"author":{"gitId":"hazelhedmine"},"content":"     * @throws DescriptionFieldEmptyException If description field of task is empty."},{"lineNumber":249,"author":{"gitId":"hazelhedmine"},"content":"     * @throws TimeFieldEmptyException If time field of task is empty."},{"lineNumber":250,"author":{"gitId":"hazelhedmine"},"content":"     * @throws MultipleTimeFieldsException If there are multiple time fields for task."},{"lineNumber":251,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":252,"author":{"gitId":"hazelhedmine"},"content":"    public void checkForValidDeadlineInput(String[] input) throws DescriptionFieldEmptyException,"},{"lineNumber":253,"author":{"gitId":"hazelhedmine"},"content":"            TimeFieldEmptyException,"},{"lineNumber":254,"author":{"gitId":"hazelhedmine"},"content":"            MultipleTimeFieldsException {"},{"lineNumber":255,"author":{"gitId":"hazelhedmine"},"content":"        if (input[0].trim().equals(\"\")) {"},{"lineNumber":256,"author":{"gitId":"hazelhedmine"},"content":"            throw new DescriptionFieldEmptyException();"},{"lineNumber":257,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].contains(\"/by\")) {"},{"lineNumber":258,"author":{"gitId":"hazelhedmine"},"content":"            throw new MultipleTimeFieldsException();"},{"lineNumber":259,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].trim().equals(\"\")) {"},{"lineNumber":260,"author":{"gitId":"hazelhedmine"},"content":"            throw new TimeFieldEmptyException();"},{"lineNumber":261,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":264,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":265,"author":{"gitId":"hazelhedmine"},"content":"     * Checks for valid input for Event task."},{"lineNumber":266,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":267,"author":{"gitId":"hazelhedmine"},"content":"     * @param input User input for Event task description and time."},{"lineNumber":268,"author":{"gitId":"hazelhedmine"},"content":"     * @throws DescriptionFieldEmptyException If description field of task is empty."},{"lineNumber":269,"author":{"gitId":"hazelhedmine"},"content":"     * @throws TimeFieldEmptyException If time field of task is empty."},{"lineNumber":270,"author":{"gitId":"hazelhedmine"},"content":"     * @throws MultipleTimeFieldsException If there are multiple time field for task."},{"lineNumber":271,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"hazelhedmine"},"content":"    public void checkForValidEventInput(String[] input) throws DescriptionFieldEmptyException,"},{"lineNumber":273,"author":{"gitId":"hazelhedmine"},"content":"            TimeFieldEmptyException,"},{"lineNumber":274,"author":{"gitId":"hazelhedmine"},"content":"            MultipleTimeFieldsException {"},{"lineNumber":275,"author":{"gitId":"hazelhedmine"},"content":"        if (input[0].trim().equals(\"\")) {"},{"lineNumber":276,"author":{"gitId":"hazelhedmine"},"content":"            throw new DescriptionFieldEmptyException();"},{"lineNumber":277,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].contains(\"/at\")) {"},{"lineNumber":278,"author":{"gitId":"hazelhedmine"},"content":"            throw new MultipleTimeFieldsException();"},{"lineNumber":279,"author":{"gitId":"hazelhedmine"},"content":"        } else if (input[1].trim().equals(\"\")) {"},{"lineNumber":280,"author":{"gitId":"hazelhedmine"},"content":"            throw new TimeFieldEmptyException();"},{"lineNumber":281,"author":{"gitId":"hazelhedmine"},"content":"        }"},{"lineNumber":282,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":284,"author":{"gitId":"hazelhedmine"},"content":"    public String checkForValidDateAndTime(String date, String time) throws DateTimeParseException {"},{"lineNumber":285,"author":{"gitId":"hazelhedmine"},"content":"        LocalDate taskDate \u003d LocalDate.parse(date);"},{"lineNumber":286,"author":{"gitId":"hazelhedmine"},"content":"        String formattedDate \u003d taskDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":287,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":288,"author":{"gitId":"hazelhedmine"},"content":"        LocalTime taskTime \u003d LocalTime.parse(time);"},{"lineNumber":289,"author":{"gitId":"hazelhedmine"},"content":"        String formattedTime \u003d taskTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"},{"lineNumber":290,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":291,"author":{"gitId":"hazelhedmine"},"content":"        String formattedDateAndTime \u003d formattedDate + \", \" + formattedTime;"},{"lineNumber":292,"author":{"gitId":"hazelhedmine"},"content":"        return formattedDateAndTime;"},{"lineNumber":293,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":295,"author":{"gitId":"hazelhedmine"},"content":"    public void printDescriptionFieldEmptyMessage() {"},{"lineNumber":296,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: the description field of a task cannot be empty :(\");"},{"lineNumber":297,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":299,"author":{"gitId":"hazelhedmine"},"content":"    public void printTimeFieldEmptyMessage() {"},{"lineNumber":300,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: the time field of a task cannot be empty :(\");"},{"lineNumber":301,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":303,"author":{"gitId":"hazelhedmine"},"content":"    public void printMissingFieldsMessage() {"},{"lineNumber":304,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: make sure that you\u0027ve input a description, day and time field!\");"},{"lineNumber":305,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":307,"author":{"gitId":"hazelhedmine"},"content":"    public void printTooManyTimeFieldsMessage() {"},{"lineNumber":308,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: too many timings, try again with just one!\");"},{"lineNumber":309,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":311,"author":{"gitId":"hazelhedmine"},"content":"    public void printNonExistentTaskMessage() {"},{"lineNumber":312,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: this task number doesn\u0027t exist!\");"},{"lineNumber":313,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":315,"author":{"gitId":"hazelhedmine"},"content":"    public void printNotANumberMessage() {"},{"lineNumber":316,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: this is not a task number!\");"},{"lineNumber":317,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":319,"author":{"gitId":"hazelhedmine"},"content":"    public void printFindTaskKeywordEmptyMessage() {"},{"lineNumber":320,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: please input a keyword to find!\");"},{"lineNumber":321,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":323,"author":{"gitId":"hazelhedmine"},"content":"    public void printInvalidDateAndTimeFormat() {"},{"lineNumber":324,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" ERROR: Invalid date and time format :( Try again!\");"},{"lineNumber":325,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":326}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"    public String getTaskType() {"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"        return \"todo\";"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":17}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":" * Interactions with user."},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"     * Prints horizontal line."},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"    public void printHorizontalLine() {"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"     * Prints starting message for Duke."},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"    public void printStartingMessage() {"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":20,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Hello from\");"},{"lineNumber":21,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\"  ____        _        \\n\""},{"lineNumber":22,"author":{"gitId":"hazelhedmine"},"content":"                + \" |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":23,"author":{"gitId":"hazelhedmine"},"content":"                + \" | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":24,"author":{"gitId":"hazelhedmine"},"content":"                + \" | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":25,"author":{"gitId":"hazelhedmine"},"content":"                + \" |____/ \\\\__,_|_|\\\\_\\\\___|\\n\");"},{"lineNumber":26,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":27,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Hello! I\u0027m Duke.\");"},{"lineNumber":28,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" What can I do for you?\");"},{"lineNumber":29,"author":{"gitId":"hazelhedmine"},"content":"        printHorizontalLine();"},{"lineNumber":30,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":32,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"hazelhedmine"},"content":"     * Prints exit message for Duke."},{"lineNumber":34,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"hazelhedmine"},"content":"    public void printByeMessage() {"},{"lineNumber":36,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" Bye. Hope to see you again soon!\");"},{"lineNumber":37,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hazelhedmine"},"content":""},{"lineNumber":39,"author":{"gitId":"hazelhedmine"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"hazelhedmine"},"content":"     * Prints message when duke.txt is created."},{"lineNumber":41,"author":{"gitId":"hazelhedmine"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"hazelhedmine"},"content":"     * @param filePath File path of duke.txt."},{"lineNumber":43,"author":{"gitId":"hazelhedmine"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hazelhedmine"},"content":"    public void printFileCreatedMessage(String filePath) {"},{"lineNumber":45,"author":{"gitId":"hazelhedmine"},"content":"        System.out.println(\" I\u0027ve created a text file at \" + filePath + \" to save your tasks!\");"},{"lineNumber":46,"author":{"gitId":"hazelhedmine"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hazelhedmine"},"content":"}"}],"authorContributionMap":{"hazelhedmine":47}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hazelhedmine"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"hazelhedmine"},"content":"LiSt"},{"lineNumber":3,"author":{"gitId":"hazelhedmine"},"content":"deadliNE return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"hazelhedmine"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"hazelhedmine"},"content":"list"},{"lineNumber":6,"author":{"gitId":"hazelhedmine"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"hazelhedmine"},"content":"delete 5"},{"lineNumber":8,"author":{"gitId":"hazelhedmine"},"content":"delete 2"},{"lineNumber":9,"author":{"gitId":"hazelhedmine"},"content":"done 0"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"done hehe"},{"lineNumber":11,"author":{"gitId":"hazelhedmine"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":12,"author":{"gitId":"hazelhedmine"},"content":"list"},{"lineNumber":13,"author":{"gitId":"hazelhedmine"},"content":"deadline plan day /by"},{"lineNumber":14,"author":{"gitId":"hazelhedmine"},"content":"deadline /by 11pm"},{"lineNumber":15,"author":{"gitId":"hazelhedmine"},"content":"deadline /by"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"deadline plan /by today /by tmr"},{"lineNumber":17,"author":{"gitId":"hazelhedmine"},"content":"todo"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"blah"},{"lineNumber":19,"author":{"gitId":"hazelhedmine"},"content":"bye"}],"authorContributionMap":{"hazelhedmine":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"hazelhedmine"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"hazelhedmine"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"hazelhedmine":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"hazelhedmine"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"hazelhedmine":1,"-":37}}]
