[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"# Duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"1. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"bryanwhl":2,"-":24}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":"Welcome to Duke. Duke is a command line chat bot that will help you in managing your tasks. This user guide will help you in getting started and familiarising yourself with using Duke."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"# Getting Started"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"Here are two steps to follow to get started with using Duke:"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"1. Download JRE11"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"2. On your command line, run the following command: `java -jar Duke.jar` in the same folder as the jar file."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"Duke should now be ready for use."},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"# Duke Functionalities"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"### Overview"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"Listed below are the 8 functions that Duke supports:"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"1. Adding task"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"2. Listing tasks"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"3. Marking tasks as done"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"4. Removing task"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"5. Finding tasks by name"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"6. Finding tasks by date"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"7. Saving your data"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"8. Exiting the program"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"Each of the following section will guide you on how to use the functions, along with the required command format to follow."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"### 1. Adding task"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"There are three types of tasks that can be added in Duke: todo, deadline and event. Todo is the most basic form of task, which is just a task you have on hand. Deadline tasks require a mandatory field /by yyyy-mm-dd, which is the deadline of your task. Lastly, event tasks require a mandatory field /at yyyy-mm-dd, which represents the day of which the event is happening"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"Here are the exact formats of adding tasks to your task list:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"`todo borrow book`"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"`event mid-term test /at 2021-03-20`"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"`deadline assignment /by 2021-01-29`"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"### 2. Listing task"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"The current tasks that you have can be listed with the command “list”. An example of calling the list command is shown below"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"![](img1.png)"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"### 3. Marking tasks as done"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"Any of your tasks can be marked as done by calling the command: done x , replacing x with the specific task number as shown by the list command. An example of how this can be done, with the example output, is shown below:"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"![](img2.png)"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"### 4. Removing task"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"You can remove tasks from the data by calling the command: delete x , replacing x with the specific task number as shown by the list command. An example of how this can be done, with the example output, is shown below:"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"![](img3.png)"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"### 5. Finding tasks by keywords"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"You can filter tasks out by keywords or specific character sequences by calling the command: find xxx , replacing xxx with the keyword or character sequence. Here is an example of how it can be done:"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"![](img4.png)"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"### 6. Find tasks by date"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"You can filter tasks out by date by calling the command: date yyyy-mm-dd , replacing yyyy-mm-dd with the date of event or deadline that you want to check on. Here is an example of how it can be done:"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"![](img5.png)"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"### 7. Saving your data"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"You can save your data by calling the command: "},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"`save`"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"This will save the changes you’ve made for the current session into the database, allowing you to continue from where you last saved on your next session."},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"### 8. Exiting the program"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"You can exit the program by simply calling:"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"`bye`"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"Do remember to save your changes before exiting the program!"}],"authorContributionMap":{"bryanwhl":67,"-":9}},{"path":"src/main/java/Duke/Commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     * Task to be added to the Task List"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public Task taskToAdd;"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * Constructor"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     * @param taskToAdd"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    public AddCommand(Task taskToAdd) {"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        this.taskToAdd \u003d taskToAdd;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"        taskList.addTask(taskToAdd);"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        return Output.printAdded(taskToAdd.toString(), taskList.size());"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":34}},{"path":"src/main/java/Duke/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":" * Abstract Command class to be extended by all other command classes"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"abstract public class Command {"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     * Variable to be set as true when the Exit command is called"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     * @param tasks"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"     * @throws RangeError"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws RangeError;"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * Method to check if isExit is set as true"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * @return"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    public boolean isExit() {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        return isExit;"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"     * Sets isExit to true"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"    public void setExit() {"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        this.isExit \u003d true;"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":42}},{"path":"src/main/java/Duke/Commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"public class DateCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     * LocalDate object to be used for querying by the user"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    LocalDate queryDate;"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     * Constructor"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"     * @param queryDate"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    public DateCommand(LocalDate queryDate) {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        this.queryDate \u003d queryDate;"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d taskList.findByDate(queryDate);"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        return Output.printFilteredTaskList(filteredTasks);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":36}},{"path":"src/main/java/Duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * Index of the task to be deleted from the ArrayList"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    int index;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     * Constructor"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     * @param index"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        this.index \u003d index;"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     * @throws RangeError when the index provided by the user is out of range of the ArrayList"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) throws RangeError {"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        if (index \u003e taskList.size() || index \u003c 1) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"            throw new RangeError();"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        Task deletedTask \u003d taskList.deleteTask(index);"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"        return Output.printDeleted(deletedTask.toString(), taskList.size());"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":39}},{"path":"src/main/java/Duke/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * Index of the task to be set as done in the ArrayList"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    int index;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     * Constructor"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     * @param index"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    public DoneCommand(int index) {"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        this.index \u003d index;"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     * @throws RangeError"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) throws RangeError {"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        if (index \u003e taskList.size() || index \u003c 1) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"            throw new RangeError();"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        Task doneTask \u003d taskList.updateCompletion(index);"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"        return Output.printUpdated(doneTask.toString());"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":39}},{"path":"src/main/java/Duke/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class ExitCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     * Sets isExit to true"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public ExitCommand() {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"        this.setExit();"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        return Output.printExit();"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":26}},{"path":"src/main/java/Duke/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class FindCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     * Keyword for querying by the user"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    String keyword;"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * Constructor"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * @param keyword by the user to be set"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"        return Output.printFilteredTaskList(taskList.returnFilteredTaskList(keyword));"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":32}},{"path":"src/main/java/Duke/Commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        //no other commands to execute"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        return Output.printTaskList(taskList.returnTaskList());"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":20}},{"path":"src/main/java/Duke/Commands/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class SaveCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     * Execute the command"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     * @return String to be printed to the command line"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        storage.saveData(taskList);"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        return Output.printSave();"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":20}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":" * Duke class which serves as the Main class of the program"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"     * Name of the txt file that the user wants to use to save data"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     * It will be run as a relative file path for the program to access the database"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public static final String FILEPATH \u003d \"database.txt\";"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * Main program"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * @param args"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        String storagePath \u003d FILEPATH;"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        Logic logic \u003d new Logic(storagePath);"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        logic.run();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"bryanwhl":20,"-":4}},{"path":"src/main/java/Duke/Exceptions/CommandNotFoundError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class CommandNotFoundError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public CommandNotFoundError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/DateInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DateInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public DateInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! date command must be in the format: \\ndate yyyy-mm-dd\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/DeadlineInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DeadlineInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public DeadlineInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! deadline command must be in the format: \\ndeadline xxx /by yyyy-mm-dd\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/DeleteInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DeleteInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public DeleteInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! \\\"delete\\\" command must be followed by ONLY ONE integer.\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":15}},{"path":"src/main/java/Duke/Exceptions/DoneInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DoneInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public DoneInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! \\\"done\\\" command must be followed by ONLY ONE integer.\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":" * Abstract DukeException class to be extended by all other error classes"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"     * errorMessage to be printed in the command line whenever the error is triggered"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    protected String errorMessage;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * @return the error message for the user"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    public String getMessage() {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        return this.errorMessage;"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":21}},{"path":"src/main/java/Duke/Exceptions/EventInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class EventInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public EventInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! event command must be in the format: \\nevent xxx /at yyyy-mm-dd\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/FindInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class FindInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public FindInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! \\\"follow\\\" command must be followed by ONLY ONE \\nkeyword for searching\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/RangeError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class RangeError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public RangeError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! The number you have provided is out of range.\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Exceptions/TodoInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class TodoInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the error message"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    public TodoInputError() {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.errorMessage \u003d \"OOPS!! todo command must be in the format: \\ntodo xxx\";"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.Command;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":" * Logic class that deals with the entire high-level logic of the program"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"public class Logic {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * Initializing a TaskList, Storage and UserInterface program for use by the rest of the program"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    private TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    private UserInterface userInterface;"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the class which initializes a new TaskList object, UserInterface object and"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"     * Storage object for the program\u0027s use"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     * @param filePath"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    public Logic(String filePath) {"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        userInterface \u003d new UserInterface();"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        taskList \u003d storage.loadTaskList();"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     * Main loop of the program."},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    public void run() {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        userInterface.printOutput(Output.printGreet());"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        boolean isExit \u003d false;"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        while (!isExit) {"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"                String fullCommand \u003d userInterface.getInput();"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"                Command currentCommand \u003d Parser.parse(fullCommand);"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"                String commandOutput \u003d currentCommand.execute(taskList, storage);"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"                userInterface.printOutput(commandOutput);"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                isExit \u003d currentCommand.isExit();"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"            } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"                userInterface.printOutput(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":48}},{"path":"src/main/java/Duke/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":" * Output class that formats the output to be printed in the command line."},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"public class Output {"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     * Logo string"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * @return string of the DUKE logo"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    public static String printLogo() {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        return logo;"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * @return string of line"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    public static String printLine() {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        String line \u003d \"____________________________________________________________\";"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        return line;"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"     * Greeting for when the program boots up"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"     * @return string for greeting the user"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"    public static String printGreet() {"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"        String greetMessage \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                + printLogo()"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"                + \"\\nWhat can I do for you?\";"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"        return greetMessage;"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"     * @param taskName"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"     * @param size"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"     * @return string for notifying the user about the deleted task"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"    public static String printDeleted(String taskName, int size) {"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"        String deleteMessage \u003d String.format(\"Noted. I\u0027ve removed this task:\\n  %1$s \\nNow you have %2$d tasks in the list.\","},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"                taskName,"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"                size);"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"        return deleteMessage;"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"     * @param taskName"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"     * @param size"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"     * @return string for notifying the user about the added task"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"    public static String printAdded(String taskName, int size) {"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"        String addMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n  %1$s \\nNow you have %2$d tasks in the list.\","},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"                taskName,"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"                size);"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"        return addMessage;"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"     * @param taskName"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"     * @return string for notifying the user about the updated task"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"    public static String printUpdated(String taskName) {"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"        String updateMessage \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\","},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"                taskName);"},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"        return updateMessage;"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"     * @param task"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"     * @return string that represents the task"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"    public static String printTask(Task task) {"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"        return task.toString();"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"     * @return string that lists out the tasks for the user"},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"    public static String printTaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"            return \"You do not have any tasks currently.\";"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"        String listTasksMessage \u003d \"Here are the list of tasks that you have\\n\";"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d String.format(\"%d. \", i + 1);"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d printTask(taskList.get(i));"},{"lineNumber":105,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d \"\\n\";"},{"lineNumber":106,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"bryanwhl"},"content":"        return listTasksMessage;"},{"lineNumber":108,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":110,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList"},{"lineNumber":113,"author":{"gitId":"bryanwhl"},"content":"     * @return string that lists out the filtered tasks for the user"},{"lineNumber":114,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"bryanwhl"},"content":"    public static String printFilteredTaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":116,"author":{"gitId":"bryanwhl"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":117,"author":{"gitId":"bryanwhl"},"content":"            return \"You do not have any tasks that matches the query.\";"},{"lineNumber":118,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"bryanwhl"},"content":"        String listTasksMessage \u003d \"Here are the tasks that matches:\\n\";"},{"lineNumber":120,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":121,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d String.format(\"%d. \", i + 1);"},{"lineNumber":122,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d printTask(taskList.get(i));"},{"lineNumber":123,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d \"\\n\";"},{"lineNumber":124,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"bryanwhl"},"content":"        return listTasksMessage;"},{"lineNumber":126,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":128,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"bryanwhl"},"content":"     * @return string to notify the user that the program is exiting"},{"lineNumber":131,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"bryanwhl"},"content":"    public static String printExit() {"},{"lineNumber":133,"author":{"gitId":"bryanwhl"},"content":"        String exitMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":134,"author":{"gitId":"bryanwhl"},"content":"        return exitMessage;"},{"lineNumber":135,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":137,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"bryanwhl"},"content":"     * @return string to notify the user that the user\u0027s task data has been saved"},{"lineNumber":140,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"bryanwhl"},"content":"    public static String printSave() {"},{"lineNumber":142,"author":{"gitId":"bryanwhl"},"content":"        String saveMessage \u003d \"Sure! Your data has been saved.\";"},{"lineNumber":143,"author":{"gitId":"bryanwhl"},"content":"        return saveMessage;"},{"lineNumber":144,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":146,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":146}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.AddCommand;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.DateCommand;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.Command;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.FindCommand;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.ListCommand;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.SaveCommand;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.CommandNotFoundError;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DateInputError;"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DeadlineInputError;"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DeleteInputError;"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DoneInputError;"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.EventInputError;"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.FindInputError;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.TodoInputError;"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Deadline;"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Event;"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Todo;"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":" * Parser class that processes the user input into useful commands,"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":" * throwing exceptions if the user\u0027s command is not valid"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"public class Parser {"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"     * Parser command to extract commands and parameters from the user input"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"     * @param userInput"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"     * @return The Command object of the command that the user is calling"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"     * @throws DukeException"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"    public static Command parse(String userInput) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"        Scanner scan \u003d new Scanner(userInput);"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"        String instruction \u003d scan.next();"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"        Command currentCommand;"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"        if (instruction.equals(\"bye\")) {"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"            currentCommand \u003d new ExitCommand();"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"            return currentCommand;"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"        switch (instruction) {"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"            case \"list\": {"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new ListCommand();"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"            case \"done\": {"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"                    int taskNumber;"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"                    taskNumber \u003d scan.nextInt();"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"                    if (scan.hasNext()) {"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"                        throw new DoneInputError();"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new DoneCommand(taskNumber);"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"                    throw new DoneInputError();"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"            case \"todo\": {"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d scan.nextLine().trim();"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"                    Todo newTodo \u003d new Todo(taskName);"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newTodo);"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"                    throw new TodoInputError();"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"            case \"deadline\": {"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d \"\";"},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":"                    String inputWord \u003d scan.next();"},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"                    while (inputWord.charAt(0) !\u003d \u0027/\u0027){"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d inputWord;"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d \" \";"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":"                        inputWord \u003d scan.next();"},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"                    taskName \u003d taskName.trim();"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"                    String deadlineDate \u003d scan.nextLine().trim();"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate deadlineDateObject \u003d LocalDate.parse(deadlineDate);"},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"                    Deadline newDeadline \u003d new Deadline(taskName, deadlineDateObject);"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newDeadline);"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"                    throw new DeadlineInputError();"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"            case \"event\": {"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d \"\";"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"                    String inputWord \u003d scan.next();"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"                    while (inputWord.charAt(0) !\u003d \u0027/\u0027){"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d inputWord;"},{"lineNumber":105,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d \" \";"},{"lineNumber":106,"author":{"gitId":"bryanwhl"},"content":"                        inputWord \u003d scan.next();"},{"lineNumber":107,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"bryanwhl"},"content":"                    taskName \u003d taskName.trim();"},{"lineNumber":109,"author":{"gitId":"bryanwhl"},"content":"                    String eventDate \u003d scan.nextLine().trim();"},{"lineNumber":110,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate eventDateObject \u003d LocalDate.parse(eventDate);"},{"lineNumber":111,"author":{"gitId":"bryanwhl"},"content":"                    Event newEvent \u003d new Event(taskName, eventDateObject);"},{"lineNumber":112,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newEvent);"},{"lineNumber":113,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":114,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":115,"author":{"gitId":"bryanwhl"},"content":"                    throw new EventInputError();"},{"lineNumber":116,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":117,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"bryanwhl"},"content":"            case \"delete\": {"},{"lineNumber":119,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":120,"author":{"gitId":"bryanwhl"},"content":"                    int taskNumber;"},{"lineNumber":121,"author":{"gitId":"bryanwhl"},"content":"                    taskNumber \u003d scan.nextInt();"},{"lineNumber":122,"author":{"gitId":"bryanwhl"},"content":"                    if (scan.hasNext()) {"},{"lineNumber":123,"author":{"gitId":"bryanwhl"},"content":"                        throw new DeleteInputError();"},{"lineNumber":124,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":125,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new DeleteCommand(taskNumber);"},{"lineNumber":126,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":127,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":128,"author":{"gitId":"bryanwhl"},"content":"                    throw new DeleteInputError();"},{"lineNumber":129,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":130,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"bryanwhl"},"content":"            case \"save\": {"},{"lineNumber":132,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new SaveCommand();"},{"lineNumber":133,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":134,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"bryanwhl"},"content":"            case \"date\": {"},{"lineNumber":136,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":137,"author":{"gitId":"bryanwhl"},"content":"                    String queryDate \u003d scan.nextLine().trim();"},{"lineNumber":138,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate queryDateObject \u003d LocalDate.parse(queryDate);"},{"lineNumber":139,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new DateCommand(queryDateObject);"},{"lineNumber":140,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":141,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":142,"author":{"gitId":"bryanwhl"},"content":"                    throw new DateInputError();"},{"lineNumber":143,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":144,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"bryanwhl"},"content":"            case \"find\": {"},{"lineNumber":146,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":147,"author":{"gitId":"bryanwhl"},"content":"                    String keyword \u003d scan.next();"},{"lineNumber":148,"author":{"gitId":"bryanwhl"},"content":"                    if (scan.hasNext()) {"},{"lineNumber":149,"author":{"gitId":"bryanwhl"},"content":"                        throw new FindInputError();"},{"lineNumber":150,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":151,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new FindCommand(keyword);"},{"lineNumber":152,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":153,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":154,"author":{"gitId":"bryanwhl"},"content":"                    throw new FindInputError();"},{"lineNumber":155,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":156,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"bryanwhl"},"content":"            default: {"},{"lineNumber":158,"author":{"gitId":"bryanwhl"},"content":"                throw new CommandNotFoundError();"},{"lineNumber":159,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"bryanwhl"},"content":"        return currentCommand;"},{"lineNumber":162,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":164,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":164}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Event;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":" * Storage class for the user\u0027s task datas to be stored in a txt file after finishing the session"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    private String filePath;"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    public Storage(String filePath) {"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     * Method that loads the task list from database.txt"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"     * @return the TaskList object as saved from the previous session"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"    public TaskList loadTaskList() {"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        File readFile;"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"            readFile \u003d new File(filePath);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"            if (readFile.createNewFile()) {"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"                return taskList;"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"            else {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"                Scanner myReader \u003d new Scanner(readFile);"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"                while (myReader.hasNext()) {"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                    String entry \u003d myReader.nextLine();"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"                    Scanner entryData \u003d new Scanner(entry);"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"                    entryData.useDelimiter(\"\\\\|\"); //escaping the character |"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"                    String typeOfEntry \u003d entryData.next().trim();"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"                    String isCompleted \u003d entryData.next().trim();"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"                    switch (typeOfEntry) {"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"                    case \"T\": {"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"                        Todo newTodo \u003d new Todo(taskName);"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"                            newTodo.setDone();"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newTodo);"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"                    case \"D\": {"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"                        String period \u003d entryData.next().trim();"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"                        LocalDate deadlineDate \u003d LocalDate.parse(period);"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"                        Deadline newDeadline \u003d new Deadline(taskName, deadlineDate);"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"                            newDeadline.setDone();"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newDeadline);"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"                    case \"E\": {"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"                        String period \u003d entryData.next().trim();"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"                        LocalDate eventDate \u003d LocalDate.parse(period);"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"                        Event newEvent \u003d new Event(taskName, eventDate);"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"                            newEvent.setDone();"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newEvent);"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"        return taskList;"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"     * Method that saves the user\u0027s task data into database.txt"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"     * @param taskList the user\u0027s latest taskList"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"    public static void saveData(TaskList taskList) {"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"            File database;"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"            database \u003d new File(\"database.txt\");"},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"            database.createNewFile();"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"        String stringForSaving \u003d \"\";"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"            Task currentTask \u003d taskList.getTask(i);"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"            stringForSaving +\u003d currentTask.toStringSave();"},{"lineNumber":105,"author":{"gitId":"bryanwhl"},"content":"            stringForSaving +\u003d \"\\n\";"},{"lineNumber":106,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"bryanwhl"},"content":"            FileWriter fileEditor \u003d new FileWriter(\"database.txt\");"},{"lineNumber":109,"author":{"gitId":"bryanwhl"},"content":"            fileEditor.write(stringForSaving);"},{"lineNumber":110,"author":{"gitId":"bryanwhl"},"content":"            fileEditor.close();"},{"lineNumber":111,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":112,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":113,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":114,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":116}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Todo;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":" * TaskList class that stores the user\u0027s task data during the run time of the app into an ArrayList"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * All TaskList object centers around a central ArrayList\u003cTask\u003e object"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"     * Adds a task to the ArrayList"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     * @param inputTask"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    public void addTask(Task inputTask) {"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        tasks.add(inputTask);"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"     * Updates a task as completed."},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     * @param taskIndex index of task to be updated as completed"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     * @return the task that is updated as completed"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    public Task updateCompletion(int taskIndex) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        tasks.get(taskIndex - 1).setDone();"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        return tasks.get(taskIndex - 1);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"     * @return the current size of the ArrayList"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"    public int size() {"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"        return tasks.size();"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"     * @param index"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"     * @return the task at the particular index of the ArrayList"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"    public Task getTask(int index) {"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"        return tasks.get(index);"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"     * Deletes a task from the ArrayList"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"     * @param index of the task to be deleted"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"     * @return the task that is deleted"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"    public Task deleteTask(int index) {"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"        Task deletedTask \u003d tasks.remove(index - 1);"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"        return deletedTask;"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"     * Looks through the ArrayList to find an event or deadline that matches the date given by the user"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"     * @param queryDate date object to be queried for similarity"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"     * @return an ArrayList of task that has the same date as that queried by the user"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"    public ArrayList\u003cTask\u003e findByDate(LocalDate queryDate) {"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"        ArrayList\u003cTask\u003e tasksWithDate \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"            Task currentTask \u003d tasks.get(i);"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"            if (currentTask instanceof Todo) {"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"                continue;"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"            String taskDateInString \u003d currentTask.getDate().toString();"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"            if (taskDateInString.equals(queryDate.toString())) {"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"                tasksWithDate.add(currentTask);"},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"        return tasksWithDate;"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"     * @return the entire task list"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"    public ArrayList\u003cTask\u003e returnTaskList() {"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"        return tasks;"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"     * @param keyword"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"     * @return the task list of tasks that has names or texts that matches the keyword."},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"    public ArrayList\u003cTask\u003e returnFilteredTaskList(String keyword) {"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"        ArrayList\u003cTask\u003e tasksWithKeyword \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"            Task currentTask \u003d tasks.get(i);"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"            String nameOfTask \u003d currentTask.getName();"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"            if (nameOfTask.contains(keyword)) {"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"                tasksWithKeyword.add(currentTask);"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"                continue;"},{"lineNumber":105,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"bryanwhl"},"content":"        return tasksWithKeyword;"},{"lineNumber":108,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":110,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":110}},{"path":"src/main/java/Duke/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"     * Deadline of the event"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    LocalDate deadline;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for a deadline class"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * @param nameInit"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * @param deadline"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public Deadline(String nameInit, LocalDate deadline) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[D]\";"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[Y]\";"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[N]\";"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"        DateTimeFormatter formatObject \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        String formattedDeadline \u003d deadline.format(formatObject);"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name + \" (by: \" + formattedDeadline + \")\";"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"D | \";"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name + \" | \" + deadline;"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"     * @return the date of the deadline"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"        return deadline;"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":66}},{"path":"src/main/java/Duke/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"     * Date of the event"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    LocalDate eventDate;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"     * Constructor for the event class"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"     * @param nameInit"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * @param eventDate"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public Event(String nameInit, LocalDate eventDate) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[E]\";"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[Y]\";"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[N]\";"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"        DateTimeFormatter formatObject \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        String formattedStartTime \u003d eventDate.format(formatObject);"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name + \" (at: \" + formattedStartTime + \")\";"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"E | \";"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name + \" | \" + eventDate;"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"     * @return the date of the event"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"        return eventDate;"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":65}},{"path":"src/main/java/Duke/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":" * Abstract Task class to be extended by all other Task classes"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     * Name of the task"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    protected String name;"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     * Marker to check if the task is done"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     * Constructor that sets the name of the task"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"     * @param nameInit name of the task"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    public Task (String nameInit) {"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        this.name \u003d nameInit;"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"     * Sets the task as done"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"    public void setDone() {"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"     * Gets the name of the task"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"     * @return the name of the task"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"    public String getName() {"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"        return name;"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"    public abstract String toStringSave();"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"     * gets the date of the task for either the event or deadline task"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"     * @return the LocalDate object of the date of the task"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"    public abstract LocalDate getDate();"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":55}},{"path":"src/main/java/Duke/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"public class Todo extends Task {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"     * constructor for the Todo task"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"     * @param nameInit name of the task"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    public Todo(String nameInit) {"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"     * @return the task formatted nicely in a string for output purposes"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[T]\";"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[Y]\";"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[N]\";"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name;"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"     * @return the string to be saved by the program representing the different attributes of the task"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"T | \";"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name;"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"     * Todo tasks does not have a date, thus null is returned."},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"     * @return null"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"        return null;"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":56}},{"path":"src/main/java/Duke/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":" * UserInterface class that interacts with the user and the command line during the running of the app"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":" */"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"public class UserInterface {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"     * scans the raw user input"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"     * @return the raw user input"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    public String getInput() {"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        String command \u003d scan.nextLine();"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        return command;"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"     * standardizes the format of all outputs and printing the output of"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"     * the user\u0027s command or of any errors that occur"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"     * @param commandOutput"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"    public void printOutput(String commandOutput) {"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(Output.printLine());"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(commandOutput);"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(Output.printLine());"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":30}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"javac  -cp ..\\src\\main\\java\\Duke.Duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.Duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"bryanwhl":2,"-":19}}]
