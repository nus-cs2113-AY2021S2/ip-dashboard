[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"# Duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"1. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"bryanwhl":2,"-":24}},{"path":"database.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"E | 1 | three | 2019-03-03"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":"D | 0 | two | 2018-01-01"}],"authorContributionMap":{"bryanwhl":2}},{"path":"src/main/java/Duke/Commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    public Task taskToAdd;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public AddCommand(Task taskToAdd) {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"        this.taskToAdd \u003d taskToAdd;"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        taskList.addTask(taskToAdd);"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        return Output.printAdded(taskToAdd.toString(), taskList.size());"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":21}},{"path":"src/main/java/Duke/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"abstract public class Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws RangeError;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public boolean isExit() {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        return isExit;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    public void setExit() {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        this.isExit \u003d true;"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":22}},{"path":"src/main/java/Duke/Commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"public class DateCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    LocalDate queryDate;"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    public DateCommand(LocalDate queryDate) {"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        this.queryDate \u003d queryDate;"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d taskList.findByDate(queryDate);"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        return Output.printTaskList(filteredTasks);"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":22}},{"path":"src/main/java/Duke/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    int index;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        this.index \u003d index;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) throws RangeError {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        if (index \u003e taskList.size() || index \u003c 1) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"            throw new RangeError();"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        Task deletedTask \u003d taskList.deleteTask(index);"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        return Output.printDeleted(deletedTask.toString(), taskList.size());"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":25}},{"path":"src/main/java/Duke/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.RangeError;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    int index;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public DoneCommand(int index) {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        this.index \u003d index;"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) throws RangeError {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        if (index \u003e taskList.size() || index \u003c 1) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"            throw new RangeError();"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        Task doneTask \u003d taskList.updateCompletion(index);"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        return Output.printUpdated(doneTask.toString());"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":25}},{"path":"src/main/java/Duke/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class ExitCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    public ExitCommand() {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        this.setExit();"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        return Output.printExit();"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":17}},{"path":"src/main/java/Duke/Commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        //no other commands to execute"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"        return Output.printTaskList(taskList.returnTaskList());"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Commands/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Commands;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Output;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Storage;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class SaveCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        storage.saveData(taskList);"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"        return Output.printSave();"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":14}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"        String storagePath \u003d \"database.txt\";"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        Logic logic \u003d new Logic(storagePath);"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"        logic.run();"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"bryanwhl":7,"-":4}},{"path":"src/main/java/Duke/Exceptions/CommandNotFoundError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class CommandNotFoundError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public CommandNotFoundError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/DateInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DateInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public DateInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! date command must be in the format: date yyyy-mm-dd\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/DeadlineInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DeadlineInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public DeadlineInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! deadline command must be in the format: deadline xxx /by yyyy-mm-dd\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/DeleteInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DeleteInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public DeleteInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! \\\"delete\\\" command must be followed by an integer.\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":12}},{"path":"src/main/java/Duke/Exceptions/DoneInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class DoneInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public DoneInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! \\\"done\\\" command must be followed by an integer.\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    protected String ERROR_MESSAGE;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    public String getMessage() {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"        return this.ERROR_MESSAGE;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/EventInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class EventInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public EventInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! event command must be in the format: event xxx /at yyyy-mm-dd\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/RangeError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class RangeError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public RangeError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! The number you have provided is out of range.\";"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":11}},{"path":"src/main/java/Duke/Exceptions/TodoInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Exceptions;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"public class TodoInputError extends DukeException {"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"    public TodoInputError() {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"        this.ERROR_MESSAGE \u003d \"\\u2639 OOPS!! todo command must be in the format: todo xxx\";"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":9}},{"path":"src/main/java/Duke/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.Command;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public class Logic {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    private TaskList taskList;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    private UserInterface userInterface;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public Logic(String filePath) {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"        userInterface \u003d new UserInterface();"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        taskList \u003d storage.loadTaskList();"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public void run() {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        userInterface.printOutput(Output.printGreet());"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        boolean isExit \u003d false;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        while (!isExit) {"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"            try {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"                String fullCommand \u003d userInterface.getInput();"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"                Command currentCommand \u003d Parser.parse(fullCommand);"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"                String commandOutput \u003d currentCommand.execute(taskList, storage);"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"                userInterface.printOutput(commandOutput);"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"                isExit \u003d currentCommand.isExit();"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"            } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"                userInterface.printOutput(e.getMessage());"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":34}},{"path":"src/main/java/Duke/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"public class Output {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    public static String printLogo() {"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        return logo;"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public static String printLine() {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        String line \u003d \"____________________________________________________________\";"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        return line;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    public static String printGreet() {"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        String greetMessage \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"                + printLogo()"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"                + \"\\nWhat can I do for you?\";"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"        return greetMessage;"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"    public static String printDeleted(String taskName, int size) {"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        String deleteMessage \u003d String.format(\"Noted. I\u0027ve removed this task:\\n  %1$s \\nNow you have %2$d tasks in the list.\","},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"                taskName,"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"                size);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        return deleteMessage;"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"    public static String printAdded(String taskName, int size) {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"        String addMessage \u003d String.format(\"Got it. I\u0027ve added this task:\\n  %1$s \\nNow you have %2$d tasks in the list.\","},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"                taskName,"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                size);"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"        return addMessage;"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"    public static String printUpdated(String taskName) {"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"        String updateMessage \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\","},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"                taskName);"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"        return updateMessage;"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"    public static String printTask(Task task) {"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"        return task.toString();"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"    public static String printTaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"            return \"You do not have any tasks currently.\";"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"        String listTasksMessage \u003d \"\";"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d String.format(\"%d. \", i + 1);"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d printTask(taskList.get(i));"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"            listTasksMessage +\u003d \"\\n\";"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"        return listTasksMessage;"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"    public static String printExit() {"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"        String exitMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"        return exitMessage;"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"    public static String printSave() {"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"        String saveMessage \u003d \"Sure! Your data has been saved.\";"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"        return saveMessage;"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":79}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Commands.*;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Event;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import Duke.Exceptions.*;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        Scanner scan \u003d new Scanner(fullCommand);"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        String instruction \u003d scan.next();"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        Command currentCommand;"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        if (instruction.equals(\"bye\")) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"            currentCommand \u003d new ExitCommand();"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"            return currentCommand;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        switch (instruction) {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"            case \"list\": {"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new ListCommand();"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"            case \"done\": {"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"                int taskNumber;"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"                    taskNumber \u003d scan.nextInt();"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"                    throw new DoneInputError();"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new DoneCommand(taskNumber);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"            case \"todo\": {"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d scan.nextLine().trim();"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"                    Todo newTodo \u003d new Todo(taskName);"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newTodo);"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"                    throw new TodoInputError();"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"            case \"deadline\": {"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d \"\";"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"                    String inputWord \u003d scan.next();"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"                    while (inputWord.charAt(0) !\u003d \u0027/\u0027){"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d inputWord;"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d \" \";"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"                        inputWord \u003d scan.next();"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"                    taskName \u003d taskName.trim();"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"                    String deadlineDate \u003d scan.nextLine().trim();"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate deadlineDateObject \u003d LocalDate.parse(deadlineDate);"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"                    Deadline newDeadline \u003d new Deadline(taskName, deadlineDateObject);"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newDeadline);"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"                    throw new DeadlineInputError();"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"            case \"event\": {"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"                    String taskName \u003d \"\";"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"                    String inputWord \u003d scan.next();"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"                    while (inputWord.charAt(0) !\u003d \u0027/\u0027){"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d inputWord;"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"                        taskName +\u003d \" \";"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"                        inputWord \u003d scan.next();"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"                    taskName \u003d taskName.trim();"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"                    String eventDate \u003d scan.nextLine().trim();"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate eventDateObject \u003d LocalDate.parse(eventDate);"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"                    Event newEvent \u003d new Event(taskName, eventDateObject);"},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new AddCommand(newEvent);"},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":"                    throw new EventInputError();"},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"            case \"delete\": {"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"                int taskNumber;"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"                    taskNumber \u003d scan.nextInt();"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"                    throw new DeleteInputError();"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new DeleteCommand(taskNumber);"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"            case \"save\": {"},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"                currentCommand \u003d new SaveCommand();"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"                break;"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"            case \"date\": {"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"                try {"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"                    String queryDate \u003d scan.nextLine().trim();"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"                    LocalDate queryDateObject \u003d LocalDate.parse(queryDate);"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"                    currentCommand \u003d new DateCommand(queryDateObject);"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"                    break;"},{"lineNumber":105,"author":{"gitId":"bryanwhl"},"content":"                } catch (Exception e) {"},{"lineNumber":106,"author":{"gitId":"bryanwhl"},"content":"                    throw new DateInputError();"},{"lineNumber":107,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"bryanwhl"},"content":"            default: {"},{"lineNumber":110,"author":{"gitId":"bryanwhl"},"content":"                throw new CommandNotFoundError();"},{"lineNumber":111,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"bryanwhl"},"content":"        return currentCommand;"},{"lineNumber":114,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":116,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":116}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Event;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    String filePath;"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public Storage(String filePath) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    public static TaskList loadTaskList() {"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        File readFile;"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"            readFile \u003d new File(\"database.txt\");"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"            if (readFile.createNewFile()) {"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"                return taskList;"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"            else {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"                Scanner myReader \u003d new Scanner(readFile);"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"                while (myReader.hasNext()) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"                    String entry \u003d myReader.nextLine();"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"                    Scanner entryData \u003d new Scanner(entry);"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"                    entryData.useDelimiter(\"\\\\|\"); //escaping the character |"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"                    String typeOfEntry \u003d entryData.next().trim();"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"                    String isCompleted \u003d entryData.next().trim();"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"                    switch (typeOfEntry) {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"                    case \"T\": {"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"                        Todo newTodo \u003d new Todo(taskName);"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"                            newTodo.setDone();"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newTodo);"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":"                    case \"D\": {"},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":50,"author":{"gitId":"bryanwhl"},"content":"                        String period \u003d entryData.next().trim();"},{"lineNumber":51,"author":{"gitId":"bryanwhl"},"content":"                        LocalDate deadlineDate \u003d LocalDate.parse(period);"},{"lineNumber":52,"author":{"gitId":"bryanwhl"},"content":"                        Deadline newDeadline \u003d new Deadline(taskName, deadlineDate);"},{"lineNumber":53,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":54,"author":{"gitId":"bryanwhl"},"content":"                            newDeadline.setDone();"},{"lineNumber":55,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":56,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newDeadline);"},{"lineNumber":57,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":58,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":59,"author":{"gitId":"bryanwhl"},"content":"                    case \"E\": {"},{"lineNumber":60,"author":{"gitId":"bryanwhl"},"content":"                        String taskName \u003d entryData.next().trim();"},{"lineNumber":61,"author":{"gitId":"bryanwhl"},"content":"                        String period \u003d entryData.next().trim();"},{"lineNumber":62,"author":{"gitId":"bryanwhl"},"content":"                        LocalDate eventDate \u003d LocalDate.parse(period);"},{"lineNumber":63,"author":{"gitId":"bryanwhl"},"content":"                        Event newEvent \u003d new Event(taskName, eventDate);"},{"lineNumber":64,"author":{"gitId":"bryanwhl"},"content":"                        if (isCompleted.equals(\"1\")) {"},{"lineNumber":65,"author":{"gitId":"bryanwhl"},"content":"                            newEvent.setDone();"},{"lineNumber":66,"author":{"gitId":"bryanwhl"},"content":"                        }"},{"lineNumber":67,"author":{"gitId":"bryanwhl"},"content":"                        taskList.addTask(newEvent);"},{"lineNumber":68,"author":{"gitId":"bryanwhl"},"content":"                        break;"},{"lineNumber":69,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":70,"author":{"gitId":"bryanwhl"},"content":"                    }"},{"lineNumber":71,"author":{"gitId":"bryanwhl"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":75,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"bryanwhl"},"content":"        return taskList;"},{"lineNumber":78,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":80,"author":{"gitId":"bryanwhl"},"content":"    public static void saveData(TaskList taskList) {"},{"lineNumber":81,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"bryanwhl"},"content":"            File database;"},{"lineNumber":83,"author":{"gitId":"bryanwhl"},"content":"            database \u003d new File(\"database.txt\");"},{"lineNumber":84,"author":{"gitId":"bryanwhl"},"content":"            database.createNewFile();"},{"lineNumber":85,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":86,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":87,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":88,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"bryanwhl"},"content":"        String stringForSaving \u003d \"\";"},{"lineNumber":90,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":91,"author":{"gitId":"bryanwhl"},"content":"            Task currentTask \u003d taskList.getTask(i);"},{"lineNumber":92,"author":{"gitId":"bryanwhl"},"content":"            stringForSaving +\u003d currentTask.toStringSave();"},{"lineNumber":93,"author":{"gitId":"bryanwhl"},"content":"            stringForSaving +\u003d \"\\n\";"},{"lineNumber":94,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"bryanwhl"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"bryanwhl"},"content":"            FileWriter fileEditor \u003d new FileWriter(\"database.txt\");"},{"lineNumber":97,"author":{"gitId":"bryanwhl"},"content":"            fileEditor.write(stringForSaving);"},{"lineNumber":98,"author":{"gitId":"bryanwhl"},"content":"            fileEditor.close();"},{"lineNumber":99,"author":{"gitId":"bryanwhl"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"bryanwhl"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":101,"author":{"gitId":"bryanwhl"},"content":"            e.printStackTrace();"},{"lineNumber":102,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":104}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import Duke.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public void addTask(Task inputTask) {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"        tasks.add(inputTask);"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    public Task updateCompletion(int taskIndex) {"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        tasks.get(taskIndex - 1).setDone();"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        return tasks.get(taskIndex - 1);"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"    public int size() {"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"        return tasks.size();"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"    public Task getTask(int index) {"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        return tasks.get(index);"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"    public Task deleteTask(int taskIndex) {"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"        Task deletedTask \u003d tasks.remove(taskIndex - 1);"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        return deletedTask;"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"    public ArrayList\u003cTask\u003e findByDate(LocalDate queryDate) {"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        ArrayList\u003cTask\u003e tasksWithDate \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"            Task currentTask \u003d tasks.get(i);"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"            if (currentTask.getDate() !\u003d null \u0026\u0026 currentTask.getDate().toString().equals(queryDate.toString())) {"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"                tasksWithDate.add(currentTask);"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"        return tasksWithDate;"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"    public ArrayList\u003cTask\u003e returnTaskList() {"},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"        return tasks;"},{"lineNumber":47,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":49,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":49}},{"path":"src/main/java/Duke/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    LocalDate deadline;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    public Deadline(String nameInit, LocalDate deadline) {"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[D]\";"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2713]\";"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2715]\";"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        DateTimeFormatter formatObject \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        String formattedDeadline \u003d deadline.format(formatObject);"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name + \" (by: \" + formattedDeadline + \")\";"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"D | \";"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name + \" | \" + deadline;"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"        return deadline;"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":46,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":46}},{"path":"src/main/java/Duke/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    LocalDate eventDate;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    public Event(String nameInit, LocalDate eventDate) {"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[E]\";"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2713]\";"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2715]\";"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"        DateTimeFormatter formatObject \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        String formattedStartTime \u003d eventDate.format(formatObject);"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name + \" (at: \" + formattedStartTime + \")\";"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"E | \";"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name + \" | \" + eventDate;"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":42,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":43,"author":{"gitId":"bryanwhl"},"content":"        return eventDate;"},{"lineNumber":44,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":45}},{"path":"src/main/java/Duke/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    protected String name;"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"    public Task (String nameInit) {"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"        this.name \u003d nameInit;"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"    public void setDone() {"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        isDone \u003d true;"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"    public abstract String toStringSave();"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"    public abstract LocalDate getDate();"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":22}},{"path":"src/main/java/Duke/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke.Tasks;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"public class Todo extends Task {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    public Todo(String nameInit) {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"        super(nameInit);"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"        String outputString \u003d \"[T]\";"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2713]\";"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"            outputString +\u003d \"[\\u2715]\";"},{"lineNumber":19,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"bryanwhl"},"content":"        outputString \u003d outputString + \" \" + name;"},{"lineNumber":21,"author":{"gitId":"bryanwhl"},"content":"        return outputString;"},{"lineNumber":22,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":24,"author":{"gitId":"bryanwhl"},"content":"    public String toStringSave() {"},{"lineNumber":25,"author":{"gitId":"bryanwhl"},"content":"        String saveString \u003d \"T | \";"},{"lineNumber":26,"author":{"gitId":"bryanwhl"},"content":"        if (isDone) {"},{"lineNumber":27,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"1 | \";"},{"lineNumber":28,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"bryanwhl"},"content":"        else {"},{"lineNumber":30,"author":{"gitId":"bryanwhl"},"content":"            saveString +\u003d \"0 | \";"},{"lineNumber":31,"author":{"gitId":"bryanwhl"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"bryanwhl"},"content":"        saveString \u003d saveString + name;"},{"lineNumber":33,"author":{"gitId":"bryanwhl"},"content":"        return saveString;"},{"lineNumber":34,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":36,"author":{"gitId":"bryanwhl"},"content":"    public LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"bryanwhl"},"content":"        return null;"},{"lineNumber":38,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":40,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":40}},{"path":"src/main/java/Duke/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bryanwhl"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":3,"author":{"gitId":"bryanwhl"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":5,"author":{"gitId":"bryanwhl"},"content":"public class UserInterface {"},{"lineNumber":6,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":7,"author":{"gitId":"bryanwhl"},"content":"    public String getInput() {"},{"lineNumber":8,"author":{"gitId":"bryanwhl"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":9,"author":{"gitId":"bryanwhl"},"content":"        String command \u003d scan.nextLine();"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"        return command;"},{"lineNumber":11,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"bryanwhl"},"content":""},{"lineNumber":13,"author":{"gitId":"bryanwhl"},"content":"    public void printOutput(String commandOutput) {"},{"lineNumber":14,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(Output.printLine());"},{"lineNumber":15,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(commandOutput);"},{"lineNumber":16,"author":{"gitId":"bryanwhl"},"content":"        System.out.println(Output.printLine());"},{"lineNumber":17,"author":{"gitId":"bryanwhl"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"}"}],"authorContributionMap":{"bryanwhl":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"bryanwhl"},"content":"javac  -cp ..\\src\\main\\java\\Duke.Duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.Duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"bryanwhl"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"bryanwhl":2,"-":19}}]
