[{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Types of commands available in Duke."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"    BYE, DONE, ERROR, LIST, TODO, DEADLINE, EVENT, DELETE, FIND,"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    DONE_ERROR, DELETE_ERROR, FIND_ERROR, ADD_ERROR"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":9}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.execute.CommandExecutor;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.list.TaskList;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import duke.ui.TextUi;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import static duke.storage.Storage.loadFile;"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import static duke.storage.Storage.saveFile;"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":" * Entry point of the Duke application."},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":" * Initializes the application and starts the interaction with the user."},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    private TextUi ui;"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"        new Duke().run();"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"     * Runs the program until termination."},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"    private void run() {"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"        start();"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        runCommandLoopUntilExitCommand();"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        exit();"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    private void start() {"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        this.ui \u003d new TextUi();"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        ui.printInitialMsg();"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"            loadFile(taskList);"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        } catch (IOException | SecurityException e) {"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"            ui.printLoadFileError();"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"            ui.corruptedFileError();"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    private void runCommandLoopUntilExitCommand() {"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        Command command;"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        CommandExecutor executor \u003d new CommandExecutor();"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        do {"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"            String userCommandText \u003d ui.scanInput();"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"            command \u003d executor.executeCommand(taskList, userCommandText);"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"            ui.printReaction(taskList, command, userCommandText);"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        } while (!ui.isExit(command));"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"    private void exit() {"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"            saveFile(taskList);"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"        } catch (IOException | SecurityException e) {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"            ui.printSaveFileError();"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"        System.exit(0);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hussain1998":61,"-":4}},{"path":"src/main/java/duke/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Signals that the description of a Task is empty."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":7}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Signals that command entered by user is invalid."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":7}},{"path":"src/main/java/duke/execute/CommandExecutor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.execute;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.EmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import duke.list.TaskList;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":" * Executes User commands."},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"public class CommandExecutor {"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"     * Given the user input, processes the input into various commands."},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"     * Then, validates and executes those commands"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     * @param taskList ArrayList of tasks."},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"     * @param input User input."},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"     * @return the command based on input if it passes validation. Else, returns error."},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public Command executeCommand(TaskList taskList, String input) {"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        Command command;"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"            command \u003d Parser.getCommand(input);"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"            switch (command) {"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"            case TODO:"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"                command \u003d taskList.addTask(input.replaceFirst(\"todo \", \"\"), Command.TODO);"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"            case DEADLINE:"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"                command \u003d taskList.addTask(input.replaceFirst(\"deadline \", \"\"), Command.DEADLINE);"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"            case EVENT:"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"                command \u003d taskList.addTask(input.replaceFirst(\"event \", \"\"), Command.EVENT);"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"            case DONE:"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"                try {"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"                    Parser.validateDescription(input, Command.DONE);"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"                } catch (EmptyDescriptionException e) {"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"                    command \u003d Command.DONE_ERROR;"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"                    break;"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"                try {"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"                    int taskNum \u003d Parser.getTaskNum(input, Command.DONE);"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"                    taskList.finishTask(taskNum - 1);"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"                } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"                    command \u003d Command.DONE_ERROR;"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"            case DELETE:"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"                try {"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"                    Parser.validateDescription(input, Command.DELETE);"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"                } catch (EmptyDescriptionException e) {"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"                    command \u003d Command.DELETE_ERROR;"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"            case FIND:"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"                try {"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"                    Parser.validateDescription(input, Command.FIND);"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"                } catch (EmptyDescriptionException e) {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"                    command \u003d Command.FIND_ERROR;"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"            default:"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"            command \u003d Command.ERROR;"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"        return command;"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":72}},{"path":"src/main/java/duke/list/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.list;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.EmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":" * Represents the entire task list. Contains the Tasks inputted by user."},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"     * Creates an empty ArrayList to store Tasks."},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"     * Add a Task to the TaskList"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"     * @param description description of a task"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"     * @param command user\u0027s command"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"     * @return user\u0027s command if valid task. Else, return error."},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"    public Command addTask(String description, Command command) {"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        Task newTask;"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        String[] stringArray;"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"            Parser.validateDescription(description, command);"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        } catch (EmptyDescriptionException e) {"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"            return Command.ADD_ERROR;"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"        switch (command) {"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        case TODO:"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"            newTask \u003d new ToDo(description);"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"        case EVENT:"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"            stringArray \u003d description.split(\"/at\");"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"                newTask \u003d new Event(stringArray[0], stringArray[1].trim());"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"                return Command.ERROR;"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        case DEADLINE:"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"            stringArray \u003d description.split(\"/by\");"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"                newTask \u003d new Deadline(stringArray[0], stringArray[1].trim());"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"                return Command.ERROR;"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"            return Command.ERROR;"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"        tasks.add(newTask);"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"        return command;"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"     * Get string representation of TaskList."},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"     * @return a String containing all the information of all the Tasks"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"        StringBuilder outputString \u003d new StringBuilder();"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"            outputString.append(i + 1);"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"            outputString.append(\".\");"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"            outputString.append(tasks.get(i).toString());"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"            outputString.append(System.lineSeparator());"},{"lineNumber":81,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"        if (outputString.length() \u003d\u003d 0) {"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"            return \"List is empty!\";"},{"lineNumber":84,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"        return outputString.toString().trim();"},{"lineNumber":86,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":88,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"     * Set Task as done, given index of the Task in TaskList."},{"lineNumber":90,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"hussain1998"},"content":"     * @param taskIndex index of Task in TaskList"},{"lineNumber":92,"author":{"gitId":"hussain1998"},"content":"     * @throws IndexOutOfBoundsException If taskIndex is out of range"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"hussain1998"},"content":"    public void finishTask(int taskIndex) throws IndexOutOfBoundsException{"},{"lineNumber":95,"author":{"gitId":"hussain1998"},"content":"        tasks.get(taskIndex).setDone();"},{"lineNumber":96,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":98,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"hussain1998"},"content":"     * Set the last Task in TaskList as done."},{"lineNumber":100,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"hussain1998"},"content":"    public void finishLastTask() {"},{"lineNumber":102,"author":{"gitId":"hussain1998"},"content":"        tasks.get(tasks.size() - 1).setDone();"},{"lineNumber":103,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":105,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"hussain1998"},"content":"     * Get a Task in TaskList given the index of Task"},{"lineNumber":107,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"hussain1998"},"content":"     * @param taskIndex index of Task in TaskList"},{"lineNumber":109,"author":{"gitId":"hussain1998"},"content":"     * @return a Task in that index"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"    public Task getTask(int taskIndex) {"},{"lineNumber":112,"author":{"gitId":"hussain1998"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":113,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":115,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"     * Get the last Task of TaskList"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"hussain1998"},"content":"     * @return the last Task in TaskList"},{"lineNumber":119,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"hussain1998"},"content":"    public Task getLastTask() {"},{"lineNumber":121,"author":{"gitId":"hussain1998"},"content":"        return getTask(getSize() - 1);"},{"lineNumber":122,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"     * Get size of TaskList"},{"lineNumber":126,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"hussain1998"},"content":"     * @return size of TaskList"},{"lineNumber":128,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"hussain1998"},"content":"    public int getSize() {"},{"lineNumber":130,"author":{"gitId":"hussain1998"},"content":"        return tasks.size();"},{"lineNumber":131,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":133,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"hussain1998"},"content":"     * Get the to be deleted Task before deleting. Afterwards, delete the Task."},{"lineNumber":135,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"hussain1998"},"content":"     * @param taskIndex index of Task in TaskList"},{"lineNumber":137,"author":{"gitId":"hussain1998"},"content":"     * @return the deleted Task"},{"lineNumber":138,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"hussain1998"},"content":"    public Task getDeletedTask(int taskIndex) {"},{"lineNumber":140,"author":{"gitId":"hussain1998"},"content":"        Task task \u003d tasks.get(taskIndex);"},{"lineNumber":141,"author":{"gitId":"hussain1998"},"content":"        deleteTask(taskIndex);"},{"lineNumber":142,"author":{"gitId":"hussain1998"},"content":"        return task;"},{"lineNumber":143,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":145,"author":{"gitId":"hussain1998"},"content":"    private void deleteTask(int taskNum) {"},{"lineNumber":146,"author":{"gitId":"hussain1998"},"content":"        tasks.remove(taskNum);"},{"lineNumber":147,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":149,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"hussain1998"},"content":"     * Find all Tasks with corresponding keywords in the ArrayList"},{"lineNumber":151,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"hussain1998"},"content":"     * @param keyword keyword to search for"},{"lineNumber":153,"author":{"gitId":"hussain1998"},"content":"     * @return an ArrayList of Tasks that contains the keyword"},{"lineNumber":154,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"hussain1998"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyword) {"},{"lineNumber":156,"author":{"gitId":"hussain1998"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"hussain1998"},"content":"        for (Task task : tasks) {"},{"lineNumber":158,"author":{"gitId":"hussain1998"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":159,"author":{"gitId":"hussain1998"},"content":"                foundTasks.add(task);"},{"lineNumber":160,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"hussain1998"},"content":"        return foundTasks;"},{"lineNumber":163,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":164}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.EmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":" * Parses user inputs."},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"     * Parses user input into command for execution"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"     * @param input full user input string"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"     * @return the command based on the user input"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"     * @throws InvalidCommandException  If wrong input entered by user"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"    public static Command getCommand(String input) throws InvalidCommandException {"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"            return Command.LIST;"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"        } else if (input.equals(\"bye\")) {"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"            return Command.BYE;"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"done \")) {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"            return Command.DONE;"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"todo \")) {"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"            return Command.TODO;"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"deadline \")) {"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"            return Command.DEADLINE;"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"event \")) {"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"            return Command.EVENT;"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"delete \")) {"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"            return Command.DELETE;"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"        } else if (input.startsWith(\"find \")) {"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"            return Command.FIND;"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"            throw new InvalidCommandException();"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"     * Checks if the description entered by user is valid for the respective command."},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"     * @param description description part of the user input"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"     * @param command user\u0027s intended command"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"     * @throws EmptyDescriptionException If description is empty"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"    public static void validateDescription(String description, Command command) throws EmptyDescriptionException {"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        boolean isEmptyDescription \u003d false;"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"            isEmptyDescription \u003d true;"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"        switch (command) {"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        case DONE:"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"            if (description.replace(\"done \", \"\").equals(\"\")) {"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"                isEmptyDescription \u003d true;"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"        case DELETE:"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"            if (description.replace(\"delete \", \"\").equals(\"\")) {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"                isEmptyDescription \u003d true;"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"        case FIND:"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"            if (description.replace(\"find \", \"\").equals(\"\")) {"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"                isEmptyDescription \u003d true;"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        case EVENT:"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"            String[] stringArray \u003d description.split(\"/at\");"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"            for (String keyword : stringArray) {"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"                isEmptyDescription \u003d isEmptyDescription || keyword.trim().isEmpty();"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"        case DEADLINE:"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"            stringArray \u003d description.split(\"/by\");"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"            for (String keyword : stringArray) {"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"                isEmptyDescription \u003d isEmptyDescription || keyword.trim().isEmpty();"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":81,"author":{"gitId":"hussain1998"},"content":"        default:"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"hussain1998"},"content":"        if (isEmptyDescription){"},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":86,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"hussain1998"},"content":"     * Parses the user input to get task number. Only for Done and Delete command."},{"lineNumber":91,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"hussain1998"},"content":"     * @param input full user input string"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":"     * @param command user\u0027s intended command"},{"lineNumber":94,"author":{"gitId":"hussain1998"},"content":"     * @return the task number indicated by user"},{"lineNumber":95,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"hussain1998"},"content":"    public static int getTaskNum(String input, Command command) throws NumberFormatException {"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        switch (command) {"},{"lineNumber":98,"author":{"gitId":"hussain1998"},"content":"        case DONE:"},{"lineNumber":99,"author":{"gitId":"hussain1998"},"content":"            return Integer.parseInt(input.replaceFirst(\"done \", \"\"));"},{"lineNumber":100,"author":{"gitId":"hussain1998"},"content":"        case DELETE:"},{"lineNumber":101,"author":{"gitId":"hussain1998"},"content":"            return Integer.parseInt(input.replaceFirst(\"delete \", \"\"));"},{"lineNumber":102,"author":{"gitId":"hussain1998"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"hussain1998"},"content":"            return -1;"},{"lineNumber":104,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":106}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.list.TaskList;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.exceptions.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"import java.io.FileWriter;"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":" * Represents the Storage used to store the tasks."},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    private static final String DIRECTORY_NAME \u003d \"data\";"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"    private static final String FILE_NAME \u003d \"duke.txt\";"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    private static final String DONE \u003d \"1\";"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"     * Loads tasks from file into taskList."},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"     * @param taskList ArrayList of tasks"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"     * @throws IOException If I/O is failed or interrupted"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"     * @throws InvalidCommandException If file was corrupted and wrong command is given"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"     * @throws SecurityException If there is a security violation in accessing the file"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    public static void loadFile(TaskList taskList) throws IOException, InvalidCommandException, SecurityException {"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        createDirectory();"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        createFile();"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"        loadTasks(taskList);"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"     * Saves tasks into file from taskList."},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"     * @param taskList ArrayList of tasks"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"     * @throws IOException If I/O is failed or interrupted"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"     * @throws SecurityException If there is a security violation in accessing the file"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"    public static void saveFile(TaskList taskList) throws IOException, SecurityException {"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"        createDirectory();"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        createFile();"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"        saveTasks(taskList);"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"    private static void createDirectory() throws SecurityException {"},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"        File directory \u003d new File(DIRECTORY_NAME);"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"        if (!directory.exists()) {"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"            directory.mkdir();"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"    private static void createFile() throws SecurityException, IOException {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        File file \u003d new File(DIRECTORY_NAME + \"/\" + FILE_NAME);"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"        if (!file.exists()) {"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"            file.createNewFile();"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"    private static void loadTasks(TaskList taskList) throws FileNotFoundException, InvalidCommandException {"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"        File file \u003d new File(DIRECTORY_NAME + \"/\" + FILE_NAME);"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"            processTasks(taskList, scanner.nextLine());"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"    private static void processTasks(TaskList taskList, String task) throws InvalidCommandException {"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"        String[] taskArray \u003d task.split(\"\\\\|\");"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"        switch (Parser.getCommand(taskArray[0])) {"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"        case TODO:"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"            taskList.addTask(taskArray[2], Command.TODO);"},{"lineNumber":81,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"        case EVENT:"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"            taskList.addTask(taskArray[2], Command.EVENT);"},{"lineNumber":84,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"        case DEADLINE:"},{"lineNumber":86,"author":{"gitId":"hussain1998"},"content":"            taskList.addTask(taskArray[2], Command.DEADLINE);"},{"lineNumber":87,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"        if (taskArray[1].equals(DONE)) {"},{"lineNumber":90,"author":{"gitId":"hussain1998"},"content":"            taskList.finishLastTask();"},{"lineNumber":91,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":94,"author":{"gitId":"hussain1998"},"content":"    private static void saveTasks(TaskList taskList) throws IOException {"},{"lineNumber":95,"author":{"gitId":"hussain1998"},"content":"        FileWriter writer \u003d new FileWriter(DIRECTORY_NAME + \"/\" + FILE_NAME);"},{"lineNumber":96,"author":{"gitId":"hussain1998"},"content":"        int taskCount \u003d taskList.getSize();"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":98,"author":{"gitId":"hussain1998"},"content":"            Task task \u003d taskList.getTask(i);"},{"lineNumber":99,"author":{"gitId":"hussain1998"},"content":"            String outputString \u003d processTasks(task) + \"\\n\";"},{"lineNumber":100,"author":{"gitId":"hussain1998"},"content":"            writer.write(outputString);"},{"lineNumber":101,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"hussain1998"},"content":"        writer.close();"},{"lineNumber":103,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":105,"author":{"gitId":"hussain1998"},"content":"    private static String processTasks(Task task) {"},{"lineNumber":106,"author":{"gitId":"hussain1998"},"content":"        String[] outputArray \u003d new String[3];"},{"lineNumber":107,"author":{"gitId":"hussain1998"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":108,"author":{"gitId":"hussain1998"},"content":"            outputArray[0] \u003d \"todo \";"},{"lineNumber":109,"author":{"gitId":"hussain1998"},"content":"            outputArray[2] \u003d task.getDescription();"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"            outputArray[0] \u003d \"deadline \";"},{"lineNumber":112,"author":{"gitId":"hussain1998"},"content":"            outputArray[2] \u003d task.getDescription() + \"/by \" + ((Deadline) task).getEndTime();"},{"lineNumber":113,"author":{"gitId":"hussain1998"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":114,"author":{"gitId":"hussain1998"},"content":"            outputArray[0] \u003d \"event \";"},{"lineNumber":115,"author":{"gitId":"hussain1998"},"content":"            outputArray[2] \u003d task.getDescription() + \"/at \" + ((Event) task).getEventTime();"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":"        if (task.isDone()) {"},{"lineNumber":118,"author":{"gitId":"hussain1998"},"content":"            outputArray[1] \u003d \"|1|\";"},{"lineNumber":119,"author":{"gitId":"hussain1998"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"hussain1998"},"content":"            outputArray[1] \u003d \"|0|\";"},{"lineNumber":121,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"hussain1998"},"content":"        return String.join(\"\", outputArray);"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":125}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Represents a type of a task with description and deadline."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"    String endTime;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"     * Creates a Deadline task with description and the end time of deadline."},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"     * @param description description of a task"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"     * @param endTime end time of a deadline task"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public Deadline(String description, String endTime) {"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"     * Get the end time of a deadline task."},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"     * @return String of end time"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"    public String getEndTime() {"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return endTime;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        return \"[D]\" + super.getStatusIcon();"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    public String getDescription() {"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        return super.getDescription();"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"     * {@inheritDoc}"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"     * @return concatenation of task status icon, its description and its end time."},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"        return getStatusIcon() + super.getDescription() + \"(by: \" + endTime + \")\";"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":47}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Represents a type of a task with description and event time."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"    String eventTime;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"     * Creates a Event task with description and the event time."},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"     * @param description description of a task"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"     * @param eventTime event time of a event task"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public Event(String description, String eventTime) {"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"     * Get event time of a Event task."},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"     * @return String of event time"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"    public String getEventTime() {"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return eventTime;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"        return \"[E]\" + super.getStatusIcon();"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"    public String getDescription() {"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"        return super.getDescription();"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"     * {@inheritDoc}"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"     * @return concatenation of task status icon, its description and its event time."},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"        return getStatusIcon() + super.getDescription() + \"(at: \" + eventTime + \")\";"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":47}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Representation of generic task object."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"     * Creates a Task instance with description."},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"     * @param description description of a task"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"     * Get status icon of a task"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"     * @return status icon"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"    protected String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return (isDone ? \"[X] \" : \"[ ] \");"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"     * Get description of a task"},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"     * @return description of a task"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"    public String getDescription() {"},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"        return description;"},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"     * Set status of a task to be done."},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    public void setDone() {"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":"        isDone \u003d true;"},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"     * Get status of a task."},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"     * @return true if task is done and false if not done."},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    public boolean isDone() {"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":"        return isDone;"},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"     * Get string representation of a task."},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"     * @return concatenation of task status icon and its description."},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        return getStatusIcon() + getDescription();"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":63}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":" * Representation of a type of task with only the description."},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"     * Creates a Todo task with description only."},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"     * @param description description of a task"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"        return \"[T]\" + super.getStatusIcon();"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":21}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"import duke.Command;"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"import duke.list.TaskList;"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":" * Ui handles the input and output of the Duke program."},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":" */"},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"public class TextUi {"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"    private final Scanner in;"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"     * Initialises the input of the Duke program."},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"    public TextUi() {"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"        in \u003d initialiseInput();"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"    private Scanner initialiseInput() {"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"hussain1998"},"content":"        return scanner;"},{"lineNumber":27,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":29,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hussain1998"},"content":"     * Prints the starting message of the Duke program."},{"lineNumber":31,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"hussain1998"},"content":"    public void printInitialMsg() {"},{"lineNumber":33,"author":{"gitId":"hussain1998"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":34,"author":{"gitId":"hussain1998"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":35,"author":{"gitId":"hussain1998"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":36,"author":{"gitId":"hussain1998"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":37,"author":{"gitId":"hussain1998"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":38,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":39,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":40,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":41,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":43,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"hussain1998"},"content":"     * Scans for the next line of input from user."},{"lineNumber":45,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"hussain1998"},"content":"     * @return line of input String"},{"lineNumber":47,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"hussain1998"},"content":"    public String scanInput() {"},{"lineNumber":49,"author":{"gitId":"hussain1998"},"content":"        return in.nextLine();"},{"lineNumber":50,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":52,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"hussain1998"},"content":"     * Prints reaction based on the command value."},{"lineNumber":54,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"hussain1998"},"content":"     * @param taskList ArrayList of tasks"},{"lineNumber":56,"author":{"gitId":"hussain1998"},"content":"     * @param command Command of user"},{"lineNumber":57,"author":{"gitId":"hussain1998"},"content":"     * @param userCommandText full String of user input"},{"lineNumber":58,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"hussain1998"},"content":"    public void printReaction(TaskList taskList, Command command, String userCommandText) {"},{"lineNumber":60,"author":{"gitId":"hussain1998"},"content":"        switch (command) {"},{"lineNumber":61,"author":{"gitId":"hussain1998"},"content":"        case BYE:"},{"lineNumber":62,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":63,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"hussain1998"},"content":"        case LIST:"},{"lineNumber":65,"author":{"gitId":"hussain1998"},"content":"            System.out.println(taskList);"},{"lineNumber":66,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"hussain1998"},"content":"        case DONE:"},{"lineNumber":68,"author":{"gitId":"hussain1998"},"content":"            int taskNum \u003d Parser.getTaskNum(userCommandText, Command.DONE);"},{"lineNumber":69,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator() +"},{"lineNumber":70,"author":{"gitId":"hussain1998"},"content":"                    taskList.getTask(taskNum - 1));"},{"lineNumber":71,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"hussain1998"},"content":"        case DELETE:"},{"lineNumber":73,"author":{"gitId":"hussain1998"},"content":"            taskNum \u003d Parser.getTaskNum(userCommandText, Command.DELETE);"},{"lineNumber":74,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\" + System.lineSeparator() +"},{"lineNumber":75,"author":{"gitId":"hussain1998"},"content":"                    taskList.getDeletedTask(taskNum - 1));"},{"lineNumber":76,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"hussain1998"},"content":"        case FIND:"},{"lineNumber":78,"author":{"gitId":"hussain1998"},"content":"            ArrayList\u003cTask\u003e foundTasks \u003d taskList.findTask(userCommandText.replaceFirst(\"find \", \"\"));"},{"lineNumber":79,"author":{"gitId":"hussain1998"},"content":"            if (foundTasks.size() \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"hussain1998"},"content":"                System.out.println(\"No tasks found.\");"},{"lineNumber":81,"author":{"gitId":"hussain1998"},"content":"                break;"},{"lineNumber":82,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":84,"author":{"gitId":"hussain1998"},"content":"            for (Task task : foundTasks) {"},{"lineNumber":85,"author":{"gitId":"hussain1998"},"content":"                System.out.println(task);"},{"lineNumber":86,"author":{"gitId":"hussain1998"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"hussain1998"},"content":"        case DONE_ERROR:"},{"lineNumber":89,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Done command needs task number within the range of the list!\");"},{"lineNumber":90,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"hussain1998"},"content":"        case DELETE_ERROR:"},{"lineNumber":92,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Delete command needs task number within the range of the list!\");"},{"lineNumber":93,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"hussain1998"},"content":"        case FIND_ERROR:"},{"lineNumber":95,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Find command needs a keyword!\");"},{"lineNumber":96,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"hussain1998"},"content":"        case ADD_ERROR:"},{"lineNumber":98,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"The description cannot be empty!\");"},{"lineNumber":99,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":100,"author":{"gitId":"hussain1998"},"content":"        case ERROR:"},{"lineNumber":101,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Wrong command entered!: \" + userCommandText);"},{"lineNumber":102,"author":{"gitId":"hussain1998"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"hussain1998"},"content":"        default:"},{"lineNumber":104,"author":{"gitId":"hussain1998"},"content":"            System.out.println(\"Added: \" + taskList.getLastTask());"},{"lineNumber":105,"author":{"gitId":"hussain1998"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":108,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"hussain1998"},"content":"     * Checks if user wants to exit the Duke program"},{"lineNumber":110,"author":{"gitId":"hussain1998"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"hussain1998"},"content":"     * @param command user command"},{"lineNumber":112,"author":{"gitId":"hussain1998"},"content":"     * @return true if user wants to exit. Else, false."},{"lineNumber":113,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"hussain1998"},"content":"    public boolean isExit(Command command) {"},{"lineNumber":115,"author":{"gitId":"hussain1998"},"content":"        return command \u003d\u003d Command.BYE;"},{"lineNumber":116,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":118,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"hussain1998"},"content":"     * Error message when unable to load the file."},{"lineNumber":120,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"hussain1998"},"content":"    public void printLoadFileError() {"},{"lineNumber":122,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"Unable to load records from a file. Continuing Duke with an empty record.\");"},{"lineNumber":123,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":125,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"hussain1998"},"content":"     * Error message when unable to save into the file"},{"lineNumber":127,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"hussain1998"},"content":"    public void printSaveFileError() {"},{"lineNumber":129,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"Unable to save records into file. Duke exiting.\");"},{"lineNumber":130,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"hussain1998"},"content":""},{"lineNumber":132,"author":{"gitId":"hussain1998"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"hussain1998"},"content":"     * Error message when the file is corrupted"},{"lineNumber":134,"author":{"gitId":"hussain1998"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"hussain1998"},"content":"    public void corruptedFileError() {"},{"lineNumber":136,"author":{"gitId":"hussain1998"},"content":"        System.out.println(\"Parts of file were corrupted with wrong commands. Loaded only the uncorrupted commands.\");"},{"lineNumber":137,"author":{"gitId":"hussain1998"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"hussain1998"},"content":"}"}],"authorContributionMap":{"hussain1998":138}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hussain1998"},"content":"list"},{"lineNumber":2,"author":{"gitId":"hussain1998"},"content":"todo I want to learn a new language"},{"lineNumber":3,"author":{"gitId":"hussain1998"},"content":"add I want to sleep"},{"lineNumber":4,"author":{"gitId":"hussain1998"},"content":"deadline cs3235 quiz /by this friday"},{"lineNumber":5,"author":{"gitId":"hussain1998"},"content":"event cs2113t meeting /at this sunday 10am"},{"lineNumber":6,"author":{"gitId":"hussain1998"},"content":"todo sleep early everyday"},{"lineNumber":7,"author":{"gitId":"hussain1998"},"content":"todo eat properly"},{"lineNumber":8,"author":{"gitId":"hussain1998"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"hussain1998"},"content":"deadline homework /by tonight"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"done 6"},{"lineNumber":11,"author":{"gitId":"hussain1998"},"content":"event lecture /at tmr"},{"lineNumber":12,"author":{"gitId":"hussain1998"},"content":"done "},{"lineNumber":13,"author":{"gitId":"hussain1998"},"content":"deadline "},{"lineNumber":14,"author":{"gitId":"hussain1998"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"hussain1998"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"hussain1998"},"content":"event "},{"lineNumber":17,"author":{"gitId":"hussain1998"},"content":"done 1"},{"lineNumber":18,"author":{"gitId":"hussain1998"},"content":"done 2"},{"lineNumber":19,"author":{"gitId":"hussain1998"},"content":"done 3"},{"lineNumber":20,"author":{"gitId":"hussain1998"},"content":"done 5"},{"lineNumber":21,"author":{"gitId":"hussain1998"},"content":"done 7"},{"lineNumber":22,"author":{"gitId":"hussain1998"},"content":"delete 7"},{"lineNumber":23,"author":{"gitId":"hussain1998"},"content":"find want"},{"lineNumber":24,"author":{"gitId":"hussain1998"},"content":"list"},{"lineNumber":25,"author":{"gitId":"hussain1998"},"content":"bye"}],"authorContributionMap":{"hussain1998":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"hussain1998"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"hussain1998":1,"-":20}}]
