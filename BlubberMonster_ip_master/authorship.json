[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"Duke is an application that uses Command Line Interface (CLI) for managing tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"This section will describe the *8* available features and its usages"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"## Feature 1 "},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `todo`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"Adds a todo task into your task list"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"Example of usage: "},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"`todo prepare for cs2113t exam`"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"Gotcha! I\u0027ve added this task:"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"[T][ ] prepare for cs2113t exam"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"1 task left in the list"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"## Feature 2"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `event`"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"Adds an event task into your task list"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"Format: `event \u003cdescription\u003e /at \u003cvenue\u003e`"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"`event cs2113t exam /at nus`"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"Gotcha! I\u0027ve added this task:"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"[E][ ] cs2113t exam (at: nus)"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"1 task left in the list"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"## Feature 3"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `deadline`"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"Adds a deadline task into your task list"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"Format: `deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e`"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"`deadline cs2113t homework /by 2021-01-01`"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":"Gotcha! I\u0027ve added this task:"},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"[D][ ] cs2113t homework (by:Jan 1 2021)"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"1 task left in the list"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":"## Feature 4"},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `list`"},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":67,"author":{"gitId":"BlubberMonster"},"content":"Prints all the task in the task list"},{"lineNumber":68,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":"Format: `list`"},{"lineNumber":70,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":71,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":72,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":73,"author":{"gitId":"BlubberMonster"},"content":"`list`"},{"lineNumber":74,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":75,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":77,"author":{"gitId":"BlubberMonster"},"content":"1. [T][ ] read a book"},{"lineNumber":78,"author":{"gitId":"BlubberMonster"},"content":"2. [E][ ] cs2113t exam (at: nus)"},{"lineNumber":79,"author":{"gitId":"BlubberMonster"},"content":"3. [D][ ] math homework (by:Feb 2 2021)"},{"lineNumber":80,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":81,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":82,"author":{"gitId":"BlubberMonster"},"content":"## Feature 5"},{"lineNumber":83,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":84,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `delete`"},{"lineNumber":85,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":86,"author":{"gitId":"BlubberMonster"},"content":"Removes the selected task from the task list"},{"lineNumber":87,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":88,"author":{"gitId":"BlubberMonster"},"content":"Format: `deadline \u003cindex number\u003e`"},{"lineNumber":89,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":90,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":91,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":92,"author":{"gitId":"BlubberMonster"},"content":"`deadline 2`"},{"lineNumber":93,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":94,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":96,"author":{"gitId":"BlubberMonster"},"content":"The task has been deleted."},{"lineNumber":97,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":98,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":99,"author":{"gitId":"BlubberMonster"},"content":"## Feature 6"},{"lineNumber":100,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":101,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `done`"},{"lineNumber":102,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":103,"author":{"gitId":"BlubberMonster"},"content":"Marks the task as done in the task list"},{"lineNumber":104,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":105,"author":{"gitId":"BlubberMonster"},"content":"Format: `done \u003cindex number\u003e`"},{"lineNumber":106,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":107,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":108,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":109,"author":{"gitId":"BlubberMonster"},"content":"`done 1`"},{"lineNumber":110,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":111,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":112,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":113,"author":{"gitId":"BlubberMonster"},"content":"This task has been done. Good job!"},{"lineNumber":114,"author":{"gitId":"BlubberMonster"},"content":"[X] read a book"},{"lineNumber":115,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":116,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":117,"author":{"gitId":"BlubberMonster"},"content":"## Feature 7"},{"lineNumber":118,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":119,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `find`"},{"lineNumber":120,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":121,"author":{"gitId":"BlubberMonster"},"content":"Searches for the input word amongst all entries in the task list"},{"lineNumber":122,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":123,"author":{"gitId":"BlubberMonster"},"content":"Format: `find \u003cword\u003e`"},{"lineNumber":124,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":125,"author":{"gitId":"BlubberMonster"},"content":"Example of usage:"},{"lineNumber":126,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":127,"author":{"gitId":"BlubberMonster"},"content":"`find book`"},{"lineNumber":128,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":129,"author":{"gitId":"BlubberMonster"},"content":"Expected outcome:"},{"lineNumber":130,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":131,"author":{"gitId":"BlubberMonster"},"content":"1.[T][ ] read a book tonight"},{"lineNumber":132,"author":{"gitId":"BlubberMonster"},"content":"2.[T][ ] read harry potter and the deathly hallows book "},{"lineNumber":133,"author":{"gitId":"BlubberMonster"},"content":"3.[E][ ] attend a book fest tomorrow (at: nus)"},{"lineNumber":134,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":135,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":136,"author":{"gitId":"BlubberMonster"},"content":"## Feature 8"},{"lineNumber":137,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":138,"author":{"gitId":"BlubberMonster"},"content":"### Keyword - `bye`"},{"lineNumber":139,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":140,"author":{"gitId":"BlubberMonster"},"content":"Terminates the program"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"BlubberMonster"},"content":"Format: `bye`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"BlubberMonster"},"content":"`bye`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":149,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":150,"author":{"gitId":"BlubberMonster"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":151,"author":{"gitId":"BlubberMonster"},"content":"```"},{"lineNumber":152,"author":{"gitId":"BlubberMonster"},"content":"---"},{"lineNumber":153,"author":{"gitId":"BlubberMonster"},"content":"## Summary"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"BlubberMonster"},"content":"Keyword | Format"},{"lineNumber":156,"author":{"gitId":"BlubberMonster"},"content":"-------------| ------------"},{"lineNumber":157,"author":{"gitId":"BlubberMonster"},"content":"todo | `todo \u003cdescription\u003e`"},{"lineNumber":158,"author":{"gitId":"BlubberMonster"},"content":"event | `event \u003cdescription\u003e /at \u003cvenue\u003e`"},{"lineNumber":159,"author":{"gitId":"BlubberMonster"},"content":"deadline | `deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e`"},{"lineNumber":160,"author":{"gitId":"BlubberMonster"},"content":"list | `list`"},{"lineNumber":161,"author":{"gitId":"BlubberMonster"},"content":"delete | `delete \u003cindex number\u003e`"},{"lineNumber":162,"author":{"gitId":"BlubberMonster"},"content":"done | `done \u003cindex number\u003e`"},{"lineNumber":163,"author":{"gitId":"BlubberMonster"},"content":"find | `find \u003cword\u003e`"},{"lineNumber":164,"author":{"gitId":"BlubberMonster"},"content":"bye | `bye`"}],"authorContributionMap":{"BlubberMonster":149,"-":15}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":" * Class to create the duke object."},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"    private static Ui ui;"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    private static TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    private static Storage storage;"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * creates the duke object"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     * @param path is the path of the file to be loaded"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"    public Duke(String path) {"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"        storage \u003d new Storage(path);"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"            tasks \u003d new TaskList(storage.loadTasks());"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"            ui.printLoadError();"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"            ui.fileIsEmpty();"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"     * This method keeps getting inputs from the user and performs the tasks accordingly"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"     * Terminates when the user inputs \"bye\""},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"    public void run() {"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"        ui.showWelcome();"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"        boolean isExit \u003d false;"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"        while (!isExit) {"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"                ui.showLine();"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"                if (tasks \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"                    tasks \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"                Ui.printTimeParseError();"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"                Ui.printListIsEmpty();"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"                Ui.printCommandIsInvalid();"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":"    public static void main(String[] args) {"},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":"        new Duke(\"dukeLoad.txt\").run();"},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":"        Storage.saveData();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":""}],"authorContributionMap":{"BlubberMonster":66,"-":3}},{"path":"src/main/java/duke/Keyword.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":" * Class to contain Keyword array and its methods"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"public class Keyword {"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"    public static ArrayList\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"    public static String getKeywords(int index) {"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"        return keywords.get(index);"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    public static void setKeywords(String alphabet) {"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"        keywords.add(alphabet);"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    public static void removeKeyword(int index) {"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"        keywords.remove(index);"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":24}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":" * This class deals with making sense of the user input"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"     * This method takes in the input entered and returns a Command object accordingly"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"     * @param command is the input entered by the user"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"     * @return the appropriate Command object depending on the input entered, or null"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * if the input is invalid"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public static Command parse(String command) {"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"        // makes the input case-insensitive"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"        command \u003d command.toLowerCase();"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"        String[] words \u003d command.split(\" \");"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        if (command.contains(\"list\")) {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"            return new ListCommand(command);"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"        } else if (command.contains(\"done\")) {"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"            return new DoneCommand(command);"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        } else if (command.contains(\"delete\")) {"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"            return new DeleteCommand(command);"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"        } else if (command.contains(\"find\")) {"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"            return new FindCommand(command);"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"        } else if (words[0].equals(\"todo\") || words[0].equals(\"deadline\") || words[0]"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"            .equals(\"event\")) {"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"            return new AddCommand(command);"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"        } else if (command.contains(\"bye\")) {"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"            return new ByeCommand(command);"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"            throw new NullPointerException();"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":43}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":" * This class deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    private static String path;"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public Storage(String path) {"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"        this.path \u003d path;"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"     * Reads the user\u0027s files and loads the task list with the tasks found in the files."},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"     * @return the loaded task list"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"     * @throws FileNotFoundException  If the file does not exist"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"     * @throws NoSuchElementException If the file is empty"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"    public static ArrayList\u003cTask\u003e loadTasks() throws FileNotFoundException, NoSuchElementException {"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"        String loadedCommand;"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"        String[] words;"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"        File f \u003d new File(path);"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"        Scanner input \u003d new Scanner(f);"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"        do {"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"            loadedCommand \u003d input.nextLine();"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"            words \u003d loadedCommand.split(\",\");"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"            if (loadedCommand.charAt(0) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"                tasks.add(new Todo(words[1]));"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"                Keyword.setKeywords(\"T\");"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"            if (loadedCommand.charAt(0) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"                tasks.add(new Event(words[1], words[2]));"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"                Keyword.setKeywords(\"E\");"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"            if (loadedCommand.charAt(0) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"                tasks.add(new Deadline(words[1], words[2]));"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"                Keyword.setKeywords(\"D\");"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"        } while (input.hasNextLine());"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"        return tasks;"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"     * Writes the tasks into a formatted txt file"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"     * @param fw the FileWriter object created by using the Filewriter constructor, which took the"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":"     * path of the saved file as the parameter"},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":"     * @throws IOException If the file path provided is invalid"},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":"    public static void writeData(FileWriter fw) throws IOException {"},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":"        for (int i \u003d 0; i \u003c TaskList.getListSize(); ++i) {"},{"lineNumber":67,"author":{"gitId":"BlubberMonster"},"content":"            String keyword \u003d Keyword.getKeywords(i);"},{"lineNumber":68,"author":{"gitId":"BlubberMonster"},"content":"            fw.write(keyword + \",\" + TaskList.getTaskAtIndex(i).getDescription());"},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":"            if (keyword \u003d\u003d \"E\") {"},{"lineNumber":70,"author":{"gitId":"BlubberMonster"},"content":"                fw.write(\" | \" + Event.getAt());"},{"lineNumber":71,"author":{"gitId":"BlubberMonster"},"content":"            } else if (keyword \u003d\u003d \"D\") {"},{"lineNumber":72,"author":{"gitId":"BlubberMonster"},"content":"                fw.write(\" | \" + Deadline.getBy());"},{"lineNumber":73,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"BlubberMonster"},"content":"            fw.write(System.lineSeparator());"},{"lineNumber":75,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":78,"author":{"gitId":"BlubberMonster"},"content":"    public static void saveData() {"},{"lineNumber":79,"author":{"gitId":"BlubberMonster"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"BlubberMonster"},"content":"            File path \u003d new File(\"dukeSave.txt\");"},{"lineNumber":81,"author":{"gitId":"BlubberMonster"},"content":"            FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":82,"author":{"gitId":"BlubberMonster"},"content":"            writeData(fw);"},{"lineNumber":83,"author":{"gitId":"BlubberMonster"},"content":"            fw.close();"},{"lineNumber":84,"author":{"gitId":"BlubberMonster"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printSaveError();"},{"lineNumber":86,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":88}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":" * This class contains the task list and has many methods to manipulate the task list."},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"    private static ArrayList\u003cTask\u003e taskList;"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    public static void addTask(Task task) {"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"        taskList.add(task);"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"    public void deleteTask(Task task) {"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"        taskList.remove(task);"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    public static int getListSize() {"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        return taskList.size();"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"    public static Task getTaskAtIndex(int index) {"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        return taskList.get(index);"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":33}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":" * Class to deal with interactions with the user"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    public static void printTimeParseError() {"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Please enter the time format as YYYY-MM-DD!\");"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    public static void printNoMatchedTasks() {"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"No matching results found\");"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public  void printBye() {"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"    public static void printDone(Task task) {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"This task has been done. Good job!\");"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"        task.printDescription();"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(\"\\n\");"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"    public static void printDeleted() {"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"The task has been deleted.\");"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"    public void showWelcome() {"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"        showLine();"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Hi! I\u0027m Duke UwU\");"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"What can I do for you today?\");"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"        showLine();"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"    public static void printCommandIsInvalid() {"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Invalid command! Please try again.\");"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"    public static void printListIsEmpty() {"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"List is empty!\");"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"    public static void printTaskSize() {"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"        if (TaskList.getListSize() \u003d\u003d 1) {"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(TaskList.getListSize() + \" task left in the list\");"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(TaskList.getListSize() + \" tasks left in the list\");"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"    public static void printMatchedIndex(int index) {"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(index + \".\");"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":"    public static void printTodoDescription() {"},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Gotcha! I\u0027ve added this task:\");"},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(\"[T]\");"},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":68,"author":{"gitId":"BlubberMonster"},"content":"    public static void printDeadlineDescription() {"},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Gotcha! I\u0027ve added this task:\");"},{"lineNumber":70,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(\"[D]\");"},{"lineNumber":71,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":73,"author":{"gitId":"BlubberMonster"},"content":"    public static void printEventDescription() {"},{"lineNumber":74,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Gotcha! I\u0027ve added this task:\");"},{"lineNumber":75,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(\"[E]\");"},{"lineNumber":76,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":78,"author":{"gitId":"BlubberMonster"},"content":"    public static void printAtDescription() {"},{"lineNumber":79,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"(at:\" + Event.getAt() + \")\");"},{"lineNumber":80,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":82,"author":{"gitId":"BlubberMonster"},"content":"    public static void printByDescription() {"},{"lineNumber":83,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"(by:\" + Deadline.getBy() + \")\");"},{"lineNumber":84,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":86,"author":{"gitId":"BlubberMonster"},"content":"    public static void showLine() {"},{"lineNumber":87,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":88,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":90,"author":{"gitId":"BlubberMonster"},"content":"    public String readCommand() throws FileNotFoundException {"},{"lineNumber":91,"author":{"gitId":"BlubberMonster"},"content":"        String loadedCommand;"},{"lineNumber":92,"author":{"gitId":"BlubberMonster"},"content":"        Scanner input \u003d new Scanner(System.in);"},{"lineNumber":93,"author":{"gitId":"BlubberMonster"},"content":"        loadedCommand \u003d input.nextLine();"},{"lineNumber":94,"author":{"gitId":"BlubberMonster"},"content":"        return loadedCommand;"},{"lineNumber":95,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":97,"author":{"gitId":"BlubberMonster"},"content":"    public void printLoadError() {"},{"lineNumber":98,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Oh no! Error in loading tasks\");"},{"lineNumber":99,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":101,"author":{"gitId":"BlubberMonster"},"content":"    public static void printSaveError() {"},{"lineNumber":102,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Warning! Save failed\");"},{"lineNumber":103,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":105,"author":{"gitId":"BlubberMonster"},"content":"    public void showError(String message) {"},{"lineNumber":106,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"Warning! Error: \" + message);"},{"lineNumber":107,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":109,"author":{"gitId":"BlubberMonster"},"content":"    public void fileIsEmpty() {"},{"lineNumber":110,"author":{"gitId":"BlubberMonster"},"content":"        System.out.println(\"File loaded is empty!\");"},{"lineNumber":111,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":112}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Keyword;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":" * To handle todo, event and deadline commands Add them to the task list and the time if applicable"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    String at;"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    String by;"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    final int LENGTH_OF_TODO \u003d 4;"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    final int LENGTH_OF_EVENT \u003d 5;"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"    final int LENGTH_OF_DEADLINE \u003d 8;"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    final int START_INDEX_OF_BY \u003d 3;"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"    final int START_INDEX_OF_AT \u003d 3;"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    final int START_INDEX_OF_EVENT \u003d 5;"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    final int START_INDEX_OF_DEADLINE \u003d 8;"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"    public AddCommand(String fullCommand) {"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"     * Checks for the error case where the input is only the command"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"     * @return false if the fullCommand is only the command, without description"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.contains(\"todo\") \u0026\u0026 fullCommand.length() !\u003d LENGTH_OF_TODO) {"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.contains(\"event\") \u0026\u0026 fullCommand.length() !\u003d LENGTH_OF_EVENT) {"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"            return true;"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.contains(\"deadline\") \u0026\u0026 fullCommand.length() !\u003d LENGTH_OF_DEADLINE) {"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"            return true;"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"     * Add todo, event or deadline task to tasklist when command matches Prints invalid command when"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"     * command is invalid"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"     * @param taskList the Task List object which has the current tasks"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"     * @param ui The Ui object for user to interact with"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"     * @throws DateTimeParseException if the user inputs a date format that is invalid"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DateTimeParseException {"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"        if (!isValidInput()) {"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printCommandIsInvalid();"},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"            return;"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.contains(\"todo\")) {"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":"            Todo todo \u003d new Todo(fullCommand.replaceFirst(\"todo\", \"\"));"},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":"            taskList.addTask(todo);"},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":"            Keyword.setKeywords(\"T\");"},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":"            ui.printTodoDescription();"},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":"            todo.printDescription();"},{"lineNumber":67,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(\"\\n\");"},{"lineNumber":68,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printTaskSize();"},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":"        } else if (fullCommand.contains(\"event\")) {"},{"lineNumber":70,"author":{"gitId":"BlubberMonster"},"content":"            at \u003d fullCommand.substring(fullCommand.indexOf(\"/\") + START_INDEX_OF_AT);"},{"lineNumber":71,"author":{"gitId":"BlubberMonster"},"content":"            fullCommand \u003d fullCommand.substring(START_INDEX_OF_EVENT, fullCommand.indexOf(\"/\"));"},{"lineNumber":72,"author":{"gitId":"BlubberMonster"},"content":"            Event event \u003d new Event(fullCommand, at);"},{"lineNumber":73,"author":{"gitId":"BlubberMonster"},"content":"            taskList.addTask(event);"},{"lineNumber":74,"author":{"gitId":"BlubberMonster"},"content":"            Keyword.setKeywords(\"E\");"},{"lineNumber":75,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printEventDescription();"},{"lineNumber":76,"author":{"gitId":"BlubberMonster"},"content":"            event.printDescription();"},{"lineNumber":77,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printAtDescription();"},{"lineNumber":78,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printTaskSize();"},{"lineNumber":79,"author":{"gitId":"BlubberMonster"},"content":"        } else if (fullCommand.contains(\"deadline\")) {"},{"lineNumber":80,"author":{"gitId":"BlubberMonster"},"content":"            by \u003d fullCommand.substring((fullCommand.indexOf(\"/\") + 1) + START_INDEX_OF_BY);"},{"lineNumber":81,"author":{"gitId":"BlubberMonster"},"content":"            fullCommand \u003d fullCommand.substring(START_INDEX_OF_DEADLINE, fullCommand.indexOf(\"/\"));"},{"lineNumber":82,"author":{"gitId":"BlubberMonster"},"content":"            Deadline deadline \u003d new Deadline(fullCommand, Deadline.formatDeadline(by));"},{"lineNumber":83,"author":{"gitId":"BlubberMonster"},"content":"            taskList.addTask(deadline);"},{"lineNumber":84,"author":{"gitId":"BlubberMonster"},"content":"            Keyword.setKeywords(\"D\");"},{"lineNumber":85,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printDeadlineDescription();"},{"lineNumber":86,"author":{"gitId":"BlubberMonster"},"content":"            deadline.printDescription();"},{"lineNumber":87,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printByDescription();"},{"lineNumber":88,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printTaskSize();"},{"lineNumber":89,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":92,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":94,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":95,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":96}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":" * Class to handle the bye command"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"    public ByeCommand(String fullCommand) {"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"        ui.printBye();"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"     * @return true when user inputs bye to terminate the duke object"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"        return true;"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":33}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":" * Abstract class so that the methods can be implemented according to the command"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"    protected String fullCommand;"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    public Command(String fullCommand) {"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    public abstract boolean isValidInput();"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public abstract boolean isExit();"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":23}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Keyword;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":" * Class to handle the delete command"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    final int LENGTH_OF_DELETE \u003d 6;"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     * Removes the selected task from the task list"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"     * @param taskList the Task List object which has the current tasks"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"     * @param ui The Ui object for user to interact with"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"        if (!isValidInput()) {"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printCommandIsInvalid();"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"            return;"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"        String[] words \u003d fullCommand.split(\" \");"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"        int indexOfDeletedTask \u003d Integer.valueOf(words[1])-1;"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"        Task deletedTask \u003d TaskList.getTaskAtIndex(indexOfDeletedTask);"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"        taskList.deleteTask(deletedTask);"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"        Keyword.removeKeyword(Integer.valueOf(indexOfDeletedTask));"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"        Ui.printDeleted();"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"     * Checks for the error case where the input is the command without description"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"     * @return false if the command is invalid"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.length() \u003d\u003d LENGTH_OF_DELETE) {"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"        return true;"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":56}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":" * Class to handle the done command"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"    final int LENGTH_OF_DONE \u003d 4;"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * Carries out the done command and marks the specified task as done in the task list"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     * @param taskList the Task List object which has the current tasks"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"     * @param ui The Ui object for user to interact with"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        if (!isValidInput()) {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printCommandIsInvalid();"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        String[] words \u003d fullCommand.split(\" \");"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"        Task doneObj \u003d taskList.getTaskAtIndex(Integer.valueOf(words[1]) - 1);"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"        doneObj.markAsDone();"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"        Ui.printDone(doneObj);"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"     * Checks for the error case where the input is the command without description"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"     * @return false if the command is invalid"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.length() \u003d\u003d LENGTH_OF_DONE) {"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"        return true;"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":52}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":" * This class deals with the find command"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"public class FindCommand extends Command{"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"    int numberOfMatchedTasks \u003d 0;"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"     * This method finds and print all matching words that match with the search word"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * @param taskList the Task List object which has the current tasks"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     * @param ui The Ui object for user to interact with"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"        String editedWord \u003d fullCommand.replaceFirst(\"find\",\"\");"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        if (!isValidInput()) {"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printCommandIsInvalid();"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"        for (int i \u003d 1; i \u003c\u003d TaskList.getListSize(); ++i) {"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"            if (taskList.getTaskAtIndex(i-1).getDescription().contains(editedWord)) {"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"                Ui.printMatchedIndex(++numberOfMatchedTasks);"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"                ListCommand.printList(taskList, i);"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"        if (numberOfMatchedTasks \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printNoMatchedTasks();"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"     * This method checks for the error case where input is just the command without index number"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"     * @return false if the input is just the command without index number"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.length() \u003d\u003d 4) {"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"            return false;"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"        return true;"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":57}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import duke.Keyword;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":" * Class to handle the list command"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":" */"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"    public ListCommand(String fullCommand) {"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"        super(fullCommand);"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * Carries out the list command and prints out all the tasks in the list"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     * And whether the tasks have been completed"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"     * @param taskList the Task List object which has the current tasks"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"     * @param ui The Ui object for user to interact with"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"     * @throws IndexOutOfBoundsException If the user entered \"list\" when it is empty"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IndexOutOfBoundsException {"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"        if (!isValidInput()) {"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"            Ui.printCommandIsInvalid();"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"            return;"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":"        if (TaskList.getListSize() \u003d\u003d 0) {"},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":"        for (int i \u003d 1; i \u003c\u003d TaskList.getListSize(); ++i) {"},{"lineNumber":37,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(i + \". \");"},{"lineNumber":38,"author":{"gitId":"BlubberMonster"},"content":"            printList(taskList, i);"},{"lineNumber":39,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":42,"author":{"gitId":"BlubberMonster"},"content":"    public static void printList(TaskList taskList, int index) {"},{"lineNumber":43,"author":{"gitId":"BlubberMonster"},"content":"        switch (Keyword.getKeywords(index - 1)) {"},{"lineNumber":44,"author":{"gitId":"BlubberMonster"},"content":"        case \"T\":"},{"lineNumber":45,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"[T]\");"},{"lineNumber":46,"author":{"gitId":"BlubberMonster"},"content":"            taskList.getTaskAtIndex(index - 1).printDescription();"},{"lineNumber":47,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"\\n\");"},{"lineNumber":48,"author":{"gitId":"BlubberMonster"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"BlubberMonster"},"content":"        case \"D\":"},{"lineNumber":50,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"[D]\");"},{"lineNumber":51,"author":{"gitId":"BlubberMonster"},"content":"            taskList.getTaskAtIndex(index - 1).printDescription();"},{"lineNumber":52,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(\"(by:\" + Deadline.getBy() + \")\");"},{"lineNumber":53,"author":{"gitId":"BlubberMonster"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"BlubberMonster"},"content":"        case \"E\":"},{"lineNumber":55,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"[E]\");"},{"lineNumber":56,"author":{"gitId":"BlubberMonster"},"content":"            taskList.getTaskAtIndex(index - 1).printDescription();"},{"lineNumber":57,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(\"(at:\" + Event.getAt() + \")\");"},{"lineNumber":58,"author":{"gitId":"BlubberMonster"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"BlubberMonster"},"content":"        default:"},{"lineNumber":60,"author":{"gitId":"BlubberMonster"},"content":"            System.out.println(\"Oops! An error occurred\");"},{"lineNumber":61,"author":{"gitId":"BlubberMonster"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":65,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":66,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isValidInput() {"},{"lineNumber":68,"author":{"gitId":"BlubberMonster"},"content":"        if (fullCommand.length() \u003d\u003d 4) {"},{"lineNumber":69,"author":{"gitId":"BlubberMonster"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":72,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":74,"author":{"gitId":"BlubberMonster"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"BlubberMonster"},"content":"    public boolean isExit() {"},{"lineNumber":76,"author":{"gitId":"BlubberMonster"},"content":"        return false;"},{"lineNumber":77,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":78}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"    private static String by;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"        this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"     * Takes in the deadline and changes the format of it"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"     * @param by the date as entered by user"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"     * @return the formatted string"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"     * @throws DateTimeParseException if the date format entered by user is invalid"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"    public static String formatDeadline(String by) throws DateTimeParseException {"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"        LocalDate d1 \u003d LocalDate.parse(by);"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":"        return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"    public static String getBy() {"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"            return by;"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":30}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"    private static String at;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"    public Event(String description, String at) {"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"        this.at \u003d at;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":"    public static String getAt() {"},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"        return at;"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"}"}],"authorContributionMap":{"BlubberMonster":15}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"    protected Boolean isDone;"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":13,"author":{"gitId":"BlubberMonster"},"content":"    public String getDescription() {"},{"lineNumber":14,"author":{"gitId":"BlubberMonster"},"content":"        return description;"},{"lineNumber":15,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":17,"author":{"gitId":"BlubberMonster"},"content":"    public void printStatus() {"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"        if (isDone) {"},{"lineNumber":19,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"[X]\");"},{"lineNumber":20,"author":{"gitId":"BlubberMonster"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"BlubberMonster"},"content":"            System.out.print(\"[ ]\");"},{"lineNumber":22,"author":{"gitId":"BlubberMonster"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":25,"author":{"gitId":"BlubberMonster"},"content":"    public void printDescription() {"},{"lineNumber":26,"author":{"gitId":"BlubberMonster"},"content":"        printStatus();"},{"lineNumber":27,"author":{"gitId":"BlubberMonster"},"content":"        System.out.print(description);"},{"lineNumber":28,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":30,"author":{"gitId":"BlubberMonster"},"content":"    public void markAsDone() {"},{"lineNumber":31,"author":{"gitId":"BlubberMonster"},"content":"        this.isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":34,"author":{"gitId":"BlubberMonster"},"content":"}"},{"lineNumber":35,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":36,"author":{"gitId":"BlubberMonster"},"content":""}],"authorContributionMap":{"BlubberMonster":36}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":""},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"    public Todo(String description) {"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"}"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":""}],"authorContributionMap":{"BlubberMonster":9}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BlubberMonster"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"BlubberMonster"},"content":"event eat lunch /at nus"},{"lineNumber":3,"author":{"gitId":"BlubberMonster"},"content":"deadline math hw /by wed"},{"lineNumber":4,"author":{"gitId":"BlubberMonster"},"content":"list"},{"lineNumber":5,"author":{"gitId":"BlubberMonster"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"BlubberMonster"},"content":"list"},{"lineNumber":7,"author":{"gitId":"BlubberMonster"},"content":"delete 3"},{"lineNumber":8,"author":{"gitId":"BlubberMonster"},"content":"list"},{"lineNumber":9,"author":{"gitId":"BlubberMonster"},"content":"bye"}],"authorContributionMap":{"BlubberMonster":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"BlubberMonster"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\DukeException.java ..\\src\\main\\java\\duke\\UserInterface.java ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"BlubberMonster"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"BlubberMonster":2,"-":19}}]
