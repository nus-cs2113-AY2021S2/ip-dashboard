[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"# Lyon user guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"This is a user guide for the Lyon chatbot Java project (originally named Duke). Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"### Prerequisites: JDK 11"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"### Note: The special character | has been reserved by Lyon to store information into the .txt file, so any inputs containing this character will be rejected by Lyon."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"##Guide"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"1. Copy the jar file (CS2113.jar) into an empty folder, and open a command window in that folder."},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"2. Run this command in the command window:"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"\tjava -jar CS2113.jar"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"3. The console appliation will begin to run."},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"4. You may now use any of the commands below, following the given format."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"##Commands"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"###1. list"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"-Simply enter \"list\" into the command window.  "},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"-A list of all of the user\u0027s tasks will be shown."},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"###2. todo {input}"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"-{input} can be anything that the user types."},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"-Creates a new \"todo\" item and adds it to the list of user\u0027s tasks.  "},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"-The task will be reflected as {input}"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"###3. deadline {input} /by {date_input}"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"-{input} can be anything that the user types.  "},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"-{date_input} has to be a real date, given in the format yyyy-mm-dd  "},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"-Creates a new \"deadline\" item and adds it to the list of user\u0027s tasks.  "},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"-The task will be reflected as {input} (by: {date_input})  "},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"###4. event {input} /at {date_input}"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"-{input} can be anything that the user types.  "},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"-{date_input} has to be a real date, given in the format yyyy-mm-dd  "},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"-Creates a new \"event\" item and adds it to the list of user\u0027s tasks.  "},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"-The task will be reflected as {input} (at: {date_input})  "},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"###5. done {input}"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"-{input} is to be the index number of a task in the user\u0027s task list.  "},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"-The task will be reflected as done, with a [X] replacing [ ] to show completion.  "},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"###6. delete {input}"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"-{input} is to be the index number of a task in the list of user\u0027s tasks.  "},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"-The task will be removed from the list of user\u0027s tasks.  "},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"###7. find {input}"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"-{input} can be anything that the user types."},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"-A list of tasks, containing {input} will be returned."},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"###8. bye"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"-Terminates the program."}],"authorContributionMap":{"boonjuey":46,"-":6}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"1|todo|task1||"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":"0|deadline|task2|/by|2020-12-05"},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"1|deadline|games|/by|2021-10-21"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"0|deadline|this|/by|2020-01-01"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"0|deadline|asofja|/by|2020-01-19"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"1|event|new|/at|2010-02-01"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"0|event|now|/at|2012-09-12"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"0|deadline|cs2113|/by|2012-01-01"}],"authorContributionMap":{"boonjuey":8}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    protected LocalDate byDate;"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"     * Constructor for Deadline class"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     * @param description  the description of the task"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"     * @param by date which the task is to be completed by"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"        this.byDate \u003d LocalDate.parse(by);"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"        this.separator \u003d \"/by\";"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"     * Returns the date which the task is to be completed by, after converting it to a string (from LocalDate class)"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"     * @return the string form of the task deadline"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"    public String getBy() {"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        return this.byDate.toString();"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"     * Returns the string form of the specific type of task"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"     * @return string description of the specific type of task"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"        return \"deadline\";"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"     * Returns the task in string form"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"     * @return String form of the task"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + byDate + \")\";"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":48}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"    public static Storage storage \u003d new Storage();"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"     * Code to run the entire program"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"    public static void main(String[] args) {"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"        Messages.welcomeMessage();"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"        Ui.runProgram(storage);"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"        Messages.goodbyeMessage();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"boonjuey":22,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":5}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class Event extends Task{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    protected String atDate;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"     * Constructor for Event class"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"     * @param description  the description of the event"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     * @param at date which the event is on"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"    public Event(String description, String at) {"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"        this.atDate \u003d at;"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"        this.separator \u003d \"/at\";"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     * Returns the date which the event is on, after converting it to a string (from LocalDate class)"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"     * @return the string form of the event date"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"    public String getAt() {"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"        return this.atDate.toString();"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"     * Returns the string form which is event"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"     * @return string description, event"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"        return \"event\";"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"     * Returns the task in string form"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"     * @return String form of the task"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + atDate + \")\";"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":46}},{"path":"src/main/java/duke/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"public class Messages {"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"    protected static String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     * Prints the logo and a welcome message to the console"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"    public static void welcomeMessage(){"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"        String logo \u003d \" _                          \\n\""},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"                + \"| |                         \\n\""},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"                + \"| |     _   _   ___   _ __  \\n\""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"                + \"| |    | | | | / _ \\\\ | \u0027_ \\\\ \\n\""},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"                + \"| |____| |_| || (_) || | | |\\n\""},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"                + \"\\\\_____/ \\\\__, | \\\\___/ |_| |_|\\n\""},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"                + \"         __/ |              \\n\""},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"                + \"        |___/              \\n\";"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"        System.out.println();"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Hello! I\u0027m Lyon\");"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"     * Prints this error message when the user input does not comply with Lyon\u0027s available features"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"    public static void badUserInputMessage(){"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"I\u0027m sorry, your input does not comply with the available features I have.\");"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Kindly try again!\");"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"     * Prints this message when a user successfully uses the \"done\" command"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"    public static void markTaskDoneMessage(ArrayList\u003cTask\u003e tasks, int index){"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"        System.out.println(tasks.get(index).toString());"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"     * Prints this message when a user successfully uses the \"delete\" command"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"    public static void deleteTaskMessage(ArrayList\u003cTask\u003e tasks, int index){"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Noted! I have removed this task:\");"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"        System.out.println(tasks.get(index).toString());"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":"     * Prints this message when a user successfully enters a new item to the task list"},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"    public static void newItemMessage(ArrayList\u003cTask\u003e tasks, Task newItem){"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":"        System.out.println(newItem.toString());"},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"     * Prints this message when a user ends the program"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"    public static void goodbyeMessage(){"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"     * Prints this message when a user uses the \"find\" command and there were no results returned"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"    public static void noFindResults(String term){"},{"lineNumber":82,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":83,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"No results found for search term: \" + term);"},{"lineNumber":84,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":85}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"     * Returns true or false, according to whether a substring is present in the input array of strings"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     * @param input  an array of strings, to be checked"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     * @param substring date which the task is to be completed by"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"     * @return returns true if substring is found in input, returns false otherwise"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    public static boolean checkForSubstring(String[] input, String substring){"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"        for(String string : input){"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"            if(string.equals(substring)){"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"                return true;"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"        return false;"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"     * Returns the index position of the substring, in the array of strings"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"     * @param input  an array of strings, to be checked"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"     * @param substring date which the task is to be completed by"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"     * @return returns true if substring is found in input, returns false otherwise"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"    public static int indexOfSubstring(String[] input, String substring){"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"        int index \u003d 0;"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"        for(String string : input){"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"            if(string.equals(substring)){"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"                return index;"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"            index++;"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"        return -1;"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"     * Returns true or false, according to whether a string can be converted into an integer"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"     * @param s the input string that is to be checked if it can be converted"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"     * @return returns true if string can be converted to an integer, returns false otherwise"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"    public static boolean checkIfInteger(String s) {"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"            Integer.parseInt(s);"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"        return true;"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":"     * Returns true or false, according to whether a string contains the special character \u0027|\u0027"},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":"     * @param s  a string, to be checked if it contains \u0027|\u0027"},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"     * @return returns true if the character \u0027|\u0027is present in the string, returns false otherwise"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":"    public static boolean isSpecialCharacterPresent(String s){"},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":"        if(s.contains(\"|\")){"},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"Your input cannot contain the special character \u0027|\u0027\");"},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"        return false;"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":"     * Returns true or false, according to whether a string can be converted into a LocalDate object"},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"     * @param s  a string, to be checked if it can be converted into a LocalDate object"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"     * @return returns true if the string can be converted into a LocalDate object, returns false otherwise"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":"    public static boolean checkValidLocalDate(String s){"},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"            LocalDate date \u003d LocalDate.parse(s);"},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"            return true;"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":"        } catch (Exception e){"},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":84}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    private Path dataDirectory;"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    private Path dataFileDirectory;"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     * A constructor for Storage class"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    public Storage(){"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"        this.dataDirectory \u003d Path.of(System.getProperty(\"user.dir\") + \"\\\\data\");"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"        this.dataFileDirectory \u003d Path.of(System.getProperty(\"user.dir\") + \"\\\\data\" + \"\\\\duke.txt\");"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"     * Performs a write to disk operation."},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"     * @param tasks an input arraylist of tasks, contents which are to be written to the disk, overwriting whatever"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"     *              is currently present"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"    public void writeToDisk(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"        //Each time I want to write to the Disk, I clear away the entire contents of the data file and write everything"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"        //Done by deleting the file and creating it again"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"        File clear \u003d new File(String.valueOf(this.dataFileDirectory));"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"        clear.delete();"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"        createNewFile();"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"        //To write to the new file, I will append 1 task from the ArrayList at a time"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"        FileWriter fw \u003d new FileWriter(String.valueOf(this.dataFileDirectory), true);"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"        for(Task task : tasks){"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"            String temp \u003d \"\";"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"            if(task.getDoneStatus()){"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"1|\";"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"0|\";"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"            temp +\u003d task.getType() + \"|\" + task.getDescription() + \"|\" + task.getSeparator() + \"|\";"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"            if(task instanceof Event) {"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d ((Event) task).getAt();"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"            } else if(task instanceof Deadline){"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d ((Deadline) task).getBy();"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"\";"},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":"            temp +\u003d \"\\n\";"},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"            fw.write(temp);"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"        fw.close();"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":"     * A wrapper method for the writeToDisk method"},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"     * @param tasks an input arraylist of tasks, contents which are to be written to the disk, overwriting whatever"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"     *              is currently present"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":"    public void wrapWriteToDisk(ArrayList\u003cTask\u003e tasks){"},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":"            writeToDisk(tasks);"},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"Issues with writing to .txt file\");"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"     * Performs a load from disk operation."},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":"     * @param taskList an input TaskList, which is updated from the contents in the disk"},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"boonjuey"},"content":"    public void loadDataFromDisk(TaskList taskList) throws FileNotFoundException {"},{"lineNumber":83,"author":{"gitId":"boonjuey"},"content":"        File dataFile \u003d new File(String.valueOf(dataFileDirectory));"},{"lineNumber":84,"author":{"gitId":"boonjuey"},"content":"        Scanner s \u003d new Scanner(dataFile);"},{"lineNumber":85,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":86,"author":{"gitId":"boonjuey"},"content":"        while(s.hasNext()){"},{"lineNumber":87,"author":{"gitId":"boonjuey"},"content":"            //format I am using is, to use index 0 to store the status."},{"lineNumber":88,"author":{"gitId":"boonjuey"},"content":"            //E.g:"},{"lineNumber":89,"author":{"gitId":"boonjuey"},"content":"            //1|event|memes   r|/at|   next Friday"},{"lineNumber":90,"author":{"gitId":"boonjuey"},"content":"            String temp \u003d s.nextLine();"},{"lineNumber":91,"author":{"gitId":"boonjuey"},"content":"            String[] command \u003d temp.split(\"\\\\|\");"},{"lineNumber":92,"author":{"gitId":"boonjuey"},"content":"            Task tempTask \u003d taskList.populateArrayList(Arrays.copyOfRange(command,1, command.length), taskList.getTasks());"},{"lineNumber":93,"author":{"gitId":"boonjuey"},"content":"            if (command[0].equals(\"1\")){"},{"lineNumber":94,"author":{"gitId":"boonjuey"},"content":"                tempTask.setAsDone();"},{"lineNumber":95,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"boonjuey"},"content":"        s.close();"},{"lineNumber":98,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":100,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"boonjuey"},"content":"     * Creates a new text file at a specified directory"},{"lineNumber":102,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"boonjuey"},"content":"    public void createNewFile() {"},{"lineNumber":104,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":105,"author":{"gitId":"boonjuey"},"content":"            // If directory does not exist, then create the directory"},{"lineNumber":106,"author":{"gitId":"boonjuey"},"content":"            // If directory exists already, just does nothing"},{"lineNumber":107,"author":{"gitId":"boonjuey"},"content":"            checkForDirectory();"},{"lineNumber":108,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"A serious error has occurred\");"},{"lineNumber":110,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":112,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":113,"author":{"gitId":"boonjuey"},"content":"            // If file does not exist, then create the file"},{"lineNumber":114,"author":{"gitId":"boonjuey"},"content":"            checkForFile();"},{"lineNumber":115,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"A serious error has occurred\");"},{"lineNumber":117,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":120,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"boonjuey"},"content":"     * Checks if the text file exists, and creates one otherwise"},{"lineNumber":122,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"boonjuey"},"content":"    public void checkForFile() throws IOException {"},{"lineNumber":124,"author":{"gitId":"boonjuey"},"content":"        if(!Files.exists(this.dataFileDirectory)){"},{"lineNumber":125,"author":{"gitId":"boonjuey"},"content":"            File newFile \u003d new File(String.valueOf(this.dataFileDirectory));"},{"lineNumber":126,"author":{"gitId":"boonjuey"},"content":"            newFile.createNewFile();"},{"lineNumber":127,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":130,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"boonjuey"},"content":"     * Checks if the directory to store the text file exists, and creates one otherwise"},{"lineNumber":132,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"boonjuey"},"content":"    public void checkForDirectory() throws IOException {"},{"lineNumber":134,"author":{"gitId":"boonjuey"},"content":"        if(!Files.exists(this.dataDirectory)){"},{"lineNumber":135,"author":{"gitId":"boonjuey"},"content":"            Files.createDirectory(this.dataDirectory);"},{"lineNumber":136,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":138}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    protected String separator \u003d \"\";"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"     * Constructor for Task class"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     * @param description"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     * Returns the string form of the specific type of task"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"     * @return string description of the specific type of task"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"        return \"task\";"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"     * Returns an icon to represent the completion status of a task"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"     * @return string icon representing task completion status"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"    public String getDescription() {"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"        return this.description;"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"     * Returns an icon to represent the completion status of a task"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"     * @return"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"    public String getStatusIcon() {"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"        //return space or X symbols"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"     * Returns the completion status of this task"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"     * @return completion status of this task"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"    public boolean getDoneStatus() {"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"        return this.isDone;"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":"     * Returns the separator of Task class, for writing into the Storage file"},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":"     * @return the separator of Task class"},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"    public String getSeparator() {"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":"        return this.separator;"},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"     * Sets a particular instance of a Task as completed"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":"    public void setAsDone(){"},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":"        this.isDone \u003d true;"},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"     * Returns the task in string form"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"     * @return String form of the task"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":"    public String toString(){"},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":81}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"    protected ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"    protected Storage storage \u003d new Storage();"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"     * A constructor for TaskList class, that will contain the arraylist of tasks entered by user."},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"    public TaskList(){"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"     * Function to check if the user input is an actual command or not, and acts accordingly"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"     * @returns null if no object was created by the users input, and returns an upcasted form if there was"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"    public Task populateArrayList(String[] command, ArrayList\u003cTask\u003e tasks){"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        Task newItem \u003d null;"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"        switch(command[0]){"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"        case \"list\":"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"                listCommand(command, tasks);"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The list command can only contain 1 word.\");"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"        case \"done\":"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"                doneCommand(command, tasks);"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"                storage.wrapWriteToDisk(tasks);"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The done command consists of the word done, and an integer.\");"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":"        case \"todo\":"},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d todoCommand(command, tasks);"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The description of a todo cannot be empty!\");"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":"        case \"event\":"},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d eventCommand(command, tasks);"},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Your input should contain /at separated by spaces, \" +"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":"                        \"followed by the event time.\");"},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"            catch(Exception e){"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"        case \"deadline\":"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d deadlineCommand(command, tasks);"},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"            catch(DukeException e){"},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Your input should contain /by separated by spaces, \" +"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":"                        \"followed by the deadline.\");"},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":83,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":84,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"boonjuey"},"content":"        case \"bye\":"},{"lineNumber":87,"author":{"gitId":"boonjuey"},"content":"            if(command.length\u003e1){"},{"lineNumber":88,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"I have no such feature!\");"},{"lineNumber":89,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"boonjuey"},"content":"        case \"delete\":"},{"lineNumber":92,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":93,"author":{"gitId":"boonjuey"},"content":"                deleteCommand(command, tasks);"},{"lineNumber":94,"author":{"gitId":"boonjuey"},"content":"                storage.wrapWriteToDisk(tasks);"},{"lineNumber":95,"author":{"gitId":"boonjuey"},"content":"            } catch (DukeException e) {"},{"lineNumber":96,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The delete command consists of the word delete, and an integer.\");"},{"lineNumber":97,"author":{"gitId":"boonjuey"},"content":"            } catch (Exception e) {"},{"lineNumber":98,"author":{"gitId":"boonjuey"},"content":"                Messages.badUserInputMessage();"},{"lineNumber":99,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":101,"author":{"gitId":"boonjuey"},"content":"        case \"find\":"},{"lineNumber":102,"author":{"gitId":"boonjuey"},"content":"            findCommand(command, tasks);"},{"lineNumber":103,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"boonjuey"},"content":"        default:"},{"lineNumber":105,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"I have no such feature!\");"},{"lineNumber":106,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":107,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"boonjuey"},"content":"        return newItem;"},{"lineNumber":109,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":111,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"boonjuey"},"content":"     * Searches through the task list for a search term given by user, and prints matching results. Prints an error"},{"lineNumber":113,"author":{"gitId":"boonjuey"},"content":"     * message if search fails"},{"lineNumber":114,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"find\""},{"lineNumber":116,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":117,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"boonjuey"},"content":"    public void findCommand(String[] command, ArrayList\u003cTask\u003e tasks){"},{"lineNumber":119,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 1){"},{"lineNumber":120,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"Kindly enter a term to search for!\");"},{"lineNumber":121,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"boonjuey"},"content":"            String searchTerm \u003d String.join(\" \", Arrays.copyOfRange(command, 1, command.length));"},{"lineNumber":123,"author":{"gitId":"boonjuey"},"content":"            String searchString;"},{"lineNumber":124,"author":{"gitId":"boonjuey"},"content":"            int count \u003d 0;"},{"lineNumber":125,"author":{"gitId":"boonjuey"},"content":"            int index \u003d 1;"},{"lineNumber":126,"author":{"gitId":"boonjuey"},"content":"            for (Task task : tasks) {"},{"lineNumber":127,"author":{"gitId":"boonjuey"},"content":"                searchString \u003d task.getDescription();"},{"lineNumber":128,"author":{"gitId":"boonjuey"},"content":"                searchString +\u003d \" \";"},{"lineNumber":129,"author":{"gitId":"boonjuey"},"content":"                if (task instanceof Deadline) {"},{"lineNumber":130,"author":{"gitId":"boonjuey"},"content":"                    searchString +\u003d ((Deadline) task).getBy();"},{"lineNumber":131,"author":{"gitId":"boonjuey"},"content":"                } else if (task instanceof Event) {"},{"lineNumber":132,"author":{"gitId":"boonjuey"},"content":"                    searchString +\u003d ((Event) task).getAt();"},{"lineNumber":133,"author":{"gitId":"boonjuey"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"boonjuey"},"content":"                if(searchString.contains(searchTerm)){"},{"lineNumber":135,"author":{"gitId":"boonjuey"},"content":"                    System.out.println(index + \".\" + task.toString());"},{"lineNumber":136,"author":{"gitId":"boonjuey"},"content":"                    count +\u003d 1;"},{"lineNumber":137,"author":{"gitId":"boonjuey"},"content":"                }"},{"lineNumber":138,"author":{"gitId":"boonjuey"},"content":"                index +\u003d 1;"},{"lineNumber":139,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"boonjuey"},"content":"            if(count \u003d\u003d 0){"},{"lineNumber":141,"author":{"gitId":"boonjuey"},"content":"                Messages.noFindResults(searchTerm);"},{"lineNumber":142,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":146,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"boonjuey"},"content":"     * Lists all tasks (and their corresponding timings if any). Prints an empty list if the user has not entered any"},{"lineNumber":148,"author":{"gitId":"boonjuey"},"content":"     * tasks"},{"lineNumber":149,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"list\""},{"lineNumber":151,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":152,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"boonjuey"},"content":"    public void listCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":154,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 1){"},{"lineNumber":155,"author":{"gitId":"boonjuey"},"content":"            int index \u003d 1;"},{"lineNumber":156,"author":{"gitId":"boonjuey"},"content":"            System.out.println(Messages.LINE);"},{"lineNumber":157,"author":{"gitId":"boonjuey"},"content":"            for (Task task : tasks) {"},{"lineNumber":158,"author":{"gitId":"boonjuey"},"content":"                System.out.println(index + \".\" + task.toString());"},{"lineNumber":159,"author":{"gitId":"boonjuey"},"content":"                index +\u003d 1;"},{"lineNumber":160,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"boonjuey"},"content":"            System.out.println(Messages.LINE);"},{"lineNumber":162,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":163,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":164,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":167,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"boonjuey"},"content":"     * Marks a task as done, by checking the list of user entered tasks for the index specified by the user. Will print"},{"lineNumber":169,"author":{"gitId":"boonjuey"},"content":"     * an error message if the operation fails."},{"lineNumber":170,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"done\""},{"lineNumber":172,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":173,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"boonjuey"},"content":"    public void doneCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":175,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 2 \u0026\u0026 Parser.checkIfInteger(command[1])){"},{"lineNumber":176,"author":{"gitId":"boonjuey"},"content":"            int index \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":177,"author":{"gitId":"boonjuey"},"content":"            if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":178,"author":{"gitId":"boonjuey"},"content":"                // If the given value to set as done is an existing index"},{"lineNumber":179,"author":{"gitId":"boonjuey"},"content":"                tasks.get(index).setAsDone();"},{"lineNumber":180,"author":{"gitId":"boonjuey"},"content":"                Messages.markTaskDoneMessage(tasks, index);"},{"lineNumber":181,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":182,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The input index that you have selected to indicate as done, \"+"},{"lineNumber":183,"author":{"gitId":"boonjuey"},"content":"                        \"is out of the range of existing indexes!\");"},{"lineNumber":184,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":185,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":186,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":187,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":190,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"boonjuey"},"content":"     * Deletes a task, finds the item by checking the list of user entered tasks for the index specified by the user."},{"lineNumber":192,"author":{"gitId":"boonjuey"},"content":"     * Will print an error message if the operation fails."},{"lineNumber":193,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"delete\""},{"lineNumber":195,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":196,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"boonjuey"},"content":"    public void deleteCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":198,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 2 \u0026\u0026 Parser.checkIfInteger(command[1])){"},{"lineNumber":199,"author":{"gitId":"boonjuey"},"content":"            int index \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":200,"author":{"gitId":"boonjuey"},"content":"            if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":201,"author":{"gitId":"boonjuey"},"content":"                // If the given value to delete is an existing index, allow deletion"},{"lineNumber":202,"author":{"gitId":"boonjuey"},"content":"                Messages.deleteTaskMessage(tasks, index);"},{"lineNumber":203,"author":{"gitId":"boonjuey"},"content":"                tasks.remove(index);"},{"lineNumber":204,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":205,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The input index that you have selected to delete, \"+"},{"lineNumber":206,"author":{"gitId":"boonjuey"},"content":"                        \"is out of the range of existing indexes!\");"},{"lineNumber":207,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":209,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":210,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":213,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"boonjuey"},"content":"     * Creates a new Task object and adds it to the arraylist, as well as return this newly created object."},{"lineNumber":215,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"todo\""},{"lineNumber":217,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":218,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":219,"author":{"gitId":"boonjuey"},"content":"     * @return a Task object, created from information from command. Return null if there were issues with user input"},{"lineNumber":220,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"boonjuey"},"content":"    public Task todoCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":222,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003e 1) {"},{"lineNumber":223,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d new Todo(String.join(\" \", Arrays.copyOfRange(command, 1, command.length)));"},{"lineNumber":224,"author":{"gitId":"boonjuey"},"content":"            tasks.add(newItem);"},{"lineNumber":225,"author":{"gitId":"boonjuey"},"content":"            return newItem;"},{"lineNumber":226,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":227,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":228,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":231,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"boonjuey"},"content":"     * Creates a new Event object and adds it to the arraylist, as well as return this newly created object."},{"lineNumber":233,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"event\""},{"lineNumber":235,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":236,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":237,"author":{"gitId":"boonjuey"},"content":"     * @return an Event object, created from information from command. Return null if there were issues with user input"},{"lineNumber":238,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"boonjuey"},"content":"    public Task eventCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":240,"author":{"gitId":"boonjuey"},"content":"        if(Parser.checkForSubstring(command, \"/at\")){"},{"lineNumber":241,"author":{"gitId":"boonjuey"},"content":"            int separatorIndex \u003d Parser.indexOfSubstring(command, \"/at\");"},{"lineNumber":242,"author":{"gitId":"boonjuey"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(command,"},{"lineNumber":243,"author":{"gitId":"boonjuey"},"content":"                    1, separatorIndex));"},{"lineNumber":244,"author":{"gitId":"boonjuey"},"content":"            String at \u003d String.join(\" \",Arrays.copyOfRange(command,"},{"lineNumber":245,"author":{"gitId":"boonjuey"},"content":"                    separatorIndex + 1, command.length));"},{"lineNumber":246,"author":{"gitId":"boonjuey"},"content":"            if(Parser.checkValidLocalDate(at)){"},{"lineNumber":247,"author":{"gitId":"boonjuey"},"content":"                Task newItem \u003d new Event(description, at);"},{"lineNumber":248,"author":{"gitId":"boonjuey"},"content":"                tasks.add(newItem);"},{"lineNumber":249,"author":{"gitId":"boonjuey"},"content":"                return newItem;"},{"lineNumber":250,"author":{"gitId":"boonjuey"},"content":"            } else{"},{"lineNumber":251,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Dates are to be entered in the following format: yyyy-mm-dd\");"},{"lineNumber":252,"author":{"gitId":"boonjuey"},"content":"                return null;"},{"lineNumber":253,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":254,"author":{"gitId":"boonjuey"},"content":"        } else{"},{"lineNumber":255,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":256,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":259,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":260,"author":{"gitId":"boonjuey"},"content":"     * Creates a new Deadline object and adds it to the arraylist, as well as return this newly created object."},{"lineNumber":261,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":262,"author":{"gitId":"boonjuey"},"content":"     * @param command an array of strings, which was the user\u0027s input separated by spaces. Index 0 is \"deadline\""},{"lineNumber":263,"author":{"gitId":"boonjuey"},"content":"     * @param tasks the arraylist containing all user entered tasks"},{"lineNumber":264,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":265,"author":{"gitId":"boonjuey"},"content":"     * @return a Deadline object, created from information from command. Return null if any issues with user input"},{"lineNumber":266,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":267,"author":{"gitId":"boonjuey"},"content":"    public Task deadlineCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":268,"author":{"gitId":"boonjuey"},"content":"        if(Parser.checkForSubstring(command, \"/by\")){"},{"lineNumber":269,"author":{"gitId":"boonjuey"},"content":"            int separatorIndex \u003d Parser.indexOfSubstring(command, \"/by\");"},{"lineNumber":270,"author":{"gitId":"boonjuey"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(command,"},{"lineNumber":271,"author":{"gitId":"boonjuey"},"content":"                    1, separatorIndex));"},{"lineNumber":272,"author":{"gitId":"boonjuey"},"content":"            String by \u003d String.join(\" \",Arrays.copyOfRange(command,"},{"lineNumber":273,"author":{"gitId":"boonjuey"},"content":"                    separatorIndex + 1, command.length));"},{"lineNumber":274,"author":{"gitId":"boonjuey"},"content":"            if(Parser.checkValidLocalDate(by)){"},{"lineNumber":275,"author":{"gitId":"boonjuey"},"content":"                Task newItem \u003d new Deadline(description, by);"},{"lineNumber":276,"author":{"gitId":"boonjuey"},"content":"                tasks.add(newItem);"},{"lineNumber":277,"author":{"gitId":"boonjuey"},"content":"                return newItem;"},{"lineNumber":278,"author":{"gitId":"boonjuey"},"content":"            } else{"},{"lineNumber":279,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Dates are to be entered in the following format: yyyy-mm-dd\");"},{"lineNumber":280,"author":{"gitId":"boonjuey"},"content":"                return null;"},{"lineNumber":281,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":282,"author":{"gitId":"boonjuey"},"content":"        } else{"},{"lineNumber":283,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":284,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":287,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":288,"author":{"gitId":"boonjuey"},"content":"     * Returns the arraylist of user\u0027s tasks, for use in certain operations"},{"lineNumber":289,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":290,"author":{"gitId":"boonjuey"},"content":"     * @return arraylist of all user\u0027s"},{"lineNumber":291,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":292,"author":{"gitId":"boonjuey"},"content":"    public ArrayList\u003cTask\u003e getTasks(){"},{"lineNumber":293,"author":{"gitId":"boonjuey"},"content":"        return this.tasks;"},{"lineNumber":294,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":295}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class Todo extends Task{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"     * Constructor for the Todo class"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"     * @param description  the description of the event"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"    public Todo(String description) {"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"     * Returns the string form which is todo task"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"     * @return string description, todo"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"        return \"todo\";"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"     * Returns the todo task in string form"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"     * @return String form of the todo task"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":32}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"     * Constructor for Ui class"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"    public Ui(){"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"     * The method to run the program, which will handle interactions with the user"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"     * @param storage the storage object, which contains information and methods to write to disk"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"    public static void runProgram(Storage storage) {"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"        String userInput;"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        // Check if there is such a file. Otherwise, create a new file."},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"            storage.loadDataFromDisk(taskList);"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"        } catch (FileNotFoundException e){"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"            storage.createNewFile();"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"        do {"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"            userInput \u003d in.nextLine();"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"            String[] command \u003d userInput.split(\" \");"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"            if(Parser.isSpecialCharacterPresent(userInput)){"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"                continue;"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d taskList.populateArrayList(command, taskList.getTasks());"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"            if(newItem !\u003d null){"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"                Messages.newItemMessage(taskList.getTasks(), newItem);"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"                storage.wrapWriteToDisk(taskList.getTasks());"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"        } while (!userInput.equals(\"bye\"));"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":49}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"todo task 1"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":"todo task 1"},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"todo task 2.0"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"list"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"aofijaspfijaf"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"deadline asoidjapf"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"deadline aosfsfj /by asodijsdi"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"deadline         /by "},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"deadline /by"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"list"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"event saofjasos"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"event apsfkpsof /at asofjaspif"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"event /at"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"list"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"done 1"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"done 1.214"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"done done"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"done"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"done 1.0"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"delete 3"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"delete 4.0"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"list"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"byebye"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"bye bye"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"bye"}],"authorContributionMap":{"boonjuey":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"boonjuey":1,"-":20}}]
