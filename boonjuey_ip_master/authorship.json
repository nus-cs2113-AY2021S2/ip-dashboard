[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"boonjuey":2,"-":24}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"        this.separator \u003d \"/by\";"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"    public String getBy() {"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"        return this.by;"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"        return \"deadline\";"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"    public static final Path dataDirectory \u003d Path.of(System.getProperty(\"user.dir\") + \"\\\\data\");"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"    public static final Path dataFileDirectory \u003d Path.of(System.getProperty(\"user.dir\") + \"\\\\data\" + \"\\\\duke.txt\");"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    public static void writeToDisk(ArrayList\u003cTask\u003e tasks) throws IOException{"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"        //Each time I want to write to the Disk, I clear away the entire contents of the data file and write everything"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"        //Done by deleting the file and creating it again"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"        File clear \u003d new File(String.valueOf(dataFileDirectory));"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"        clear.delete();"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        createNewFile();"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"        //To write to the new file, I will append 1 task from the ArrayList at a time"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"        FileWriter fw \u003d new FileWriter(String.valueOf(dataFileDirectory), true);"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"        for(Task task : tasks){"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"            String temp \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"            if(task.getDoneStatus()){"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"1|\";"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"0|\";"},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"            temp +\u003d task.getType() + \"|\" + task.getDescription() + \"|\" + task.getSeparator() + \"|\";"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"            if(task instanceof Event) {"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d ((Event) task).getAt();"},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"            } else if(task instanceof Deadline){"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d ((Deadline) task).getBy();"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":"                temp +\u003d \"\";"},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"boonjuey"},"content":"            temp +\u003d \"\\n\";"},{"lineNumber":47,"author":{"gitId":"boonjuey"},"content":"            fw.write(temp);"},{"lineNumber":48,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"boonjuey"},"content":"        fw.close();"},{"lineNumber":50,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":52,"author":{"gitId":"boonjuey"},"content":"    public static void wrapWriteToDisk(ArrayList\u003cTask\u003e tasks){"},{"lineNumber":53,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":54,"author":{"gitId":"boonjuey"},"content":"            writeToDisk(tasks);"},{"lineNumber":55,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"Issues with writing to .txt file\");"},{"lineNumber":57,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":60,"author":{"gitId":"boonjuey"},"content":"    public static void loadDataFromDisk(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {"},{"lineNumber":61,"author":{"gitId":"boonjuey"},"content":"        File dataFile \u003d new File(String.valueOf(dataFileDirectory));"},{"lineNumber":62,"author":{"gitId":"boonjuey"},"content":"        Scanner s \u003d new Scanner(dataFile);"},{"lineNumber":63,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":64,"author":{"gitId":"boonjuey"},"content":"        while(s.hasNext()){"},{"lineNumber":65,"author":{"gitId":"boonjuey"},"content":"            //format I am using is, to use index 0 to store the status."},{"lineNumber":66,"author":{"gitId":"boonjuey"},"content":"            //E.g:"},{"lineNumber":67,"author":{"gitId":"boonjuey"},"content":"            //1|event|memes   r|/at|   next Friday"},{"lineNumber":68,"author":{"gitId":"boonjuey"},"content":"            String temp \u003d s.nextLine();"},{"lineNumber":69,"author":{"gitId":"boonjuey"},"content":"            String[] command \u003d temp.split(\"\\\\|\");"},{"lineNumber":70,"author":{"gitId":"boonjuey"},"content":"            Task tempTask \u003d populateArrayList(Arrays.copyOfRange(command,1, command.length), tasks);"},{"lineNumber":71,"author":{"gitId":"boonjuey"},"content":"            if (command[0].equals(\"1\")){"},{"lineNumber":72,"author":{"gitId":"boonjuey"},"content":"                tempTask.setAsDone();"},{"lineNumber":73,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"boonjuey"},"content":"        s.close();"},{"lineNumber":76,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":78,"author":{"gitId":"boonjuey"},"content":"    public static void createNewFile() {"},{"lineNumber":79,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":80,"author":{"gitId":"boonjuey"},"content":"            // If directory does not exist, then create the directory"},{"lineNumber":81,"author":{"gitId":"boonjuey"},"content":"            // If directory exists already, just does nothing"},{"lineNumber":82,"author":{"gitId":"boonjuey"},"content":"            checkForDirectory();"},{"lineNumber":83,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":84,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"A serious error has occurred\");"},{"lineNumber":85,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":87,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":88,"author":{"gitId":"boonjuey"},"content":"            // If file does not exist, then create the file"},{"lineNumber":89,"author":{"gitId":"boonjuey"},"content":"            checkForFile();"},{"lineNumber":90,"author":{"gitId":"boonjuey"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"A serious error has occurred\");"},{"lineNumber":92,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":95,"author":{"gitId":"boonjuey"},"content":"    public static void checkForFile() throws IOException {"},{"lineNumber":96,"author":{"gitId":"boonjuey"},"content":"        if(!Files.exists(dataFileDirectory)){"},{"lineNumber":97,"author":{"gitId":"boonjuey"},"content":"            File newFile \u003d new File(String.valueOf(dataFileDirectory));"},{"lineNumber":98,"author":{"gitId":"boonjuey"},"content":"            newFile.createNewFile();"},{"lineNumber":99,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":102,"author":{"gitId":"boonjuey"},"content":"    public static void checkForDirectory() throws IOException {"},{"lineNumber":103,"author":{"gitId":"boonjuey"},"content":"        if(!Files.exists(dataDirectory)){"},{"lineNumber":104,"author":{"gitId":"boonjuey"},"content":"            Files.createDirectory(dataDirectory);"},{"lineNumber":105,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":108,"author":{"gitId":"boonjuey"},"content":"    public static void runProgram() {"},{"lineNumber":109,"author":{"gitId":"boonjuey"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":110,"author":{"gitId":"boonjuey"},"content":"        String userInput;"},{"lineNumber":111,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":112,"author":{"gitId":"boonjuey"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":114,"author":{"gitId":"boonjuey"},"content":"        // Check if there is such a file. Otherwise, create a new file."},{"lineNumber":115,"author":{"gitId":"boonjuey"},"content":"        try{"},{"lineNumber":116,"author":{"gitId":"boonjuey"},"content":"            loadDataFromDisk(tasks);"},{"lineNumber":117,"author":{"gitId":"boonjuey"},"content":"        } catch (FileNotFoundException e){"},{"lineNumber":118,"author":{"gitId":"boonjuey"},"content":"            createNewFile();"},{"lineNumber":119,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":121,"author":{"gitId":"boonjuey"},"content":"        do {"},{"lineNumber":122,"author":{"gitId":"boonjuey"},"content":"            userInput \u003d in.nextLine();"},{"lineNumber":123,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":124,"author":{"gitId":"boonjuey"},"content":"            String[] command \u003d userInput.split(\" \");"},{"lineNumber":125,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":126,"author":{"gitId":"boonjuey"},"content":"            if(isSpecialCharacterPresent(userInput)){"},{"lineNumber":127,"author":{"gitId":"boonjuey"},"content":"                continue;"},{"lineNumber":128,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":130,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d populateArrayList(command, tasks);"},{"lineNumber":131,"author":{"gitId":"boonjuey"},"content":"            if(newItem !\u003d null){"},{"lineNumber":132,"author":{"gitId":"boonjuey"},"content":"                newItemMessage(tasks, newItem);"},{"lineNumber":133,"author":{"gitId":"boonjuey"},"content":"                wrapWriteToDisk(tasks);"},{"lineNumber":134,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"boonjuey"},"content":"        } while (!userInput.equals(\"bye\"));"},{"lineNumber":136,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":138,"author":{"gitId":"boonjuey"},"content":"    public static Task populateArrayList(String[] command, ArrayList\u003cTask\u003e tasks){"},{"lineNumber":139,"author":{"gitId":"boonjuey"},"content":"        Task newItem \u003d null;"},{"lineNumber":140,"author":{"gitId":"boonjuey"},"content":"        switch(command[0]){"},{"lineNumber":141,"author":{"gitId":"boonjuey"},"content":"        case \"list\":"},{"lineNumber":142,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":143,"author":{"gitId":"boonjuey"},"content":"                listCommand(command, tasks);"},{"lineNumber":144,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":146,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The list command can only contain 1 word.\");"},{"lineNumber":147,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":149,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":150,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":152,"author":{"gitId":"boonjuey"},"content":"        case \"done\":"},{"lineNumber":153,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":154,"author":{"gitId":"boonjuey"},"content":"                doneCommand(command, tasks);"},{"lineNumber":155,"author":{"gitId":"boonjuey"},"content":"                wrapWriteToDisk(tasks);"},{"lineNumber":156,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":158,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The done command consists of the word done, and an integer.\");"},{"lineNumber":159,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":161,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":162,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":164,"author":{"gitId":"boonjuey"},"content":"        case \"todo\":"},{"lineNumber":165,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":166,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d todoCommand(command, tasks);"},{"lineNumber":167,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":169,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The description of a todo cannot be empty!\");"},{"lineNumber":170,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":171,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":172,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":173,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":175,"author":{"gitId":"boonjuey"},"content":"        case \"event\":"},{"lineNumber":176,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":177,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d eventCommand(command, tasks);"},{"lineNumber":178,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"boonjuey"},"content":"            catch (DukeException e){"},{"lineNumber":180,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Your input should contain /at separated by spaces, \" +"},{"lineNumber":181,"author":{"gitId":"boonjuey"},"content":"                        \"followed by the event time.\");"},{"lineNumber":182,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"boonjuey"},"content":"            catch(Exception e){"},{"lineNumber":184,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":185,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":186,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":187,"author":{"gitId":"boonjuey"},"content":"        case \"deadline\":"},{"lineNumber":188,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":189,"author":{"gitId":"boonjuey"},"content":"                newItem \u003d deadlineCommand(command, tasks);"},{"lineNumber":190,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"boonjuey"},"content":"            catch(DukeException e){"},{"lineNumber":192,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"Your input should contain /by separated by spaces, \" +"},{"lineNumber":193,"author":{"gitId":"boonjuey"},"content":"                        \"followed by the deadline.\");"},{"lineNumber":194,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"boonjuey"},"content":"            catch (Exception e){"},{"lineNumber":196,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":197,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":199,"author":{"gitId":"boonjuey"},"content":"        case \"bye\":"},{"lineNumber":200,"author":{"gitId":"boonjuey"},"content":"            if(command.length\u003e1){"},{"lineNumber":201,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"I have no such feature!\");"},{"lineNumber":202,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":204,"author":{"gitId":"boonjuey"},"content":"        case \"delete\":"},{"lineNumber":205,"author":{"gitId":"boonjuey"},"content":"            try{"},{"lineNumber":206,"author":{"gitId":"boonjuey"},"content":"                deleteCommand(command, tasks);"},{"lineNumber":207,"author":{"gitId":"boonjuey"},"content":"                wrapWriteToDisk(tasks);"},{"lineNumber":208,"author":{"gitId":"boonjuey"},"content":"            } catch (DukeException e) {"},{"lineNumber":209,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The delete command consists of the word delete, and an integer.\");"},{"lineNumber":210,"author":{"gitId":"boonjuey"},"content":"            } catch (Exception e) {"},{"lineNumber":211,"author":{"gitId":"boonjuey"},"content":"                badUserInputMessage();"},{"lineNumber":212,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":214,"author":{"gitId":"boonjuey"},"content":"        default:"},{"lineNumber":215,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"I have no such feature!\");"},{"lineNumber":216,"author":{"gitId":"boonjuey"},"content":"            break;"},{"lineNumber":217,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"boonjuey"},"content":"        return newItem;"},{"lineNumber":219,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":221,"author":{"gitId":"boonjuey"},"content":"    public static void listCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":222,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 1){"},{"lineNumber":223,"author":{"gitId":"boonjuey"},"content":"            int index \u003d 1;"},{"lineNumber":224,"author":{"gitId":"boonjuey"},"content":"            System.out.println(LINE);"},{"lineNumber":225,"author":{"gitId":"boonjuey"},"content":"            for (Task task : tasks) {"},{"lineNumber":226,"author":{"gitId":"boonjuey"},"content":"                System.out.println(index + \".\" + task.toString());"},{"lineNumber":227,"author":{"gitId":"boonjuey"},"content":"                index +\u003d 1;"},{"lineNumber":228,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"boonjuey"},"content":"            System.out.println(LINE);"},{"lineNumber":230,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":231,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":232,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":235,"author":{"gitId":"boonjuey"},"content":"    public static void doneCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":236,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 2 \u0026\u0026 checkIfInteger(command[1])){"},{"lineNumber":237,"author":{"gitId":"boonjuey"},"content":"            int index \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":238,"author":{"gitId":"boonjuey"},"content":"            if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":239,"author":{"gitId":"boonjuey"},"content":"                // If the given value to set as done is an existing index"},{"lineNumber":240,"author":{"gitId":"boonjuey"},"content":"                tasks.get(index).setAsDone();"},{"lineNumber":241,"author":{"gitId":"boonjuey"},"content":"                markTaskDoneMessage(tasks, index);"},{"lineNumber":242,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":243,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The input index that you have selected to indicate as done, \"+"},{"lineNumber":244,"author":{"gitId":"boonjuey"},"content":"                        \"is out of the range of existing indexes!\");"},{"lineNumber":245,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":246,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":247,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":248,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":251,"author":{"gitId":"boonjuey"},"content":"    public static void deleteCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":252,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003d\u003d 2 \u0026\u0026 checkIfInteger(command[1])){"},{"lineNumber":253,"author":{"gitId":"boonjuey"},"content":"            int index \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":254,"author":{"gitId":"boonjuey"},"content":"            if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":255,"author":{"gitId":"boonjuey"},"content":"                // If the given value to delete is an existing index, allow deletion"},{"lineNumber":256,"author":{"gitId":"boonjuey"},"content":"                deleteTaskMessage(tasks, index);"},{"lineNumber":257,"author":{"gitId":"boonjuey"},"content":"                tasks.remove(index);"},{"lineNumber":258,"author":{"gitId":"boonjuey"},"content":"            } else {"},{"lineNumber":259,"author":{"gitId":"boonjuey"},"content":"                System.out.println(\"The input index that you have selected to delete, \"+"},{"lineNumber":260,"author":{"gitId":"boonjuey"},"content":"                        \"is out of the range of existing indexes!\");"},{"lineNumber":261,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":262,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":263,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":264,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":267,"author":{"gitId":"boonjuey"},"content":"    public static Task todoCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":268,"author":{"gitId":"boonjuey"},"content":"        if(command.length \u003e 1) {"},{"lineNumber":269,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d new Todo(String.join(\" \", Arrays.copyOfRange(command, 1, command.length)));"},{"lineNumber":270,"author":{"gitId":"boonjuey"},"content":"            tasks.add(newItem);"},{"lineNumber":271,"author":{"gitId":"boonjuey"},"content":"            return newItem;"},{"lineNumber":272,"author":{"gitId":"boonjuey"},"content":"        } else {"},{"lineNumber":273,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":274,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":277,"author":{"gitId":"boonjuey"},"content":"    public static Task eventCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":278,"author":{"gitId":"boonjuey"},"content":"        if(checkForSubstring(command, \"/at\")){"},{"lineNumber":279,"author":{"gitId":"boonjuey"},"content":"            int separatorIndex \u003d indexOfSubstring(command, \"/at\");"},{"lineNumber":280,"author":{"gitId":"boonjuey"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(command,"},{"lineNumber":281,"author":{"gitId":"boonjuey"},"content":"                    1, separatorIndex));"},{"lineNumber":282,"author":{"gitId":"boonjuey"},"content":"            String at \u003d String.join(\" \",Arrays.copyOfRange(command,"},{"lineNumber":283,"author":{"gitId":"boonjuey"},"content":"                    separatorIndex + 1, command.length));"},{"lineNumber":284,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":285,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d new Event(description, at);"},{"lineNumber":286,"author":{"gitId":"boonjuey"},"content":"            tasks.add(newItem);"},{"lineNumber":287,"author":{"gitId":"boonjuey"},"content":"            return newItem;"},{"lineNumber":288,"author":{"gitId":"boonjuey"},"content":"        } else{"},{"lineNumber":289,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":290,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":293,"author":{"gitId":"boonjuey"},"content":"    public static Task deadlineCommand(String[] command, ArrayList\u003cTask\u003e tasks) throws DukeException{"},{"lineNumber":294,"author":{"gitId":"boonjuey"},"content":"        if(checkForSubstring(command, \"/by\")){"},{"lineNumber":295,"author":{"gitId":"boonjuey"},"content":"            int separatorIndex \u003d indexOfSubstring(command, \"/by\");"},{"lineNumber":296,"author":{"gitId":"boonjuey"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(command,"},{"lineNumber":297,"author":{"gitId":"boonjuey"},"content":"                    1, separatorIndex));"},{"lineNumber":298,"author":{"gitId":"boonjuey"},"content":"            String by \u003d String.join(\" \",Arrays.copyOfRange(command,"},{"lineNumber":299,"author":{"gitId":"boonjuey"},"content":"                    separatorIndex + 1, command.length));"},{"lineNumber":300,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":301,"author":{"gitId":"boonjuey"},"content":"            Task newItem \u003d new Deadline(description, by);"},{"lineNumber":302,"author":{"gitId":"boonjuey"},"content":"            tasks.add(newItem);"},{"lineNumber":303,"author":{"gitId":"boonjuey"},"content":"            return newItem;"},{"lineNumber":304,"author":{"gitId":"boonjuey"},"content":"        } else{"},{"lineNumber":305,"author":{"gitId":"boonjuey"},"content":"            throw new DukeException();"},{"lineNumber":306,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":309,"author":{"gitId":"boonjuey"},"content":"    public static boolean checkForSubstring(String[] input, String substring){"},{"lineNumber":310,"author":{"gitId":"boonjuey"},"content":"        for(String string : input){"},{"lineNumber":311,"author":{"gitId":"boonjuey"},"content":"            if(string.equals(substring)){"},{"lineNumber":312,"author":{"gitId":"boonjuey"},"content":"                return true;"},{"lineNumber":313,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":314,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"boonjuey"},"content":"        return false;"},{"lineNumber":316,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":318,"author":{"gitId":"boonjuey"},"content":"    public static int indexOfSubstring(String[] input, String substring){"},{"lineNumber":319,"author":{"gitId":"boonjuey"},"content":"        int index \u003d 0;"},{"lineNumber":320,"author":{"gitId":"boonjuey"},"content":"        for(String string : input){"},{"lineNumber":321,"author":{"gitId":"boonjuey"},"content":"            if(string.equals(substring)){"},{"lineNumber":322,"author":{"gitId":"boonjuey"},"content":"                return index;"},{"lineNumber":323,"author":{"gitId":"boonjuey"},"content":"            }"},{"lineNumber":324,"author":{"gitId":"boonjuey"},"content":"            index++;"},{"lineNumber":325,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":326,"author":{"gitId":"boonjuey"},"content":"        return -1;"},{"lineNumber":327,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":329,"author":{"gitId":"boonjuey"},"content":"    public static boolean checkIfInteger(String s) {"},{"lineNumber":330,"author":{"gitId":"boonjuey"},"content":"        try {"},{"lineNumber":331,"author":{"gitId":"boonjuey"},"content":"            Integer.parseInt(s);"},{"lineNumber":332,"author":{"gitId":"boonjuey"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":333,"author":{"gitId":"boonjuey"},"content":"            return false;"},{"lineNumber":334,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"boonjuey"},"content":"        return true;"},{"lineNumber":336,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":338,"author":{"gitId":"boonjuey"},"content":"    public static boolean isSpecialCharacterPresent(String s){"},{"lineNumber":339,"author":{"gitId":"boonjuey"},"content":"        if(s.contains(\"|\")){"},{"lineNumber":340,"author":{"gitId":"boonjuey"},"content":"            System.out.println(\"Your input cannot contain the special character \u0027|\u0027\");"},{"lineNumber":341,"author":{"gitId":"boonjuey"},"content":"            return true;"},{"lineNumber":342,"author":{"gitId":"boonjuey"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"boonjuey"},"content":"        return false;"},{"lineNumber":344,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":346,"author":{"gitId":"boonjuey"},"content":"    public static void welcomeMessage(){"},{"lineNumber":347,"author":{"gitId":"boonjuey"},"content":"        String logo \u003d \" _                          \\n\""},{"lineNumber":348,"author":{"gitId":"boonjuey"},"content":"                + \"| |                         \\n\""},{"lineNumber":349,"author":{"gitId":"boonjuey"},"content":"                + \"| |     _   _   ___   _ __  \\n\""},{"lineNumber":350,"author":{"gitId":"boonjuey"},"content":"                + \"| |    | | | | / _ \\\\ | \u0027_ \\\\ \\n\""},{"lineNumber":351,"author":{"gitId":"boonjuey"},"content":"                + \"| |____| |_| || (_) || | | |\\n\""},{"lineNumber":352,"author":{"gitId":"boonjuey"},"content":"                + \"\\\\_____/ \\\\__, | \\\\___/ |_| |_|\\n\""},{"lineNumber":353,"author":{"gitId":"boonjuey"},"content":"                + \"         __/ |              \\n\""},{"lineNumber":354,"author":{"gitId":"boonjuey"},"content":"                + \"        |___/              \\n\";"},{"lineNumber":355,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":356,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":357,"author":{"gitId":"boonjuey"},"content":"        System.out.println();"},{"lineNumber":358,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":359,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Hello! I\u0027m Lyon\");"},{"lineNumber":360,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":361,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":362,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":363,"author":{"gitId":"boonjuey"},"content":"    public static void badUserInputMessage(){"},{"lineNumber":364,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":365,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"I\u0027m sorry, your input does not comply with the available features I have.\");"},{"lineNumber":366,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Kindly try again!\");"},{"lineNumber":367,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":369,"author":{"gitId":"boonjuey"},"content":"    public static void markTaskDoneMessage(ArrayList\u003cTask\u003e tasks, int index){"},{"lineNumber":370,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":371,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":372,"author":{"gitId":"boonjuey"},"content":"        System.out.println(tasks.get(index).toString());"},{"lineNumber":373,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":374,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":376,"author":{"gitId":"boonjuey"},"content":"    public static void deleteTaskMessage(ArrayList\u003cTask\u003e tasks, int index){"},{"lineNumber":377,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":378,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Noted! I have removed this task:\");"},{"lineNumber":379,"author":{"gitId":"boonjuey"},"content":"        System.out.println(tasks.get(index).toString());"},{"lineNumber":380,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":381,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":383,"author":{"gitId":"boonjuey"},"content":"    public static void newItemMessage(ArrayList\u003cTask\u003e tasks, Task newItem){"},{"lineNumber":384,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":385,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":386,"author":{"gitId":"boonjuey"},"content":"        System.out.println(newItem.toString());"},{"lineNumber":387,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":388,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":389,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":390,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":391,"author":{"gitId":"boonjuey"},"content":"    public static void goodbyeMessage(){"},{"lineNumber":392,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":393,"author":{"gitId":"boonjuey"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":394,"author":{"gitId":"boonjuey"},"content":"        System.out.println(LINE);"},{"lineNumber":395,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":397,"author":{"gitId":"boonjuey"},"content":"    public static void main(String[] args) {"},{"lineNumber":398,"author":{"gitId":"boonjuey"},"content":"        welcomeMessage();"},{"lineNumber":399,"author":{"gitId":"boonjuey"},"content":"        runProgram();"},{"lineNumber":400,"author":{"gitId":"boonjuey"},"content":"        goodbyeMessage();"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"boonjuey":399,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":5}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class Event extends Task{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"        this.separator \u003d \"/at\";"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"    public String getSeparatorType() {"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"        return \"at\";"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    public String getAt() {"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"        return this.at;"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"        return \"event\";"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":29}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    protected String separator \u003d \"\";"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"    //can create static variable to get number of tasks (the range for indexes for the \"done\" command in main)"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"        return \"task\";"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":20,"author":{"gitId":"boonjuey"},"content":"    public String getDescription() {"},{"lineNumber":21,"author":{"gitId":"boonjuey"},"content":"        return this.description;"},{"lineNumber":22,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":24,"author":{"gitId":"boonjuey"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"boonjuey"},"content":"        //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"boonjuey"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":27,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":29,"author":{"gitId":"boonjuey"},"content":"    public boolean getDoneStatus() {"},{"lineNumber":30,"author":{"gitId":"boonjuey"},"content":"        return this.isDone;"},{"lineNumber":31,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":33,"author":{"gitId":"boonjuey"},"content":"    public String getSeparator() {"},{"lineNumber":34,"author":{"gitId":"boonjuey"},"content":"        return this.separator;"},{"lineNumber":35,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":37,"author":{"gitId":"boonjuey"},"content":"    public void setAsDone(){"},{"lineNumber":38,"author":{"gitId":"boonjuey"},"content":"        this.isDone \u003d true;"},{"lineNumber":39,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":41,"author":{"gitId":"boonjuey"},"content":"    public String toString(){"},{"lineNumber":42,"author":{"gitId":"boonjuey"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":43,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":45,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":45}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"boonjuey"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":3,"author":{"gitId":"boonjuey"},"content":"public class Todo extends Task{"},{"lineNumber":4,"author":{"gitId":"boonjuey"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"boonjuey"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":8,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"boonjuey"},"content":"    public String getType() {"},{"lineNumber":10,"author":{"gitId":"boonjuey"},"content":"        return \"todo\";"},{"lineNumber":11,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"boonjuey"},"content":""},{"lineNumber":13,"author":{"gitId":"boonjuey"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"boonjuey"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"boonjuey"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":16,"author":{"gitId":"boonjuey"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"boonjuey"},"content":"}"}],"authorContributionMap":{"boonjuey":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"boonjuey"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"boonjuey":1,"-":20}}]
