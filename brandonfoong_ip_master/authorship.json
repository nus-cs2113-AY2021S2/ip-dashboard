[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    private static final String LINE_DIVIDER \u003d \"\\t____________________________________________________________\";"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    private static final String DUKE_EXPORT_DIRECTORY \u003d \"data/\";"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    private static final String DUKE_EXPORT_FILENAME \u003d \"duke.csv\";"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"            tasks \u003d DukeReader.readFromFile(DUKE_EXPORT_DIRECTORY, DUKE_EXPORT_FILENAME);"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        } catch (IOException ioException) {"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printImportErrorMessage(ioException.getMessage());"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printWelcomeMessage();"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        interactWithUser(tasks);"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printExitMessage();"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    private static void interactWithUser(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        boolean isDoneReadingInputs \u003d false;"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        while (!isDoneReadingInputs) {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e commandTokens \u003d DukeReader.readUserInput();"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"                isDoneReadingInputs \u003d executeUserInput(tasks, commandTokens);"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"            } catch (DukeException dukeException) {"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"                String errorMessage \u003d dukeException.getMessage();"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printDukeErrorMessage(errorMessage);"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"            } catch (NumberFormatException numberFormatException) {"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printInvalidArgumentsMessage();"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"            } catch (IOException ioException) {"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printExportErrorMessage(ioException.getMessage());"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"    private static boolean executeUserInput("},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandTokens)"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"            throws DukeException, NumberFormatException, IOException {"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        if (commandTokens.size() \u003d\u003d 0) {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please enter a command.\\n\""},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"                    + \"Try using \\\"help\\\" for a list of commands.\""},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"            );"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        boolean isDoneReadingInputs \u003d false;"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        switch (commandTokens.get(0)) {"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.BYE_COMMAND:"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.writeToFile(tasks, DUKE_EXPORT_DIRECTORY, DUKE_EXPORT_FILENAME);"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"            isDoneReadingInputs \u003d true;"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.CLEAR_COMMAND:"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"            clearAllTasks(tasks);"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.LIST_COMMAND:"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printTasks(tasks);"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.HELP_COMMAND:"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printHelpMessage();"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.DONE_COMMAND:"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"            markTaskAsDone(tasks, commandTokens);"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.TODO_COMMAND:"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"            addTodo(tasks, commandTokens);"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.DEADLINE_COMMAND:"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"            addDeadline(tasks, commandTokens);"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.EVENT_COMMAND:"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"            addEvent(tasks, commandTokens);"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.DELETE_COMMAND:"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"            deleteTask(tasks, commandTokens);"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"            /* Unknown command, prompt user to use the \"help\" command */"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printFallbackMessage();"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"        return isDoneReadingInputs;"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"    private static void clearAllTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"        tasks.clear();"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTasksClearedMessage();"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"    private static void addTodo(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandArguments) throws DukeException {"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.size() \u003c 2) {"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.get(1).equals(\"\")) {"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d commandArguments.get(1);"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"        Todo todo \u003d new Todo(description);"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"        tasks.add(todo);"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskAdded(tasks, todo);"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"    private static void addDeadline(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandArguments) throws DukeException {"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.size() \u003c 3) {"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.get(1).equals(\"\")) {"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.get(2).equals(\"\")) {"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please specify a deadline for the task.\");"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d commandArguments.get(1);"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"        String dueDate \u003d commandArguments.get(2);"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"        Deadline deadline \u003d new Deadline(description, dueDate);"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"        tasks.add(deadline);"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskAdded(tasks, deadline);"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"    private static void addEvent(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandArguments) throws DukeException {"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.size() \u003c 3) {"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.get(1).equals(\"\")) {"},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.get(2).equals(\"\")) {"},{"lineNumber":136,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please specify a date for the event.\");"},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d commandArguments.get(1);"},{"lineNumber":139,"author":{"gitId":"brandonfoong"},"content":"        String eventDate \u003d commandArguments.get(2);"},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"        Event event \u003d new Event(description, eventDate);"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":"        tasks.add(event);"},{"lineNumber":142,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskAdded(tasks, event);"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":145,"author":{"gitId":"brandonfoong"},"content":"    private static void markTaskAsDone(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandArguments)"},{"lineNumber":146,"author":{"gitId":"brandonfoong"},"content":"            throws DukeException, NumberFormatException {"},{"lineNumber":147,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.size() \u003c 2) {"},{"lineNumber":148,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":149,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"brandonfoong"},"content":"        int taskNumber \u003d Integer.parseInt(commandArguments.get(1));"},{"lineNumber":151,"author":{"gitId":"brandonfoong"},"content":"        /* Enforce that taskNumber is valid */"},{"lineNumber":152,"author":{"gitId":"brandonfoong"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"},{"lineNumber":153,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s an invalid task number!\");"},{"lineNumber":154,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"brandonfoong"},"content":"        /* Change from 1-based indexing to 0-based indexing */"},{"lineNumber":156,"author":{"gitId":"brandonfoong"},"content":"        taskNumber \u003d taskNumber - 1;"},{"lineNumber":157,"author":{"gitId":"brandonfoong"},"content":"        tasks.get(taskNumber).markAsDone();"},{"lineNumber":158,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskMarkedDone(tasks.get(taskNumber));"},{"lineNumber":159,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":161,"author":{"gitId":"brandonfoong"},"content":"    private static void deleteTask(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e commandArguments) throws DukeException {"},{"lineNumber":162,"author":{"gitId":"brandonfoong"},"content":"        if (commandArguments.size() \u003c 2) {"},{"lineNumber":163,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":164,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"brandonfoong"},"content":"        int taskNumber \u003d Integer.parseInt(commandArguments.get(1));"},{"lineNumber":166,"author":{"gitId":"brandonfoong"},"content":"        /* Enforce that taskNumber is valid */"},{"lineNumber":167,"author":{"gitId":"brandonfoong"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"},{"lineNumber":168,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s an invalid task number!\");"},{"lineNumber":169,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"brandonfoong"},"content":"        /* Change from 1-based indexing to 0-based indexing */"},{"lineNumber":171,"author":{"gitId":"brandonfoong"},"content":"        taskNumber \u003d taskNumber - 1;"},{"lineNumber":172,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskDeleted(tasks.get(taskNumber), tasks.size() - 1);"},{"lineNumber":173,"author":{"gitId":"brandonfoong"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":175}},{"path":"src/main/java/duke/DukeCommands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public interface DukeCommands {"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    /* List of all commands that Duke accepts */"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"    public static final String BYE_COMMAND \u003d \"bye\";"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"    public static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    public static final String HELP_COMMAND \u003d \"help\";"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"    public static final String DONE_COMMAND \u003d \"done\";"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    public static final String CLEAR_COMMAND \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    /* List of command delimiters, e.g. \"/by\" for \"deadline\" */"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public static final String DEADLINE_DELIMITER \u003d \"/by\";"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public static final String EVENT_DELIMITER \u003d \"/at\";"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":19}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"    public DukeException(String message) {"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":8}},{"path":"src/main/java/duke/DukePrinter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"/* This class handles printing outputs to screen */"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"public class DukePrinter {"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    private static final String LINE_DIVIDER \u003d \"\\t____________________________________________________________\";"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks, String directory, String filename) throws IOException {"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"        File outputDirectory \u003d new File(directory);"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        if (!outputDirectory.exists()) {"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"            outputDirectory.mkdir();"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        File outputFile \u003d new File(directory + filename);"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        if (!outputFile.exists()) {"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"            outputFile.createNewFile();"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        FileWriter outputWriter \u003d new FileWriter(outputFile);"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        for (Task task : tasks) {"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"            outputWriter.write(task.exportAsCSV() + \"\\n\");"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        outputWriter.close();"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    private static void printMessage(String[] messageSentences) {"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        /* Print sentences at the correct indentation level, with a line divider at the start and end */"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        System.out.println(LINE_DIVIDER);"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        for (int i \u003d 0; i \u003c messageSentences.length; i++) {"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"\\t \" + messageSentences[i]);"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        System.out.println(LINE_DIVIDER);"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"    private static String getNumTasksString(int numberOfTasks) {"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        if (numberOfTasks \u003d\u003d 1) {"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"            return \"You have \" + Integer.toString(numberOfTasks) + \" task in the list.\";"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        return \"You have \" + Integer.toString(numberOfTasks) + \" tasks in the list.\";"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        String[] welcomeMessage \u003d {"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"                \"Hello! I\u0027m Duke\","},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"                \"What can I do for you?\","},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"                \"(Type \u0027help\u0027 for a list of commands)\"};"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        printMessage(welcomeMessage);"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"    public static void printExitMessage() {"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        String[] exitMessage \u003d {"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"                \"Bye. Hope to see you again soon!\"};"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        printMessage(exitMessage);"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"    public static void printHelpMessage() {"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"        String[] helpMessage \u003d {"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"                \"List of valid commands:\","},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"                \"bye - Exits program\","},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"                \"list - Lists all tasks\","},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"                \"done \u003ctask_number\u003e - Mark the specified task as done\","},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"                \"todo \u003ctask_description\u003e - Create a new task with the specified description\","},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"                \"deadline \u003ctask_description\u003e /by \u003cdeadline_date\u003e - \" +"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"                        \"Create a new task with the specified description and deadline\","},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"                \"event \u003ctask_description\u003e /at \u003cevent_date\u003e - \" +"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"                        \"Create a new task with the specified description and event date\""},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        printMessage(helpMessage);"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"    public static void printTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"        String[] taskMessage \u003d new String[tasks.size() + 1];"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"            taskMessage[0] \u003d \"You have no tasks right now\";"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"            taskMessage[0] \u003d \"Here is a list of all your tasks:\";"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"                taskMessage[i + 1] \u003d Integer.toString(i + 1) + \". \" + tasks.get(i);"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskMessage);"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskAdded(ArrayList\u003cTask\u003e tasks, Task task) {"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"        String[] taskAddedMessage \u003d {"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"                \"added: \" + task.toString(),"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"                getNumTasksString(tasks.size())"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskAddedMessage);"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"    public static void printFallbackMessage() {"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"        String[] fallbackMessage \u003d {"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"                \"I didn\u0027t quite catch what you were saying. Please try again.\","},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"                \"Try using \\\"help\\\" for a list of commands.\""},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"        printMessage(fallbackMessage);"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"    public static void printInvalidArgumentsMessage() {"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"        String[] invalidArgumentsMessage \u003d {"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"                \"That\u0027s an invalid task number!\""},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"        printMessage(invalidArgumentsMessage);"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"    public static void printDukeErrorMessage(String errorMessage) {"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"        String[] errorMessages \u003d {"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"                errorMessage,"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"        printMessage(errorMessages);"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskMarkedDone(Task task) {"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"        String[] taskDoneMessages \u003d {"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"                \"Nice! I\u0027ve marked this task as done:\","},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"                task.toString()"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskDoneMessages);"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskDeleted(Task task, int numberOfTasks) {"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"        String[] taskDeletedMessages \u003d {"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"                \"Noted. I\u0027ve removed this task:\","},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"                task.toString(),"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"                getNumTasksString(numberOfTasks)"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskDeletedMessages);"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":136,"author":{"gitId":"brandonfoong"},"content":"    public static void printExportErrorMessage(String errorMessage) {"},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"        String[] exportErrorMessages \u003d {"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"                \"Uh oh! I encountered an error exporting your tasks\","},{"lineNumber":139,"author":{"gitId":"brandonfoong"},"content":"                \"Here are the details:\","},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"                errorMessage"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":142,"author":{"gitId":"brandonfoong"},"content":"        printMessage(exportErrorMessages);"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":145,"author":{"gitId":"brandonfoong"},"content":"    public static void printImportErrorMessage(String errorMessage) {"},{"lineNumber":146,"author":{"gitId":"brandonfoong"},"content":"        String[] exportErrorMessages \u003d {"},{"lineNumber":147,"author":{"gitId":"brandonfoong"},"content":"                \"Uh oh! I encountered an error importing your tasks\","},{"lineNumber":148,"author":{"gitId":"brandonfoong"},"content":"                \"Here are the details:\","},{"lineNumber":149,"author":{"gitId":"brandonfoong"},"content":"                errorMessage"},{"lineNumber":150,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":151,"author":{"gitId":"brandonfoong"},"content":"        printMessage(exportErrorMessages);"},{"lineNumber":152,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":154,"author":{"gitId":"brandonfoong"},"content":"    public static void printTasksClearedMessage() {"},{"lineNumber":155,"author":{"gitId":"brandonfoong"},"content":"        String[] taskClearedMessages \u003d {"},{"lineNumber":156,"author":{"gitId":"brandonfoong"},"content":"                \"All tasks removed!\""},{"lineNumber":157,"author":{"gitId":"brandonfoong"},"content":"        };"},{"lineNumber":158,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskClearedMessages);"},{"lineNumber":159,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":160}},{"path":"src/main/java/duke/DukeReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"public class DukeReader {"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public static ArrayList\u003cTask\u003e readFromFile(String directory, String filename) throws IOException {"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        File inputDirectory \u003d new File(directory);"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        if (!inputDirectory.exists()) {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"            inputDirectory.mkdir();"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        File inputFile \u003d new File(directory + filename);"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        if (!inputFile.exists()) {"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"            /*"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"            * TODO: Add message to tell user that we are importing the data"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"            */"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"            inputFile.createNewFile();"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        Scanner inputReader \u003d new Scanner(inputFile);"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        while (inputReader.hasNext()) {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"            String taskEntry \u003d inputReader.nextLine();"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            String[] taskArguments \u003d taskEntry.split(\",\");"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"            if (taskArguments.length \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"                continue;"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"            switch (taskArguments[0]) {"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"            case \"todo\":"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"                /*"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"                 * TODO: Add error handling while importing tasks (For now, assume that all input is valid)"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"                 */"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"                if (taskArguments.length \u003c 3) {"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"                    break;"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"                Todo todo \u003d new Todo(taskArguments[1]);"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"                tasks.add(todo);"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"            case \"deadline\":"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"                if (taskArguments.length \u003c 4) {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"                    break;"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"                Deadline deadline \u003d new Deadline(taskArguments[1], taskArguments[3]);"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"                tasks.add(deadline);"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"            case \"event\":"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"                if (taskArguments.length \u003c 4) {"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"                Event event \u003d new Event(taskArguments[1], taskArguments[3]);"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"                tasks.add(event);"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"            default:"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"                /*"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"                 * TODO: Handle invalid inputs"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"                 */"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"            boolean isDone \u003d Boolean.parseBoolean(taskArguments[2]);"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"            if (isDone) {"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"                tasks.get(tasks.size() - 1).markAsDone();"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"        return tasks;"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"    private static ArrayList\u003cString\u003e tokenizeInput(String userCommand) {"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"        String[] commandTokens \u003d userCommand.split(\" \", 2);"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        /* Handle empty inputs */"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"        if (commandTokens.length \u003d\u003d 0) {"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"            return new ArrayList\u003cString\u003e();"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"        /* Make commands case-insensitive */"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"        commandTokens[0] \u003d commandTokens[0].toLowerCase();"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e commandParsed \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"        commandParsed.add(commandTokens[0]);"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"        switch (commandTokens[0]) {"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.DEADLINE_COMMAND:"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"            if (commandTokens.length \u003c 2) {"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"            String[] commandSplitDeadline \u003d commandTokens[1].split(DukeCommands.DEADLINE_DELIMITER, 2);"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"            for (String argument : commandSplitDeadline) {"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"                commandParsed.add(argument);"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"        case DukeCommands.EVENT_COMMAND:"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"            if (commandTokens.length \u003c 2) {"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"            String[] commandSplitEvent \u003d commandTokens[1].split(DukeCommands.EVENT_DELIMITER, 2);"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"            for (String argument : commandSplitEvent) {"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"                commandParsed.add(argument);"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"        default:"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"            /*"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"             * For commands that do not require further tokenization"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"             * e.g. \"todo\", \"list\", \"bye\""},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"             */"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 1; i \u003c commandTokens.length; i++) {"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"                commandParsed.add(commandTokens[i]);"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"        /* Remove any trailing whitespace from the tokens */"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"        for (int i \u003d 0; i \u003c commandParsed.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"            commandParsed.set(i, commandParsed.get(i).trim());"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"        return commandParsed;"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"    public static ArrayList\u003cString\u003e readUserInput() {"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"        String userInput \u003d scanner.nextLine();"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e userInputTokenized \u003d tokenizeInput(userInput);"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":"        return userInputTokenized;"},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":128}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class Deadline extends Task{"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    private String dueDate;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"    public Deadline(String description, String dueDate) {"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        return \"deadline,\" + super.exportAsCSV() + \",\" + dueDate;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":20}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    private String eventDate;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"    public Event(String description, String eventDate) {"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"        return \"[E]\" + super.toString() + \" (on: \" + eventDate + \")\";"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        return \"event,\" + super.exportAsCSV() + \",\" + eventDate;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":20}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    private String description;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"    private boolean isDone;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    public void markAsDone() {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    private String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        /* Return X if task is done, and space otherwise */"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        return description + \",\" + isDone;"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":28}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class Todo extends Task{"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        return \"todo,\" + super.exportAsCSV();"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":17}},{"path":"text-ui-test/EXPECTED_1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type \u0027help\u0027 for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t You have no tasks right now"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] complete this project"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] complete this project"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t [T][X] complete this project"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] CS2101 lecture (on: Tuesdays 10 am)"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][X] complete this project"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] CS2101 lecture (on: Tuesdays 10 am)"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":41}},{"path":"text-ui-test/EXPECTED_2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type \u0027help\u0027 for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t The description of a task can\u0027t be empty. Please try again."},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t Please specify a date for the event."},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] add a proper task"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] a proper deadline (by: right now)"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] exit this program (on: shortly later)"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] add a proper task"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] a proper deadline (by: right now)"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] exit this program (on: shortly later)"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":44}},{"path":"text-ui-test/EXPECTED_3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type \u0027help\u0027 for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] eat"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] sleep (by: tonight)"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] repeat (on: everyday)"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] eat"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] sleep (by: tonight)"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] repeat (on: everyday)"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t [D][X] sleep (by: tonight)"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] eat"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][X] sleep (by: tonight)"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] repeat (on: everyday)"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t Noted. I\u0027ve removed this task:"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t [T][ ] eat"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"\t 1. [D][X] sleep (by: tonight)"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"\t 2. [E][ ] repeat (on: everyday)"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":49}},{"path":"text-ui-test/INPUT_1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"todo complete this project"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"deadline CS2113T ip submission /by before the tutorial"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"event CS2101 lecture /at Tuesdays 10 am"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":9}},{"path":"text-ui-test/INPUT_2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"deadline /by empty input?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"event       how about some trailing spaces /at    "},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"deadline"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"event"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"todo add a proper task"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"deadline a proper deadline /by right now"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"event exit this program /at shortly later"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":11}},{"path":"text-ui-test/INPUT_3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"todo eat"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"deadline sleep /by tonight"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"event repeat /at everyday"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"REM run multiple test cases"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"REM format (start, step, stop)"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"for /l %%x in (1, 1, 3) do ("},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    echo RUNNING TEST #%%x"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    REM run the program, feed commands from input file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    java -classpath ..\\bin duke.Duke \u003c INPUT_%%x.TXT \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    FC ACTUAL.TXT EXPECTED_%%x.TXT"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":")"}],"authorContributionMap":{"-":18,"brandonfoong":9}}]
