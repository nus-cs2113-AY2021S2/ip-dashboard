[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import static java.lang.System.exit;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    private static final String FORCE_QUIT_BYE_COMMAND \u003d \"bye\";"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    private static final String FORCE_QUIT_EXIT_COMMAND \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    private DukeTaskList dukeTaskList;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    private DukeFileManager dukeFileManager;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    public Duke(String directory, String filename) {"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"        dukeTaskList \u003d new DukeTaskList();"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        dukeFileManager \u003d new DukeFileManager(directory, filename);"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    public static void main(String[] args) {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        Duke duke \u003d new Duke(\"data/\", \"duke.csv\");"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        duke.importFromFile();"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printWelcomeMessage();"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        duke.interactWithUser();"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        duke.exportToFile();"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printExitMessage();"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    private void importFromFile() {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e taskInfo \u003d dukeFileManager.readFromFile();"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cArrayList\u003cString\u003e\u003e parsedTaskInfo \u003d DukeParser.parseCSV(taskInfo);"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"            dukeTaskList.importTaskInfo(parsedTaskInfo);"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        } catch (IOException ioException) {"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printImportErrorMessage(ioException.getMessage());"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"            exit(0);"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"    private void exportToFile() {"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e tasksAsCSV \u003d dukeTaskList.exportCSV();"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        boolean successfullyExported \u003d false, forceQuit \u003d false;"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        while (!successfullyExported \u0026\u0026 !forceQuit) {"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"                dukeFileManager.writeToFile(tasksAsCSV);"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"                successfullyExported \u003d true;"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"            } catch (IOException ioException) {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printExportErrorMessage(ioException.getMessage());"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"                forceQuit \u003d checkForceQuit();"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"    private boolean checkForceQuit() {"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        boolean isDoneReadingInputs \u003d false, forceQuit \u003d false;"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"        while (!isDoneReadingInputs) {"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e commandTokens \u003d DukeParser.readUserInput();"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"            if (commandTokens.isEmpty()) {"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printFallbackMessage();"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"            switch (commandTokens.get(0)) {"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"            case FORCE_QUIT_BYE_COMMAND:"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"                isDoneReadingInputs \u003d true;"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"            case FORCE_QUIT_EXIT_COMMAND:"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"                forceQuit \u003d true;"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"                isDoneReadingInputs \u003d true;"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"            default:"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printForceQuitErrorMessage();"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"        return forceQuit;"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"    private void interactWithUser() {"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"        boolean isDoneReadingInputs \u003d false;"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"        while (!isDoneReadingInputs) {"},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e commandTokens \u003d DukeParser.readUserInput();"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"            try {"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"                isDoneReadingInputs \u003d DukeParser.executeCommand(dukeTaskList, commandTokens);"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"            } catch (DukeException dukeException) {"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"                String errorMessage \u003d dukeException.getMessage();"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printDukeErrorMessage(errorMessage);"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"            } catch (NumberFormatException numberFormatException) {"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"                DukePrinter.printInvalidArgumentsMessage();"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":94}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"    public DukeException(String message) {"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":8}},{"path":"src/main/java/duke/DukeFileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":" * Manages reading and writing data to and from files."},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"public class DukeFileManager {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    private final static int MINIMUM_NUMBER_OF_ARGS \u003d 3;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    private final static int OPTIONAL_NUMBER_OF_ARGS \u003d 4;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    private final static int IS_DONE_INDEX \u003d 0;"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    private final static int TASK_TYPE_INDEX \u003d 1;"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    private final static int DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    private final static int DATE_INDEX \u003d 3;"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    private String directory, filename;"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    private File file;"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    private Scanner reader;"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    private FileWriter writer;"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"     * Creates a new DukeFileManager object pointing to the specified filepath"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"     * @param directory the directory to read/write the file from"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"     * @param filename the file to be read/written to."},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    public DukeFileManager(String directory, String filename) {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        this.directory \u003d directory;"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        this.filename \u003d filename;"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        this.reader \u003d null;"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"    private void openFile() throws IOException {"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        File fileDirectory \u003d new File(directory);"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        if (!fileDirectory.exists()) {"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"            fileDirectory.mkdir();"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        file \u003d new File(directory + filename);"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        if (!file.exists()) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            file.createNewFile();"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"     * Reads task data from the specified CSV file, and returns the imported data as an ArrayList of Strings"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of Strings containing each line from the input file"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"    public ArrayList\u003cString\u003e readFromFile() throws IOException {"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        openFile();"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        reader \u003d new Scanner(file);"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"        while (reader.hasNext()) {"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"            String taskString \u003d reader.nextLine();"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            taskStrings.add(taskString);"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"        reader.close();"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"        return taskStrings;"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"     * Writes task data to the specified CSV file."},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"     * @param tasksAsCSV an ArrayList of Strings containing task information."},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"    public void writeToFile(ArrayList\u003cString\u003e tasksAsCSV) throws IOException {"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"        openFile();"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"        writer \u003d new FileWriter(file);"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"        for (String taskCSV : tasksAsCSV) {"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"            writer.write(taskCSV + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"        writer.close();"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":79}},{"path":"src/main/java/duke/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.command.ClearCommand;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.command.DefaultCommand;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import duke.command.HelpCommand;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"import duke.command.TodoCommand;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":" * Handles the parsing of user input and imported data from files. This class also handles the execution of commands."},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":" */"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"public class DukeParser {"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    /* List of all commands that Duke accepts */"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"    public static final String BYE_COMMAND \u003d \"bye\";"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    public static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    public static final String HELP_COMMAND \u003d \"help\";"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    public static final String DONE_COMMAND \u003d \"done\";"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    public static final String CLEAR_COMMAND \u003d \"clear\";"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"    public static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"    /* List of command delimiters, e.g. \"/by\" for \"deadline\" */"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"    public static final String DEADLINE_DELIMITER \u003d \"/by\";"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"    public static final String EVENT_DELIMITER \u003d \"/at\";"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"    private static final int ADDITIONAL_ARGUMENTS_LIMIT \u003d 2;"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"    private static ArrayList\u003cString\u003e tokenizeInput(String userCommand) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        String[] commandTokens \u003d userCommand.split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"        if (commandTokens.length \u003d\u003d 0) {"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"            return new ArrayList\u003cString\u003e();"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        commandTokens[0] \u003d commandTokens[0].toLowerCase();"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e commandParsed \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        commandParsed.add(commandTokens[0]);"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e additionalArgs \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        switch (commandTokens[0]) {"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"            if (commandTokens.length \u003c 2) {"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"            additionalArgs \u003d splitAdditonalArgs(commandTokens[1], DEADLINE_DELIMITER);"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"        case EVENT_COMMAND:"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"            if (commandTokens.length \u003c 2) {"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"            additionalArgs \u003d splitAdditonalArgs(commandTokens[1], EVENT_DELIMITER);"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 1; i \u003c commandTokens.length; i++) {"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"                additionalArgs.add(commandTokens[i]);"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        for (String additionalArg : additionalArgs) {"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"            String trimmedArg \u003d additionalArg.trim();"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"            commandParsed.add(trimmedArg);"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"        return commandParsed;"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"    private static ArrayList\u003cString\u003e splitAdditonalArgs(String commandToken, String delimiter) {"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"        String[] additionalArgs \u003d commandToken.split(delimiter, ADDITIONAL_ARGUMENTS_LIMIT);"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e additionalArgsList \u003d new ArrayList\u003cString\u003e(Arrays.asList(additionalArgs));"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"        return additionalArgsList;"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"     * Read user input from standard input, and tokenize it accordingly."},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of Strings containing the tokens of the user\u0027s input"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"    public static ArrayList\u003cString\u003e readUserInput() {"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"        String userInput \u003d scanner.nextLine();"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e userInputTokenized \u003d tokenizeInput(userInput);"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"        return userInputTokenized;"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"     * Parse CSV data that has been imported from a file."},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"     * @param taskInfo an ArrayList of Strings containing each line of the CSV file"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of ArrayLists of Strings containing the tokens of each line of the CSV file"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"    public static ArrayList\u003cArrayList\u003cString\u003e\u003e parseCSV(ArrayList\u003cString\u003e taskInfo) {"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e parsedTaskInfo \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"        for (String taskString : taskInfo) {"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e parsedTaskString \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"            String[] tokenizedTaskString \u003d taskString.split(\",\");"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"            for (String token : tokenizedTaskString) {"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"                parsedTaskString.add(token);"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"            parsedTaskInfo.add(parsedTaskString);"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"        return parsedTaskInfo;"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"     * Execute the user\u0027s command as per the command specified in commandTokens."},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"     * Returns a boolean value to indicate if the program should exit after it has finished executing the"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"     * previous command."},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"     * @param dukeTaskList list of tasks to operate on"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"     * @param commandTokens tokenized user input"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":"     * @return a boolean value to indicate if the program should exit"},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"    public static boolean executeCommand("},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"            DukeTaskList dukeTaskList, ArrayList\u003cString\u003e commandTokens)"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"            throws DukeException {"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"        if (commandTokens.isEmpty()) {"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please enter a command.\\n\""},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"                    + \"Try using \\\"help\\\" for a list of commands.\""},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"            );"},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"        boolean isDoneReadingInputs \u003d false;"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"        Command command \u003d null;"},{"lineNumber":139,"author":{"gitId":"brandonfoong"},"content":"        String baseCommand \u003d commandTokens.get(0);"},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"        switch (baseCommand) {"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":"        case BYE_COMMAND:"},{"lineNumber":142,"author":{"gitId":"brandonfoong"},"content":"            isDoneReadingInputs \u003d true;"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":144,"author":{"gitId":"brandonfoong"},"content":"        case CLEAR_COMMAND:"},{"lineNumber":145,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new ClearCommand(commandTokens, dukeTaskList);"},{"lineNumber":146,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":147,"author":{"gitId":"brandonfoong"},"content":"        case LIST_COMMAND:"},{"lineNumber":148,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new ListCommand(commandTokens, dukeTaskList);"},{"lineNumber":149,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"brandonfoong"},"content":"        case HELP_COMMAND:"},{"lineNumber":151,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new HelpCommand(commandTokens, dukeTaskList);"},{"lineNumber":152,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"brandonfoong"},"content":"        case DONE_COMMAND:"},{"lineNumber":154,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new DoneCommand(commandTokens, dukeTaskList);"},{"lineNumber":155,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":156,"author":{"gitId":"brandonfoong"},"content":"        case TODO_COMMAND:"},{"lineNumber":157,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new TodoCommand(commandTokens, dukeTaskList, true, false);"},{"lineNumber":158,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":159,"author":{"gitId":"brandonfoong"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":160,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new DeadlineCommand(commandTokens, dukeTaskList, true, false);"},{"lineNumber":161,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":162,"author":{"gitId":"brandonfoong"},"content":"        case EVENT_COMMAND:"},{"lineNumber":163,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new EventCommand(commandTokens, dukeTaskList, true, false);"},{"lineNumber":164,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":165,"author":{"gitId":"brandonfoong"},"content":"        case DELETE_COMMAND:"},{"lineNumber":166,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new DeleteCommand(commandTokens, dukeTaskList);"},{"lineNumber":167,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":168,"author":{"gitId":"brandonfoong"},"content":"        case FIND_COMMAND:"},{"lineNumber":169,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new FindCommand(commandTokens, dukeTaskList);"},{"lineNumber":170,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":171,"author":{"gitId":"brandonfoong"},"content":"        default:"},{"lineNumber":172,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new DefaultCommand(commandTokens, dukeTaskList);"},{"lineNumber":173,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"brandonfoong"},"content":"        if (command !\u003d null) {"},{"lineNumber":176,"author":{"gitId":"brandonfoong"},"content":"            command.execute();"},{"lineNumber":177,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"brandonfoong"},"content":"        return isDoneReadingInputs;"},{"lineNumber":179,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":180}},{"path":"src/main/java/duke/DukePrinter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":" * Handles printing program output and error messages to the screen."},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public class DukePrinter {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    private static final String LINE_DIVIDER \u003d \"\\t____________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    /* List of help messages for each command*/"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    public static final String BYE_HELP_MESSAGE \u003d \"bye - Exits program\";"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public static final String HELP_HELP_MESSAGE \u003d \"help - Prints this help message\";"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    public static final String LIST_HELP_MESSAGE \u003d \"list - Lists all tasks\";"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public static final String DONE_HELP_MESSAGE \u003d \"done \u003cTASK_NUMBER\u003e - Mark the specified task as done\";"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public static final String TODO_HELP_MESSAGE \u003d"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"            \"todo \u003cTASK_DESCRIPTION\u003e - Create a new task with the specified description\";"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public static final String DEADLINE_HELP_MESSAGE \u003d"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"            \"deadline \u003cTASK_DESCRIPTION\u003e /by \u003cDEADLINE_DATE\u003e - Create a new task with the specified description and deadline\\n\" +"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"                    \"\\t\\tFormat for DEADLINE_DATE: YYYY-MM-DD\";"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    public static final String EVENT_HELP_MESSAGE \u003d"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"            \"event \u003cTASK_DESCRIPTION\u003e /at \u003cEVENT_DATE\u003e - Create a new task with the specified description and event date\\n\" +"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"                    \"\\t\\tFormat for EVENT_DATE: YYYY-MM-DD\";"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"    public static final String DELETE_HELP_MESSAGE \u003d \"delete \u003cTASK_NUMBER\u003e - delete the specified task\";"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    public static final String CLEAR_HELP_MESSAGE \u003d \"clear - deletes all tasks\";"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    public static final String FIND_HELP_MESSAGE \u003d"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"            \"find \u003cSEARCH_EXPRESSION\u003e - finds all tasks containing the required expression\";"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    private static void printMessage(String... messages) {"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        System.out.println(LINE_DIVIDER);"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        for (String message : messages) {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"            System.out.println(\"\\t \" + message);"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        System.out.println(LINE_DIVIDER);"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"    private static String getNumTasksString(int numberOfTasks) {"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        if (numberOfTasks \u003d\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"            return \"You have \" + Integer.toString(numberOfTasks) + \" task in the list.\";"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        return \"You have \" + Integer.toString(numberOfTasks) + \" tasks in the list.\";"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"     * Prints a welcome message to indicate that Duke has started."},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"     * It also informs the user that they can use the `help` command to find a list of valid commands."},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"     * This method returns after printing the message."},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Hello! I\u0027m Duke\","},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"                \"What can I do for you?\","},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"                \"(Type `help` for a list of commands)\");"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"     * Prints a welcome message to indicate that Duke has exited."},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"     * This method returns after printing the message."},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"    public static void printExitMessage() {"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Bye. Hope to see you again soon!\");"},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"     * Prints a list of valid commands as well as the required arguments."},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"     * In the case that the arguments require a specific format, it also indicates the format to be used."},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"     * (e.g. The date format for the `deadline` and `event` commands)"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"    public static void printHelpMessage() {"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"List of valid commands:\","},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"                BYE_HELP_MESSAGE,"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"                HELP_HELP_MESSAGE,"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"                LIST_HELP_MESSAGE,"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"                DONE_HELP_MESSAGE,"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"                TODO_HELP_MESSAGE,"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"                DEADLINE_HELP_MESSAGE,"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"                EVENT_HELP_MESSAGE,"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"                DELETE_HELP_MESSAGE,"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"                CLEAR_HELP_MESSAGE,"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":"                FIND_HELP_MESSAGE);"},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"     * Prints an enumerated list of the user\u0027s current tasks."},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"     * If the user has no tasks (i.e. the ArrayList is empty), this method will print a message to inform them that"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"     * they have no tasks."},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":"     * @param taskStrings an ArrayList of Strings containing the task information"},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"    public static void printTasks(ArrayList\u003cString\u003e taskStrings) {"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"        int numberOfTasks \u003d taskStrings.size();"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"        String[] taskMessage \u003d new String[numberOfTasks + 1];"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"        if (taskStrings.size() \u003d\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"            taskMessage[0] \u003d \"You have no tasks right now\";"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"            taskMessage[0] \u003d \"Here is a list of all your tasks:\";"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 0; i \u003c taskStrings.size(); i++) {"},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"                taskMessage[i + 1] \u003d Integer.toString(i + 1) + \". \" + taskStrings.get(i);"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"        printMessage(taskMessage);"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the task has been successfully added."},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"     * @param taskString    information of the recently added task"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"     * @param numberOfTasks the total number of tasks that the user has"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskAdded(String taskString, int numberOfTasks) {"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"added: \" + taskString,"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"                getNumTasksString(numberOfTasks));"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the most recent command was not understood."},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"     * Prompts the user to try the `help` command if they are not familiar with the valid commands."},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"    public static void printFallbackMessage() {"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"I didn\u0027t quite catch what you were saying. Please try again.\","},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"                \"Try using `help` for a list of commands.\");"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the arguments specified were not valid."},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"     * (e.g. Entering non-numeric data as an argument for TASK_NUMBER)"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"    public static void printInvalidArgumentsMessage() {"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"That\u0027s an invalid task number!\");"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":"     * Prints an error message to inform the user that an error has occurred."},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"brandonfoong"},"content":"     * @param errorMessage the error message"},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"    public static void printDukeErrorMessage(String errorMessage) {"},{"lineNumber":139,"author":{"gitId":"brandonfoong"},"content":"        printMessage(errorMessage);"},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":142,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the specified task has been successfully marked as done."},{"lineNumber":144,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"brandonfoong"},"content":"     * @param taskString information of the task recently marked as done"},{"lineNumber":146,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskMarkedDone(String taskString) {"},{"lineNumber":148,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Nice! I\u0027ve marked this task as done:\","},{"lineNumber":149,"author":{"gitId":"brandonfoong"},"content":"                taskString);"},{"lineNumber":150,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":152,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the specified task has been successfully deleted."},{"lineNumber":154,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"brandonfoong"},"content":"     * @param taskString information of the recently deleted task"},{"lineNumber":156,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"brandonfoong"},"content":"    public static void printTaskDeleted(String taskString, int numberOfTasks) {"},{"lineNumber":158,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Noted. I\u0027ve removed this task:\","},{"lineNumber":159,"author":{"gitId":"brandonfoong"},"content":"                taskString,"},{"lineNumber":160,"author":{"gitId":"brandonfoong"},"content":"                getNumTasksString(numberOfTasks));"},{"lineNumber":161,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":163,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the Duke has encountered an error importing data."},{"lineNumber":165,"author":{"gitId":"brandonfoong"},"content":"     * It also informs the user that Duke will immediately exit."},{"lineNumber":166,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"brandonfoong"},"content":"     * @param errorMessage the error message"},{"lineNumber":168,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"brandonfoong"},"content":"    public static void printImportErrorMessage(String errorMessage) {"},{"lineNumber":170,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Uh oh! I encountered an error importing your tasks\","},{"lineNumber":171,"author":{"gitId":"brandonfoong"},"content":"                \"Here are the details:\" + errorMessage,"},{"lineNumber":172,"author":{"gitId":"brandonfoong"},"content":"                \"Exiting Duke now...\");"},{"lineNumber":173,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":175,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the Duke has encountered an error exporting data."},{"lineNumber":177,"author":{"gitId":"brandonfoong"},"content":"     * It prompts the user to either use the `bye` command to try exporting again, or use `exit` to exit without saving"},{"lineNumber":178,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"brandonfoong"},"content":"     * @param errorMessage the error message"},{"lineNumber":180,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"brandonfoong"},"content":"    public static void printExportErrorMessage(String errorMessage) {"},{"lineNumber":182,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"Uh oh! I encountered an error exporting your tasks\","},{"lineNumber":183,"author":{"gitId":"brandonfoong"},"content":"                \"Here are the details: \" + errorMessage,"},{"lineNumber":184,"author":{"gitId":"brandonfoong"},"content":"                \"Enter `bye` to try again, or `exit` to exit without saving\");"},{"lineNumber":185,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":187,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that all tasks have been cleared."},{"lineNumber":189,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"brandonfoong"},"content":"    public static void printTasksClearedMessage() {"},{"lineNumber":191,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"All tasks removed!\");"},{"lineNumber":192,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":194,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"brandonfoong"},"content":"     * Prints a message to inform the user that the most recent command was not understood."},{"lineNumber":196,"author":{"gitId":"brandonfoong"},"content":"     * Prompts them to use one of the two valid commands (`bye` or `exit`)."},{"lineNumber":197,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"brandonfoong"},"content":"    public static void printForceQuitErrorMessage() {"},{"lineNumber":199,"author":{"gitId":"brandonfoong"},"content":"        printMessage(\"I didn\u0027t quite catch what you were saying. Please try again.\","},{"lineNumber":200,"author":{"gitId":"brandonfoong"},"content":"                \"Enter `bye` to try again, or `exit` to exit without saving\");"},{"lineNumber":201,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":203,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"brandonfoong"},"content":"     * Prints a list of the warnings encountered while importing data from the file."},{"lineNumber":205,"author":{"gitId":"brandonfoong"},"content":"     * If there are no warnings (i.e. the ArrayList is empty), this method will print a message to inform them that"},{"lineNumber":206,"author":{"gitId":"brandonfoong"},"content":"     * importing was successful"},{"lineNumber":207,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"brandonfoong"},"content":"     * @param warnings an ArrayList of Strings containing warnings"},{"lineNumber":209,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"brandonfoong"},"content":"    public static void printWarnings(ArrayList\u003cString\u003e warnings) {"},{"lineNumber":211,"author":{"gitId":"brandonfoong"},"content":"        String[] warningsArr \u003d new String[warnings.size() + 1];"},{"lineNumber":212,"author":{"gitId":"brandonfoong"},"content":"        if (warnings.isEmpty()) {"},{"lineNumber":213,"author":{"gitId":"brandonfoong"},"content":"            warningsArr[0] \u003d \"All tasks imported successfully!\";"},{"lineNumber":214,"author":{"gitId":"brandonfoong"},"content":"        } else {"},{"lineNumber":215,"author":{"gitId":"brandonfoong"},"content":"            warningsArr[0] \u003d \"Warning: Failed to import \" + Integer.toString(warnings.size()) + \" task(s)\";"},{"lineNumber":216,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 0; i \u003c warnings.size(); i++) {"},{"lineNumber":217,"author":{"gitId":"brandonfoong"},"content":"                warningsArr[i + 1] \u003d warnings.get(i);"},{"lineNumber":218,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"brandonfoong"},"content":"        printMessage(warningsArr);"},{"lineNumber":221,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":223,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"brandonfoong"},"content":"     * Prints an enumerated list of tasks that match the user\u0027s search criteria."},{"lineNumber":225,"author":{"gitId":"brandonfoong"},"content":"     * If the user has no matching tasks (i.e. the ArrayList is empty), this method will print a message to inform them"},{"lineNumber":226,"author":{"gitId":"brandonfoong"},"content":"     * that they have no matching tasks."},{"lineNumber":227,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":228,"author":{"gitId":"brandonfoong"},"content":"     * @param matchingTasks an ArrayList of Strings containing the task information of all tasks that match the search"},{"lineNumber":229,"author":{"gitId":"brandonfoong"},"content":"     *                      criteria"},{"lineNumber":230,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":231,"author":{"gitId":"brandonfoong"},"content":"    public static void printMatchingTasks(ArrayList\u003cString\u003e matchingTasks) {"},{"lineNumber":232,"author":{"gitId":"brandonfoong"},"content":"        String[] matchingTaskArr \u003d new String[matchingTasks.size() + 1];"},{"lineNumber":233,"author":{"gitId":"brandonfoong"},"content":"        if (matchingTasks.isEmpty()) {"},{"lineNumber":234,"author":{"gitId":"brandonfoong"},"content":"            matchingTaskArr[0] \u003d \"No matching tasks found!\";"},{"lineNumber":235,"author":{"gitId":"brandonfoong"},"content":"        } else {"},{"lineNumber":236,"author":{"gitId":"brandonfoong"},"content":"            matchingTaskArr[0] \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":237,"author":{"gitId":"brandonfoong"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"},{"lineNumber":238,"author":{"gitId":"brandonfoong"},"content":"                matchingTaskArr[i + 1] \u003d Integer.toString(i + 1) + \". \" + matchingTasks.get(i);"},{"lineNumber":239,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":240,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"brandonfoong"},"content":"        printMessage(matchingTaskArr);"},{"lineNumber":242,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":243}},{"path":"src/main/java/duke/DukeTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.command.EventCommand;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.command.TodoCommand;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import static java.util.stream.Collectors.toList;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":" * Manages a list of the user\u0027s tasks and implements functions to manipulate the tasks."},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"public class DukeTaskList {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    private static final int MINIMUM_NUM_ARGS_IMPORT \u003d 3;"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_TYPE \u003d 0;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    private static final int DONE \u003d 0;"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    public DukeTaskList() {"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"     * Imports a task from a tokenized file input."},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"     * @param taskInfo tokenized task info read from an input file"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"    public void importTask(ArrayList\u003cString\u003e taskInfo) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        if (taskInfo.size() \u003c MINIMUM_NUM_ARGS_IMPORT) {"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Insufficient Arguments\");"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        String doneString \u003d taskInfo.get(DONE);"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        boolean isDone \u003d Boolean.parseBoolean(doneString);"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"        int lastIndex \u003d taskInfo.size();"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e commandTokens \u003d new ArrayList\u003cString\u003e(taskInfo.subList(1, lastIndex));"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        String taskType \u003d commandTokens.get(TASK_TYPE);"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"        Command command \u003d null;"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        switch (taskType) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"        case \"T\":"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new TodoCommand(commandTokens, this, false, isDone);"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        case \"D\":"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new DeadlineCommand(commandTokens, this, false, isDone);"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"        case \"E\":"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"            command \u003d new EventCommand(commandTokens, this, false, isDone);"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        default:"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Unknown task type: \" + taskType);"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"        command.execute();"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":60,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"brandonfoong"},"content":"     * Imports all tasks from the tokenized file input."},{"lineNumber":62,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"brandonfoong"},"content":"     * @param parsedTaskInfo ArrayList of ArrayLists of Strings containing tokenized task info"},{"lineNumber":64,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"brandonfoong"},"content":"    public void importTaskInfo(ArrayList\u003cArrayList\u003cString\u003e\u003e parsedTaskInfo) {"},{"lineNumber":66,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e warnings \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":67,"author":{"gitId":"brandonfoong"},"content":"        for (int i \u003d 0; i \u003c parsedTaskInfo.size(); i++) {"},{"lineNumber":68,"author":{"gitId":"brandonfoong"},"content":"            ArrayList\u003cString\u003e taskInfo \u003d parsedTaskInfo.get(i);"},{"lineNumber":69,"author":{"gitId":"brandonfoong"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"brandonfoong"},"content":"                importTask(taskInfo);"},{"lineNumber":71,"author":{"gitId":"brandonfoong"},"content":"            } catch (DukeException dukeException) {"},{"lineNumber":72,"author":{"gitId":"brandonfoong"},"content":"                warnings.add(\"Error importing line #\" + Integer.toString(i + 1) +"},{"lineNumber":73,"author":{"gitId":"brandonfoong"},"content":"                        \": \" + dukeException.getMessage());"},{"lineNumber":74,"author":{"gitId":"brandonfoong"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"brandonfoong"},"content":"        if (!warnings.isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printWarnings(warnings);"},{"lineNumber":78,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":81,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"brandonfoong"},"content":"     * Add a task to the list of tasks."},{"lineNumber":83,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"brandonfoong"},"content":"     * @param task the task to be added"},{"lineNumber":85,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"brandonfoong"},"content":"    public void addTask(Task task) {"},{"lineNumber":87,"author":{"gitId":"brandonfoong"},"content":"        tasks.add(task);"},{"lineNumber":88,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":90,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"brandonfoong"},"content":"     * Removes all tasks from the list of tasks"},{"lineNumber":92,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"brandonfoong"},"content":"    public void clearTasks() {"},{"lineNumber":94,"author":{"gitId":"brandonfoong"},"content":"        tasks.clear();"},{"lineNumber":95,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":97,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"brandonfoong"},"content":"     * Delete a specified task from the list, based on its position."},{"lineNumber":99,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"brandonfoong"},"content":"     * @param taskNumber the 1-based index of the task to be removed"},{"lineNumber":101,"author":{"gitId":"brandonfoong"},"content":"     * @return the string representation of the deleted task"},{"lineNumber":102,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"brandonfoong"},"content":"    public String deleteTask(int taskNumber) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"brandonfoong"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"},{"lineNumber":105,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s an invalid task number!\");"},{"lineNumber":106,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":108,"author":{"gitId":"brandonfoong"},"content":"        /* Change from 1-based indexing to 0-based indexing */"},{"lineNumber":109,"author":{"gitId":"brandonfoong"},"content":"        taskNumber \u003d taskNumber - 1;"},{"lineNumber":110,"author":{"gitId":"brandonfoong"},"content":"        Task deletedTask \u003d tasks.get(taskNumber);"},{"lineNumber":111,"author":{"gitId":"brandonfoong"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":112,"author":{"gitId":"brandonfoong"},"content":"        String deletedTaskString \u003d deletedTask.toString();"},{"lineNumber":113,"author":{"gitId":"brandonfoong"},"content":"        return deletedTaskString;"},{"lineNumber":114,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":116,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"brandonfoong"},"content":"     * Mark a specified task from the list as done, based on its position."},{"lineNumber":118,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"brandonfoong"},"content":"     * @param taskNumber the 1-based index of the task to be marked as done"},{"lineNumber":120,"author":{"gitId":"brandonfoong"},"content":"     * @return the string representation of the task that was marked as done"},{"lineNumber":121,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"brandonfoong"},"content":"    public String markTaskAsDone(int taskNumber) throws DukeException {"},{"lineNumber":123,"author":{"gitId":"brandonfoong"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"},{"lineNumber":124,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s an invalid task number!\");"},{"lineNumber":125,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":127,"author":{"gitId":"brandonfoong"},"content":"        /* Change from 1-based indexing to 0-based indexing */"},{"lineNumber":128,"author":{"gitId":"brandonfoong"},"content":"        taskNumber \u003d taskNumber - 1;"},{"lineNumber":129,"author":{"gitId":"brandonfoong"},"content":"        Task doneTask \u003d tasks.get(taskNumber);"},{"lineNumber":130,"author":{"gitId":"brandonfoong"},"content":"        doneTask.markAsDone();"},{"lineNumber":131,"author":{"gitId":"brandonfoong"},"content":"        String doneTaskString \u003d doneTask.toString();"},{"lineNumber":132,"author":{"gitId":"brandonfoong"},"content":"        return doneTaskString;"},{"lineNumber":133,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":135,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"brandonfoong"},"content":"     * Returns a ArrayList of Strings containing the user\u0027s task information in CSV format."},{"lineNumber":137,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of Strings containing the user\u0027s tasks"},{"lineNumber":139,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"brandonfoong"},"content":"    public ArrayList\u003cString\u003e exportCSV() {"},{"lineNumber":141,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e tasksAsCSV \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":142,"author":{"gitId":"brandonfoong"},"content":"        for (Task task : tasks) {"},{"lineNumber":143,"author":{"gitId":"brandonfoong"},"content":"            String taskCSV \u003d task.exportAsCSV();"},{"lineNumber":144,"author":{"gitId":"brandonfoong"},"content":"            tasksAsCSV.add(taskCSV);"},{"lineNumber":145,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"brandonfoong"},"content":"        return tasksAsCSV;"},{"lineNumber":147,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":149,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"brandonfoong"},"content":"     * Returns the number of tasks that the user has in their list."},{"lineNumber":151,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"brandonfoong"},"content":"     * @return the total number of tasks that the user has"},{"lineNumber":153,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"brandonfoong"},"content":"    public int getNumberOfTasks() {"},{"lineNumber":155,"author":{"gitId":"brandonfoong"},"content":"        return tasks.size();"},{"lineNumber":156,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":158,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"brandonfoong"},"content":"     * Returns the String representation of all tasks that a user has in their list."},{"lineNumber":160,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of Strings containing all tasks that a user has"},{"lineNumber":162,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"brandonfoong"},"content":"    public ArrayList\u003cString\u003e getTasksAsString() {"},{"lineNumber":164,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":165,"author":{"gitId":"brandonfoong"},"content":"        for (Task task : tasks) {"},{"lineNumber":166,"author":{"gitId":"brandonfoong"},"content":"            String taskString \u003d task.toString();"},{"lineNumber":167,"author":{"gitId":"brandonfoong"},"content":"            taskStrings.add(taskString);"},{"lineNumber":168,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"brandonfoong"},"content":"        return taskStrings;"},{"lineNumber":170,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":172,"author":{"gitId":"brandonfoong"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"brandonfoong"},"content":"     * Returns the String representation of all tasks that that match the required search criteria."},{"lineNumber":174,"author":{"gitId":"brandonfoong"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"brandonfoong"},"content":"     * @param searchExpression the criteria to search for"},{"lineNumber":176,"author":{"gitId":"brandonfoong"},"content":"     * @return an ArrayList of Strings containing all tasks that match the search criteria"},{"lineNumber":177,"author":{"gitId":"brandonfoong"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"brandonfoong"},"content":"    public ArrayList\u003cString\u003e findTasks(String searchExpression) {"},{"lineNumber":179,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d (ArrayList\u003cString\u003e) tasks.stream()"},{"lineNumber":180,"author":{"gitId":"brandonfoong"},"content":"                .filter((task) -\u003e task.getDescription().contains(searchExpression))"},{"lineNumber":181,"author":{"gitId":"brandonfoong"},"content":"                .map((task) -\u003e task.toString())"},{"lineNumber":182,"author":{"gitId":"brandonfoong"},"content":"                .collect(toList());"},{"lineNumber":183,"author":{"gitId":"brandonfoong"},"content":"        return matchingTasks;"},{"lineNumber":184,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":185}},{"path":"src/main/java/duke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public class ClearCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public ClearCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public void execute() {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        dukeTaskList.clearTasks();"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTasksClearedMessage();"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":18}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    protected ArrayList\u003cString\u003e arguments;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    protected DukeTaskList dukeTaskList;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    public Command(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"        this.arguments \u003d arguments;"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"        this.dukeTaskList \u003d dukeTaskList;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    public abstract void execute() throws DukeException;"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":18}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 3;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_DESCRIPTION \u003d 1;"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_DATE \u003d 2;"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    private boolean printMessage, isDone;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    public DeadlineCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList, boolean printMessage, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        this.printMessage \u003d printMessage;"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d arguments.get(TASK_DESCRIPTION);"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        if (description.isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        String date \u003d arguments.get(TASK_DATE);"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        if (date.isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please specify a deadline for the task.\");"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        LocalDate parsedDate \u003d null;"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            parsedDate \u003d LocalDate.parse(date);"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        } catch (DateTimeParseException dateTimeParseException) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s not a valid date!\");"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        Deadline deadline \u003d new Deadline(description, parsedDate);"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        dukeTaskList.addTask(deadline);"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        if (printMessage) {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"            int numberOfTasks \u003d dukeTaskList.getNumberOfTasks();"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printTaskAdded(deadline.toString(), numberOfTasks);"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        if (isDone) {"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"            deadline.markAsDone();"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":58}},{"path":"src/main/java/duke/command/DefaultCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"public class DefaultCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    public DefaultCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printFallbackMessage();"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":19}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 2;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_NUMBER \u003d 1;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    public DeleteCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException, NumberFormatException{"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        String taskNumberString \u003d arguments.get(TASK_NUMBER);"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        int taskNumber \u003d Integer.parseInt(taskNumberString);"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        String deletedTaskString \u003d dukeTaskList.deleteTask(taskNumber);"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        int numberOfTasks \u003d dukeTaskList.getNumberOfTasks();"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskDeleted(deletedTaskString, numberOfTasks);"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":29}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 2;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_NUMBER \u003d 1;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    public DoneCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException, NumberFormatException {"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        String taskNumberString \u003d arguments.get(TASK_NUMBER);"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        int taskNumber \u003d Integer.parseInt(taskNumberString);"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        String doneTaskString \u003d dukeTaskList.markTaskAsDone(taskNumber);"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTaskMarkedDone(doneTaskString);"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":28}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"public class EventCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 3;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_DESCRIPTION \u003d 1;"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_DATE \u003d 2;"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    private boolean printMessage, isDone;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    public EventCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList, boolean printMessage, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        this.printMessage \u003d printMessage;"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d arguments.get(TASK_DESCRIPTION);"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        if (description.isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        String date \u003d arguments.get(TASK_DATE);"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"        if (date.isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please specify a date for the event.\");"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        LocalDate parsedDate \u003d null;"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"            parsedDate \u003d LocalDate.parse(date);"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"        } catch (DateTimeParseException dateTimeParseException) {"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"That\u0027s not a valid date!\");"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"        Event event \u003d new Event(description, parsedDate);"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"        dukeTaskList.addTask(event);"},{"lineNumber":50,"author":{"gitId":"brandonfoong"},"content":"        if (printMessage) {"},{"lineNumber":51,"author":{"gitId":"brandonfoong"},"content":"            int numberOfTasks \u003d dukeTaskList.getNumberOfTasks();"},{"lineNumber":52,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printTaskAdded(event.toString(), numberOfTasks);"},{"lineNumber":53,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"brandonfoong"},"content":"        if (isDone) {"},{"lineNumber":55,"author":{"gitId":"brandonfoong"},"content":"            event.markAsDone();"},{"lineNumber":56,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":58}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 2;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    private static final int SEARCH_EXPRESSION \u003d 1;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public FindCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException {"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me a search expression!\");"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        String searchExpression \u003d arguments.get(SEARCH_EXPRESSION);"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d dukeTaskList.findTasks(searchExpression);"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printMatchingTasks(matchingTasks);"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":27}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public class HelpCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public HelpCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public void execute() {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printHelpMessage();"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":17}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public ListCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList) {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public void execute() {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d dukeTaskList.getTasksAsString();"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"        DukePrinter.printTasks(taskStrings);"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":18}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import duke.DukePrinter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"import duke.DukeTaskList;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"public class TodoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"    private static final int REQUIRED_NUMBER_OF_ARGS \u003d 2;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    private static final int TASK_DESCRIPTION \u003d 1;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    private boolean printMessage, isDone;"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public TodoCommand(ArrayList\u003cString\u003e arguments, DukeTaskList dukeTaskList, boolean printMessage, boolean isDone) {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        super(arguments, dukeTaskList);"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        this.printMessage \u003d printMessage;"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    public void execute() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"        if (arguments.size() !\u003d REQUIRED_NUMBER_OF_ARGS) {"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"Please give me more details about the task!\");"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"        String description \u003d arguments.get(TASK_DESCRIPTION);"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"        if (description.isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"            throw new DukeException(\"The description of a task can\u0027t be empty. Please try again.\");"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"        Todo todo \u003d new Todo(description);"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"        dukeTaskList.addTask(todo);"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"        if (printMessage) {"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"            int numberOfTasks \u003d dukeTaskList.getNumberOfTasks();"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"            DukePrinter.printTaskAdded(todo.toString(), numberOfTasks);"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"            todo.markAsDone();"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":43}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"public class Deadline extends Task{"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    private LocalDate dueDate;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public Deadline(String description, LocalDate dueDate) {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"        super.setTaskType(\u0027D\u0027);"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        String formattedDate \u003d dueDate.format((DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        return super.toString() + \" (by: \" + formattedDate + \")\";"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        return super.exportAsCSV() + \",\" + dueDate.toString();"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":25}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    private LocalDate eventDate;"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"    public Event(String description, LocalDate eventDate) {"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"        super.setTaskType(\u0027E\u0027);"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"        String formattedDate \u003d eventDate.format((DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"        return super.toString() + \" (on: \" + formattedDate + \")\";"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        return super.exportAsCSV() + \",\" + eventDate.toString();"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":25}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    private String description;"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"    private boolean isDone;"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"    private char taskType;"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"        this.taskType \u003d \u0027 \u0027;"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"    public String getDescription() {"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"        return description;"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"    public void setTaskType(char taskType) {"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    public void markAsDone() {"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"        this.isDone \u003d true;"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"        return \"[\" + taskType + \"]\" + \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"    private String getStatusIcon() {"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"        /* Return X if task is done, and space otherwise */"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"    public String exportAsCSV() {"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"        return isDone + \",\" + taskType + \",\" + description;"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":38}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":""},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"        super.setTaskType(\u0027T\u0027);"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"}"}],"authorContributionMap":{"brandonfoong":8}},{"path":"text-ui-test/EXPECTED_1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type `help` for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t You have no tasks right now"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] complete this project"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] complete this project"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t [T][X] complete this project"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] CS2101 lecture (on: Tuesdays 10 am)"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][X] complete this project"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] CS2113T ip submission (by: before the tutorial)"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] CS2101 lecture (on: Tuesdays 10 am)"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":41}},{"path":"text-ui-test/EXPECTED_2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type `help` for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t The description of a task can\u0027t be empty. Please try again."},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t Please specify a date for the event."},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t Please give me more details about the task!"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] add a proper task"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] a proper deadline (by: right now)"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] exit this program (on: shortly later)"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] add a proper task"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] a proper deadline (by: right now)"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] exit this program (on: shortly later)"},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":44}},{"path":"text-ui-test/EXPECTED_3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"\t Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"\t What can I do for you?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"\t (Type `help` for a list of commands)"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"\t All tasks removed!"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"\t added: [T][ ] eat"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"\t You have 1 task in the list."},{"lineNumber":12,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":14,"author":{"gitId":"brandonfoong"},"content":"\t added: [D][ ] sleep (by: tonight)"},{"lineNumber":15,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":16,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"\t added: [E][ ] repeat (on: everyday)"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"\t You have 3 tasks in the list."},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":21,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] eat"},{"lineNumber":24,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][ ] sleep (by: tonight)"},{"lineNumber":25,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] repeat (on: everyday)"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"brandonfoong"},"content":"\t Nice! I\u0027ve marked this task as done:"},{"lineNumber":29,"author":{"gitId":"brandonfoong"},"content":"\t [D][X] sleep (by: tonight)"},{"lineNumber":30,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":31,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":32,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":33,"author":{"gitId":"brandonfoong"},"content":"\t 1. [T][ ] eat"},{"lineNumber":34,"author":{"gitId":"brandonfoong"},"content":"\t 2. [D][X] sleep (by: tonight)"},{"lineNumber":35,"author":{"gitId":"brandonfoong"},"content":"\t 3. [E][ ] repeat (on: everyday)"},{"lineNumber":36,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":37,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":38,"author":{"gitId":"brandonfoong"},"content":"\t Noted. I\u0027ve removed this task:"},{"lineNumber":39,"author":{"gitId":"brandonfoong"},"content":"\t [T][ ] eat"},{"lineNumber":40,"author":{"gitId":"brandonfoong"},"content":"\t You have 2 tasks in the list."},{"lineNumber":41,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":43,"author":{"gitId":"brandonfoong"},"content":"\t Here is a list of all your tasks:"},{"lineNumber":44,"author":{"gitId":"brandonfoong"},"content":"\t 1. [D][X] sleep (by: tonight)"},{"lineNumber":45,"author":{"gitId":"brandonfoong"},"content":"\t 2. [E][ ] repeat (on: everyday)"},{"lineNumber":46,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":47,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"brandonfoong"},"content":"\t Bye. Hope to see you again soon!"},{"lineNumber":49,"author":{"gitId":"brandonfoong"},"content":"\t____________________________________________________________"}],"authorContributionMap":{"brandonfoong":49}},{"path":"text-ui-test/INPUT_1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"todo complete this project"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"deadline CS2113T ip submission /by before the tutorial"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"event CS2101 lecture /at Tuesdays 10 am"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":9}},{"path":"text-ui-test/INPUT_2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"deadline /by empty input?"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"event       how about some trailing spaces /at    "},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"deadline"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"event"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"todo add a proper task"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"deadline a proper deadline /by right now"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"event exit this program /at shortly later"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":11,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":11}},{"path":"text-ui-test/INPUT_3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brandonfoong"},"content":"clear"},{"lineNumber":2,"author":{"gitId":"brandonfoong"},"content":"todo eat"},{"lineNumber":3,"author":{"gitId":"brandonfoong"},"content":"deadline sleep /by tonight"},{"lineNumber":4,"author":{"gitId":"brandonfoong"},"content":"event repeat /at everyday"},{"lineNumber":5,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":6,"author":{"gitId":"brandonfoong"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":8,"author":{"gitId":"brandonfoong"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"brandonfoong"},"content":"list"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"bye"}],"authorContributionMap":{"brandonfoong":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"brandonfoong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"brandonfoong"},"content":"REM run multiple test cases"},{"lineNumber":18,"author":{"gitId":"brandonfoong"},"content":"REM format (start, step, stop)"},{"lineNumber":19,"author":{"gitId":"brandonfoong"},"content":"for /l %%x in (1, 1, 3) do ("},{"lineNumber":20,"author":{"gitId":"brandonfoong"},"content":"    echo RUNNING TEST #%%x"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"brandonfoong"},"content":"    REM run the program, feed commands from input file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"brandonfoong"},"content":"    java -classpath ..\\bin duke.Duke \u003c INPUT_%%x.TXT \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"brandonfoong"},"content":"    FC ACTUAL.TXT EXPECTED_%%x.TXT"},{"lineNumber":27,"author":{"gitId":"brandonfoong"},"content":")"}],"authorContributionMap":{"-":18,"brandonfoong":9}}]
