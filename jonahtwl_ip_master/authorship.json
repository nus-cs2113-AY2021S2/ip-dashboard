[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import duke.exception.IllegalTaskCommandException;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"    private static void initialiseWelcomeMessage() {"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"        String logo"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"                \u003d \"******************************************************\\n\""},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"                + \"*                 Systems: [Online]                  *\\n\""},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"                + \"*                Protocol: [Dominion]                *\\n\""},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"                + \"*                    Race: [Terran]                  *\\n\""},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"                + \"******************************************************\\n\";"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"        String greeting"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"                \u003d \"______________________________________________________\\n\""},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"                + \"Systems Accessed...\\n\""},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"                + \"Decrypting Overwrite...\\n\""},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"                + \"Welcome Commander, can I be of assistance, commander?\\n\""},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"                + \"______________________________________________________\\n\";"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(logo);"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(greeting);"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"    private static void printGoodbyeMessage() {"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"        String goodbye"},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":"                \u003d \"______________________________________________________\\n\""},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"                + \"Good Bye Commander.\\n\""},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":"                + \"______________________________________________________\\n\";"},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(goodbye);"},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":"    private static String getCommand(String userInput) {"},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":"        String[] inputArray \u003d userInput.split(\" \");"},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"        String command \u003d inputArray[0];"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":"        return command.toUpperCase();"},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":"    private static void executeCommand(String command, String userInput) throws IllegalTaskCommandException {"},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":"        String errand;"},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"        String timestamp;"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":"        String timestampHeader;"},{"lineNumber":51,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"jonahtwl"},"content":"            switch (command) {"},{"lineNumber":54,"author":{"gitId":"jonahtwl"},"content":"            case \"TODO\":"},{"lineNumber":55,"author":{"gitId":"jonahtwl"},"content":"                errand \u003d getSubstring(userInput);"},{"lineNumber":56,"author":{"gitId":"jonahtwl"},"content":"                Task todo \u003d new Todo(errand);"},{"lineNumber":57,"author":{"gitId":"jonahtwl"},"content":"                todo.addToTaskList(errand, null); // Todo has no timestamp"},{"lineNumber":58,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"jonahtwl"},"content":"            case \"EVENT\":"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":"                errand \u003d getErrand(userInput);"},{"lineNumber":61,"author":{"gitId":"jonahtwl"},"content":"                timestampHeader \u003d getTimestampHeader(userInput);"},{"lineNumber":62,"author":{"gitId":"jonahtwl"},"content":"                timestamp \u003d getTimestamp(userInput);"},{"lineNumber":63,"author":{"gitId":"jonahtwl"},"content":"                Task event \u003d new Event(errand, timestamp, timestampHeader);"},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":"                event.addToTaskList(errand, timestamp);"},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"jonahtwl"},"content":"            case \"DEADLINE\":"},{"lineNumber":67,"author":{"gitId":"jonahtwl"},"content":"                errand \u003d getErrand(userInput);"},{"lineNumber":68,"author":{"gitId":"jonahtwl"},"content":"                timestampHeader \u003d getTimestampHeader(userInput);"},{"lineNumber":69,"author":{"gitId":"jonahtwl"},"content":"                timestamp \u003d getTimestamp(userInput);"},{"lineNumber":70,"author":{"gitId":"jonahtwl"},"content":"                Task deadline \u003d new Deadline(errand, timestamp, timestampHeader);"},{"lineNumber":71,"author":{"gitId":"jonahtwl"},"content":"                deadline.addToTaskList(errand, timestamp);"},{"lineNumber":72,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":73,"author":{"gitId":"jonahtwl"},"content":"            case \"LIST\":"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"                Task.printList();"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"jonahtwl"},"content":"            case \"DONE\":"},{"lineNumber":77,"author":{"gitId":"jonahtwl"},"content":"                errand \u003d getSubstring(userInput);"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"                Task.markDone(errand); // In this case, errand is the index of the item"},{"lineNumber":79,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"jonahtwl"},"content":"            case \"BYE\":"},{"lineNumber":81,"author":{"gitId":"jonahtwl"},"content":"                printGoodbyeMessage();"},{"lineNumber":82,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"jonahtwl"},"content":"            default:"},{"lineNumber":84,"author":{"gitId":"jonahtwl"},"content":"                throw new IllegalTaskCommandException(\"Unacceptable Command!\");"},{"lineNumber":85,"author":{"gitId":"jonahtwl"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"jonahtwl"},"content":"        } catch (IllegalTaskCommandException e) {"},{"lineNumber":87,"author":{"gitId":"jonahtwl"},"content":"            e.printErrorLogo();"},{"lineNumber":88,"author":{"gitId":"jonahtwl"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":89,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":91,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":93,"author":{"gitId":"jonahtwl"},"content":"    private static String getSubstring(String userInput) throws IllegalTaskCommandException {"},{"lineNumber":94,"author":{"gitId":"jonahtwl"},"content":"        String cleanUserInput \u003d userInput.strip(); // Removes any leading and trailing spaces"},{"lineNumber":95,"author":{"gitId":"jonahtwl"},"content":"        int spacePosition \u003d cleanUserInput.indexOf(\" \");"},{"lineNumber":96,"author":{"gitId":"jonahtwl"},"content":"        if (spacePosition \u003c 0) { // Is single command"},{"lineNumber":97,"author":{"gitId":"jonahtwl"},"content":"            throw new IllegalTaskCommandException(\"Insufficient command parameters commander!\");"},{"lineNumber":98,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"jonahtwl"},"content":"        return cleanUserInput.substring(spacePosition + 1);"},{"lineNumber":100,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":102,"author":{"gitId":"jonahtwl"},"content":"    private static String getErrand(String userInput) throws IllegalTaskCommandException {"},{"lineNumber":103,"author":{"gitId":"jonahtwl"},"content":"        String inputSubstring \u003d getSubstring(userInput);"},{"lineNumber":104,"author":{"gitId":"jonahtwl"},"content":"        int slashPosition \u003d inputSubstring.indexOf(\"/\");"},{"lineNumber":105,"author":{"gitId":"jonahtwl"},"content":"        if (slashPosition \u003c 0) {"},{"lineNumber":106,"author":{"gitId":"jonahtwl"},"content":"            throw new IllegalTaskCommandException(\"Timestamp not found commander!\");"},{"lineNumber":107,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"jonahtwl"},"content":"        String errand \u003d inputSubstring.substring(0, slashPosition);"},{"lineNumber":109,"author":{"gitId":"jonahtwl"},"content":"        return errand.trim();"},{"lineNumber":110,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":112,"author":{"gitId":"jonahtwl"},"content":"    private static String getTimestampHeader(String userInput) throws IllegalTaskCommandException {"},{"lineNumber":113,"author":{"gitId":"jonahtwl"},"content":"        String inputSubstring \u003d getSubstring(userInput);"},{"lineNumber":114,"author":{"gitId":"jonahtwl"},"content":"        int slashPosition \u003d inputSubstring.indexOf(\"/\");"},{"lineNumber":115,"author":{"gitId":"jonahtwl"},"content":"        String timestampHeader \u003d inputSubstring.substring(slashPosition);"},{"lineNumber":116,"author":{"gitId":"jonahtwl"},"content":"        int spacePosition \u003d timestampHeader.indexOf(\" \");"},{"lineNumber":117,"author":{"gitId":"jonahtwl"},"content":"        if (timestampHeader.split(\" \").length \u003c 2) {"},{"lineNumber":118,"author":{"gitId":"jonahtwl"},"content":"            throw new IllegalTaskCommandException(\"Missing timestamp commander!\");"},{"lineNumber":119,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"jonahtwl"},"content":"        timestampHeader \u003d timestampHeader.substring(1, spacePosition);"},{"lineNumber":121,"author":{"gitId":"jonahtwl"},"content":"        return timestampHeader;"},{"lineNumber":122,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":124,"author":{"gitId":"jonahtwl"},"content":"    private static String getTimestamp(String userInput) throws IllegalTaskCommandException {"},{"lineNumber":125,"author":{"gitId":"jonahtwl"},"content":"        String inputSubstring \u003d getSubstring(userInput);"},{"lineNumber":126,"author":{"gitId":"jonahtwl"},"content":"        int slashPosition \u003d inputSubstring.indexOf(\"/\");"},{"lineNumber":127,"author":{"gitId":"jonahtwl"},"content":"        String timestamp \u003d inputSubstring.substring(slashPosition);"},{"lineNumber":128,"author":{"gitId":"jonahtwl"},"content":"        int spacePosition \u003d timestamp.indexOf(\" \");"},{"lineNumber":129,"author":{"gitId":"jonahtwl"},"content":"        timestamp \u003d timestamp.substring(spacePosition);"},{"lineNumber":130,"author":{"gitId":"jonahtwl"},"content":"        return timestamp.trim();"},{"lineNumber":131,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":133,"author":{"gitId":"jonahtwl"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"jonahtwl"},"content":"     * Starts the Task Manager program."},{"lineNumber":135,"author":{"gitId":"jonahtwl"},"content":"     * \u003cp\u003eRuns an infinite loop until \"BYE\" is called\u003c/p\u003e"},{"lineNumber":136,"author":{"gitId":"jonahtwl"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"jonahtwl"},"content":"    private static void runTaskManager() throws IllegalTaskCommandException {"},{"lineNumber":138,"author":{"gitId":"jonahtwl"},"content":"        String userInput;"},{"lineNumber":139,"author":{"gitId":"jonahtwl"},"content":"        String command;"},{"lineNumber":140,"author":{"gitId":"jonahtwl"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":141,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":142,"author":{"gitId":"jonahtwl"},"content":"        do {"},{"lineNumber":143,"author":{"gitId":"jonahtwl"},"content":"            userInput \u003d in.nextLine();"},{"lineNumber":144,"author":{"gitId":"jonahtwl"},"content":"            command \u003d getCommand(userInput);"},{"lineNumber":145,"author":{"gitId":"jonahtwl"},"content":"            executeCommand(command, userInput);"},{"lineNumber":146,"author":{"gitId":"jonahtwl"},"content":"        } while (!command.equals(\"BYE\"));"},{"lineNumber":147,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":149,"author":{"gitId":"jonahtwl"},"content":"    public static void main(String[] args) throws IllegalTaskCommandException {"},{"lineNumber":150,"author":{"gitId":"jonahtwl"},"content":"        initialiseWelcomeMessage();"},{"lineNumber":151,"author":{"gitId":"jonahtwl"},"content":"        runTaskManager();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jonahtwl":150,"-":3}},{"path":"src/main/java/duke/exception/IllegalTaskCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class IllegalTaskCommandException extends Exception{"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"    public IllegalTaskCommandException(String message) {"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"    public static void printErrorLogo() {"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(\"*****\\n* ! *\\n*****\");"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"    private static final String DEADLINE_TYPE \u003d \"D\";"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"    private String by;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"    private String timestampHeader;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    public Deadline(String errand, String timestamp, String timestampHeader) {"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"        super(errand);"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"        this.by \u003d timestamp;"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"        this.timestampHeader \u003d timestampHeader;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"    protected String getTaskType() {"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"        return DEADLINE_TYPE;"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"    protected void printTaskItem() {"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"        super.printTaskItem();"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"        this.printBy();"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"    private void printBy() {"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"        String trialingBy \u003d \" (\" + timestampHeader + \": \" + by + \")\";"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(trialingBy);"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":29}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"    private static final String EVENT_TYPE \u003d \"E\";"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"    private String at;"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"    private String timestampHeader;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    public Event (String errand, String timestamp, String timestampHeader) {"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"        super(errand);"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"        this.at \u003d timestamp;"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"        this.timestampHeader \u003d timestampHeader;"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"    protected String getTaskType() {"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"        return EVENT_TYPE;"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"    protected void printTaskItem() {"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"        super.printTaskItem();"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"        this.printAt();"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"    private void printAt() {"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"        String trialingAt \u003d \" (\" + timestampHeader + \": \" + at + \")\";"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(trialingAt);"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"import duke.exception.IllegalTaskCommandException;"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    protected static int taskIndex \u003d 0;"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"    protected static final int MAX_ARRAY_SIZE \u003d 100;"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"    protected static Task[] taskArray \u003d new Task[MAX_ARRAY_SIZE];"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"    public static void printList() {"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"        int index \u003d 0;"},{"lineNumber":19,"author":{"gitId":"jonahtwl"},"content":"        printTaskHeader();"},{"lineNumber":20,"author":{"gitId":"jonahtwl"},"content":"        for(Task task: taskArray) {"},{"lineNumber":21,"author":{"gitId":"jonahtwl"},"content":"            // Empty array"},{"lineNumber":22,"author":{"gitId":"jonahtwl"},"content":"            if(index \u003e\u003d taskIndex){"},{"lineNumber":23,"author":{"gitId":"jonahtwl"},"content":"                break;"},{"lineNumber":24,"author":{"gitId":"jonahtwl"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"jonahtwl"},"content":"            task.printTaskIndex(index);"},{"lineNumber":26,"author":{"gitId":"jonahtwl"},"content":"            task.printTaskType();"},{"lineNumber":27,"author":{"gitId":"jonahtwl"},"content":"            task.printCompletionStatus();"},{"lineNumber":28,"author":{"gitId":"jonahtwl"},"content":"            task.printTaskItem();"},{"lineNumber":29,"author":{"gitId":"jonahtwl"},"content":"            System.out.println();"},{"lineNumber":30,"author":{"gitId":"jonahtwl"},"content":"            index++;"},{"lineNumber":31,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(\"\\n\");"},{"lineNumber":33,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":35,"author":{"gitId":"jonahtwl"},"content":"    private static void printTaskHeader() {"},{"lineNumber":36,"author":{"gitId":"jonahtwl"},"content":"        String tasksTemplate"},{"lineNumber":37,"author":{"gitId":"jonahtwl"},"content":"                \u003d \"******************************************************\\n\""},{"lineNumber":38,"author":{"gitId":"jonahtwl"},"content":"                + \"*                                                    *\\n\""},{"lineNumber":39,"author":{"gitId":"jonahtwl"},"content":"                + \"*          [Objectives]-[Missions]-[Tasks]           *\\n\""},{"lineNumber":40,"author":{"gitId":"jonahtwl"},"content":"                + \"*                                                    *\\n\""},{"lineNumber":41,"author":{"gitId":"jonahtwl"},"content":"                + \"******************************************************\";"},{"lineNumber":42,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(tasksTemplate);"},{"lineNumber":43,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":45,"author":{"gitId":"jonahtwl"},"content":"    private void printTaskIndex(int taskIndex) {"},{"lineNumber":46,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(\"[\" + (taskIndex + 1) + \"]\");"},{"lineNumber":47,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":49,"author":{"gitId":"jonahtwl"},"content":"    private void printTaskType() {"},{"lineNumber":50,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(\"[\" + getTaskType() + \"]\");"},{"lineNumber":51,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":53,"author":{"gitId":"jonahtwl"},"content":"    protected String getTaskType() {"},{"lineNumber":54,"author":{"gitId":"jonahtwl"},"content":"        return null;"},{"lineNumber":55,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":57,"author":{"gitId":"jonahtwl"},"content":"    private void printCompletionStatus() {"},{"lineNumber":58,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(\"[\" + getStatusIcon() + \"]\");"},{"lineNumber":59,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":61,"author":{"gitId":"jonahtwl"},"content":"    public String getStatusIcon() {"},{"lineNumber":62,"author":{"gitId":"jonahtwl"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":63,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":65,"author":{"gitId":"jonahtwl"},"content":"    protected void printTaskItem() {"},{"lineNumber":66,"author":{"gitId":"jonahtwl"},"content":"        String item \u003d \" \" + this.description;"},{"lineNumber":67,"author":{"gitId":"jonahtwl"},"content":"        System.out.print(item);"},{"lineNumber":68,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":70,"author":{"gitId":"jonahtwl"},"content":"    public void addToTaskList(String errand, String timestamp) {"},{"lineNumber":71,"author":{"gitId":"jonahtwl"},"content":"        echoInput(errand, timestamp);"},{"lineNumber":72,"author":{"gitId":"jonahtwl"},"content":"        taskArray[taskIndex] \u003d this;"},{"lineNumber":73,"author":{"gitId":"jonahtwl"},"content":"        taskIndex++;"},{"lineNumber":74,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":76,"author":{"gitId":"jonahtwl"},"content":"    public void echoInput(String errand, String timestamp) {"},{"lineNumber":77,"author":{"gitId":"jonahtwl"},"content":"        String taskString;"},{"lineNumber":78,"author":{"gitId":"jonahtwl"},"content":"        String echoTop \u003d \"______________________________________________________\\n\""},{"lineNumber":79,"author":{"gitId":"jonahtwl"},"content":"                + \"[Orders received]:\\n\";"},{"lineNumber":80,"author":{"gitId":"jonahtwl"},"content":"        String echoBottom \u003d \"______________________________________________________\\n\";"},{"lineNumber":81,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":82,"author":{"gitId":"jonahtwl"},"content":"        if (timestamp \u003d\u003d null) { // Todo tasks"},{"lineNumber":83,"author":{"gitId":"jonahtwl"},"content":"            taskString \u003d \" \" + errand + \"\\n\";"},{"lineNumber":84,"author":{"gitId":"jonahtwl"},"content":"        } else { // Deadlines and Events"},{"lineNumber":85,"author":{"gitId":"jonahtwl"},"content":"            taskString \u003d \" \" + errand + \" (Timestamp: \" + timestamp + \")\" + \"\\n\";"},{"lineNumber":86,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":88,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(echoTop);"},{"lineNumber":89,"author":{"gitId":"jonahtwl"},"content":"        printTaskType();"},{"lineNumber":90,"author":{"gitId":"jonahtwl"},"content":"        printCompletionStatus();"},{"lineNumber":91,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(taskString);"},{"lineNumber":92,"author":{"gitId":"jonahtwl"},"content":"        printTaskCount();"},{"lineNumber":93,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(echoBottom);"},{"lineNumber":94,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":96,"author":{"gitId":"jonahtwl"},"content":"    private void printTaskCount() {"},{"lineNumber":97,"author":{"gitId":"jonahtwl"},"content":"        String taskCountMessage \u003d \"There are now \" + (taskIndex + 1)"},{"lineNumber":98,"author":{"gitId":"jonahtwl"},"content":"                + \" mission objectives, Commander.\";"},{"lineNumber":99,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(taskCountMessage);"},{"lineNumber":100,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":102,"author":{"gitId":"jonahtwl"},"content":"    public static void markDone(String index) throws IllegalTaskCommandException {"},{"lineNumber":103,"author":{"gitId":"jonahtwl"},"content":"        int indexOfTask;"},{"lineNumber":104,"author":{"gitId":"jonahtwl"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"jonahtwl"},"content":"            indexOfTask \u003d Integer.parseInt(index) - 1;"},{"lineNumber":106,"author":{"gitId":"jonahtwl"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":107,"author":{"gitId":"jonahtwl"},"content":"            IllegalTaskCommandException.printErrorLogo();"},{"lineNumber":108,"author":{"gitId":"jonahtwl"},"content":"            System.out.println(\"Only numbers are allowed commander!\");"},{"lineNumber":109,"author":{"gitId":"jonahtwl"},"content":"            return; // Ends the method here as invalid input is entered"},{"lineNumber":110,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":112,"author":{"gitId":"jonahtwl"},"content":"        if (indexOfTask \u003c 0) {"},{"lineNumber":113,"author":{"gitId":"jonahtwl"},"content":"            throw new IllegalTaskCommandException(\"There is no such task, Commander!\");"},{"lineNumber":114,"author":{"gitId":"jonahtwl"},"content":"        } else if (indexOfTask \u003e\u003d taskIndex) {"},{"lineNumber":115,"author":{"gitId":"jonahtwl"},"content":"            throw new IllegalTaskCommandException(\"Unacceptable location Commander!\");"},{"lineNumber":116,"author":{"gitId":"jonahtwl"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"jonahtwl"},"content":"        taskArray[indexOfTask].isDone \u003d true;"},{"lineNumber":118,"author":{"gitId":"jonahtwl"},"content":"        printMarkDonePrompt(indexOfTask);"},{"lineNumber":119,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":121,"author":{"gitId":"jonahtwl"},"content":"    private static void printMarkDonePrompt(int taskIndex) {"},{"lineNumber":122,"author":{"gitId":"jonahtwl"},"content":"        String doneTextTop \u003d \"______________________________________________________\\n\""},{"lineNumber":123,"author":{"gitId":"jonahtwl"},"content":"                + \"[Objective Completed]:\\n\";"},{"lineNumber":124,"author":{"gitId":"jonahtwl"},"content":"        String doneTextBottom \u003d \"______________________________________________________\\n\";"},{"lineNumber":125,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":126,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(doneTextTop);"},{"lineNumber":127,"author":{"gitId":"jonahtwl"},"content":"        taskArray[taskIndex].printTaskType();"},{"lineNumber":128,"author":{"gitId":"jonahtwl"},"content":"        taskArray[taskIndex].printCompletionStatus();"},{"lineNumber":129,"author":{"gitId":"jonahtwl"},"content":"        taskArray[taskIndex].printTaskItem();"},{"lineNumber":130,"author":{"gitId":"jonahtwl"},"content":"        System.out.println();"},{"lineNumber":131,"author":{"gitId":"jonahtwl"},"content":"        System.out.println(doneTextBottom);"},{"lineNumber":132,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":133}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"    private static final String TODO_TYPE \u003d \"T\";"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"    public Todo (String errand) {"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"        super(errand);"},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":""},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"    protected String getTaskType() {"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"        return TODO_TYPE;"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"}"}],"authorContributionMap":{"jonahtwl":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jonahtwl"},"content":"list"},{"lineNumber":2,"author":{"gitId":"jonahtwl"},"content":"done 0"},{"lineNumber":3,"author":{"gitId":"jonahtwl"},"content":"done "},{"lineNumber":4,"author":{"gitId":"jonahtwl"},"content":"done -1"},{"lineNumber":5,"author":{"gitId":"jonahtwl"},"content":"/todo Destroy Zagara\u0027s Base"},{"lineNumber":6,"author":{"gitId":"jonahtwl"},"content":"todo Destroy Zagara\u0027s Base"},{"lineNumber":7,"author":{"gitId":"jonahtwl"},"content":"todo "},{"lineNumber":8,"author":{"gitId":"jonahtwl"},"content":"deadline Find Arcterus Mengsk /"},{"lineNumber":9,"author":{"gitId":"jonahtwl"},"content":"deadline Find Arcterus Mengsk /before"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"event Coronation of Mengsk on Korhol /at Year 2260 Month 5"},{"lineNumber":11,"author":{"gitId":"jonahtwl"},"content":"deadline Find Sarah Kerrigan /before Year 2265"},{"lineNumber":12,"author":{"gitId":"jonahtwl"},"content":"list"},{"lineNumber":13,"author":{"gitId":"jonahtwl"},"content":"done 2"},{"lineNumber":14,"author":{"gitId":"jonahtwl"},"content":"list"},{"lineNumber":15,"author":{"gitId":"jonahtwl"},"content":"done 1"},{"lineNumber":16,"author":{"gitId":"jonahtwl"},"content":"list"},{"lineNumber":17,"author":{"gitId":"jonahtwl"},"content":"bye"}],"authorContributionMap":{"jonahtwl":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"jonahtwl"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jonahtwl"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.txt"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"jonahtwl":2,"-":19}}]
