[{"path":"Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo eat"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline homework by tomorrow"},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"[ ] event party at tuesday 2pm"}],"authorContributionMap":{"oscarlai1998":3}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"# Alfred User Guide"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"By: `Oscar Lai` Latest Update: `28-Feb-2021`"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"![logo](./docs/alfred-meme.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"- [Alfred Guide](#alfred-user-guide)"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"   * [1. Introduction](#1-introduction)"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"   * [2. Quick Start](#2-quick-start)"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"      + [2.1. Quick start using latest jar file](#21-quick-start-by-downloading-the-latest-jar-file)"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"      + [2.2. Quick start using IntelliJ](#22--quick-start-on-intellij-version-202032-latest-and-beyond)"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"   * [3. Features](#3-features)"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"      + [3.1. Todo](#31-add-a-todo-task-todo)"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"      + [3.2. Deadline](#32-add-a-deadline-task-deadline)"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"      + [3.3. Event](#33-add-an-event-task-event)"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"      + [3.4. List](#34-list-all-tasks-list)"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"      + [3.5. Done](#35-mark-a-task-as-done-done)"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"      + [3.6. Delete](#36-delete-a-task-delete)"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"      + [3.7. Find](#37-search-task-by-a-keyword-find)"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"      + [3.8. Help](#38-find-list-of-commands-help)"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"      + [3.9. Bye](#39-exit-program-bye)"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"      + [3.10 Task Storage](#310-task-storage)"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"         - [3.10.1. Loading Data](#3101-loading-data)"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"         - [3.10.2. Saving Data](#3102-saving-data)"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"   * [4. FAQ](#4-faq)"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"   * [5. Command Summary](#5-command-summary)"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"## 1. Introduction"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"Who is Gotham\u0027s true saviour? Is it the Dark Knight? Is it Robin or is it Batgirl? The true"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"answer is none other than Alfred Pennyworth. Alfred will help you keep track of your busy schedule noting your"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"todo, events and deadlines, optimized for use via a **Command Line Interface** CLI. He will mark it as done and remind you the tasks you have left. He is the silent guardian, the"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"watchful protector, a dark knight."},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"## 2. Quick Start"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"Prerequisites: JDK11, the latest version of IntelliJ"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"###2.1 Quick Start by downloading the latest jar file"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"1. Ensure you have Java `11` installed in your computer."},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"2. Download the latest `Duke.jar` from [here](https://github.com/oscarlai1998/ip/releases)."},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"3. Copy the file to a new folder you want to run `Duke` in."},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"4. For Windows User, open **Command Prompt**."},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"   For Mac Users, open **Terminal**."},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"   Navigate to the directory containing `Duke.jar` file."},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"   i.e. `cd \u003cFILEPATH\u003e`"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"5. Run Duke.jar file by using the command `java -jar Duke.jar`."},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"### 2.2  Quick start on IntelliJ version 2020.3.2 (latest) and beyond"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"1. Clone the latest version of the project to your local computer from [here](https://github.com/oscarlai1998/ip)."},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"2. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"3. Import the project by:"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"   i. Click `Open`"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"   ii. Find and select the project directory, and click `OK`"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"   iii. Accept default options"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"4. Configure the project to use JDK11, as explained in [here](http://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"5. Locate  `src/main/java/Duke.java` file, right-click it, and `Run Duke.main()`."},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"**If the setup is correct, the expected output should be:**"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"Welcome to Duke v1.1 ----------- Latest Update: 28/2/21"},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"Developed by: Oscar Lai"},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"Good Day, I\u0027m Alfred."},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"⊂_ ヽ"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"　 ＼ ＼ ^^^^^^"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"　　 ＼ ( ͡° ͜ʖ ͡°) ...what can I do for you?"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"　　　 \u003e　   ⌒ ヽ"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"　　　/ 　 へ   ＼"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"　　 / # /　 ＼ ＼...check out my six pack tho."},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"　　(　  (ヽ　　ヽ _ つ"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"   |  　| \\"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"　  | 丿 ＼ ⌒)...Enter HELP for command list!"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"　  | |　　) /"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"   ノ )　　Lﾉ"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"  (_／"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"## 3. Features"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"\u003e**Notes about the command format:**"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"\u003e - Command inputs are not `case sensitive`"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"    \u003e"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"    \u003e  e.g. `todo sleep` is the same as `TODO sleep`"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"\u003e - Unknown parameters will result in an error"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"### 3.1. Add a Todo task: `todo`"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"This command adds a todo task to the list."},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"Format: `todo \u003ctask description\u003e`"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"Example: `todo save gotham`"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"I have added [T][ ] \"save gotham\" to the List!"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"You have 1 task in total!"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"### 3.2. Add a Deadline task: `deadline`"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"This command adds a deadline task to the list."},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"Format: `deadline \u003ctask description\u003e /by \u003cDD-MM-YYYY\u003e`"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"Example: `deadline solve all crimes /by 25 April 2021`"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"I have added [D][ ] \"solve all crimes (By: 25 April 2021)\" to the List!"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"You have 2 tasks in total!"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"### 3.3. Add an Event task: `event`"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"This command adds an event task to the list."},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"Format: `event \u003ctask description\u003e /by \u003cDD-MM-YYYY\u003e`"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"Example: `event meeting with Commissioner Gordon /at 8 June 2021`"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"I have added [E][ ] \"meeting with Commissioner Gordon (At: 8 June 2021)\" to the List!"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"You have 3 tasks in total!"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"### 3.4. List all tasks: `list`"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"This command lists all tasks recorded in the task list."},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"Format: `list`"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":" LIST"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"1. [T] [ ] save gotham"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"2. [D] [ ] solve all crimes (By: 25 April 2021)"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"3. [E] [ ] meeting with Commissioner Gordon (At: 8 June 2021)"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"### 3.5. Mark a task as done: `done`"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"This command marks a task as completed."},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"Example: `done 2`"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"Good Job, I will mark this as done!"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":"[D] [✓] solve all crimes (By: 25 April 2021)"},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"### 3.6. Delete a task: `delete`"},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"This command deletes a task from the list."},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"Example: `delete 2`"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"Noted! I will delete this at once!"},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":"[D] [✓] solve all crimes (By: 25 April 2021)"},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"You have 2 tasks in total!"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"### 3.7. Search task by a keyword: `find`"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":"This command searches the task list and shows all the tasks that contains"},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"the keyword in the task description"},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"Example: `find Gordon`"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":191,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":192,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":193,"author":{"gitId":"oscarlai1998"},"content":"I have found the follow items: "},{"lineNumber":194,"author":{"gitId":"oscarlai1998"},"content":"1. [E][ ] \"meeting with Commissioner Gordon (At: 8 June 2021)\""},{"lineNumber":195,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":196,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":197,"author":{"gitId":"oscarlai1998"},"content":"### 3.8. Find list of commands: `help`"},{"lineNumber":198,"author":{"gitId":"oscarlai1998"},"content":"This command shows the list of commands in the program."},{"lineNumber":199,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":200,"author":{"gitId":"oscarlai1998"},"content":"Format: `help`"},{"lineNumber":201,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":202,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":203,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":204,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":205,"author":{"gitId":"oscarlai1998"},"content":" HELP COMMANDS"},{"lineNumber":206,"author":{"gitId":"oscarlai1998"},"content":"todo: adds a todo task to the list"},{"lineNumber":207,"author":{"gitId":"oscarlai1998"},"content":" Example: todo sleep"},{"lineNumber":208,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":209,"author":{"gitId":"oscarlai1998"},"content":"deadline: adds a deadline task to the list"},{"lineNumber":210,"author":{"gitId":"oscarlai1998"},"content":" Example: deadline homework /by tomorrow"},{"lineNumber":211,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":212,"author":{"gitId":"oscarlai1998"},"content":"event: adds an event task to the list"},{"lineNumber":213,"author":{"gitId":"oscarlai1998"},"content":" Example: event birthday party /at tuesday"},{"lineNumber":214,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":215,"author":{"gitId":"oscarlai1998"},"content":"List: view list"},{"lineNumber":216,"author":{"gitId":"oscarlai1998"},"content":" Example: list"},{"lineNumber":217,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":218,"author":{"gitId":"oscarlai1998"},"content":"Help: view help commands"},{"lineNumber":219,"author":{"gitId":"oscarlai1998"},"content":" Example: Help"},{"lineNumber":220,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":221,"author":{"gitId":"oscarlai1998"},"content":"Done: mark a task as done"},{"lineNumber":222,"author":{"gitId":"oscarlai1998"},"content":" Example: Done 2"},{"lineNumber":223,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":224,"author":{"gitId":"oscarlai1998"},"content":"Delete: deletes a task from list"},{"lineNumber":225,"author":{"gitId":"oscarlai1998"},"content":" Example: delete 2"},{"lineNumber":226,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":227,"author":{"gitId":"oscarlai1998"},"content":"Find: find task that contains substring of input"},{"lineNumber":228,"author":{"gitId":"oscarlai1998"},"content":" Example: find birthday"},{"lineNumber":229,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":230,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt Format: "},{"lineNumber":231,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo save gotham"},{"lineNumber":232,"author":{"gitId":"oscarlai1998"},"content":"[ ] event meeting with Commissioner Gordon at 8 June 2021"},{"lineNumber":233,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline pay ransom money by  31 May 2021 3pm"},{"lineNumber":234,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":235,"author":{"gitId":"oscarlai1998"},"content":"Bye:  terminate program"},{"lineNumber":236,"author":{"gitId":"oscarlai1998"},"content":" Example: bye"},{"lineNumber":237,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":238,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":239,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":240,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":241,"author":{"gitId":"oscarlai1998"},"content":"### 3.9. Exit program: `bye`"},{"lineNumber":242,"author":{"gitId":"oscarlai1998"},"content":"This command exits the program."},{"lineNumber":243,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":244,"author":{"gitId":"oscarlai1998"},"content":"Format: `bye`"},{"lineNumber":245,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":246,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":247,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":248,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":249,"author":{"gitId":"oscarlai1998"},"content":"Pleasure serving you..."},{"lineNumber":250,"author":{"gitId":"oscarlai1998"},"content":" __      __"},{"lineNumber":251,"author":{"gitId":"oscarlai1998"},"content":"( _\\    /_ )"},{"lineNumber":252,"author":{"gitId":"oscarlai1998"},"content":" \\ _\\  /_ /"},{"lineNumber":253,"author":{"gitId":"oscarlai1998"},"content":"  \\ _\\/_ /_ _"},{"lineNumber":254,"author":{"gitId":"oscarlai1998"},"content":"  |_____/_/ /|"},{"lineNumber":255,"author":{"gitId":"oscarlai1998"},"content":"  (  (_)__)J-)"},{"lineNumber":256,"author":{"gitId":"oscarlai1998"},"content":"  (  /`.,   /"},{"lineNumber":257,"author":{"gitId":"oscarlai1998"},"content":"   \\/  ;   /"},{"lineNumber":258,"author":{"gitId":"oscarlai1998"},"content":"    | \u003d\u003d\u003d |See you again!"},{"lineNumber":259,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":260,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":261,"author":{"gitId":"oscarlai1998"},"content":"### 3.10. Task Storage"},{"lineNumber":262,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":263,"author":{"gitId":"oscarlai1998"},"content":"#### 3.10.1. Loading Data"},{"lineNumber":264,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":265,"author":{"gitId":"oscarlai1998"},"content":"Alfred will automatically import any existing data from **Duke.txt** file."},{"lineNumber":266,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":267,"author":{"gitId":"oscarlai1998"},"content":"`Duke.txt Format`"},{"lineNumber":268,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":269,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":270,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo save gotham"},{"lineNumber":271,"author":{"gitId":"oscarlai1998"},"content":"[ ] event meeting with Commissioner Gordon at 8 June 2021"},{"lineNumber":272,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline pay ransom money by  31 May 2021 3pm"},{"lineNumber":273,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":274,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":275,"author":{"gitId":"oscarlai1998"},"content":"Expected output after loading program:"},{"lineNumber":276,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":277,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt successfully synced!"},{"lineNumber":278,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":279,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":280,"author":{"gitId":"oscarlai1998"},"content":"#### 3.10.2. Saving Data"},{"lineNumber":281,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":282,"author":{"gitId":"oscarlai1998"},"content":"Alfred will automatically **save Duke.txt** in the hard disk after user exits the program via `bye`"},{"lineNumber":283,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":284,"author":{"gitId":"oscarlai1998"},"content":"Expected output after exiting program:"},{"lineNumber":285,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":286,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt file Updated!"},{"lineNumber":287,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":288,"author":{"gitId":"oscarlai1998"},"content":"Developed by: Oscar Lai"},{"lineNumber":289,"author":{"gitId":"oscarlai1998"},"content":"Version 1.1"},{"lineNumber":290,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":291,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":292,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":293,"author":{"gitId":"oscarlai1998"},"content":"**Note: If you exit the program without `bye`, no new data is saved.**"},{"lineNumber":294,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":295,"author":{"gitId":"oscarlai1998"},"content":"## 4. FAQ"},{"lineNumber":296,"author":{"gitId":"oscarlai1998"},"content":"**Q1: What if I do not have a Duke.txt file?**"},{"lineNumber":297,"author":{"gitId":"oscarlai1998"},"content":"\u003e Alfred will automatically create a Duke.txt if you do not have one."},{"lineNumber":298,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":299,"author":{"gitId":"oscarlai1998"},"content":"**Q2: Where is my Duke.txt file?**"},{"lineNumber":300,"author":{"gitId":"oscarlai1998"},"content":"\u003e For Window Users: Type **Duke.txt** in the search panel"},{"lineNumber":301,"author":{"gitId":"oscarlai1998"},"content":"\u003e"},{"lineNumber":302,"author":{"gitId":"oscarlai1998"},"content":"\u003e For Mac Users: Use **Spotlight** or **Finder**"},{"lineNumber":303,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":304,"author":{"gitId":"oscarlai1998"},"content":"## 5. Command Summary"},{"lineNumber":305,"author":{"gitId":"oscarlai1998"},"content":"**Command** | **Format** | **Example**"},{"lineNumber":306,"author":{"gitId":"oscarlai1998"},"content":"------------ | -------------------- | ------------"},{"lineNumber":307,"author":{"gitId":"oscarlai1998"},"content":"todo | `todo \u003ctask description\u003e` | `todo save gotham`"},{"lineNumber":308,"author":{"gitId":"oscarlai1998"},"content":"deadline | `deadline \u003ctask description\u003e /by \u003cdd-mm-yyyy\u003e` | `deadline pay ransom money /by 21-March-2021`"},{"lineNumber":309,"author":{"gitId":"oscarlai1998"},"content":"event | `event \u003ctask description\u003e /at \u003cdd-mm-yyyy\u003e` | `event gotham ball /at 31-May-2021`"},{"lineNumber":310,"author":{"gitId":"oscarlai1998"},"content":"list | `list` | `list`"},{"lineNumber":311,"author":{"gitId":"oscarlai1998"},"content":"done | `done \u003ctask number\u003e` | `done 1`"},{"lineNumber":312,"author":{"gitId":"oscarlai1998"},"content":"delete | `delete \u003ctask number\u003e` | `delete 2`"},{"lineNumber":313,"author":{"gitId":"oscarlai1998"},"content":"find | `find \u003ckeyword\u003e` | `find gotham`"},{"lineNumber":314,"author":{"gitId":"oscarlai1998"},"content":"help | `help` | `help`"},{"lineNumber":315,"author":{"gitId":"oscarlai1998"},"content":"bye | `bye` | `bye`"}],"authorContributionMap":{"oscarlai1998":312,"-":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"# Alfred User Guide"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"By: `Oscar Lai` Latest Update: `28-Feb-2021`"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"![logo](./alfred-meme.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"- [Alfred Guide](#alfred-user-guide)"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"   * [1. Introduction](#1-introduction)"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"   * [2. Quick Start](#2-quick-start)"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"      + [2.1. Quick start using latest jar file](#21-quick-start-by-downloading-the-latest-jar-file)"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"      + [2.2. Quick start using IntelliJ](#22--quick-start-on-intellij-version-202032-latest-and-beyond)"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"   * [3. Features](#3-features)"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"      + [3.1. Todo](#31-add-a-todo-task-todo)"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"      + [3.2. Deadline](#32-add-a-deadline-task-deadline)"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"      + [3.3. Event](#33-add-an-event-task-event)"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"      + [3.4. List](#34-list-all-tasks-list)"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"      + [3.5. Done](#35-mark-a-task-as-done-done)"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"      + [3.6. Delete](#36-delete-a-task-delete)"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"      + [3.7. Find](#37-search-task-by-a-keyword-find)"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"      + [3.8. Help](#38-find-list-of-commands-help)"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"      + [3.9. Bye](#39-exit-program-bye)"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"      + [3.10 Task Storage](#310-task-storage)"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"         - [3.10.1. Loading Data](#3101-loading-data)"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"         - [3.10.2. Saving Data](#3102-saving-data)"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"   * [4. FAQ](#4-faq)"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"   * [5. Command Summary](#5-command-summary)"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"## 1. Introduction"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"Who is Gotham\u0027s true saviour? Is it the Dark Knight? Is it Robin or is it Batgirl? The true"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"answer is none other than Alfred Pennyworth. Alfred will help you keep track of your busy schedule noting your"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"todo, events and deadlines, optimized for use via a **Command Line Interface** CLI. He will mark it as done and remind you the tasks you have left. He is the silent guardian, the"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"watchful protector, a dark knight."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"## 2. Quick Start"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"Prerequisites: JDK11, the latest version of IntelliJ"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"### 2.1 Quick Start by downloading the latest jar file"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"1. Ensure you have Java `11` installed in your computer."},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"2. Download the latest `Duke.jar` from [here](https://github.com/oscarlai1998/ip/releases)."},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"3. Copy the file to a new folder you want to run `Duke` in."},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"4. For Windows User, open **Command Prompt**."},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":" "},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"   For Mac Users, open **Terminal**."},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"   Navigate to the directory containing `Duke.jar` file."},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"   i.e. `cd \u003cFILEPATH\u003e`"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"5. Run Duke.jar file by using the command `java -jar Duke.jar`."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"### 2.2  Quick start on IntelliJ version 2020.3.2 (latest) and beyond"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"1. Clone the latest version of the project to your local computer from [here](https://github.com/oscarlai1998/ip)."},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"2. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"3. Import the project by:"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"   i. Click `Open`"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"   ii. Find and select the project directory, and click `OK`"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"   iii. Accept default options"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"   "},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"4. Configure the project to use JDK11, as explained in [here](http://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"5. Locate  `src/main/java/Duke.java` file, right-click it, and `Run Duke.main()`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"**If the setup is correct, the expected output should be:**"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"Welcome to Duke v1.1 ----------- Latest Update: 28/2/21"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"Developed by: Oscar Lai"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"Good Day, I\u0027m Alfred."},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"⊂_ ヽ"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"　 ＼ ＼ ^^^^^^"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"　　 ＼ ( ͡° ͜ʖ ͡°) ...what can I do for you?"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"　　　 \u003e　   ⌒ ヽ"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"　　　/ 　 へ   ＼"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"　　 / # /　 ＼ ＼...check out my six pack tho."},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"　　(　  (ヽ　　ヽ _ つ"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"   |  　| \\"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"　  | 丿 ＼ ⌒)...Enter HELP for command list!"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"　  | |　　) /"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"   ノ )　　Lﾉ"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"  (_／"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"## 3. Features"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"\u003e**Notes about the command format:**"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"\u003e - Command inputs are not `case sensitive`"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"    \u003e"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"    \u003e  e.g. `todo sleep` is the same as `TODO sleep`"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"\u003e - Unknown parameters will result in an error"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"### 3.1. Add a Todo task: `todo`"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"This command adds a todo task to the list."},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"Format: `todo \u003ctask description\u003e`"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"Example: `todo save gotham`"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"I have added [T][ ] \"save gotham\" to the List!"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"You have 1 task in total!"},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"### 3.2. Add a Deadline task: `deadline`"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"This command adds a deadline task to the list."},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"Format: `deadline \u003ctask description\u003e /by \u003cDD-MM-YYYY\u003e`"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"Example: `deadline solve all crimes /by 25 April 2021`"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"I have added [D][ ] \"solve all crimes (By: 25 April 2021)\" to the List!"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"You have 2 tasks in total!"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"### 3.3. Add an Event task: `event`"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"This command adds an event task to the list."},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"Format: `event \u003ctask description\u003e /by \u003cDD-MM-YYYY\u003e`"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"Example: `event meeting with Commissioner Gordon /at 8 June 2021`"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"I have added [E][ ] \"meeting with Commissioner Gordon (At: 8 June 2021)\" to the List!"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"You have 3 tasks in total!"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"### 3.4. List all tasks: `list`"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"This command lists all tasks recorded in the task list."},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"Format: `list`"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":" LIST"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":"1. [T] [ ] save gotham"},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"2. [D] [ ] solve all crimes (By: 25 April 2021)"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"3. [E] [ ] meeting with Commissioner Gordon (At: 8 June 2021)"},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"### 3.5. Mark a task as done: `done`"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":"This command marks a task as completed."},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"Example: `done 2`"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"Good Job, I will mark this as done!"},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"[D] [✓] solve all crimes (By: 25 April 2021)"},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"### 3.6. Delete a task: `delete`"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":"This command deletes a task from the list."},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"Example: `delete 2`"},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":"Noted! I will delete this at once!"},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"[D] [✓] solve all crimes (By: 25 April 2021)"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":"You have 2 tasks in total!"},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":"### 3.7. Search task by a keyword: `find`"},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"This command searches the task list and shows all the tasks that contains"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":"the keyword in the task description"},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":191,"author":{"gitId":"oscarlai1998"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":192,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":193,"author":{"gitId":"oscarlai1998"},"content":"Example: `find Gordon`"},{"lineNumber":194,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":195,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":196,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":197,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":198,"author":{"gitId":"oscarlai1998"},"content":"I have found the follow items: "},{"lineNumber":199,"author":{"gitId":"oscarlai1998"},"content":"1. [E][ ] \"meeting with Commissioner Gordon (At: 8 June 2021)\""},{"lineNumber":200,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":201,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":202,"author":{"gitId":"oscarlai1998"},"content":"### 3.8. Find list of commands: `help`"},{"lineNumber":203,"author":{"gitId":"oscarlai1998"},"content":"This command shows the list of commands in the program."},{"lineNumber":204,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":205,"author":{"gitId":"oscarlai1998"},"content":"Format: `help`"},{"lineNumber":206,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":207,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":208,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":209,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":210,"author":{"gitId":"oscarlai1998"},"content":" HELP COMMANDS"},{"lineNumber":211,"author":{"gitId":"oscarlai1998"},"content":"todo: adds a todo task to the list"},{"lineNumber":212,"author":{"gitId":"oscarlai1998"},"content":" Example: todo sleep"},{"lineNumber":213,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":214,"author":{"gitId":"oscarlai1998"},"content":"deadline: adds a deadline task to the list"},{"lineNumber":215,"author":{"gitId":"oscarlai1998"},"content":" Example: deadline homework /by tomorrow"},{"lineNumber":216,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":217,"author":{"gitId":"oscarlai1998"},"content":"event: adds an event task to the list"},{"lineNumber":218,"author":{"gitId":"oscarlai1998"},"content":" Example: event birthday party /at tuesday"},{"lineNumber":219,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":220,"author":{"gitId":"oscarlai1998"},"content":"List: view list"},{"lineNumber":221,"author":{"gitId":"oscarlai1998"},"content":" Example: list"},{"lineNumber":222,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":223,"author":{"gitId":"oscarlai1998"},"content":"Help: view help commands"},{"lineNumber":224,"author":{"gitId":"oscarlai1998"},"content":" Example: Help"},{"lineNumber":225,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":226,"author":{"gitId":"oscarlai1998"},"content":"Done: mark a task as done"},{"lineNumber":227,"author":{"gitId":"oscarlai1998"},"content":" Example: Done 2"},{"lineNumber":228,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":229,"author":{"gitId":"oscarlai1998"},"content":"Delete: deletes a task from list"},{"lineNumber":230,"author":{"gitId":"oscarlai1998"},"content":" Example: delete 2"},{"lineNumber":231,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":232,"author":{"gitId":"oscarlai1998"},"content":"Find: find task that contains substring of input"},{"lineNumber":233,"author":{"gitId":"oscarlai1998"},"content":" Example: find birthday"},{"lineNumber":234,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":235,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt Format: "},{"lineNumber":236,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo save gotham"},{"lineNumber":237,"author":{"gitId":"oscarlai1998"},"content":"[ ] event meeting with Commissioner Gordon at 8 June 2021"},{"lineNumber":238,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline pay ransom money by  31 May 2021 3pm"},{"lineNumber":239,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":240,"author":{"gitId":"oscarlai1998"},"content":"Bye:  terminate program"},{"lineNumber":241,"author":{"gitId":"oscarlai1998"},"content":" Example: bye"},{"lineNumber":242,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":243,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":244,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":245,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":246,"author":{"gitId":"oscarlai1998"},"content":"### 3.9. Exit program: `bye`"},{"lineNumber":247,"author":{"gitId":"oscarlai1998"},"content":"This command exits the program."},{"lineNumber":248,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":249,"author":{"gitId":"oscarlai1998"},"content":"Format: `bye`"},{"lineNumber":250,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":251,"author":{"gitId":"oscarlai1998"},"content":"Expected Output:"},{"lineNumber":252,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":253,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":254,"author":{"gitId":"oscarlai1998"},"content":"Pleasure serving you..."},{"lineNumber":255,"author":{"gitId":"oscarlai1998"},"content":" __      __"},{"lineNumber":256,"author":{"gitId":"oscarlai1998"},"content":"( _\\    /_ )"},{"lineNumber":257,"author":{"gitId":"oscarlai1998"},"content":" \\ _\\  /_ /"},{"lineNumber":258,"author":{"gitId":"oscarlai1998"},"content":"  \\ _\\/_ /_ _"},{"lineNumber":259,"author":{"gitId":"oscarlai1998"},"content":"  |_____/_/ /|"},{"lineNumber":260,"author":{"gitId":"oscarlai1998"},"content":"  (  (_)__)J-)"},{"lineNumber":261,"author":{"gitId":"oscarlai1998"},"content":"  (  /`.,   /"},{"lineNumber":262,"author":{"gitId":"oscarlai1998"},"content":"   \\/  ;   /"},{"lineNumber":263,"author":{"gitId":"oscarlai1998"},"content":"    | \u003d\u003d\u003d |See you again!"},{"lineNumber":264,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":265,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":266,"author":{"gitId":"oscarlai1998"},"content":"### 3.10. Task Storage"},{"lineNumber":267,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":268,"author":{"gitId":"oscarlai1998"},"content":"#### 3.10.1. Loading Data"},{"lineNumber":269,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":270,"author":{"gitId":"oscarlai1998"},"content":"Alfred will automatically import any existing data from **Duke.txt** file."},{"lineNumber":271,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":272,"author":{"gitId":"oscarlai1998"},"content":"`Duke.txt Format`"},{"lineNumber":273,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":274,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":275,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo save gotham"},{"lineNumber":276,"author":{"gitId":"oscarlai1998"},"content":"[ ] event meeting with Commissioner Gordon at 8 June 2021"},{"lineNumber":277,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline pay ransom money by  31 May 2021 3pm"},{"lineNumber":278,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":279,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":280,"author":{"gitId":"oscarlai1998"},"content":"Expected output after loading program:"},{"lineNumber":281,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":282,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt successfully synced!"},{"lineNumber":283,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":284,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":285,"author":{"gitId":"oscarlai1998"},"content":"#### 3.10.2. Saving Data"},{"lineNumber":286,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":287,"author":{"gitId":"oscarlai1998"},"content":"Alfred will automatically **save Duke.txt** in the hard disk after user exits the program via `bye`"},{"lineNumber":288,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":289,"author":{"gitId":"oscarlai1998"},"content":"Expected output after exiting program:"},{"lineNumber":290,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":291,"author":{"gitId":"oscarlai1998"},"content":"Duke.txt file Updated!"},{"lineNumber":292,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":293,"author":{"gitId":"oscarlai1998"},"content":"Developed by: Oscar Lai"},{"lineNumber":294,"author":{"gitId":"oscarlai1998"},"content":"Version 1.1"},{"lineNumber":295,"author":{"gitId":"oscarlai1998"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":296,"author":{"gitId":"oscarlai1998"},"content":"```"},{"lineNumber":297,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":298,"author":{"gitId":"oscarlai1998"},"content":"**Note: If you exit the program without `bye`, no new data is saved.**"},{"lineNumber":299,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":300,"author":{"gitId":"oscarlai1998"},"content":"## 4. FAQ"},{"lineNumber":301,"author":{"gitId":"oscarlai1998"},"content":"**Q1: What if I do not have a Duke.txt file?**"},{"lineNumber":302,"author":{"gitId":"oscarlai1998"},"content":"\u003e Alfred will automatically create a Duke.txt if you do not have one."},{"lineNumber":303,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":304,"author":{"gitId":"oscarlai1998"},"content":"**Q2: Where is my Duke.txt file?**"},{"lineNumber":305,"author":{"gitId":"oscarlai1998"},"content":"\u003e For Window Users: Type **Duke.txt** in the search panel"},{"lineNumber":306,"author":{"gitId":"oscarlai1998"},"content":"\u003e"},{"lineNumber":307,"author":{"gitId":"oscarlai1998"},"content":"\u003e For Mac Users: Use **Spotlight** or **Finder**"},{"lineNumber":308,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":309,"author":{"gitId":"oscarlai1998"},"content":"## 5. Command Summary"},{"lineNumber":310,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":311,"author":{"gitId":"oscarlai1998"},"content":"**Command** | **Format** | **Example**"},{"lineNumber":312,"author":{"gitId":"oscarlai1998"},"content":"------------ | -------------------- | ------------"},{"lineNumber":313,"author":{"gitId":"oscarlai1998"},"content":"todo | `todo \u003ctask description\u003e` | `todo save gotham`"},{"lineNumber":314,"author":{"gitId":"oscarlai1998"},"content":"deadline | `deadline \u003ctask description\u003e /by \u003cdd-mm-yyyy\u003e` | `deadline pay ransom money /by 21-March-2021`"},{"lineNumber":315,"author":{"gitId":"oscarlai1998"},"content":"event | `event \u003ctask description\u003e /at \u003cdd-mm-yyyy\u003e` | `event gotham ball /at 31-May-2021`"},{"lineNumber":316,"author":{"gitId":"oscarlai1998"},"content":"list | `list` | `list`"},{"lineNumber":317,"author":{"gitId":"oscarlai1998"},"content":"done | `done \u003ctask number\u003e` | `done 1`"},{"lineNumber":318,"author":{"gitId":"oscarlai1998"},"content":"delete | `delete \u003ctask number\u003e` | `delete 2`"},{"lineNumber":319,"author":{"gitId":"oscarlai1998"},"content":"find | `find \u003ckeyword\u003e` | `find gotham`"},{"lineNumber":320,"author":{"gitId":"oscarlai1998"},"content":"help | `help` | `help`"},{"lineNumber":321,"author":{"gitId":"oscarlai1998"},"content":"bye | `bye` | `bye`"}],"authorContributionMap":{"oscarlai1998":312,"-":9}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"    public static final String FILEPATH \u003d \"Duke.txt\";"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    public static Storage storage;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public static Ui ui;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    public static Parser parser;"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    public static TaskList list;"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"     * Constructor of Duke class"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"     * Imports data from Duke.txt and add to List"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"     * If no Duke.txt, empty list is loaded"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    public Duke() {"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"        storage \u003d new Storage(FILEPATH);"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        list \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"        parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"            Storage.loadFile(list.list);"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"IO Error\");"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"     * Runs the program."},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"     * Gets user input and parses command until \"bye\""},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"        String command;"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printGreeting();"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"            File file \u003d new File(\"Duke.txt\");"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"            if(file.exists()) {"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Duke.txt successfully synced!\");"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"                Ui.printBorder();"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"            do {"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"                command \u003d ui.getCommand();"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"                Parser.parseCommand(command,list.list);"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            } while (!command.equalsIgnoreCase(\"bye\"));"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printExit();"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            Storage.saveFile(list.getList());"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"FILE_NOT_FOUND\");"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"    /** Starts the program */"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"    public static void main(String[] args) {"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"        new Duke().run();"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":62}},{"path":"src/main/java/duke/commands/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.ListEmptyException;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.DoneCheckedException;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"public class Commands {"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"     * Add a todo task to the list"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"     * @param input Task description"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    public static void addTodo(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"todo\")) {"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(5);"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"            if (command.isBlank()) {"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"            Todo t \u003d new Todo(command);"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        } catch(WrongFormatException e) {"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"     * Add a deadline task to the list"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - add Task description"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"    public static void addDeadline(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"deadline\")) {"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(9);"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /by \")) {"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /by \");"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"            Deadline t \u003d new Deadline(description,date);"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"     * Add an event task to the list"},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"     * @param input Task description"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"    public static void addEvent(String input,ArrayList\u003cTask\u003e list)  {"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"event\")) {"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(6);"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /at \")) {"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /at \");"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"            Event t \u003d new Event(description,date);"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"     * Check if Done command is valid"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"     * Checks if task exists and presence of a numerical value after done command"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"     * @param input Command executed"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"    public static void doneTask(String input,ArrayList\u003cTask\u003e list) {"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"done\")) {"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"            if (!input.substring(5).matches(\"[0-9]+\")) {"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d Integer.parseInt(input.substring(5));"},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"            if (index \u003e list.size()) {"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"            checkTask(index - 1,list);"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INDEX_EXCEEDS_LIST\");"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"WRONG_DONE_FORMAT\");"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"     * Marks task as done via a tick"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"     * Checks if task has already been marked done"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"     * @param index Command executed"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"    private static void checkTask(int index,ArrayList\u003cTask\u003e list){"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"            if (list.get(index).checkIsDone()) {"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"                throw new DoneCheckedException();"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Good Job, I will mark this as done!\");"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"            list.get(index).markAsDone();"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"[\" + list.get(index).getType() + \"] [\""},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(index).getStatusIcon() + \"] \" + list.get(index).getName()"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(index).getDate());"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"        } catch (DoneCheckedException e) {"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"DONE_CHECKED_ERROR\");"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"     * Delete task from the list"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"     * Checks if task exists and presence of a numerical value after delete command"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"     * @param input Command executed"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":"    public static void deleteTask(String input,ArrayList\u003cTask\u003e list){"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"delete\")) {"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(7).matches(\"0\")) {"},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":"            if (!input.substring(7).matches(\"[0-9]+\")) {"},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d Integer.parseInt(input.substring(7)) - 1;"},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"            if (index + 1 \u003e list.size()) {"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Noted! I will delete this at once!\");"},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"[\" + list.get(index).getType() + \"] [\""},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(index).getStatusIcon() + \"] \" + list.get(index).getName()"},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(index).getDate());"},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"            list.remove(index);"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printNoOfTask(list);"},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"WRONG_DELETE_FORMAT\");"},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"DELETE_EMPTY_LIST\");"},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":"     * List all task items in the list"},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":"    public static void printList(ArrayList\u003cTask\u003e list){"},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":"            if (!(list.size()\u003e0)) {"},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":"                throw new ListEmptyException();"},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\" LIST\");"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(i + 1 +  \". [\" + list.get(i).getType() +  \"] \" + \"[\""},{"lineNumber":191,"author":{"gitId":"oscarlai1998"},"content":"                        + list.get(i).getStatusIcon() + \"] \" + list.get(i).getName()"},{"lineNumber":192,"author":{"gitId":"oscarlai1998"},"content":"                        + list.get(i).getDate());"},{"lineNumber":193,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":195,"author":{"gitId":"oscarlai1998"},"content":"        } catch (ListEmptyException e) {"},{"lineNumber":196,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"EMPTY_LIST\");"},{"lineNumber":197,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":200,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"oscarlai1998"},"content":"     * Searches the list for all tasks that contains the substring of the input given by user"},{"lineNumber":202,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"oscarlai1998"},"content":"     * @param input user input"},{"lineNumber":204,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":205,"author":{"gitId":"oscarlai1998"},"content":"     * @throws WrongFormatException if no substring found or is whitespace after find command"},{"lineNumber":206,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"oscarlai1998"},"content":"    public static void findTask(String input, ArrayList\u003cTask\u003e list) throws WrongFormatException {"},{"lineNumber":208,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":209,"author":{"gitId":"oscarlai1998"},"content":"            String searchItem \u003d input.substring(5);"},{"lineNumber":210,"author":{"gitId":"oscarlai1998"},"content":"            if(searchItem.length() \u003d\u003d 0 ) {"},{"lineNumber":211,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":212,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printFindTask(searchItem,list);"},{"lineNumber":214,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":215,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":216,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":218,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":219}},{"path":"src/main/java/duke/error/DoneCheckedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class DoneCheckedException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/error/ListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class ListEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/error/ListFullException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class ListFullException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/error/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class WrongFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.ListFullException;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.commands.Commands;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    private TaskList list;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"     * Parses the command user wants to execute and executes said command"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"     * @param input input from Duke.txt"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    public static void parseCommand(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"            if (list.size()\u003e\u003d100) {"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"                throw new ListFullException();"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"                return;"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.equalsIgnoreCase(\"help\")) {"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(Ui.HELP_MESSAGE);"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"done\")) {"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"                Commands.doneTask(input,list);"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"                Commands.printList(list);"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"todo\")) {"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addTodo(input,list);"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"deadline\")) {"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addDeadline(input,list);"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"event\")) {"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addEvent(input,list);"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"delete\")){"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"                Commands.deleteTask(input,list);"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"find\")){"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"                Commands.findTask(input,list);"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"                Ui.checkError(\"INVALID_COMMAND\");"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"        } catch (ListFullException | WrongFormatException e) {"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"LIST_FULL\");"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"}"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":""}],"authorContributionMap":{"oscarlai1998":53}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"import static duke.ui.Ui.checkError;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    private static String filePath;"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public Storage(String filePath) {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        Storage.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"     * Loads task from saved Duke.txt file. If file does not exist, create new Duke.txt file"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"     * @throws IOException if there is an IO Error"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"    public static void loadFile(ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"        if (!file.exists()) {"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"            file.createNewFile();"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        Scanner line \u003d new Scanner(file);"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"        while (line.hasNext()) {"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"            String input \u003d line.nextLine();"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"            importFile(input,list);"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"     * Serialise commands into respective methods to import existing task from Duke.txt"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"     * @param input input from Duke.txt"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"    private static void importFile(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"        if (input.toLowerCase().substring(4).startsWith(\"todo\")) {"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            importTodo(input,list);"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"        } else if (input.toLowerCase().substring(4).startsWith(\"deadline\")) {"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            importDeadline(input,list);"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"        } else if (input.toLowerCase().substring(4).startsWith(\"event\")) {"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            importEvent(input,list);"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"     * Imports todo from Duke.txt to Program"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"     * @param input input from Duke.txt"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"    private static void importTodo(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(4).equals(\"todo\")) {"},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(9);"},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"            if (command.isBlank()) {"},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"            Todo t \u003d new Todo(command);"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"        } catch(WrongFormatException e) {"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"     * Imports Deadline from Duke.txt to Program"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"     * @param input input from Duke.txt"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"    private static void importDeadline(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(4).equals(\"deadline\")) {"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(13);"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" by \")) {"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" by \");"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"            Deadline t \u003d new Deadline(description,date);"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"     * Imports Event from Duke.txt to Program"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"     * @param input input from Duke.txt"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"    private static void importEvent(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"event\")) {"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(10);"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" at \")) {"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" at \");"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"            Event t \u003d new Event(description, date);"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"     * Saves all tasks into Duke.txt after user inputs \"bye\""},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"     * @throws IOException IO Exception Error"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"    public static void saveFile(ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"        FileWriter fw \u003d new FileWriter(\"Duke.txt\");"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"        for(int i \u003d 0; i\u003c list.size(); i++) {"},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"            fw.write(list.get(i).outputData());"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"            fw.write(\"\\n\");"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"        fw.close();"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":148}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":" * Deadline class - object corresponds to a Deadline task represented by name and time"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"    protected String deadlineTime;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"        this.deadlineTime \u003d by;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        return \"D\";"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate() {"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        return \" (By: \" + deadlineTime + \")\";"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"deadline \" + getName() + \" by \" + deadlineTime;"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":29}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":" * Event class - object corresponds to a Event task represented by name and time"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"    protected String eventTime;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public Event(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"        this.eventTime \u003d by;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        return \"E\";"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate() {"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        return \" (At: \" + eventTime + \")\";"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"event \" + getName() + \" at \" + eventTime;"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":" * Task class - object corresponds to a task represented by name and check mark."},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"    private final String name;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public Task(String name) {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        this.name \u003d name;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    public void markAsDone(){"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"        isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"    public boolean checkIsDone(){"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"        return isDone;"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    public String getName() {"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        return name;"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate(){"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"        //return tick as done and empty as not done"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"    abstract public String outputData();"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":42}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":" * Todo class - object corresponds to a todo task represented by name and check mark."},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"    public Todo(String description){"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"        return \"T\";"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate(){"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"todo \" + getName() ;"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"}"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":""}],"authorContributionMap":{"oscarlai1998":25}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":" * ArrayList List represents a list of Tasks. Which is represented by type of task"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":" * e.g. Todo, deadline and event."},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":" */"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"    public ArrayList\u003cTask\u003e list;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"        return list;"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    public void setList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        this.list \u003d list;"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":25}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public String getCommand() {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"        return in.nextLine();"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    public static final String BORDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public static final String HELP_MESSAGE \u003d \" HELP COMMANDS\\n\""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        + \"todo: adds a todo task to the list\\n\""},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: todo sleep\\n\\n\""},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        + \"deadline: adds a deadline task to the list\\n\""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: deadline homework /by tomorrow\\n\\n\""},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"        + \"event: adds an event task to the list\\n\""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: event birthday party /at tuesday\\n\\n\""},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"        + \"List: view list\\n\""},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: list\\n\\n\""},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        + \"Help: view help commands\\n\""},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: Help\\n\\n\""},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        + \"Done: mark a task as done\\n\""},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: Done 2\\n\\n\""},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        + \"Delete: deletes a task from list\\n\""},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: delete 2\\n\\n\""},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"        + \"Find: find task that contains substring of input\\n\""},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: find birthday\\n\\n\""},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        + \"Duke.txt Format: \\n\""},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"        + \"[✓] todo gym\\n\""},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"        + \"[✓] deadline project meeting by 21st feb\\n\""},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"        + \"[ ] event football at friday 2pm\\n\\n\""},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"        + \"Bye:  terminate program\\n\""},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: bye\\n\\n\""},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"        + BORDER;"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"    public static void printGreeting() {"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"        String alfred \u003d \"⊂_ ヽ\\n\""},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"            + \"　 ＼ ＼ ^^^^^^\\n\""},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　 ＼ ( ͡° ͜ʖ ͡°) ...what can I do for you?\\n\""},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　　 \u003e　   ⌒ ヽ\\n\""},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　　/ 　 へ   ＼\\n\""},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　 / # /　 ＼ ＼...check out my six pack tho.\\n\""},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　(　  (ヽ　　ヽ _ つ\\n\""},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"            + \"   |  　| \\\\\\n\""},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            + \"　  | 丿 ＼ ⌒)...Enter HELP for command list!\\n\""},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"            + \"　  | |　　) /\\n\""},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            + \"   ノ )　　Lﾉ\\n\""},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (_／\";"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Welcome to Duke v1.1 ----------- Latest Update: 28/2/21\");"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Developed by: Oscar Lai\");"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Good Day, I\u0027m Alfred.\\n\" + alfred);"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"    /** Prints exit message after user inputs \"bye\". */"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"    public static void printExit() {"},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"        String wave \u003d \" __      __\\n\""},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"            + \"( _\\\\    /_ )\\n\""},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"            + \" \\\\ _\\\\  /_ /\\n\""},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"            + \"  \\\\ _\\\\/_ /_ _\\n\""},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"            + \"  |_____/_/ /|\\n\""},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (  (_)__)J-)\\n\""},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (  /`.,   /\\n\""},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"            + \"   \\\\/  ;   /\\n\""},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"            + \"    | \u003d\u003d\u003d |See you again!\\n\";"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Pleasure serving you...\\n\" + wave);"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Duke.txt file Updated!\");"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Developed by: Oscar Lai\\n\""},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"                + \"Version 1.1\");"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"    public static void printBorder() {"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(BORDER);"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"     * Print the number of task in the list."},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"    public static void printNoOfTask(ArrayList\u003cTask\u003e list) {"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"        System.out.print(\"You have \" + list.size() + \" task\");"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"        if (list.size() \u003e 1) {"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"            System.out.print(\"s\");"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"        System.out.print(\" in total!\\n\");"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"        Ui.printBorder();"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"     * Prints the task that has been added to list"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"     * @param index Index of task in List"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"    public static void printAddedTask(int index, ArrayList\u003cTask\u003e list) {"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"        Task t \u003d list.get(index);"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"I have added [\" + t.getType() + \"][\""},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"                + t.getStatusIcon() + \"] \\\"\""},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"                + t.getName() + t.getDate() + \"\\\"\" + \" to the List!\");"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"        Ui.printNoOfTask(list);"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"     * Prints all task in list that contains substring in its input"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"     * @param searchItem Input that wants to be searched"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"     * @param list The ArrayList to store all existing tasks from Duke.txt"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"    public static void printFindTask(String searchItem, ArrayList\u003cTask\u003e list) {"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"I have found the follow items: \");"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"        int foundCounter \u003d 0;"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"        for(int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"            if(list.get(i).getName().toLowerCase().contains(searchItem)) {"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"                Task t \u003d list.get(i);"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(foundCounter+1 + \". \" + \"[\" + t.getType() + \"][\""},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"                        + t.getStatusIcon() + \"] \\\"\""},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"                        + t.getName() + t.getDate() + \"\\\"\" );"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"                foundCounter +\u003d 1;"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"        if(foundCounter \u003d\u003d 0 )  {"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"NONEXISTENT_TASK_ERROR\");"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"     * Prints error message according to error type"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"     * @param ERROR_MESSAGE type of Error"},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"    public static void checkError(String ERROR_MESSAGE) {"},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"        switch (ERROR_MESSAGE) {"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"        case \"WRONG_DONE_FORMAT\":"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"            //Done command is not followed by an integer"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Error! You must enter an integer after\""},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"                    + \" \\\"done\\\"!\");"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":"        case \"INDEX_EXCEEDS_LIST\":"},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"            // Trying to mark a task that does note list"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Error! You do not have that \""},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":"                    + \"many tasks in your list!\");"},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"        case \"EMPTY_LIST\":"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Your list is empty! Add something!\");"},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":"        case \"DONE_CHECKED_ERROR\":"},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"            // Task has already been marked done"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"You have already marked it as Done!\");"},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":"        case \"INVALID_FORMAT\":"},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"¯\\\\_(ツ)_/¯ That is an invalid format! \""},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"                    + \"Enter \\\"HELP\\\" for commands!\");"},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":"        case \"LIST_FULL\":"},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"List is full!\");"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":"        case \"WRONG_DELETE_FORMAT\":"},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":"            // Delete is not followed by a integer"},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Error! You must enter a valid integer after\""},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":"                    + \" \\\"delete\\\"!\");"},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"        case \"DELETE_EMPTY_LIST\":"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Error! You cannot delete what does not exist!\");"},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"        case \"INVALID_COMMAND\":"},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"¯\\\\_(ツ)_/¯ That is an invalid command! \""},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":"                    + \"Enter \\\"HELP\\\" for commands!\");"},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":"        case \"NONEXISTENT_TASK_ERROR\":"},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Error! No such task found!\");"},{"lineNumber":191,"author":{"gitId":"oscarlai1998"},"content":"            break;"},{"lineNumber":192,"author":{"gitId":"oscarlai1998"},"content":"        case \"IO Error\":"},{"lineNumber":193,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"IO Error: Please try again!\");"},{"lineNumber":194,"author":{"gitId":"oscarlai1998"},"content":"            printBorder();"},{"lineNumber":195,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":198,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":198}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"help"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"todo eat"},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"deadline homework /by tomorrow"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"list"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"event party /at friday 2pm"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"done 5"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"delete 1"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"find party"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"list"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"bye"}],"authorContributionMap":{"oscarlai1998":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"oscarlai1998":1,"-":37}}]
