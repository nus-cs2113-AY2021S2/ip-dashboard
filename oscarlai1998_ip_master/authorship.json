[{"path":"Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"[ ] todo level-8, level-9"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"[ ] event meeting /at tomorrow 9am"},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline reflections /by march 2nd"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"[ ] deadline homework /by saturday 3pm"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"[ ] event dnd meeting /at 24-feb-2021 2pm"}],"authorContributionMap":{"oscarlai1998":5}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"# Oscar Lai Duke Project - Alfred"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"Latest Update: 14 Feb 2021"}],"authorContributionMap":{"oscarlai1998":2,"-":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"    public static final String FILEPATH \u003d \"Duke.txt\";"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    public static Storage storage;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public static Ui ui;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    public static Parser parser;"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    public static TaskList list;"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"     * Run Duke program"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"     * Program loads Duke.txt file"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"     * Program runs until \"bye\" command"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"     * Duke.txt is saved again"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    public static void main(String[] args) {"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        storage \u003d new Storage();"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        list \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"        ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        parser \u003d new Parser();"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printGreeting();"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"            Storage.loadFile(FILEPATH,list.list);"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"            while(true) {"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"                String command \u003d ui.getCommand();"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"                if(command.equals(\"bye\")) {"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"                    break;"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"                Parser.parseCommand(command,list.list);"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printExit();"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"            Storage.saveFile(list.getList());"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"FILE_NOT_FOUND\");"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":45}},{"path":"src/main/java/duke/commands/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.ListEmptyException;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.DoneCheckedException;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"public class Commands {"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"     * Add new task to Timetable"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - name of task"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public static void addTodo(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"todo\")) {"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(5);"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"            if (command.isBlank()) {"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"            Todo t \u003d new Todo(command);"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"        } catch(WrongFormatException e) {"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"     * Add deadline to list"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - add Deadline"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"    public static void addDeadline(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"deadline\")) {"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(9);"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /by \")) {"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /by \");"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            Deadline t \u003d new Deadline(description,date);"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"     * Add event to list"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - add event"},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"    public static void addEvent(String input,ArrayList\u003cTask\u003e list)  {"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"event\")) {"},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(6);"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /at \")) {"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /at \");"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"            Event t \u003d new Event(description,date);"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d list.indexOf(t);"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printAddedTask(index,list);"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"     * Check if done command is valid"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - index of task"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"    public static void doneTask(String input,ArrayList\u003cTask\u003e list) {"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"done\")) {"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"            if (!input.substring(5).matches(\"[0-9]+\")) {"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d Integer.parseInt(input.substring(5));"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"            if (index \u003e list.size()) {"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"            checkTask(index - 1,list);"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INDEX_EXCEEDS_LIST\");"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"WRONG_DONE_FORMAT\");"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"     * Delete task from the list"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - Command"},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"    public static void deleteTask(String input,ArrayList\u003cTask\u003e list){"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"delete\")) {"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(7).matches(\"0\")) {"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"            if (!input.substring(7).matches(\"[0-9]+\")) {"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":"            int index \u003d Integer.parseInt(input.substring(7)) - 1;"},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"            if (index + 1 \u003e list.size()) {"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Noted! I will delete this at once!\");"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"[\" + list.get(index).getType() + \"] [\""},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"                + list.get(index).getStatusIcon() + \"] \" + list.get(index).getName()"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"                + list.get(index).getDate());"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"            list.remove(index);"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printNoOfTask(list);"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"WRONG_DELETE_FORMAT\");"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"DELETE_EMPTY_LIST\");"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"     * Check respective task as done"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"     * @param index - index of list"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"    private static void checkTask(int index,ArrayList\u003cTask\u003e list){"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":"            if (list.get(index).checkIsDone()) {"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":"                throw new DoneCheckedException();"},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Good Job, I will mark this as done!\");"},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":"            list.get(index).markAsDone();"},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"[\" + list.get(index).getType() + \"] [\""},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":"                + list.get(index).getStatusIcon() + \"] \" + list.get(index).getName()"},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"                + list.get(index).getDate());"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":"        } catch (DoneCheckedException e) {"},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"DONE_CHECKED_ERROR\");"},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":"     * Print List"},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":"     * @param list ArrayList of task"},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"    public static void printList(ArrayList\u003cTask\u003e list){"},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"            if (!(list.size()\u003e0)) {"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":"                throw new ListEmptyException();"},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\" LIST\");"},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(i + 1 +  \". [\" + list.get(i).getType() +  \"] \" + \"[\""},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(i).getStatusIcon() + \"] \" + list.get(i).getName()"},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"                    + list.get(i).getDate());"},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":"        } catch (ListEmptyException e) {"},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"EMPTY_LIST\");"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"    public static void findTask(String input, ArrayList\u003cTask\u003e list) throws WrongFormatException {"},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":"            String searchItem \u003d input.substring(5);"},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":"            if(searchItem.length() \u003d\u003d 0 ) {"},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printFindTask(searchItem,list);"},{"lineNumber":191,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":192,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"INVALID_FORMAT\");"},{"lineNumber":193,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":195,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":196}},{"path":"src/main/java/duke/error/DoneCheckedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class DoneCheckedException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/error/ListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class ListEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/error/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class WrongFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":4}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.commands.Commands;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    private TaskList list;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"     * Loop through all possible commands"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"     * Possible Commands:"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"     * Todo, event, Deadline, help, list, done, bye"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"    public static void parseCommand(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"            if (list.size()\u003e\u003d100) {"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equalsIgnoreCase(\"help\")) {"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(Ui.HELP_MESSAGE);"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"done\")) {"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"                Commands.doneTask(input,list);"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"                Commands.printList(list);"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"todo\")) {"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addTodo(input,list);"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"deadline\")) {"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addDeadline(input,list);"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"event\")) {"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"                Commands.addEvent(input,list);"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"delete\")){"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"                Commands.deleteTask(input,list);"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().startsWith(\"find\")){"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"                Commands.findTask(input,list);"},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"            } else {"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"                Ui.checkError(\"INVALID_COMMAND\");"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"        } catch (IndexOutOfBoundsException | WrongFormatException e) {"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            Ui.checkError(\"LIST_FULL\");"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"}"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":""}],"authorContributionMap":{"oscarlai1998":50}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import duke.error.WrongFormatException;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"import static duke.ui.Ui.checkError;"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"     * Method to load Duke.txt"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"     * Throws Exception if Duke.txt not Found"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"     * @throws FileNotFoundException - File Not Found Exception"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"    public static void loadFile(String filePath, ArrayList\u003cTask\u003e list) throws FileNotFoundException {"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"        if (!file.exists()) {"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"            throw new FileNotFoundException();"},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        Scanner line \u003d new Scanner(file);"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"        while (line.hasNext()) {"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"            String input \u003d line.nextLine();"},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"            if (input.toLowerCase().substring(4).startsWith(\"todo\")) {"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"                importTodo(input,list);"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().substring(4).startsWith(\"deadline\")) {"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"                importDeadline(input,list);"},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"            } else if (input.toLowerCase().substring(4).startsWith(\"event\")) {"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"                importEvent(input,list);"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"     * Imports todo from Duke.txt to Program"},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - Command"},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"    public static void importTodo(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(4).equals(\"todo\")) {"},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(9);"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"            if (command.isBlank()) {"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"            Todo t \u003d new Todo(command);"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Imported \\\"Todo: \" + t.getName()"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"                + \"\\\" from Duke.txt!\");"},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"        } catch(WrongFormatException e) {"},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"     * Imports Deadline from Duke.txt to Program"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - Command"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"    public static void importDeadline(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"        try{"},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"            if (input.substring(4).equals(\"deadline\")) {"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(13);"},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /by \")) {"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /by \");"},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"            Deadline t \u003d new Deadline(description,date);"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Imported \\\"Deadline: \" + t.getName()"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"                + \"\\\" from Duke.txt!\");"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"     * Imports Event from Duke.txt to Program"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"     * @param input - Command"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"    public static void importEvent(String input, ArrayList\u003cTask\u003e list) {"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"            if (input.equals(\"event\")) {"},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"            String command \u003d input.substring(10);"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":"            if (!command.contains(\" /at \")) {"},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"                throw new WrongFormatException();"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"            String[] parts \u003d command.split(\" /at \");"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"            String description \u003d parts[0];"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"            String date \u003d parts[1];"},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"            Event t \u003d new Event(description, date);"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"            list.add(t);"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"            if (input.charAt(1) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"                t.markAsDone();"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"            System.out.println(\"Imported \\\"Event: \" + t.getName()"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"                + \"\\\" from Duke.txt!\");"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"            Ui.printBorder();"},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"INVALID_FORMAT\");"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"     * Method to update Duke.txt"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"     * Throws Exception if Duke.txt not found"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"     * @throws IOException - IO Exception Error"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"     * @param list - ArrayList"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"    public static void saveFile(ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"        File file \u003d new File(\"Duke.txt\");"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"        if (!file.exists()){"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"            if(!file.createNewFile()) {"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"                throw new IOException();"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"        FileWriter fw \u003d new FileWriter(\"Duke.txt\");"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"        for(int i \u003d 0; i\u003c list.size(); i++) {"},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"            fw.write(list.get(i).outputData());"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"            fw.write(\"\\n\");"},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"        fw.close();"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":146}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"    protected String deadlineTime;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"        this.deadlineTime \u003d by;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"        return \"D\";"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate() {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        return \" (by: \" + deadlineTime + \")\";"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"deadline \" + getName() + \" /by \" + deadlineTime;"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":26}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"    protected String eventTime;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"    public Event(String description, String by) {"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"        this.eventTime \u003d by;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"        return \"E\";"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate() {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        return \" (at: \" + eventTime + \")\";"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"event \" + getName() + \" /at \" + eventTime;"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":26}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"    private final String name;"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"    public Task(String name) {"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"        this.name \u003d name;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    public void markAsDone(){"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"        isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public boolean checkIsDone(){"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        return isDone;"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    public String getName() {"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"        return name;"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate(){"},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        return (isDone ? \"\\u2713\" : \" \"); //return tick as done and empty as not done"},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"    abstract public String outputData();"},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":38}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"    public Todo(String description){"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"    public String getType(){"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"        return \"T\";"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    public String getDate(){"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"        return \"\";"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public String outputData() {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"todo \" + getName() ;"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"}"},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":""}],"authorContributionMap":{"oscarlai1998":22}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"    public ArrayList\u003cTask\u003e list;"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"        return list;"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"    public void setList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        this.list \u003d list;"},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":22}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"    public String getCommand() {"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"        return in.nextLine();"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":15,"author":{"gitId":"oscarlai1998"},"content":"    public static final String BORDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":16,"author":{"gitId":"oscarlai1998"},"content":"    public static final String HELP_MESSAGE \u003d \" HELP COMMANDS\\n\""},{"lineNumber":17,"author":{"gitId":"oscarlai1998"},"content":"        + \"todo: adds to list\\n\""},{"lineNumber":18,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: todo sleep\\n\\n\""},{"lineNumber":19,"author":{"gitId":"oscarlai1998"},"content":"        + \"deadline: adds to list\\n\""},{"lineNumber":20,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: deadline homework /by tomorrow\\n\\n\""},{"lineNumber":21,"author":{"gitId":"oscarlai1998"},"content":"        + \"event: adds to list\\n\""},{"lineNumber":22,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: event block event /at tuesday\\n\\n\""},{"lineNumber":23,"author":{"gitId":"oscarlai1998"},"content":"        + \"List: view list\\n\""},{"lineNumber":24,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: list\\n\\n\""},{"lineNumber":25,"author":{"gitId":"oscarlai1998"},"content":"        + \"Help: view help commands\\n\""},{"lineNumber":26,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: Help\\n\\n\""},{"lineNumber":27,"author":{"gitId":"oscarlai1998"},"content":"        + \"Done: check task as done\\n\""},{"lineNumber":28,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: Done 2\\n\\n\""},{"lineNumber":29,"author":{"gitId":"oscarlai1998"},"content":"        + \"Delete: deletes task from list\\n\""},{"lineNumber":30,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: delete 2\\n\\n\""},{"lineNumber":31,"author":{"gitId":"oscarlai1998"},"content":"        + \"Duke.txt Format: \\n\""},{"lineNumber":32,"author":{"gitId":"oscarlai1998"},"content":"        + \"[✓] todo gym\\n\""},{"lineNumber":33,"author":{"gitId":"oscarlai1998"},"content":"        + \"[✓] deadline project meeting /by 21st feb\\n\""},{"lineNumber":34,"author":{"gitId":"oscarlai1998"},"content":"        + \"[ ] event football /at friday 2pm\\n\\n\""},{"lineNumber":35,"author":{"gitId":"oscarlai1998"},"content":"        + \"Bye:  terminate program\\n\""},{"lineNumber":36,"author":{"gitId":"oscarlai1998"},"content":"        + \" Example: bye\\n\\n\""},{"lineNumber":37,"author":{"gitId":"oscarlai1998"},"content":"        + BORDER;"},{"lineNumber":38,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":39,"author":{"gitId":"oscarlai1998"},"content":"    public static void printGreeting() {"},{"lineNumber":40,"author":{"gitId":"oscarlai1998"},"content":"        String alfred \u003d \"⊂_ ヽ\\n\""},{"lineNumber":41,"author":{"gitId":"oscarlai1998"},"content":"            + \"　 ＼ ＼ ^^^^^^\\n\""},{"lineNumber":42,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　 ＼ ( ͡° ͜ʖ ͡°) ...what can I do for you?\\n\""},{"lineNumber":43,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　　 \u003e　   ⌒ ヽ\\n\""},{"lineNumber":44,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　　/ 　 へ   ＼\\n\""},{"lineNumber":45,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　 / # /　 ＼ ＼...check out my six pack tho.\\n\""},{"lineNumber":46,"author":{"gitId":"oscarlai1998"},"content":"            + \"　　(　  (ヽ　　ヽ _ つ\\n\""},{"lineNumber":47,"author":{"gitId":"oscarlai1998"},"content":"            + \"   |  　| \\\\\\n\""},{"lineNumber":48,"author":{"gitId":"oscarlai1998"},"content":"            + \"　  | 丿 ＼ ⌒)...Enter HELP for command list!\\n\""},{"lineNumber":49,"author":{"gitId":"oscarlai1998"},"content":"            + \"　  | |　　) /\\n\""},{"lineNumber":50,"author":{"gitId":"oscarlai1998"},"content":"            + \"   ノ )　　Lﾉ\\n\""},{"lineNumber":51,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (_／\";"},{"lineNumber":52,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":53,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Welcome to Duke v1.0 ----------- Latest Update: 23/2/21\");"},{"lineNumber":54,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Developed by: Oscar Lai\");"},{"lineNumber":55,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":56,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Good Day, I\u0027m Alfred.\\n\" + alfred);"},{"lineNumber":57,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":58,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":60,"author":{"gitId":"oscarlai1998"},"content":"    public static void printExit() {"},{"lineNumber":61,"author":{"gitId":"oscarlai1998"},"content":"        String wave \u003d \" __      __\\n\""},{"lineNumber":62,"author":{"gitId":"oscarlai1998"},"content":"            + \"( _\\\\    /_ )\\n\""},{"lineNumber":63,"author":{"gitId":"oscarlai1998"},"content":"            + \" \\\\ _\\\\  /_ /\\n\""},{"lineNumber":64,"author":{"gitId":"oscarlai1998"},"content":"            + \"  \\\\ _\\\\/_ /_ _\\n\""},{"lineNumber":65,"author":{"gitId":"oscarlai1998"},"content":"            + \"  |_____/_/ /|\\n\""},{"lineNumber":66,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (  (_)__)J-)\\n\""},{"lineNumber":67,"author":{"gitId":"oscarlai1998"},"content":"            + \"  (  /`.,   /\\n\""},{"lineNumber":68,"author":{"gitId":"oscarlai1998"},"content":"            + \"   \\\\/  ;   /\\n\""},{"lineNumber":69,"author":{"gitId":"oscarlai1998"},"content":"            + \"    | \u003d\u003d\u003d |See you again!\\n\";"},{"lineNumber":70,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Pleasure serving you...\\n\" + wave);"},{"lineNumber":71,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Duke.txt file Updated!\");"},{"lineNumber":72,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":73,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"Developed by: Oscar Lai\\n\""},{"lineNumber":74,"author":{"gitId":"oscarlai1998"},"content":"            + \"Version 1.0\");"},{"lineNumber":75,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":76,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":78,"author":{"gitId":"oscarlai1998"},"content":"    public static void printBorder() {"},{"lineNumber":79,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(BORDER);"},{"lineNumber":80,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":82,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"oscarlai1998"},"content":"     * Print the number of task in list"},{"lineNumber":84,"author":{"gitId":"oscarlai1998"},"content":"     * @param list - ArrayList"},{"lineNumber":85,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"oscarlai1998"},"content":"    public static void printNoOfTask(ArrayList\u003cTask\u003e list) {"},{"lineNumber":87,"author":{"gitId":"oscarlai1998"},"content":"        System.out.print(\"You have \" + list.size() + \" task\");"},{"lineNumber":88,"author":{"gitId":"oscarlai1998"},"content":"        if (list.size() \u003e 1) {"},{"lineNumber":89,"author":{"gitId":"oscarlai1998"},"content":"            System.out.print(\"s\");"},{"lineNumber":90,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"oscarlai1998"},"content":"        System.out.print(\" in total!\\n\");"},{"lineNumber":92,"author":{"gitId":"oscarlai1998"},"content":"        Ui.printBorder();"},{"lineNumber":93,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":95,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"oscarlai1998"},"content":"     * Prints Added Task"},{"lineNumber":97,"author":{"gitId":"oscarlai1998"},"content":"     * @param index - Index of task in List"},{"lineNumber":98,"author":{"gitId":"oscarlai1998"},"content":"     * @param list - ArrayList"},{"lineNumber":99,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"oscarlai1998"},"content":"    public static void printAddedTask(int index, ArrayList\u003cTask\u003e list) {"},{"lineNumber":101,"author":{"gitId":"oscarlai1998"},"content":"        Task t \u003d list.get(index);"},{"lineNumber":102,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"I have added [\" + t.getType() + \"][\""},{"lineNumber":103,"author":{"gitId":"oscarlai1998"},"content":"            + t.getStatusIcon() + \"] \\\"\""},{"lineNumber":104,"author":{"gitId":"oscarlai1998"},"content":"            + t.getName() + t.getDate() + \"\\\"\" + \" to the List!\");"},{"lineNumber":105,"author":{"gitId":"oscarlai1998"},"content":"        Ui.printNoOfTask(list);"},{"lineNumber":106,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":108,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"oscarlai1998"},"content":"     * Prints task found that matches substring searchItem"},{"lineNumber":110,"author":{"gitId":"oscarlai1998"},"content":"     * Returns NONEXISTENT_TASK_ERROR message if no such item found"},{"lineNumber":111,"author":{"gitId":"oscarlai1998"},"content":"     * @param searchItem - item that is finding"},{"lineNumber":112,"author":{"gitId":"oscarlai1998"},"content":"     * @param list - ArrayList"},{"lineNumber":113,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"oscarlai1998"},"content":"    public static void printFindTask(String searchItem, ArrayList\u003cTask\u003e list) {"},{"lineNumber":115,"author":{"gitId":"oscarlai1998"},"content":"        System.out.println(\"I have found the follow items: \");"},{"lineNumber":116,"author":{"gitId":"oscarlai1998"},"content":"        int foundCounter \u003d 0;"},{"lineNumber":117,"author":{"gitId":"oscarlai1998"},"content":"        for(int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"oscarlai1998"},"content":"            if(list.get(i).getName().contains(searchItem)) {"},{"lineNumber":119,"author":{"gitId":"oscarlai1998"},"content":"                Task t \u003d list.get(i);"},{"lineNumber":120,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(foundCounter+1 + \". \" + \"[\" + t.getType() + \"][\""},{"lineNumber":121,"author":{"gitId":"oscarlai1998"},"content":"                    + t.getStatusIcon() + \"] \\\"\""},{"lineNumber":122,"author":{"gitId":"oscarlai1998"},"content":"                    + t.getName() + t.getDate() + \"\\\"\" );"},{"lineNumber":123,"author":{"gitId":"oscarlai1998"},"content":"                foundCounter +\u003d 1;"},{"lineNumber":124,"author":{"gitId":"oscarlai1998"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"oscarlai1998"},"content":"        if(foundCounter \u003d\u003d 0 )  {"},{"lineNumber":127,"author":{"gitId":"oscarlai1998"},"content":"            checkError(\"NONEXISTENT_TASK_ERROR\");"},{"lineNumber":128,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"oscarlai1998"},"content":"        printBorder();"},{"lineNumber":130,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":132,"author":{"gitId":"oscarlai1998"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"oscarlai1998"},"content":"     * Check Error Method"},{"lineNumber":134,"author":{"gitId":"oscarlai1998"},"content":"     * Returns error code message"},{"lineNumber":135,"author":{"gitId":"oscarlai1998"},"content":"     * @param ERROR_MESSAGE - Error Message"},{"lineNumber":136,"author":{"gitId":"oscarlai1998"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"oscarlai1998"},"content":"    public static void checkError(String ERROR_MESSAGE) {"},{"lineNumber":138,"author":{"gitId":"oscarlai1998"},"content":"        switch (ERROR_MESSAGE) {"},{"lineNumber":139,"author":{"gitId":"oscarlai1998"},"content":"            case \"WRONG_DONE_FORMAT\":"},{"lineNumber":140,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Error! You must enter an integer after\""},{"lineNumber":141,"author":{"gitId":"oscarlai1998"},"content":"                    + \" \\\"done\\\"!\");"},{"lineNumber":142,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":143,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":144,"author":{"gitId":"oscarlai1998"},"content":"            case \"INDEX_EXCEEDS_LIST\":"},{"lineNumber":145,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Error! You do not have that \""},{"lineNumber":146,"author":{"gitId":"oscarlai1998"},"content":"                    + \"many items in your list!\");"},{"lineNumber":147,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":148,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":149,"author":{"gitId":"oscarlai1998"},"content":"            case \"EMPTY_LIST\":"},{"lineNumber":150,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Your list is empty! Add something!\");"},{"lineNumber":151,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":152,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":153,"author":{"gitId":"oscarlai1998"},"content":"            case \"DONE_CHECKED_ERROR\":"},{"lineNumber":154,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"You have already marked it as Done!\");"},{"lineNumber":155,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":156,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":157,"author":{"gitId":"oscarlai1998"},"content":"            case \"INVALID_FORMAT\":"},{"lineNumber":158,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"¯\\\\_(ツ)_/¯ That is an invalid format!\");"},{"lineNumber":159,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Enter HELP for commands!\");"},{"lineNumber":160,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":161,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":162,"author":{"gitId":"oscarlai1998"},"content":"            case \"LIST_FULL\":"},{"lineNumber":163,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"List is full!\");"},{"lineNumber":164,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":165,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":166,"author":{"gitId":"oscarlai1998"},"content":"            case \"WRONG_DELETE_FORMAT\":"},{"lineNumber":167,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Error! You must enter a valid integer after\""},{"lineNumber":168,"author":{"gitId":"oscarlai1998"},"content":"                    + \" \\\"delete\\\"!\");"},{"lineNumber":169,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":170,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":171,"author":{"gitId":"oscarlai1998"},"content":"            case \"DELETE_EMPTY_LIST\":"},{"lineNumber":172,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Error! You cannot delete what does not exist!\");"},{"lineNumber":173,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":174,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":175,"author":{"gitId":"oscarlai1998"},"content":"            case \"INVALID_COMMAND\":"},{"lineNumber":176,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"¯\\\\_(ツ)_/¯ That is an invalid command!\");"},{"lineNumber":177,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Enter \\\"HELP\\\" for commands!\");"},{"lineNumber":178,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":179,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":180,"author":{"gitId":"oscarlai1998"},"content":"            case \"NONEXISTENT_TASK_ERROR\":"},{"lineNumber":181,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Error! No such task found!\");"},{"lineNumber":182,"author":{"gitId":"oscarlai1998"},"content":"                break;"},{"lineNumber":183,"author":{"gitId":"oscarlai1998"},"content":"            case \"FILE_NOT_FOUND\":"},{"lineNumber":184,"author":{"gitId":"oscarlai1998"},"content":"                System.out.println(\"Duke.txt not found in directory. \""},{"lineNumber":185,"author":{"gitId":"oscarlai1998"},"content":"                    + \"Please try again!\");"},{"lineNumber":186,"author":{"gitId":"oscarlai1998"},"content":"                printBorder();"},{"lineNumber":187,"author":{"gitId":"oscarlai1998"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"oscarlai1998"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"oscarlai1998"},"content":""},{"lineNumber":190,"author":{"gitId":"oscarlai1998"},"content":"}"}],"authorContributionMap":{"oscarlai1998":190}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oscarlai1998"},"content":"help"},{"lineNumber":2,"author":{"gitId":"oscarlai1998"},"content":"blah"},{"lineNumber":3,"author":{"gitId":"oscarlai1998"},"content":"list"},{"lineNumber":4,"author":{"gitId":"oscarlai1998"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"oscarlai1998"},"content":"todo sleep"},{"lineNumber":6,"author":{"gitId":"oscarlai1998"},"content":"deadline homework /by tomorrow"},{"lineNumber":7,"author":{"gitId":"oscarlai1998"},"content":"event birthday /at friday"},{"lineNumber":8,"author":{"gitId":"oscarlai1998"},"content":"done"},{"lineNumber":9,"author":{"gitId":"oscarlai1998"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"oscarlai1998"},"content":"done 2"},{"lineNumber":11,"author":{"gitId":"oscarlai1998"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"oscarlai1998"},"content":"list"},{"lineNumber":13,"author":{"gitId":"oscarlai1998"},"content":"bye"}],"authorContributionMap":{"oscarlai1998":13}}]
