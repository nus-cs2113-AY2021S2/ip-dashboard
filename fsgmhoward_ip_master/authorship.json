[{"path":"src/main/java/duke/ActionHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.ToDo;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public class ActionHandler {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    // Print a greeting message when the program is invoked"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected static void greetingHandler() {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printlnWithIndent(\"Hello! I\u0027m Duke.\");"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printlnWithIndent(\"What can I do for you?\");"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    // Print a goodbye message before the program exits"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    protected static void byeHandler() {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printlnWithIndent(\"Bye. Hope to see you again soon!\");"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    // Print out everything in the list, index starts from 1"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    protected static void listHandler(Vector\u003cTask\u003e tasks) {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(\"You don\u0027t have a task in your list!\");"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            return;"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printlnWithIndent(\"Here are the tasks in your list:\");"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(String.format(\"%d.\\t%s\", i + 1, tasks.get(i)));"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    // Mark a task to be done with index specified in arguments[1]"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    protected static void doneHandler(Vector\u003cTask\u003e tasks, String[] arguments) throws InvalidInputException {"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        if (arguments.length \u003c 2) {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            // An index must be provided for the task to be marked \"done\""},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(\"You will need to give me an index, like this: `done 2`.\");"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"                int index \u003d Integer.parseInt(arguments[1]);"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"                if (index \u003e tasks.size() || index \u003c 1) {"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"                    // This index is out of the boundary of our database"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"                    throw new InvalidInputException(InputExceptionType.INDEX_OUT_OF_BOUND);"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"                Task task \u003d tasks.get(index - 1);"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"                task.markAsDone();"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"                tasks.set(index - 1, task);"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"                Helper.printlnWithIndent(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"                Helper.printlnWithIndent(\"\\t\" + task);"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"                throw new InvalidInputException(InputExceptionType.NOT_INTEGER, e);"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    // Delete a task from the list"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"    protected static void deleteHandler(Vector\u003cTask\u003e tasks, String[] arguments) throws InvalidInputException {"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"        if (arguments.length \u003c 2) {"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            // An index must be provided for the task to be marked \"done\""},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(\"You will need to give me an index, like this: `delete 2`.\");"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"                int index \u003d Integer.parseInt(arguments[1]);"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"                if (index \u003e tasks.size() || index \u003c 1) {"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"                    // This index is out of the boundary of our database"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"                    throw new InvalidInputException(InputExceptionType.INDEX_OUT_OF_BOUND);"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"                Task task \u003d tasks.remove(index - 1);"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"                Helper.printlnWithIndent(\"Sure! I\u0027ve removed this task:\");"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                Helper.printlnWithIndent(\"\\t\" + task);"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"                throw new InvalidInputException(InputExceptionType.NOT_INTEGER, e);"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"    // Create a deadline task"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"    protected static void deadlineHandler(Vector\u003cTask\u003e tasks, String[] arguments) throws InvalidInputException {"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"        int i \u003d Helper.findIndex(arguments, \"/by\");"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"        if (i !\u003d -1 \u0026\u0026 i + 1 !\u003d arguments.length) {"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, i));"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"            String by \u003d String.join(\" \", Arrays.copyOfRange(arguments, i + 1, arguments.length));"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"            tasks.add(new Deadline(description, by));"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printNewTask(tasks);"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"            // Either /by is not found at all, or no dates are following /by"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NO_BY_DATE);"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"    // Create an event task"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"    protected static void eventHandler(Vector\u003cTask\u003e tasks, String[] arguments) throws InvalidInputException {"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"        int i \u003d Helper.findIndex(arguments, \"/at\");"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"        if (i !\u003d -1 \u0026\u0026 i + 1 !\u003d arguments.length) {"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, i));"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"            String at \u003d String.join(\" \", Arrays.copyOfRange(arguments, i + 1, arguments.length));"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"            tasks.add(new Event(description, at));"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printNewTask(tasks);"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"            // Either /at is not found at all, or no dates are following /at"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NO_AT_DATE);"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"    // Create a todo task"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"    protected static void todoHandler(Vector\u003cTask\u003e tasks, String[] arguments) throws InvalidInputException {"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"        String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, arguments.length));"},{"lineNumber":115,"author":{"gitId":"fsgmhoward"},"content":"        tasks.add(new ToDo(description));"},{"lineNumber":116,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printNewTask(tasks);"},{"lineNumber":117,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":118}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Vector;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LONG_LINE \u003d \"------------------------------------------------------------\";"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public static final String SAVE_PATH \u003d \"duke.save\";"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a vector to store all the tasks"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        Vector\u003cTask\u003e tasks \u003d null;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"            tasks \u003d Helper.loadList(SAVE_PATH);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(\"Got a problem when loading save file at \" + SAVE_PATH + \": \" + e.getMessage());"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(\"An empty list will be used instead!\");"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        } finally {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            if (tasks \u003d\u003d null) {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"                tasks \u003d new Vector\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        ActionHandler.greetingHandler();"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        Helper.printlnWithIndent(LONG_LINE);"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        Boolean isExit \u003d false;"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        while (!isExit) {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            String line \u003d in.nextLine();"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"            // Split the line by any whitespaces characters (including spaces, tabs etc.)"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"            String[] arguments \u003d line.split(\"\\\\s+\");"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"            // If first argument (command) is empty, there are empty spaces typed in at the front - so we remove it"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            if (arguments[0].isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"                arguments \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(LONG_LINE);"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"                switch(arguments[0]) {"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"                case \"bye\":"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.byeHandler();"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"                    isExit \u003d true;"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"                case \"list\":"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.listHandler(tasks);"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"                case \"done\":"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.doneHandler(tasks, arguments);"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"                    Helper.saveList(SAVE_PATH, tasks);"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"                case \"delete\":"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.deleteHandler(tasks, arguments);"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"                    Helper.saveList(SAVE_PATH, tasks);"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"                case \"deadline\":"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.deadlineHandler(tasks, arguments);"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"                    Helper.saveList(SAVE_PATH, tasks);"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"                case \"event\":"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.eventHandler(tasks, arguments);"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"                    Helper.saveList(SAVE_PATH, tasks);"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"                case \"todo\":"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"                    ActionHandler.todoHandler(tasks, arguments);"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"                    Helper.saveList(SAVE_PATH, tasks);"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"                default:"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"                    throw new InvalidInputException(InputExceptionType.UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"                Helper.printlnWithIndent(\"Oops! \" + e.getMessage());"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"            Helper.printlnWithIndent(LONG_LINE);"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"        in.close();"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fsgmhoward":83,"-":3}},{"path":"src/main/java/duke/Helper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileInputStream;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Vector;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException.SaveExceptionType;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"public class Helper {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    // Print a line with 1 tab as indentation"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    protected static void printlnWithIndent(String line) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        System.out.println(\"\\t\" + line);"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    // Print a message for a successful insertion of task"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    protected static void printNewTask(Vector\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        int size \u003d tasks.size();"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"Great. We added a new task:\");"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"\\t\" + tasks.get(size - 1));"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(String.format(\"You have in total %d tasks\", size));"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    // Find the index of a string in a string array"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    // Return the index if found and -1 if not found"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    protected static int findIndex(String[] haystack, String needle) {"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 0; i \u003c haystack.length; i +\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            if (haystack[i].equals(needle)) {"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"                return i;"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"        return -1;"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    protected static Vector\u003cTask\u003e loadList(String file) throws IOException, SaveException {"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"        Vector\u003cTask\u003e tasks \u003d new Vector\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"        FileInputStream fs \u003d null;"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"        ObjectInputStream os \u003d null;"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"            fs \u003d new FileInputStream(file);"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"            os \u003d new ObjectInputStream(fs);"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d os.readObject();"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"            if (obj instanceof Vector\u003c?\u003e) {"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"                Vector\u003c?\u003e vec \u003d (Vector\u003c?\u003e) obj;"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"                for (Object task: vec) {"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"                    // Check task type and push them to vector accordingly"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"                    if (task instanceof Deadline) {"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"                        tasks.add((Deadline) task);"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"                    } else if (task instanceof Event) {"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"                        tasks.add((Event) task);"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"                    } else if (task instanceof ToDo) {"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"                        tasks.add((ToDo) task);"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"                    } else {"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"                        // We encountered an element that is not of any valid type"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"                        throw new SaveException(SaveExceptionType.INVALID_SAVE);"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"                    }"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"            } else {"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"                throw new SaveException(SaveExceptionType.INVALID_SAVE);"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.NO_SAVE, e);"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        } catch (ClassNotFoundException e) {"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.INVALID_SAVE, e);"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"        } finally {"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"            // Close all open file and object handles"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":"            if (os !\u003d null) {"},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"                os.close();"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"            if (fs !\u003d null) {"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"                fs.close();"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"        return tasks;"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"    protected static void saveList(String file, Vector\u003cTask\u003e tasks) throws IOException, SaveException {"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"        FileOutputStream fs \u003d null;"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"        ObjectOutputStream os \u003d null;"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"            fs \u003d new FileOutputStream(file);"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"            os \u003d new ObjectOutputStream(fs);"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"            os.writeObject(tasks);"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            // Thrown by `new FileOutputStream`, usually when `file` is a folder or cannot be created"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.INVALID_PATH);"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"        } finally {"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"            // Close all open file and object handles"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"            if (os !\u003d null) {"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"                os.close();"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"            if (fs !\u003d null) {"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"                fs.close();"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":106}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"    public static enum InputExceptionType {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"        UNKNOWN_COMMAND,"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        EMPTY_DESCRIPTION,"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        NO_BY_DATE,"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        NO_AT_DATE,"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"        NOT_INTEGER,"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        INDEX_OUT_OF_BOUND"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(InputExceptionType inputType) {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        this(inputType, null);"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(InputExceptionType inputType, Throwable err) {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        super(getDescription(inputType), err);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    public static String getDescription(InputExceptionType inputType) {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        switch (inputType) {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        case UNKNOWN_COMMAND:"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            return \"Command given is not recognized as a valid one.\";"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        case EMPTY_DESCRIPTION:"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            return \"You will need to provide a description.\";"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        case NO_BY_DATE:"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            return \"You must specify a deadline date following /by keyword.\";"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        case NO_AT_DATE:"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            return \"You must specify an event date following /at keyword.\";"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        case NOT_INTEGER:"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            return \"Only integer is accepted as the argument.\";"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        case INDEX_OUT_OF_BOUND:"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            return \"We don\u0027t have an existing entry with this index.\";"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        default:"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"            return \"This type of invalid input is not recognized.\";"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":40}},{"path":"src/main/java/duke/exception/SaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"public class SaveException extends Exception {"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"    public static enum SaveExceptionType {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"        NO_SAVE,"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        INVALID_SAVE,"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        INVALID_PATH"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public SaveException(SaveExceptionType saveType) {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        this(saveType, null);"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public SaveException(SaveExceptionType saveType, Throwable err) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(getDescription(saveType), err);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static String getDescription(SaveExceptionType saveType) {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        switch (saveType) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        case NO_SAVE:"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            return \"No save file is found at the given path.\";"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        case INVALID_SAVE:"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            return \"The save file looks invalid - we cannot recover a list from it.\";"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        case INVALID_PATH:"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            return \"Save file at the path specified cannot be created or overwritten.\";"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        default:"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            return \"This type of invalid input is not recognized.\";"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":31}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 01L;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected String by;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public Deadline(String description, String by) throws InvalidInputException {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"D\";"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (by: %s)\", by);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":21}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 01L;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected String at;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public Event(String description, String at) throws InvalidInputException {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        this.at \u003d at;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"E\";"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (at: %s)\", at);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":21}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Task implements Serializable {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    // We set the default type icon to be *, which should be overwritten for child classes"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    protected String typeIcon \u003d \"*\";"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //@@author fsgmhoward-reused"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // Reused from https://nus-cs2113-ay2021s2.github.io/website/schedule/week3/project.html"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected String description;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    protected boolean isDone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Task(String description) throws InvalidInputException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (description.isEmpty()) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new InvalidInputException(InputExceptionType.EMPTY_DESCRIPTION);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // Return tick when done, or \u0027X\u0027 symbol when it is not done"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    public String getTypeIcon() {"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        return typeIcon;"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    public String getDescription() {"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        return description;"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    public void markAsDone() {"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"        isDone \u003d true;"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"        return String.format(\"[%s][%s] %s\", getTypeIcon(), getStatusIcon(), getDescription());"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":29,"-":18}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"public class ToDo extends Task {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 01L;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    public ToDo(String description) throws InvalidInputException {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"todo"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"todo Task A"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"event Event A /at 1 Apr 2021"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"event Event B Missing \u0027at\u0027 Type A"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"event Event B Missing \u0027at\u0027 Type B /at"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline A /by 1 Aug 2021"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline B Missing \u0027by\u0027 Type A"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline B Missing \u0027by\u0027 Type B /by"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"random unknown command"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"done 3"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"done 1"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"done 2"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"done 3"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"done -1"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"done Not_A_Number"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"done 1000"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"delete -1"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"delete Not_A_Number"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"delete 1000"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"delete 1"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"delete 2"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"delete 1"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"bye"}],"authorContributionMap":{"fsgmhoward":32}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"cwd\u003d$(pwd)"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"cd $(dirname \"$0\")"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"# delete save file from previous run"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"if [ -e \"duke.save\" ]"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"then"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    rm duke.save"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"fi"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":12,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":15,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":18,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":25,"author":{"gitId":"-"},"content":"then"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":28,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":38,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":40,"author":{"gitId":"-"},"content":"then"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":43,"author":{"gitId":"-"},"content":"else"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":46,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"cd $cwd"}],"authorContributionMap":{"fsgmhoward":11,"-":37}}]
