[{"path":"src/main/java/duke/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"public class DateTime implements Serializable {"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 1L;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    // Default datetime is \"d-M-y H:m\", e.g. 01-05-2021 12:30"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    // Store as a static member to ensure consistent representation of all objects"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected static String datePattern \u003d \"dd/MM/yyyy\";"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected static String timePattern \u003d \"HH:mm\";"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public DateTime(String dateTimeString) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            dateTime \u003d"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"                    LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(datePattern + \" \" + timePattern));"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            // Fail to parse a datetime - try to parse a date (with time set at 12 PM noon)"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            LocalDate date \u003d LocalDate.parse(dateTimeString, DateTimeFormatter.ofPattern(datePattern));"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            dateTime \u003d LocalDateTime.of(date, LocalTime.parse(\"12:00\"));"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isSameDate(DateTime dateTime) {"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        return this.dateTime.toLocalDate().isEqual(dateTime.dateTime.toLocalDate());"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(datePattern + \" \" + timePattern));"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":39}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DEFAULT_SAVE_PATH \u003d \"duke.save\";"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    protected TaskList tasks;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    protected Parser parser;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public Duke(String filepath) {"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        Storage storage \u003d new Storage(filepath);"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"            tasks \u003d storage.load();"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"            ui.printSaveException(filepath, e);"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"            tasks \u003d new TaskList(storage);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        parser \u003d new Parser(ui, tasks);"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public void run() {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        ui.printWelcome();"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        while (true) {"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            String fullCommand \u003d ui.read();"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            if (fullCommand \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                // Reach EOF, exit the program"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            ui.printLine();"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"                Command cmd \u003d parser.parse(fullCommand);"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"                cmd.execute();"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"                if (cmd.isExit()) {"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"                    break;"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"                ui.printException(e);"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"            } finally {"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"                ui.printLine();"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        // Close Ui instance to release resources (such as Scanner instance)"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        ui.close();"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        String filepath \u003d DEFAULT_SAVE_PATH;"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        if (args.length \u003e 0) {"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"            // If additional argument is provided, take 1st argument as the save filepath"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"            filepath \u003d args[0];"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        new Duke(filepath).run();"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fsgmhoward":57,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.lang.reflect.Constructor;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    // Delimiter for string join is a single whitespace (for string split, it is any number of whitespaces)"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DELIMITER \u003d \" \";"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    protected TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public Parser(Ui ui, TaskList tasks) {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public Command parse(String fullCommand) throws InvalidInputException {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        HashMap\u003cString, String\u003e arguments \u003d new HashMap\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        String[] tokens \u003d fullCommand.split(\"\\\\s+\");"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        // If first token (command) is empty, there are empty spaces typed in at the front - so we remove it"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens[0].isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            tokens \u003d Arrays.copyOfRange(tokens, 1, tokens.length);"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        if (tokens.length \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        arguments.put(\"command\", tokens[0]);"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        // Default key is \"payload\""},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        String key \u003d \"payload\";"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        ArrayList\u003cString\u003e values \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 1; i \u003c tokens.length; ++i) {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            // Check whether this token is a new key"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"            if (tokens[i].charAt(0) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"                // If it is, save current value into the map and start a new k-v pair"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"                arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"                key \u003d tokens[i].substring(1);"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"                values.clear();"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"                // If not, append this token to the end of the value"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"                values.add(tokens[i]);"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        // Store the last k-v pair"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        if (!values.isEmpty()) {"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"            arguments.put(key, String.join(DELIMITER, values));"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a respective class from the command (by capitalize first character)"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d tokens[0] + \"Command\";"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d className.substring(0, 1).toUpperCase() + className.substring(1);"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        className \u003d \"duke.command.\" + className;"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"            Class\u003c?\u003e cls \u003d Class.forName(className);"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"            Constructor\u003c?\u003e constructor \u003d cls.getDeclaredConstructor(Ui.class, TaskList.class, HashMap.class);"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d constructor.newInstance(ui, tasks, arguments);"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"            return (Command) obj;"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"            // If any exception thrown above, it means the command is not formatted properly"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.UNKNOWN_COMMAND, e);"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":71}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileInputStream;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException.SaveExceptionType;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected String filepath;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public Storage(String filepath) {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    protected TaskList load() throws IOException, SaveException {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        TaskList tasks \u003d null;"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        FileInputStream fs \u003d null;"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        ObjectInputStream os \u003d null;"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            fs \u003d new FileInputStream(this.filepath);"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            os \u003d new ObjectInputStream(fs);"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            Object obj \u003d os.readObject();"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            if (obj instanceof TaskList) {"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                tasks \u003d (TaskList) obj;"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                tasks.setStorage(this);"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"                throw new SaveException(SaveExceptionType.INVALID_SAVE);"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.NO_SAVE, e);"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        } catch (ClassNotFoundException e) {"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.INVALID_SAVE, e);"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        } finally {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            // Close all open file and object handles"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"            if (os !\u003d null) {"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"                os.close();"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            if (fs !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"                fs.close();"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        return tasks;"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"    protected void save(TaskList tasks) throws IOException, SaveException {"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"        FileOutputStream fs \u003d null;"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        ObjectOutputStream os \u003d null;"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"            fs \u003d new FileOutputStream(this.filepath);"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"            os \u003d new ObjectOutputStream(fs);"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"            // Nullify storage attribute before saving"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"            tasks.setStorage(null);"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"            os.writeObject(tasks);"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"            tasks.setStorage(this);"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"            // Thrown by `new FileOutputStream`, usually when `file` is a folder or cannot be created"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            throw new SaveException(SaveExceptionType.INVALID_PATH);"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"        } finally {"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"            // Close all open file and object handles"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"            if (os !\u003d null) {"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":"                os.close();"},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"            if (fs !\u003d null) {"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"                fs.close();"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":75}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class TaskList extends Vector\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 1L;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    protected Storage storage;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        this(null);"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    public TaskList(Storage storage) {"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        setStorage(storage);"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    public void setStorage(Storage storage) {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        this.storage \u003d storage;"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    /*"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"     * Save file on all the modification actions"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"    protected void save() throws IOException, SaveException {"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        if (storage !\u003d null) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            storage.save(this);"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    public void addTask(Task task) throws IOException, SaveException {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        super.add(task);"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        save();"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    public void setTask(int index, Task task) throws IOException, SaveException {"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"        super.set(index, task);"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"        save();"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"    public Task deleteTask(int index) throws IOException, SaveException {"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"        Task task \u003d super.remove(index);"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        save();"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"        return task;"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":50}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"public class Ui implements AutoCloseable {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LONG_LINE \u003d \"------------------------------------------------------------\";"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    // Default indentation is 8 whitespaces"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    public static final char DEFAULT_INDENT_CHARACTER \u003d \u0027\\t\u0027;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public static final int DEFAULT_INDENT_COUNT \u003d 1;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    // Used for internal 2nd-level indentation (e.g. print task)"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public static final String INTERNAL_INDENT \u003d \"\\t\";"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LOCALE_CLASS_PREFIX \u003d \"duke.locale\";"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public static final String DEFAULT_LOCALE \u003d \"English\";"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public static final Class\u003c?\u003e DEFAULT_LOCALE_CLASS \u003d duke.locale.English.class;"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    protected String indent;"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    protected Scanner scanner;"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    protected Class\u003c?\u003e locale;"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    public Ui() {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        this(DEFAULT_INDENT_CHARACTER, DEFAULT_INDENT_COUNT, DEFAULT_LOCALE);"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public Ui(char indentCharacter, int indentCount, String locale) {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        indent \u003d new String(new char[indentCount]).replace(\u0027\\0\u0027, indentCharacter);"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        // Load locale from class"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        String className \u003d LOCALE_CLASS_PREFIX + locale;"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            this.locale \u003d Class.forName(className);"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"        } catch (ClassNotFoundException e) {"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            // Cannot load a locale class, fall back to English"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            this.locale \u003d DEFAULT_LOCALE_CLASS;"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"    protected String getLocaleText(String key) {"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"            return (String) locale.getDeclaredField(key).get(null);"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            // If it fails, fall back to default locale"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"                return (String) DEFAULT_LOCALE_CLASS.getDeclaredField(key).get(null);"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"            } catch (Exception ex) {"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"                // Critical error - we cannot even get this key from the default locale"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"                // Print out the error and return an empty string"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"                printException(ex);"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"                return \"\";"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":"    public void close() {"},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"        scanner.close();"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"        scanner \u003d null;"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    public String read() {"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":"        if (scanner \u003d\u003d null || !scanner.hasNextLine()) {"},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"            return null;"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        return scanner.nextLine();"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    public void print(String text, Object ... args) {"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"        // Pass to String.format to format the text using varargs provided"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        String[] lines \u003d String.format(text, args).split(\"\\n\");"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        for (String line : lines) {"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            System.out.println(indent + line);"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"    // Print a message for a successful insertion of task"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"    public void printNewTask(TaskList tasks) {"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"        int size \u003d tasks.size();"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"NEW_TASK\"), INTERNAL_INDENT + tasks.get(size - 1), size);"},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"    public void printTaskList(TaskList tasks) {"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"        printTaskList(tasks, \"\");"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"    public void printTaskList(TaskList tasks, DateTime dateTime) {"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"        printTaskList(tasks, getLocaleText(\"TASK_LIST_AT_BY\") + dateTime);"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"    public void printTaskList(TaskList tasks, String additionalText) {"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":"            print(getLocaleText(\"TASK_LIST_EMPTY\"), additionalText);"},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"            return;"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"TASK_LIST\"), additionalText);"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"            print(\"%d.%s%s\", i + 1, INTERNAL_INDENT, tasks.get(i));"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"    public void printLine() {"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":"        print(LONG_LINE);"},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"    public void printSaveException(String filepath, Exception e) {"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"        printException(e);"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"SAVE_EXCEPTION\"), filepath);"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"        printLine();"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"    public void printException(Exception e) {"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"EXCEPTION\"), e);"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":116,"author":{"gitId":"fsgmhoward"},"content":"    public void printWelcome() {"},{"lineNumber":117,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"GREETING\"), new DateTime(\"31/01/2021 23:59\"));"},{"lineNumber":118,"author":{"gitId":"fsgmhoward"},"content":"        printLine();"},{"lineNumber":119,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":121,"author":{"gitId":"fsgmhoward"},"content":"    public void printGoodbye() {"},{"lineNumber":122,"author":{"gitId":"fsgmhoward"},"content":"        print(getLocaleText(\"FAREWELL\"));"},{"lineNumber":123,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":124}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"// Print out a bye message and do necessary clean up"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public ByeCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        isExit \u003d true;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        ui.printGoodbye();"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    protected Ui ui;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    protected TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    protected HashMap\u003cString, String\u003e arguments;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    protected Boolean isExit \u003d false;"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    public Command(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        this.ui \u003d ui;"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        this.arguments \u003d arguments;"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isExit() {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        return this.isExit;"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    public abstract void execute() throws InvalidInputException, IOException, SaveException;"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":28}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public DeadlineCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, IOException, SaveException {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        String by \u003d arguments.get(\"by\");"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        if (by \u003d\u003d null || by.length() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            // Either /by is not found at all, or no dates are following /by"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NO_BY_DATE);"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            tasks.addTask(new Deadline(arguments.get(\"payload\"), new DateTime(by)));"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            ui.printNewTask(tasks);"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.MALFORMED_DATE);"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":34}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"// Delete a task from the task list"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public DeleteCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, IOException, SaveException {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        String indexString \u003d arguments.get(\"payload\");"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        if (indexString \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            // An index must be provided for the task to be marked \"done\""},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.EMPTY_INDEX);"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            int index \u003d Integer.parseInt(indexString);"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            if (index \u003e tasks.size() || index \u003c 1) {"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"                // This index is out of the boundary of our database"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                throw new InvalidInputException(InputExceptionType.INDEX_OUT_OF_BOUND);"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            Task task \u003d tasks.remove(index - 1);"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            ui.print(\"Sure! I\u0027ve removed this task:\");"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"            ui.print(\"\\t\" + task);"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NOT_INTEGER, e);"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":40}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"// Mark a task in the task list as done"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class DoneCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public DoneCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, IOException, SaveException {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        String indexString \u003d arguments.get(\"payload\");"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        if (indexString \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            // An index must be provided for the task to be marked \"done\""},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.EMPTY_INDEX);"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"                int index \u003d Integer.parseInt(indexString);"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"                if (index \u003e tasks.size() || index \u003c 1) {"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"                    // This index is out of the boundary of our database"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                    throw new InvalidInputException(InputExceptionType.INDEX_OUT_OF_BOUND);"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"                Task task \u003d tasks.get(index - 1);"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"                task.markAsDone();"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"                tasks.setTask(index - 1, task);"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"                ui.print(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"                ui.print(\"\\t\" + task);"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"                throw new InvalidInputException(InputExceptionType.NOT_INTEGER, e);"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":44}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"public class EventCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public EventCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, IOException, SaveException {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        String at \u003d arguments.get(\"at\");"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        if (at \u003d\u003d null || at.length() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            // Either /at is not found at all, or no dates are following /at"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NO_AT_DATE);"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            tasks.addTask(new Event(arguments.get(\"payload\"), new DateTime(at)));"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            ui.printNewTask(tasks);"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.MALFORMED_DATE);"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":34}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"// Find a task in the tasklist"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public FindCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException {"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"        String needle \u003d arguments.get(\"payload\");"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        if (needle.length() \u003d\u003d 0) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.EMPTY_DESCRIPTION);"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        TaskList result \u003d new TaskList(null);"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"        for (Task task : tasks) {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            if (task.toString().contains(needle)) {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"                result.add(task);"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        ui.printTaskList(result, \" related to \u0027\" + needle + \"\u0027\");"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":31}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"// Print out everything in the list, index starts from 1"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public ListCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        ui.printTaskList(tasks);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":18}},{"path":"src/main/java/duke/command/SearchdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"// Find tasks at a specific date and print out the list"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"public class SearchdateCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public SearchdateCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        String payload \u003d arguments.get(\"payload\");"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        if (payload.length() \u003d\u003d 0) {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"            // Didn\u0027t input a date for parse"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.NO_SEARCH_DATE);"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            DateTime dateTime \u003d new DateTime(payload);"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            TaskList result \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            for (Task task : tasks) {"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"                if (task.isSameDate(dateTime)) {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                    result.add(task);"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            ui.printTaskList(result, dateTime);"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            throw new InvalidInputException(InputExceptionType.MALFORMED_DATE, e);"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":39}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.SaveException;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"// Create a todo task"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    public TodoCommand(Ui ui, TaskList tasks, HashMap\u003cString, String\u003e arguments) {"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        super(ui, tasks, arguments);"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public void execute() throws InvalidInputException, IOException, SaveException {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        tasks.addTask(new ToDo(arguments.get(\"payload\")));"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        ui.printNewTask(tasks);"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":23}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"    public static enum InputExceptionType {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"        UNKNOWN_COMMAND,"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        EMPTY_DESCRIPTION,"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        EMPTY_INDEX,"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        NO_SEARCH_DATE,"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"        NO_BY_DATE,"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        NO_AT_DATE,"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        MALFORMED_DATE,"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        NOT_INTEGER,"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        INDEX_OUT_OF_BOUND"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(InputExceptionType inputType) {"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        this(inputType, null);"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    public InvalidInputException(InputExceptionType inputType, Throwable err) {"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"        super(getDescription(inputType), err);"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"    public static String getDescription(InputExceptionType inputType) {"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"        switch (inputType) {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        case UNKNOWN_COMMAND:"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            return \"Command given is not recognized as a valid one.\";"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        case EMPTY_DESCRIPTION:"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"            return \"You will need to provide a description.\";"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        case EMPTY_INDEX:"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"            return \"An integer index must follow the command\";"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"        case NO_SEARCH_DATE:"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            return \"You must specify a date after searchdate command.\";"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        case NO_BY_DATE:"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"            return \"You must specify a deadline date following /by keyword.\";"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"        case NO_AT_DATE:"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"            return \"You must specify an event date following /at keyword.\";"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"        case MALFORMED_DATE:"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            return \"Date (and time) specified cannot be parsed.\";"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"        case NOT_INTEGER:"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"            return \"Only integer is accepted as the argument.\";"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"        case INDEX_OUT_OF_BOUND:"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"            return \"We don\u0027t have an existing entry with this index.\";"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"        default:"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            return \"This type of invalid input is not recognized.\";"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":49}},{"path":"src/main/java/duke/exception/SaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"public class SaveException extends Exception {"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"    public static enum SaveExceptionType {"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"        NO_SAVE,"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        INVALID_SAVE,"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        INVALID_PATH"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public SaveException(SaveExceptionType saveType) {"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        this(saveType, null);"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public SaveException(SaveExceptionType saveType, Throwable err) {"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"        super(getDescription(saveType), err);"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static String getDescription(SaveExceptionType saveType) {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        switch (saveType) {"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        case NO_SAVE:"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"            return \"No save file is found at the given path.\";"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        case INVALID_SAVE:"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            return \"The save file looks invalid - we cannot recover a list from it.\";"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        case INVALID_PATH:"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"            return \"Save file at the path specified cannot be created or overwritten.\";"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        default:"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"            return \"This type of invalid input is not recognized.\";"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":31}},{"path":"src/main/java/duke/locale/English.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.locale;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"public class English {"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"    // %s: A sample date"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"    public static final String GREETING \u003d"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"            \"Hello! I\u0027m Duke.\\n\""},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"            + \"What can I do for you?\\n\""},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"            + \"Note: When input a date (\u0026 time), please use format like \u0027%s\u0027.\";"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    // No args"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public static final String FAREWELL \u003d"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"            \"Bye. Hope to see you again soon!\";"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"    // %s: Exception String"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    public static final String EXCEPTION \u003d"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"            \"[We have a problem!] %s\";"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    // %s: Filepath"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public static final String SAVE_EXCEPTION \u003d"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"            \"Got a problem when loading save file at \u0027%s\u0027.\\n\""},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"            + \"An empty list will be used instead!\";"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    // %s: Additional text"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public static final String TASK_LIST \u003d"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            \"Here are the tasks in your list%s:\";"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"    // %s: Additional text"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    public static final String TASK_LIST_EMPTY \u003d"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            \"You don\u0027t have a task in your list%s!\";"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    "},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"    // No args"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    public static final String TASK_LIST_AT_BY \u003d"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"            \" at/by \";"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    "},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"    // %s: Latest added task"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    // %d: Task counts"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    public static final String NEW_TASK \u003d"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"            \"Great. We added a new task:\\n\""},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"            + \"%s\\n\""},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            + \"You have in total %d tasks\";"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":41}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 2L;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    protected DateTime by;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public Deadline(String description, DateTime by) throws InvalidInputException {"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"D\";"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isSameDate(DateTime dateTime) {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        return by.isSameDate(dateTime);"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    };"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (by: %s)\", by);"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":27}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 2L;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    protected DateTime at;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public Event(String description, DateTime at) throws InvalidInputException {"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"E\";"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isSameDate(DateTime dateTime) {"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        return at.isSameDate(dateTime);"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"    };"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (at: %s)\", at);"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":27}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException.InputExceptionType;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"public abstract class Task implements Serializable {"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 1L;"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    public static final String CROSS_ICON \u003d \"\\u2718\";"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public static final String TICK_ICON \u003d \"\\u2713\";"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    // We set the default type icon to be *, which should be overwritten for child classes"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    protected String typeIcon \u003d \"*\";"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    //@@author fsgmhoward-reused"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Reused from https://nus-cs2113-ay2021s2.github.io/website/schedule/week3/project.html"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected String description;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    protected boolean isDone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Task(String description) throws InvalidInputException {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (description \u003d\u003d null || description.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new InvalidInputException(InputExceptionType.EMPTY_DESCRIPTION);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // Return tick when done, or \u0027X\u0027 symbol when it is not done"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return (isDone ? TICK_ICON : CROSS_ICON);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"    public String getTypeIcon() {"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"        return typeIcon;"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"        return description;"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"    public void markAsDone() {"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"        isDone \u003d true;"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"    // Check whether this task falls on a specific date"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"    public abstract Boolean isSameDate(DateTime dateTime);"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"        return String.format(\"[%s][%s] %s\", getTypeIcon(), getStatusIcon(), getDescription());"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":37,"-":18}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import duke.DateTime;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    // This value indicates the version of this class when doing serialization"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    public static final long serialVersionUID \u003d 1L;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    public ToDo(String description) throws InvalidInputException {"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"        typeIcon \u003d \"T\";"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"    public Boolean isSameDate(DateTime dateTime) {"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"    };"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"todo"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"todo Task A"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"event Event A /at 01/04/2021 10:00"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"event Event A-2 /at 01/04/2021"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"event Event A-3 /at Some_Malformed_Date"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"delete 3"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"event Event B Missing \u0027at\u0027 Type A"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"event Event B Missing \u0027at\u0027 Type B /at"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline A /by 01/08/2021"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline B Missing \u0027by\u0027 Type A"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline B Missing \u0027by\u0027 Type B /by"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"random unknown command"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"done 3"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"done 1"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"done 2"},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"done 3"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"done -1"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"done Not_A_Number"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"done 1000"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"delete -1"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"delete Not_A_Number"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"delete 1000"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"find Task"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"find Deadline"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"find A"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"searchdate 01/08/2021"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"searchdate 01/04/2021"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"delete 1"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"delete 2"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"delete 1"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"bye"}],"authorContributionMap":{"fsgmhoward":40}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"cwd\u003d$(pwd)"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"cd $(dirname \"$0\")"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"# delete save file from previous run"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"if [ -e \"duke.save\" ]"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"then"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"    rm duke.save"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"fi"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":12,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":15,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":18,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"find ../src/main/java -name \"*.java\" \u003e sources.txt"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin @sources.txt"},{"lineNumber":26,"author":{"gitId":"-"},"content":"then"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":29,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"rm sources.txt"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":37,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":40,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":41,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":42,"author":{"gitId":"-"},"content":"then"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":45,"author":{"gitId":"-"},"content":"else"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":48,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"cd $cwd"}],"authorContributionMap":{"fsgmhoward":13,"-":37}}]
