[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Arrays;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"import java.util.Vector;"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"import task.Deadline;"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"import task.Event;"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"import task.ToDo;"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"    public static final String LONG_LINE \u003d \"------------------------------------------------------------\";"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        // Initialize a vector to store all the tasks"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"        Vector\u003cTask\u003e tasks \u003d new Vector\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"        greeting();"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(LONG_LINE);"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":20,"author":{"gitId":"fsgmhoward"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":"        Boolean exit \u003d false;"},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        while (!exit) {"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"            String line \u003d in.nextLine();"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":"            String[] arguments \u003d line.split(\" \");"},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(LONG_LINE);"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":"            switch(arguments[0]) {"},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"            case \"bye\":"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"                bye();"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"                exit \u003d true;"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"            case \"list\":"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"                list(tasks);"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"            case \"done\":"},{"lineNumber":38,"author":{"gitId":"fsgmhoward"},"content":"                done(tasks, arguments);"},{"lineNumber":39,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"fsgmhoward"},"content":"            case \"deadline\":"},{"lineNumber":41,"author":{"gitId":"fsgmhoward"},"content":"                deadline(tasks, arguments);"},{"lineNumber":42,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"fsgmhoward"},"content":"            case \"event\":"},{"lineNumber":44,"author":{"gitId":"fsgmhoward"},"content":"                event(tasks, arguments);"},{"lineNumber":45,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"fsgmhoward"},"content":"            case \"todo\":"},{"lineNumber":47,"author":{"gitId":"fsgmhoward"},"content":"                todo(tasks, arguments);"},{"lineNumber":48,"author":{"gitId":"fsgmhoward"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"fsgmhoward"},"content":"            default:"},{"lineNumber":50,"author":{"gitId":"fsgmhoward"},"content":"                save(tasks, line);"},{"lineNumber":51,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":53,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(LONG_LINE);"},{"lineNumber":54,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"fsgmhoward"},"content":"        in.close();"},{"lineNumber":56,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":58,"author":{"gitId":"fsgmhoward"},"content":"    // Print a greeting message when the program is invoked"},{"lineNumber":59,"author":{"gitId":"fsgmhoward"},"content":"    protected static void greeting() {"},{"lineNumber":60,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"Hello! I\u0027m Duke.\");"},{"lineNumber":61,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"What can I do for you?\");"},{"lineNumber":62,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":64,"author":{"gitId":"fsgmhoward"},"content":"    // Print a goodbye message before the program exits"},{"lineNumber":65,"author":{"gitId":"fsgmhoward"},"content":"    protected static void bye() {"},{"lineNumber":66,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"Bye. Hope to see you again soon!\");"},{"lineNumber":67,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":69,"author":{"gitId":"fsgmhoward"},"content":"    // Print out everything in the list, index starts from 1"},{"lineNumber":70,"author":{"gitId":"fsgmhoward"},"content":"    protected static void list(Vector\u003cTask\u003e tasks) {"},{"lineNumber":71,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"Here are the tasks in your list:\");"},{"lineNumber":72,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(String.format(\"%d.\\t%s\", i + 1, tasks.get(i)));"},{"lineNumber":74,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":77,"author":{"gitId":"fsgmhoward"},"content":"    // Mark a task to be done with index specified in arguments[1]"},{"lineNumber":78,"author":{"gitId":"fsgmhoward"},"content":"    protected static void done(Vector\u003cTask\u003e tasks, String[] arguments) {"},{"lineNumber":79,"author":{"gitId":"fsgmhoward"},"content":"        if (arguments.length \u003c 2) {"},{"lineNumber":80,"author":{"gitId":"fsgmhoward"},"content":"            // An index must be provided for the task to be marked \"done\""},{"lineNumber":81,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(\"You will need to give me an index, like this: `done 2`.\");"},{"lineNumber":82,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"fsgmhoward"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"fsgmhoward"},"content":"                int index \u003d Integer.parseInt(arguments[1]);"},{"lineNumber":85,"author":{"gitId":"fsgmhoward"},"content":"                if (index \u003e tasks.size() || index \u003c 1) {"},{"lineNumber":86,"author":{"gitId":"fsgmhoward"},"content":"                    // This index is out of the boundary of our database"},{"lineNumber":87,"author":{"gitId":"fsgmhoward"},"content":"                    throw new IllegalArgumentException();"},{"lineNumber":88,"author":{"gitId":"fsgmhoward"},"content":"                }"},{"lineNumber":89,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":90,"author":{"gitId":"fsgmhoward"},"content":"                Task task \u003d tasks.get(index - 1);"},{"lineNumber":91,"author":{"gitId":"fsgmhoward"},"content":"                task.markAsDone();"},{"lineNumber":92,"author":{"gitId":"fsgmhoward"},"content":"                tasks.set(index - 1, task);"},{"lineNumber":93,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":94,"author":{"gitId":"fsgmhoward"},"content":"                printlnWithIndent(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":95,"author":{"gitId":"fsgmhoward"},"content":"                printlnWithIndent(\"\\t\" + task);"},{"lineNumber":96,"author":{"gitId":"fsgmhoward"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":97,"author":{"gitId":"fsgmhoward"},"content":"                printlnWithIndent(\"Index provided is not a proper number.\");"},{"lineNumber":98,"author":{"gitId":"fsgmhoward"},"content":"            } catch (IllegalArgumentException e) {"},{"lineNumber":99,"author":{"gitId":"fsgmhoward"},"content":"                printlnWithIndent(\"Task with this index is not found in our database.\");"},{"lineNumber":100,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":104,"author":{"gitId":"fsgmhoward"},"content":"    // Create a deadline task"},{"lineNumber":105,"author":{"gitId":"fsgmhoward"},"content":"    protected static void deadline(Vector\u003cTask\u003e tasks, String[] arguments) {"},{"lineNumber":106,"author":{"gitId":"fsgmhoward"},"content":"        int i \u003d findIndex(arguments, \"/by\");"},{"lineNumber":107,"author":{"gitId":"fsgmhoward"},"content":"        if (i !\u003d -1) {"},{"lineNumber":108,"author":{"gitId":"fsgmhoward"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, i));"},{"lineNumber":109,"author":{"gitId":"fsgmhoward"},"content":"            String by \u003d String.join(\" \", Arrays.copyOfRange(arguments, i + 1, arguments.length));"},{"lineNumber":110,"author":{"gitId":"fsgmhoward"},"content":"            tasks.add(new Deadline(description, by));"},{"lineNumber":111,"author":{"gitId":"fsgmhoward"},"content":"            printNewTask(tasks);"},{"lineNumber":112,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(\"You must specify a deadline after /by\");"},{"lineNumber":114,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":117,"author":{"gitId":"fsgmhoward"},"content":"    // Create an event task"},{"lineNumber":118,"author":{"gitId":"fsgmhoward"},"content":"    protected static void event(Vector\u003cTask\u003e tasks, String[] arguments) {"},{"lineNumber":119,"author":{"gitId":"fsgmhoward"},"content":"        int i \u003d findIndex(arguments, \"/at\");"},{"lineNumber":120,"author":{"gitId":"fsgmhoward"},"content":"        if (i !\u003d -1) {"},{"lineNumber":121,"author":{"gitId":"fsgmhoward"},"content":"            String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, i));"},{"lineNumber":122,"author":{"gitId":"fsgmhoward"},"content":"            String at \u003d String.join(\" \", Arrays.copyOfRange(arguments, i + 1, arguments.length));"},{"lineNumber":123,"author":{"gitId":"fsgmhoward"},"content":"            tasks.add(new Event(description, at));"},{"lineNumber":124,"author":{"gitId":"fsgmhoward"},"content":"            printNewTask(tasks);"},{"lineNumber":125,"author":{"gitId":"fsgmhoward"},"content":"        } else {"},{"lineNumber":126,"author":{"gitId":"fsgmhoward"},"content":"            printlnWithIndent(\"You must specify a event time after /at\");"},{"lineNumber":127,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":130,"author":{"gitId":"fsgmhoward"},"content":"    // Create a todo task"},{"lineNumber":131,"author":{"gitId":"fsgmhoward"},"content":"    protected static void todo(Vector\u003cTask\u003e tasks, String[] arguments) {"},{"lineNumber":132,"author":{"gitId":"fsgmhoward"},"content":"        String description \u003d String.join(\" \", Arrays.copyOfRange(arguments, 1, arguments.length));"},{"lineNumber":133,"author":{"gitId":"fsgmhoward"},"content":"        tasks.add(new ToDo(description));"},{"lineNumber":134,"author":{"gitId":"fsgmhoward"},"content":"        printNewTask(tasks);"},{"lineNumber":135,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":137,"author":{"gitId":"fsgmhoward"},"content":"    // Save a new task with no specific type in the task list"},{"lineNumber":138,"author":{"gitId":"fsgmhoward"},"content":"    protected static void save(Vector\u003cTask\u003e tasks, String description) {"},{"lineNumber":139,"author":{"gitId":"fsgmhoward"},"content":"        tasks.add(new Task(description));"},{"lineNumber":140,"author":{"gitId":"fsgmhoward"},"content":"        printNewTask(tasks);"},{"lineNumber":141,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":143,"author":{"gitId":"fsgmhoward"},"content":"    // Print a line with 1 tab as indentation"},{"lineNumber":144,"author":{"gitId":"fsgmhoward"},"content":"    protected static void printlnWithIndent(String line) {"},{"lineNumber":145,"author":{"gitId":"fsgmhoward"},"content":"        System.out.println(\"\\t\" + line);"},{"lineNumber":146,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":148,"author":{"gitId":"fsgmhoward"},"content":"    // Print a message for a successful insertion of task"},{"lineNumber":149,"author":{"gitId":"fsgmhoward"},"content":"    protected static void printNewTask(Vector\u003cTask\u003e tasks) {"},{"lineNumber":150,"author":{"gitId":"fsgmhoward"},"content":"        int size \u003d tasks.size();"},{"lineNumber":151,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"Great. We added a new task:\");"},{"lineNumber":152,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(\"\\t\" + tasks.get(size - 1));"},{"lineNumber":153,"author":{"gitId":"fsgmhoward"},"content":"        printlnWithIndent(String.format(\"You have in total %d tasks\", size));"},{"lineNumber":154,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":156,"author":{"gitId":"fsgmhoward"},"content":"    // Find the index of a string in a string array"},{"lineNumber":157,"author":{"gitId":"fsgmhoward"},"content":"    // Return the index if found and -1 if not found"},{"lineNumber":158,"author":{"gitId":"fsgmhoward"},"content":"    protected static int findIndex(String[] haystack, String needle) {"},{"lineNumber":159,"author":{"gitId":"fsgmhoward"},"content":"        for (int i \u003d 0; i \u003c haystack.length; i +\u003d 1) {"},{"lineNumber":160,"author":{"gitId":"fsgmhoward"},"content":"            if (haystack[i].equals(needle)) {"},{"lineNumber":161,"author":{"gitId":"fsgmhoward"},"content":"                return i;"},{"lineNumber":162,"author":{"gitId":"fsgmhoward"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"fsgmhoward"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"fsgmhoward"},"content":"        return -1;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fsgmhoward":162,"-":4}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        this.symbol \u003d \"D\";"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        this.by \u003d by;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (by: %s)\", this.by);"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":16}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"        this.symbol \u003d \"E\";"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"        this.at \u003d at;"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"        return super.toString() + String.format(\" (at: %s)\", this.at);"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":16}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    //@@author fsgmhoward-reused"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    // Reused from https://nus-cs2113-ay2021s2.github.io/website/schedule/week3/project.html"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    // We set the default symbol to be *"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    protected String symbol \u003d \"*\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // Return tick when done, or \u0027X\u0027 symbol when it is not done"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":21,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":22,"author":{"gitId":"fsgmhoward"},"content":"    public String getTypeIcon() {"},{"lineNumber":23,"author":{"gitId":"fsgmhoward"},"content":"        return symbol;"},{"lineNumber":24,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":26,"author":{"gitId":"fsgmhoward"},"content":"    public String getDescription() {"},{"lineNumber":27,"author":{"gitId":"fsgmhoward"},"content":"        return this.description;"},{"lineNumber":28,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":30,"author":{"gitId":"fsgmhoward"},"content":"    public void markAsDone() {"},{"lineNumber":31,"author":{"gitId":"fsgmhoward"},"content":"        this.isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":34,"author":{"gitId":"fsgmhoward"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"fsgmhoward"},"content":"        return String.format(\"[%s][%s] %s\", this.getTypeIcon(), this.getStatusIcon(), this.getDescription());"},{"lineNumber":36,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":20,"-":17}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":""},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"    public ToDo(String description) {"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"        this.symbol \u003d \"T\";"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"}"}],"authorContributionMap":{"fsgmhoward":8}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"fsgmhoward"},"content":"todo Task A"},{"lineNumber":2,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":3,"author":{"gitId":"fsgmhoward"},"content":"event Event A /at 1 Apr 2021"},{"lineNumber":4,"author":{"gitId":"fsgmhoward"},"content":"event Event B Missing \u0027at\u0027"},{"lineNumber":5,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":6,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline A /by 1 Aug 2021"},{"lineNumber":7,"author":{"gitId":"fsgmhoward"},"content":"deadline Deadline B Missing \u0027by\u0027"},{"lineNumber":8,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":9,"author":{"gitId":"fsgmhoward"},"content":"Random Task without Type"},{"lineNumber":10,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":11,"author":{"gitId":"fsgmhoward"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"fsgmhoward"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"fsgmhoward"},"content":"done 4"},{"lineNumber":14,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":15,"author":{"gitId":"fsgmhoward"},"content":"done -1"},{"lineNumber":16,"author":{"gitId":"fsgmhoward"},"content":"done Not_A_Number"},{"lineNumber":17,"author":{"gitId":"fsgmhoward"},"content":"done 1000"},{"lineNumber":18,"author":{"gitId":"fsgmhoward"},"content":"list"},{"lineNumber":19,"author":{"gitId":"fsgmhoward"},"content":"bye"}],"authorContributionMap":{"fsgmhoward":19}}]
