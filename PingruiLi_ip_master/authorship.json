[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"\u003chr\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"### User Guide for Duke"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"View user guide of Duke [here](https://pingruili.github.io/ip/)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"### Setting up in Intellij"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"#### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":26,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"PingruiLi":5,"-":25}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"# User Guide for Duke \u003ca \u003e\u003c/a\u003e"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"##### Duke is a memo application that can help you record the tasks to be done"},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"\u003chr\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"### Running Environment "},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"As a cross-platform application, Duke can run on any PCs or Desktops as long as it supports Java 11."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"### Features "},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"* Record different types of tasks."},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eDuke can record tasks in the form of ToDo, Deadline and Event. As the name suggests, ToDos are normal tasks, Deadlines are tasks that must be finished within certain time limit, Events are tasks that will happen at certain time.\u003c/p\u003e"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"* Track the progress of task completion"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eDuke can help users to mark the tasks they have done and delete tasks that they no longer need.\u003c/p\u003e"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"* Search tasks using keyword"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eDuke can search the task list with keyword given by users.\u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"* Load and Store tasks"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eDuke will load task list from a specified file when launched and update any changes made by users to the file at real time. Hence, there will be no information loss when users terminate Duke and the state will resume when Duke is launched next time.\u003c/p\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eDuke uses command line to interact with users\u003c/p\u003e"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"#### The commands supported by Duke are"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"##### 1. List all tasks in current task list: `list`"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e  Display all tasks in current task list with the type, name and completion status.\u003c/p\u003e"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"* sample input "},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"  "},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        list"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"  "},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"        Here are the tasks in your list:"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"        1.[D][ ]return the book (by: Friday 10pm)"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"        2.[E][X]meeting (at: Sunday)"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"        3.[T][ ]do homework"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        4.[E][ ]hang out (at: 8pm)"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"#### 2. Add a new ToDo task: `todo \u003ctask name\u003e`"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Add a new ToDo task to task list. The task name should be specified after the command word \"todo\".\u003c/p\u003e"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"        todo read a book"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"        ToDo added:"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"            [T][ ]read a book"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"        Now you have 5 tasks in the list"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"#### 3. Add a new Deadline task: `deadline \u003ctask name\u003e /by \u003cdeadline of the task\u003e`"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Add a new Deadline task to task list. The task name should be specified after the command word \"deadline\". The name and deadline should be separated by \"/by\".\u003c/p\u003e"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":72,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"        deadline return the book /by Friday 10am"},{"lineNumber":74,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":75,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":76,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":77,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":"        Deadline added:"},{"lineNumber":79,"author":{"gitId":"PingruiLi"},"content":"            [D][ ]return the book (by: Friday 10am)"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"        Now you have 6 tasks in the list"},{"lineNumber":81,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":82,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":83,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":84,"author":{"gitId":"PingruiLi"},"content":"#### 4. Add a new Event task: `event \u003ctask name\u003e /at \u003cdeadline of the task\u003e`"},{"lineNumber":85,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Add a new Event task to task list. The task name should be specified after the command word \"evnt\". The name and time of the event should be separated by \"/at\".\u003c/p\u003e"},{"lineNumber":86,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":87,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":88,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":89,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":90,"author":{"gitId":"PingruiLi"},"content":"        event interview /at 8 Mar 1400"},{"lineNumber":91,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":92,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":93,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":94,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":95,"author":{"gitId":"PingruiLi"},"content":"        Event added:"},{"lineNumber":96,"author":{"gitId":"PingruiLi"},"content":"            [E][ ]interview (at: 8 Mar 1400)"},{"lineNumber":97,"author":{"gitId":"PingruiLi"},"content":"        Now you have 7 tasks in the list"},{"lineNumber":98,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":99,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":100,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":101,"author":{"gitId":"PingruiLi"},"content":"#### 5. Mark a task as done: `done \u003ctask index\u003e`"},{"lineNumber":102,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Mark a task as done by specifying the index of task after command word \"done\".\u003c/p\u003e"},{"lineNumber":103,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":104,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":105,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":106,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":107,"author":{"gitId":"PingruiLi"},"content":"        done 1"},{"lineNumber":108,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":109,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":110,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":111,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":112,"author":{"gitId":"PingruiLi"},"content":"        Nice! I\u0027ve marked this task as done:"},{"lineNumber":113,"author":{"gitId":"PingruiLi"},"content":"            [D][X]return the book (by: Friday 10pm)"},{"lineNumber":114,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":115,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":116,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":117,"author":{"gitId":"PingruiLi"},"content":"#### 6. Delete a task: ``delete \u003ctask index\u003e`"},{"lineNumber":118,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Delete a task from task list by specifying the index of task after command word \"delete\".\u003c/p\u003e"},{"lineNumber":119,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":120,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":121,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":122,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":123,"author":{"gitId":"PingruiLi"},"content":"        delete 1"},{"lineNumber":124,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":125,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":126,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":127,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":128,"author":{"gitId":"PingruiLi"},"content":"        Noted! I\u0027ve removed this task:"},{"lineNumber":129,"author":{"gitId":"PingruiLi"},"content":"            [D][X]return the book (by: Friday 10pm)"},{"lineNumber":130,"author":{"gitId":"PingruiLi"},"content":"        Now you have 6 tasks in the list."},{"lineNumber":131,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":132,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":133,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":134,"author":{"gitId":"PingruiLi"},"content":"#### 7. Search tasks: `find \u003ckeyword\u003e`"},{"lineNumber":135,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Search task list for tasks whose names contain the keyword. The keyword should be specified after command word \"find\".\u003c/p\u003e"},{"lineNumber":136,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003eNote that the index displayed in search result is the exact index of the task in the complete task list.\u003c/p\u003e"},{"lineNumber":137,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":138,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":139,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":140,"author":{"gitId":"PingruiLi"},"content":"        find book"},{"lineNumber":141,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":142,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":143,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":144,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":145,"author":{"gitId":"PingruiLi"},"content":"        Here are the matching tasks in your list:"},{"lineNumber":146,"author":{"gitId":"PingruiLi"},"content":"        4.[T][ ]read a book"},{"lineNumber":147,"author":{"gitId":"PingruiLi"},"content":"        5.[D][ ]return the book (by: Friday 10am)"},{"lineNumber":148,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":149,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":150,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":151,"author":{"gitId":"PingruiLi"},"content":"#### 8. Clear current task list: `clear`"},{"lineNumber":152,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Clear current task list.\u003c/p\u003e"},{"lineNumber":153,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":154,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":155,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":156,"author":{"gitId":"PingruiLi"},"content":"        clear"},{"lineNumber":157,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":158,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":159,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":160,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":161,"author":{"gitId":"PingruiLi"},"content":"        Noted! I\u0027ve removed all the tasks in current task list."},{"lineNumber":162,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":163,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":164,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":165,"author":{"gitId":"PingruiLi"},"content":"#### 9. View help message: `help`"},{"lineNumber":166,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Display help message.\u003c/p\u003e"},{"lineNumber":167,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":168,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":169,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":170,"author":{"gitId":"PingruiLi"},"content":"        help"},{"lineNumber":171,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":172,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":173,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":174,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":175,"author":{"gitId":"PingruiLi"},"content":"        Duke accepts the following commands:"},{"lineNumber":176,"author":{"gitId":"PingruiLi"},"content":"        1.list"},{"lineNumber":177,"author":{"gitId":"PingruiLi"},"content":"          List current task list"},{"lineNumber":178,"author":{"gitId":"PingruiLi"},"content":"        2.todo \u003ctask name\u003e"},{"lineNumber":179,"author":{"gitId":"PingruiLi"},"content":"          Add a new todo task to task list"},{"lineNumber":180,"author":{"gitId":"PingruiLi"},"content":"          Eg. todo do homework"},{"lineNumber":181,"author":{"gitId":"PingruiLi"},"content":"        3.deadline \u003ctask name\u003e /by \u003cdeadline\u003e"},{"lineNumber":182,"author":{"gitId":"PingruiLi"},"content":"          Add a new deadline to task list"},{"lineNumber":183,"author":{"gitId":"PingruiLi"},"content":"          Eg. deadline return a book /by tonight"},{"lineNumber":184,"author":{"gitId":"PingruiLi"},"content":"        4.event \u003ctask name\u003e /at \u003ctime\u003e"},{"lineNumber":185,"author":{"gitId":"PingruiLi"},"content":"          Add a new event to task list"},{"lineNumber":186,"author":{"gitId":"PingruiLi"},"content":"          Eg. event meeting /at 8pm"},{"lineNumber":187,"author":{"gitId":"PingruiLi"},"content":"        5.done \u003ctask index\u003e"},{"lineNumber":188,"author":{"gitId":"PingruiLi"},"content":"          Mark a task as done"},{"lineNumber":189,"author":{"gitId":"PingruiLi"},"content":"          Eg. done 1"},{"lineNumber":190,"author":{"gitId":"PingruiLi"},"content":"        6.delete \u003ctask index\u003e"},{"lineNumber":191,"author":{"gitId":"PingruiLi"},"content":"          Delete a task from task list"},{"lineNumber":192,"author":{"gitId":"PingruiLi"},"content":"          Eg. delete 2"},{"lineNumber":193,"author":{"gitId":"PingruiLi"},"content":"        7.find \u003ckeyword\u003e"},{"lineNumber":194,"author":{"gitId":"PingruiLi"},"content":"          Search task list for tasks whose names contain the keyword"},{"lineNumber":195,"author":{"gitId":"PingruiLi"},"content":"          Eg. find book"},{"lineNumber":196,"author":{"gitId":"PingruiLi"},"content":"        8.clear"},{"lineNumber":197,"author":{"gitId":"PingruiLi"},"content":"          Clear current task list"},{"lineNumber":198,"author":{"gitId":"PingruiLi"},"content":"        9.help"},{"lineNumber":199,"author":{"gitId":"PingruiLi"},"content":"          Show help message"},{"lineNumber":200,"author":{"gitId":"PingruiLi"},"content":"        10.bye"},{"lineNumber":201,"author":{"gitId":"PingruiLi"},"content":"          Terminate Duke"},{"lineNumber":202,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":203,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"PingruiLi"},"content":"#### 10. Terminate Duke: `bye`"},{"lineNumber":206,"author":{"gitId":"PingruiLi"},"content":"\u003cp\u003e Terminate Duke.\u003c/p\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"PingruiLi"},"content":"* sample input"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"PingruiLi"},"content":"        bye"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"PingruiLi"},"content":"* sample output"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"},{"lineNumber":215,"author":{"gitId":"PingruiLi"},"content":"        Bye. Hope to see you again soon!"},{"lineNumber":216,"author":{"gitId":"PingruiLi"},"content":"        ____________________________________________________________"}],"authorContributionMap":{"PingruiLi":206,"-":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import commandParser.CommandParser;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import command.Command;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import command.CommandResult;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import fileHandler.Storage;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import ui.Ui;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     * Set up Duke, create Ui, storage object. Load task list from the file."},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    private void start() {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        String sourceFilePath \u003d \"data\" + File.separator + \"task.txt\";"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            storage \u003d new Storage(sourceFilePath);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            tasks \u003d storage.getTaskList();"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        } catch (IOException e){"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            ui.showFileErrorMessage();"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            System.exit(0);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"     * Keep asking user for input, execute command and display result"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    private void runCommandLoopUntilExitCommand() {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        CommandParser parser \u003d new CommandParser();"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        Command command;"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        String userCommandText \u003d ui.getUserInput();"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"            while (!userCommandText.equals(\"bye\")) {"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"                command \u003d parser.parseCommand(userCommandText);"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"                command.setData(tasks);"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"                CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"                ui.printFeedback(result);"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"                storage.store(tasks);"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"                userCommandText \u003d ui.getUserInput();"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"        } catch (IOException e){"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"            ui.showStoreIssueMessage();"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"            System.exit(0);"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"    private void exit() {"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"        ui.showGoodbyeMessage();"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"        System.exit(0);"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"    public void run(){"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"        start();"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"        runCommandLoopUntilExitCommand();"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"        exit();"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"    public static void main(String[] args){"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"        new Duke().run();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":""}],"authorContributionMap":{"PingruiLi":68,"-":3}},{"path":"src/main/java/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of creating a new deadline task and adding it to the task list"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"public class AddDeadlineCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Name of deadline should be specified \" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"after keyword deadline. Name and the time to finish should be separated \" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            \"by \\\"/by\\\"\\n\" + PRE_SPACE + \"The syntax for adding a deadline task is:\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            \" \u003ctask name\u003e /by \u003cdeadline\u003e    Eg. deadline return a book /by tonight\";"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private Deadline newDeadline;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Deadline added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public AddDeadlineCommand(String name, String time){"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        newDeadline \u003d new Deadline(name, false, time);"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     * Adds the new deadline to task list."},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newDeadline);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d String.format(FEEDBACK_FORMAT, newDeadline.getTaskInfoForDisplay(), tasks.getTaskCount());"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":35}},{"path":"src/main/java/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.Event;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of creating a new event task and adding it to the task list"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"public class AddEventCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Name of event should be specified \" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"after keyword event. Name and the time should be separated \" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            \"by \\\"/at\\\"\\n\" + PRE_SPACE + \"The syntax for adding an event task is:\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            \" \u003ctask name\u003e /at \u003cevent time\u003e    Eg. event meeting /at 8pm\";"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private Event newEvent;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Event added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public AddEventCommand(String name, String time){"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        newEvent \u003d new Event(name, false, time);"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     * Adds the new event to task list."},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newEvent);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d String.format(FEEDBACK_FORMAT, newEvent.getTaskInfoForDisplay(), tasks.getTaskCount());"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":35}},{"path":"src/main/java/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of creating a new todo task and adding it to the task list"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public class AddTodoCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Name of Todo should be specified after todo keyword.\\n\" + PRE_SPACE +"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"            \"The syntax for adding a ToDo task is: todo \u003ctask name\u003e    Eg. todo do homework\";"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private ToDo newTodo;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"ToDo added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public AddTodoCommand(String todoName){"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        newTodo \u003d new ToDo(todoName, false);"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     * Adds the new todo to task list."},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newTodo);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d String.format(FEEDBACK_FORMAT, newTodo.getTaskInfoForDisplay(), tasks.getTaskCount());"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":32}},{"path":"src/main/java/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of removing all tasks in current task list"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class ClearCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private int taskIndex;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Noted! I\u0027ve removed all the tasks in current task list.\";"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public ClearCommand(){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d FEEDBACK_FORMAT;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * Clears current task list."},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     * @return feedback message of the command execution"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        tasks.clearTasks();"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":25}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Parent class of different command classes"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    protected TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    protected static String PRE_SPACE \u003d \"    \";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public static final String VALID_COMMAND_LIST \u003d \"Duke accepts the following commands:\\n\" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"    1.list\\n      List current task list\\n    2.todo \u003ctask name\u003e\\n\" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            \"      Add a new todo task to task list\\n      Eg. todo do homework\\n\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            \"    3.deadline \u003ctask name\u003e /by \u003cdeadline\u003e\\n\" +"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            \"      Add a new deadline to task list\\n      Eg. deadline return a book /by tonight\\n\" +"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"            \"    4.event \u003ctask name\u003e /at \u003ctime\u003e\\n      Add a new event to task list\\n\" +"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. event meeting /at 8pm\\n    5.done \u003ctask index\u003e\\n      Mark a task as done\\n\" +"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. done 1\\n    6.delete \u003ctask index\u003e\\n      Delete a task from task list\\n\" +"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. delete 2\\n    7.find \u003ckeyword\u003e\\n      Search task list for tasks whose names contain the keyword\\n\" +"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. find book\\n    8.clear\\n      Clear current task list\\n    9.help\\n      Show help message\\n\" +"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"            \"    10.bye\\n      Terminate Duke\";"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    protected String feedback;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    public abstract CommandResult execute();"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public void setData(TaskList tasks){"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":31}},{"path":"src/main/java/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Represents the result of command execution"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private String feedback;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    private TaskList relevantTasks;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult(String feedback){"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        this.relevantTasks \u003d null;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult(String feedback, TaskList tasks){"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        this.relevantTasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    public String getFeedback(){"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        return feedback;"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    public TaskList getRelevantTasks(){"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        return relevantTasks;"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":30}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of deleting a task from the task list"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Invalid input format for delete command.\\n\" + PRE_SPACE +"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"            \"The syntax for deleting a task from current task list is: delete \u003ctask index\u003e    Eg. delete 1\";"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private int taskIndex;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Noted! I\u0027ve removed this task:\\n\" + PRE_SPACE + PRE_SPACE  +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            \"%s\\n\" + PRE_SPACE + \"Now you have %s tasks in the list.\";"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    public DeleteCommand(int taskIndex){"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     * Deletes the specified task from task list."},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     * @return feedback message of the command execution"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            String taskInfo \u003d tasks.get(taskIndex).getTaskInfoForDisplay();"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            tasks.deleteTask(taskIndex);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"            feedback \u003d String.format(FEEDBACK_FORMAT, taskInfo, tasks.getTaskCount());"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(feedback);"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(\"The task index is out of bound.\");"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":35}},{"path":"src/main/java/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskAlreadyDoneException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" *  Represents a command of setting a task as done"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"public class DoneCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Invalid input format for done command.\\n\" + PRE_SPACE +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"The syntax for marking a task as done is: done \u003ctask index\u003e    Eg. done 1\";"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private int taskIndex;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public DoneCommand(int taskIndex){"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     * Sets the specified task as done."},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * @return feedback message of command execution"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"            tasks.setTaskDone(taskIndex);"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            feedback \u003d String.format(FEEDBACK_FORMAT, tasks.get(taskIndex).getTaskInfoForDisplay());"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(feedback);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(\"The task index is out of bound.\");"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        } catch (TaskAlreadyDoneException e){"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(e.toString());"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":38}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" * Represents the command of searching within task list"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class FindCommand extends Command{"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSAGE \u003d \"Invalid input format for find command.\\n\" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"The syntax for searching the task list for tasks whose names contain the \" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            \"keyword is: find \u003ckeyword\u003e    Eg. find book\";"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private String keyword;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public FindCommand(String keyword){"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d FEEDBACK_FORMAT;"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * Searches tasks whose names contain the keyword in task list."},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message and the list of tasks that satisfy the requirement"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        TaskList relevantTasks \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        Iterator\u003cTask\u003e iterator \u003d tasks.getIterator();"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        while(iterator.hasNext()){"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"            Task currentTask \u003d iterator.next();"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"            if(currentTask.getName().contains(keyword)){"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"                relevantTasks.addTask(currentTask);"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"                relevantTasks.addTask(null);"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback, relevantTasks);"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":42}},{"path":"src/main/java/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents the command of displaying help message"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class HelpCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private static final String PRE_SPACE \u003d \"    \";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d VALID_COMMAND_LIST;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public HelpCommand(){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d FEEDBACK_FORMAT;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":19}},{"path":"src/main/java/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents an invalid command whose format is invalid"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class InvalidCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String ERROR_MESSGAE \u003d \"The command input is invalid.\\n\" + PRE_SPACE + VALID_COMMAND_LIST;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    //private String feedback;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(){"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d ERROR_MESSGAE;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(String errorMessage){"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d errorMessage;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback);"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":22}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a command of listing all items in task list"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class ListCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d \"Here are the tasks in your list:\";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public ListCommand(){"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"        feedback \u003d FEEDBACK_FORMAT;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedback, tasks);"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":18}},{"path":"src/main/java/commandParser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package commandParser;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import command.*;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" * Represent the parser to handle the use input command"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class CommandParser {"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public CommandParser(){}"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"     * Classifies command based on the command word."},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * @param input string of user input"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * @return command object corresponding to user input"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public Command parseCommand(String input) {"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        if (input.trim().equalsIgnoreCase(ListCommand.COMMAND_WORD)) {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"            return new ListCommand();"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        } else if(input.trim().equalsIgnoreCase(HelpCommand.COMMAND_WORD)){"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"            return new HelpCommand();"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        } else if(input.trim().equalsIgnoreCase(ClearCommand.COMMAND_WORD)){"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            return new ClearCommand();"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        String[] inputParts \u003d input.trim().split(\"\\\\s+\", 2);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        switch (inputParts[0].toLowerCase(Locale.ROOT)) {"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        case AddTodoCommand.COMMAND_WORD:"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddTodo(inputParts);"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        case AddDeadlineCommand.COMMAND_WORD:"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddDeadline(inputParts);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddEvent(inputParts);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"            return prepareDone(inputParts);"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"            return prepareDelete(inputParts);"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"            return prepareFind(inputParts);"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"        default:"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand();"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of a find command."},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareFind(String[] inputParts){"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        if(inputParts.length \u003c 2){"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(FindCommand.ERROR_MESSAGE);"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"        return new FindCommand(inputParts[1]);"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of a done command."},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareDone(String[] inputParts){"},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"                return new InvalidCommand(DoneCommand.ERROR_MESSAGE);"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":"            String index \u003d inputParts[1];"},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":72,"author":{"gitId":"PingruiLi"},"content":"            return new DoneCommand(indexInt);"},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":74,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(DoneCommand.ERROR_MESSAGE);"},{"lineNumber":75,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":77,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":79,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of a delete command."},{"lineNumber":81,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":83,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":84,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareDelete(String[] inputParts){"},{"lineNumber":86,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":87,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":88,"author":{"gitId":"PingruiLi"},"content":"                return new InvalidCommand(DeleteCommand.ERROR_MESSAGE);"},{"lineNumber":89,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"PingruiLi"},"content":"            String index \u003d inputParts[1];"},{"lineNumber":91,"author":{"gitId":"PingruiLi"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":92,"author":{"gitId":"PingruiLi"},"content":"            return new DeleteCommand(indexInt);"},{"lineNumber":93,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":94,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(DeleteCommand.ERROR_MESSAGE);"},{"lineNumber":95,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":98,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of adding a new ToDo task command."},{"lineNumber":100,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":102,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":103,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddTodo(String[] inputParts) {"},{"lineNumber":105,"author":{"gitId":"PingruiLi"},"content":"        if(inputParts.length \u003c 2){"},{"lineNumber":106,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddTodoCommand.ERROR_MESSAGE);"},{"lineNumber":107,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"PingruiLi"},"content":"        String todoName \u003d inputParts[1];"},{"lineNumber":109,"author":{"gitId":"PingruiLi"},"content":"        if (todoName.equals(\"\")) {"},{"lineNumber":110,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddTodoCommand.ERROR_MESSAGE);"},{"lineNumber":111,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"PingruiLi"},"content":"        return new AddTodoCommand(todoName);"},{"lineNumber":113,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":115,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of adding a new deadline task command."},{"lineNumber":117,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":119,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":120,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddDeadline(String[] inputParts){"},{"lineNumber":122,"author":{"gitId":"PingruiLi"},"content":"        if(inputParts.length \u003c 2){"},{"lineNumber":123,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddDeadlineCommand.ERROR_MESSAGE);"},{"lineNumber":124,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"PingruiLi"},"content":"        String taskInfo \u003d inputParts[1];"},{"lineNumber":126,"author":{"gitId":"PingruiLi"},"content":"        if (taskInfo.equals(\"\")) {"},{"lineNumber":127,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddDeadlineCommand.ERROR_MESSAGE);"},{"lineNumber":128,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"PingruiLi"},"content":"        String[] deadlineNameDoby \u003d taskInfo.split(\"/by\");"},{"lineNumber":130,"author":{"gitId":"PingruiLi"},"content":"        boolean hasFewerPatrs \u003d deadlineNameDoby.length \u003c 2;"},{"lineNumber":131,"author":{"gitId":"PingruiLi"},"content":"        if (hasFewerPatrs) {"},{"lineNumber":132,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddDeadlineCommand.ERROR_MESSAGE);"},{"lineNumber":133,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"PingruiLi"},"content":"        boolean hasEmptyName \u003d deadlineNameDoby[0].equals(\"\") || deadlineNameDoby[0].equals(\"\\\\s+\");"},{"lineNumber":135,"author":{"gitId":"PingruiLi"},"content":"        boolean hasEmptyTime \u003d deadlineNameDoby[1].equals(\"\") || deadlineNameDoby[1].equals(\"\\\\s+\");"},{"lineNumber":136,"author":{"gitId":"PingruiLi"},"content":"        if(hasEmptyName || hasEmptyTime){"},{"lineNumber":137,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddDeadlineCommand.ERROR_MESSAGE);"},{"lineNumber":138,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"PingruiLi"},"content":"        String deadlineName \u003d deadlineNameDoby[0].trim();"},{"lineNumber":140,"author":{"gitId":"PingruiLi"},"content":"        String deadlineDoby \u003d deadlineNameDoby[1].trim();"},{"lineNumber":141,"author":{"gitId":"PingruiLi"},"content":"        return new AddDeadlineCommand(deadlineName, deadlineDoby);"},{"lineNumber":142,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":144,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"PingruiLi"},"content":"     * Checks validity of adding a new event task command."},{"lineNumber":146,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":148,"author":{"gitId":"PingruiLi"},"content":"     * @return a Command object"},{"lineNumber":149,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddEvent(String[] inputParts){"},{"lineNumber":151,"author":{"gitId":"PingruiLi"},"content":"        if(inputParts.length \u003c 2){"},{"lineNumber":152,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddEventCommand.ERROR_MESSAGE);"},{"lineNumber":153,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"PingruiLi"},"content":"        String taskInfo \u003d inputParts[1];"},{"lineNumber":155,"author":{"gitId":"PingruiLi"},"content":"        if (taskInfo.equals(\"\")) {"},{"lineNumber":156,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddEventCommand.ERROR_MESSAGE);"},{"lineNumber":157,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"PingruiLi"},"content":"        String[] eventNameTime \u003d taskInfo.split(\"/at\");"},{"lineNumber":159,"author":{"gitId":"PingruiLi"},"content":"        boolean hasFewerPatrs \u003d eventNameTime.length \u003c 2;"},{"lineNumber":160,"author":{"gitId":"PingruiLi"},"content":"        if (hasFewerPatrs) {"},{"lineNumber":161,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddEventCommand.ERROR_MESSAGE);"},{"lineNumber":162,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"PingruiLi"},"content":"        boolean hasEmptyName \u003d eventNameTime[0].equals(\"\") || eventNameTime[0].equals(\"\\\\s+\");"},{"lineNumber":164,"author":{"gitId":"PingruiLi"},"content":"        boolean hasEmptyTime \u003d eventNameTime[1].equals(\"\") || eventNameTime[1].equals(\"\\\\s+\");"},{"lineNumber":165,"author":{"gitId":"PingruiLi"},"content":"        if(hasEmptyName || hasEmptyTime){"},{"lineNumber":166,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(AddEventCommand.ERROR_MESSAGE);"},{"lineNumber":167,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"PingruiLi"},"content":"        String eventName \u003d eventNameTime[0].trim();"},{"lineNumber":169,"author":{"gitId":"PingruiLi"},"content":"        String eventTime \u003d eventNameTime[1].trim();"},{"lineNumber":170,"author":{"gitId":"PingruiLi"},"content":"        return new AddEventCommand(eventName, eventTime);"},{"lineNumber":171,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":172}},{"path":"src/main/java/exception/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents the Exception that occurs when the user wants to mark a task that is done before as done again."},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class TaskAlreadyDoneException extends RuntimeException{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    public TaskAlreadyDoneException(){}"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        return \"The task is already marked as done\";"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":14}},{"path":"src/main/java/fileHandler/FileTaskReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.Deadline;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import task.Event;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":" * Represents the handler that processes the text file and converts the content to a task list"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"public class FileTaskReader {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private File source;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public final static String SEPERATOR \u003d \" \\\\| \";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public FileTaskReader(File file) {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        source \u003d file;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     * Converts the content of the file into a task list."},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * @return the task list"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     * @throws FileNotFoundException if the file doesn\u0027t exist"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    public ArrayList\u003cTask\u003e parseToArraylist() throws FileNotFoundException {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        Scanner sc \u003d new Scanner(source);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        while(sc.hasNext()) {"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"            String currentLine \u003d sc.nextLine();"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            String[] taskParts \u003d currentLine.split(SEPERATOR);"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"            switch (taskParts[0]) {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            case \"T\":"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new ToDo(taskParts[2], false));"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"            case \"D\":"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new Deadline(taskParts[2], false, taskParts[3]));"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"            case \"E\":"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new Event(taskParts[2], false, taskParts[3]));"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"            default:"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"                System.out.println(\"Unable to recognize input format: \" + currentLine);"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"            if(taskParts[1].equals(\"1\")) {"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"                tasks.get(tasks.size()-1).setDone(true);"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"        return tasks;"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":57}},{"path":"src/main/java/fileHandler/FileTaskWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" * Represents the handler that update current task list to the text file"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"public class FileTaskWriter {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private String filePath;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    public FileTaskWriter(String path) {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        filePath \u003d path;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"     * Stores the current task list to the text file."},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     * @param taskList"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * @throws IOException if there is problem accessing or writing to the file"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    public void storeToFile(TaskList taskList) throws IOException {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        String string \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        for(Task task : tasks) {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"            string +\u003d task.getTaskInfoForStorage();"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"            string +\u003d \"\\n\";"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        fileWriter.write(string);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"        fileWriter.close();"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":37}},{"path":"src/main/java/fileHandler/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":" * A class that deals with loading from and storing to the text file"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private FileTaskReader fileTaskReader;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private FileTaskWriter fileTaskWriter;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private File source;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        source \u003d new File(filePath);"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        if (!source.exists()) {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"            if (!source.getParentFile().exists()) {"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"                source.getParentFile().mkdirs();"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"                source.createNewFile();"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        fileTaskWriter \u003d new FileTaskWriter(filePath);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        fileTaskReader \u003d new FileTaskReader(source);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    public TaskList getTaskList() throws FileNotFoundException {"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        return new TaskList(fileTaskReader.parseToArraylist());"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    public void store(TaskList tasks) throws IOException{"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        fileTaskWriter.storeToFile(tasks);"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":39}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a task which has a deadline"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    private static final String TASK_INFO_DISPLAY_FORMAT \u003d \"[D][%s]%s (by: %s)\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private static final String TASK_INFO_STORAGE_FORMAT \u003d \"D | %s | %s | %s\";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private String doBefore;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public Deadline(String name, boolean isDone, String doBefore){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        this.doBefore \u003d doBefore;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of a deadline task in certain format for displaying."},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for displaying"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForDisplay(){"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\"X\",taskName,doBefore);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\" \",taskName,doBefore);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of a deadline task in certain format for storing in file."},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for storage"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForStorage(){"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"1\",taskName,doBefore);"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"0\",taskName,doBefore);"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":43}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a task that happens at specified time"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    private static final String TASK_INFO_DISPLAY_FORMAT \u003d \"[E][%s]%s (at: %s)\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private static final String TASK_INFO_STORAGE_FORMAT \u003d \"E | %s | %s | %s\";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private String duration;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public Event(String name, boolean isDone, String duration){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        this.duration \u003d duration;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of an event task in certain format for displaying."},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for displaying"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForDisplay(){"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\"X\",taskName,duration);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\" \",taskName,duration);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of an event task in certain format for storing in file."},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for storage"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForStorage() {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"1\",taskName,duration);"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"0\",taskName,duration);"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":43}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents the parent class for different types of tasks"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    protected String taskName;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    protected boolean taskDone;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_FORMAT \u003d \"[ ][%s]%s\";"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String LINE_SEPERATOR \u003d \"    ____________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public Task(String name, boolean done) {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        taskName \u003d name;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        taskDone \u003d done;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public String getName() {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        return taskName;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public boolean getDone() {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        return taskDone;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    public void setName(String name) {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        taskName \u003d name;"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    public void setDone(boolean done){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        taskDone \u003d done;"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    public abstract String getTaskInfoForDisplay();"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForStorage(){"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        return \"\";"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":39}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskAlreadyDoneException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" * Represents a list of different types of tasks"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public ArrayList\u003cTask\u003e getTasks(){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        return tasks;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    public int getTaskCount(){"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        return tasks.size();"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    public void addTask(Task task){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        tasks.add(task);"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public Iterator\u003cTask\u003e getIterator(){"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        return tasks.iterator();"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"     * Marks the task at given index as done."},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"     * @param index index of the task"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"     * @throws IndexOutOfBoundsException if the index is out of bound"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"     * @throws TaskAlreadyDoneException if the task at given index was marked as done before"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"    public void setTaskDone(int index) throws IndexOutOfBoundsException, TaskAlreadyDoneException {"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        if(tasks.get(index).getDone()){"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"            throw new TaskAlreadyDoneException();"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"        tasks.get(index).setDone(true);"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"    public Task get(int index){"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        return tasks.get(index);"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"     * Deletes the task at given index."},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":"     * @param index index of the task"},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"     * @throws IndexOutOfBoundsException if the index is out of bound"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"    public void deleteTask(int index) throws IndexOutOfBoundsException{"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"        tasks.remove(index);"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"    public void clearTasks(){"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"        tasks.clear();"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":70}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represents a To Do task"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    private static final String TASK_INFO_DISPLAY_FORMAT \u003d \"[T][%s]%s\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_STORAGE_FORMAT \u003d \"T | %s | %s\";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public ToDo(String name, boolean isDone){"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of a ToDo task in certain format for displaying."},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for displaying"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForDisplay(){"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\"X\",taskName);"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_DISPLAY_FORMAT,\" \",taskName);"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     * Gets the information of a ToDo task in certain format for storing in file."},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for storage"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfoForStorage(){"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"1\",taskName);"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_STORAGE_FORMAT,\"0\",taskName);"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":40}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import command.CommandResult;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":" * A class for getting user input and displaying messages to user"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private static final String LOGO \u003d \" ____        _\\n\""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    private static final String LINE_SEPARATOR \u003d \"    ____________________________________________________________\\n\";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    private static final String PRE_SPACE \u003d \"    \";"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    private Scanner sc;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    public Ui(){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public void showWelcomeMessage(){"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        System.out.println(PRE_SPACE + \"Hello from\\n\" + LOGO);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR +"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"                 PRE_SPACE + \"Hello! I\u0027m Duke\\n\" + PRE_SPACE +"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"                \"What can I do for you?\\n\" +"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"                LINE_SEPARATOR);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    public String getUserInput(){"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        return sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"     * Displays the feedback of a command."},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"     * @param result"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"    public void printFeedback(CommandResult result){"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR);"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        System.out.println(PRE_SPACE + result.getFeedback());"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"        if(result.getRelevantTasks() \u003d\u003d null){"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"            System.out.print(LINE_SEPARATOR);"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"            return;"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"        Iterator\u003cTask\u003e taskIterator \u003d result.getRelevantTasks().getIterator();"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"        int count \u003d 1;"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        while(taskIterator.hasNext()){"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"            Task currentTask \u003d taskIterator.next();"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"            if(currentTask !\u003d null){"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"                System.out.println(PRE_SPACE + count + \".\" + currentTask.getTaskInfoForDisplay());"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"            count++;"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR);"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"     * Display error message when the file can\u0027t be accessed."},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"    public void showFileErrorMessage(){"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(PRE_SPACE + \"The file can\u0027t be loaded, please check\" +"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"                \"and rebuild Duke\\n\" + LINE_SEPARATOR);"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"PingruiLi"},"content":"     * Displays error message when the file can\u0027t be written to."},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"PingruiLi"},"content":"    public void showStoreIssueMessage(){"},{"lineNumber":75,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(PRE_SPACE + \"The tasks can\u0027t be correctly stored back to \" +"},{"lineNumber":76,"author":{"gitId":"PingruiLi"},"content":"                \"the file, please check the setting and try again.\\n\" + LINE_SEPARATOR);"},{"lineNumber":77,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":79,"author":{"gitId":"PingruiLi"},"content":"    public void showGoodbyeMessage(){"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR +"},{"lineNumber":81,"author":{"gitId":"PingruiLi"},"content":"                \"    Bye. Hope to see you again soon!\" +"},{"lineNumber":82,"author":{"gitId":"PingruiLi"},"content":"                \"\\n\" + LINE_SEPARATOR);"},{"lineNumber":83,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":84}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"help"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"todo read a book"},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"deadline return a book /by Sunday 10am"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"event"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"event join concert / at tomorrow"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"event tutorial /at Feb 5 10am"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"deadline do online quiz Tuesday 10pm"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"blah"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"find book"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"delete"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"delete 1"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"done 2"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"delete 2"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"bye"}],"authorContributionMap":{"PingruiLi":24}}]
