[{"path":"data/task.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"E | 0 | meeting | thursay"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"T | 0 | sleep"}],"authorContributionMap":{"PingruiLi":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"# User Guide for Duke"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"### By Li Pingrui  "},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"* Record different types of tasks"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"Duke can record tasks in the form of ToDo, Deadline and Event. As the name suggests, ToDos are normal tasks, Deadlines are tasks that must be finished within certain time limits,  Events are tasks that will happen at certain time."},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"* Mark tasks as done and delete tasks"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"Duke can help users to mark the tasks they have done and delete tasks that users no longer need."},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"* Search tasks using keyword"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"Duke can search the task list with keyword given by users."},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"* Load and Store tasks"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"Duke will load task list from a specified file when launched and store any changes user made to the file for storage. Hence, there will be no information loss when users terminate Duke and the state will resume when Duke is launched next time."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"### Duke uses command line to interact with users"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"### The command supported by Duke are"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"#### 1.`todo \u003ctask name\u003e`"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"Add a todo task to the list."},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `todo read a book`"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"#### 2.`deadline \u003ctask name\u003e /by \u003cdeadline of the task\u003e`"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"Add a deadline task to the list. The task name and deadline are separated by \"/by\"."},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `deadline return a book /by Friday 10am`"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"#### 3.`event \u003ctask name\u003e /at \u003ctime of the task\u003e`"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"Add an event task to the list. The task name and time are separated by \"/at\"."},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `event meeting /at Friday 10am`"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"#### 4.`done \u003ctask index in task list\u003e`"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"Mark a task as done. The index is the index of the task in the current complete task list."},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `done 1`"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"#### 5.`delete \u003ctask index in task list\u003e`"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"Delete a task. The index is the index of the task in the current complete task list."},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `delete 1`"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"#### 6.`find \u003ckeyword\u003e`"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"Search task list with the keyword. Tasks whose name contains the keyword will be displayed."},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"*Eg.* `search book`"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"#### 7.`list`"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"list current task list."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"#### 8.`bye`"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"Terminate Duke."}],"authorContributionMap":{"PingruiLi":41,"-":11}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import commandParser.CommandParser;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import command.Command;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import command.CommandResult;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import fileHandler.Storage;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import ui.Ui;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     * Set up Duke, create Ui, storage object. Load task list from the file"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    private void start() {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        String sourceFilePath \u003d \"data\" + File.separator + \"task.txt\";"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            storage \u003d new Storage(sourceFilePath);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            tasks \u003d storage.getTaskList();"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        } catch (IOException e){"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            ui.showFileErrorMessage();"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            System.exit(0);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"     * Keep asking user input, execute command and display result"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    private void runCommandLoopUntilExitCommand() {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        CommandParser parser \u003d new CommandParser();"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        Command command;"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"        String userCommandText \u003d ui.getUserInput();"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"            while (!userCommandText.equals(\"bye\")) {"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"                command \u003d parser.parseCommand(userCommandText);"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"                command.setData(tasks);"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"                CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"                ui.printFeedback(result);"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"                storage.store(tasks);"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"                userCommandText \u003d ui.getUserInput();"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"        } catch (IOException e){"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"            ui.showStoreIssueMessage();"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"            System.exit(0);"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"    private void exit() {"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"        ui.showGoodbyeMessage();"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"        System.exit(0);"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"    public void run() throws IOException {"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"        start();"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"        runCommandLoopUntilExitCommand();"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"        exit();"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"        new Duke().run();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":""}],"authorContributionMap":{"PingruiLi":68,"-":3}},{"path":"src/main/java/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskFormatException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import exception.TodoFormatException;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import task.Deadline;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":" * Represent a command of creating a new deadline task and adding it to the task list"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"public class AddDeadlineCommand extends Command{"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private Deadline newDeadline;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Deadline added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public AddDeadlineCommand(String name, String time){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        newDeadline \u003d new Deadline(name, false, time);"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     * add the new deadline to task list"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newDeadline);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        feedbackFormat \u003d String.format(FEEDBACK_FORMAT, newDeadline.getTaskInfo(), tasks.getTaskCount());"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedbackFormat);"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":35}},{"path":"src/main/java/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.DeadlineFormatException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.EventFormatException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskFormatException;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import task.Deadline;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import task.Event;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"import javax.swing.*;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":" * Represent a command of creating a new event task and adding it to the task list"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"public class AddEventCommand extends Command{"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private Event newEvent;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Event added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    public AddEventCommand(String name, String time){"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        newEvent \u003d new Event(name, false, time);"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * add the new event to task list"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newEvent);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        feedbackFormat \u003d String.format(FEEDBACK_FORMAT, newEvent.getTaskInfo(), tasks.getTaskCount());"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedbackFormat);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":36}},{"path":"src/main/java/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskFormatException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.TodoFormatException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":" * Represent a command of creating a new todo task and adding it to the task list"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class AddTodoCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private ToDo newTodo;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"ToDo added:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\\n\" +"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"            PRE_SPACE + \"Now you have %s tasks in the list\";"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public AddTodoCommand(String todoName){"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        newTodo \u003d new ToDo(todoName, false);"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     * add the new todo to task list"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * @return the feedback message of execution"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        tasks.addTask(newTodo);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        feedbackFormat \u003d String.format(FEEDBACK_FORMAT, newTodo.getTaskInfo(), tasks.getTaskCount());"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedbackFormat);"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":32}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * the parent class of different command class."},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    protected TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    protected static String PRE_SPACE \u003d \"    \";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public abstract CommandResult execute();"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    public void setData(TaskList tasks){"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":19}},{"path":"src/main/java/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":" * Represent the result of command execution"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class CommandResult {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private String feedback;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private TaskList relevantTasks;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult(String feedback){"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        this.relevantTasks \u003d null;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult(String feedback, TaskList tasks){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        this.relevantTasks \u003d tasks;"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    public String getFeedback(){"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        return feedback;"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    public TaskList getRelevantTasks(){"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        return relevantTasks;"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":34}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskAlreadyDoneException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Represent a command of deleting a task from the task list"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    private int taskIndex;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Noted! I\u0027ve removed this task:\\n\" + PRE_SPACE + PRE_SPACE  +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"%s\\n\" + PRE_SPACE + \"Now you have %s tasks in the list.\";"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    public DeleteCommand(int taskIndex){"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"     * delete the specified task from task list."},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     * @return feedback message of the command execution"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            String taskInfo \u003d tasks.get(taskIndex).getTaskInfo();"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            tasks.deleteTask(taskIndex);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            feedbackFormat \u003d String.format(FEEDBACK_FORMAT, taskInfo, tasks.getTaskCount());"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(feedbackFormat);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(\"The task index is out of bound.\");"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":33}},{"path":"src/main/java/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.DoneFormatException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskAlreadyDoneException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" *  Represent a command of setting a task as done"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class DoneCommand extends Command{"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    private int taskIndex;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private final String FEEDBACK_FORMAT \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + PRE_SPACE + PRE_SPACE + \"%s\";"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    public DoneCommand(int taskIndex){"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     * Set the specified task as done"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"     * @return feedback message of command execution"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            tasks.setTaskDone(taskIndex);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"            feedbackFormat \u003d String.format(FEEDBACK_FORMAT, tasks.get(taskIndex).getTaskInfo());"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(feedbackFormat);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(\"The task index is out of bound.\");"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        } catch (TaskAlreadyDoneException e){"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"            return new CommandResult(e.toString());"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":35}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import fileHandler.FileHandler;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"public class FindCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    private String keyword;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    public FindCommand(String keyword){"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        TaskList relevantTasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        Iterator\u003cTask\u003e iterator \u003d tasks.getIterator();"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        while(iterator.hasNext()){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"            Task currentTask \u003d iterator.next();"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"            if(currentTask.getName().contains(keyword)){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"                relevantTasks.addTask(currentTask);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedbackFormat,relevantTasks);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":29}},{"path":"src/main/java/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class HelpCommand extends Command{"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"    private static final String PRE_SPACE \u003d \"    \";"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d \"Duke accepts the following command:\\n\" +"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"            \"    1.list\\n      List current task list\\n    2.todo \u003ctask name\u003e\\n\" +"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"            \"      Add a new todo task to task list\\n      Eg. todo do homework\\n\" +"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"            \"    3.deadline \u003ctask name\u003e /by \u003cdeadline\u003e\\n\" +"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"            \"      Add a new deadline to task list\\n      Eg. deadline return a book /by tonight\\n\" +"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"            \"    4.event \u003ctask name\u003e /at \u003ctime\u003e\\n      Add a new event to task list\\n\" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. event meeting /at 8pm\\n    5.done \u003ctask index\u003e\\n      Mark a task as done\\n\" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. done 1\\n    6.delete \u003ctask index\u003e\\n      Delete a task from task list\\n\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. delete 2\\n    7.find \u003ckeyword\u003e\\n      Search task list for tasks whose names contain the keyword\\n\" +"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            \"      Eg. find book\\n    8.help\\n      Show help message\";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(FEEDBACK_FORMAT);"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":21}},{"path":"src/main/java/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskFormatException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":" * Represent an invalid command whose format is incorrect"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"public class InvalidCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    private RuntimeException exception;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    private String feedbackFormat;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(){}"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommand(RuntimeException e){"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"        exception \u003d e;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"        feedbackFormat \u003d e.toString();"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"     * @return the error message of the specified type of error"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(feedbackFormat);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":26}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represent a command of listing all items in task list"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class ListCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private static final String FEEDBACK_FORMAT \u003d \"Here are the tasks in your list:\";"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public CommandResult execute(){"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        return new CommandResult(FEEDBACK_FORMAT, tasks);"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":14}},{"path":"src/main/java/commandParser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package commandParser;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import command.*;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import exception.*;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":" * Represent the parser to handle the use input command"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":" * the parser will check the validity of the parameters for different commands"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"public class CommandParser {"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    public CommandParser(){}"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    private final String LINE_SEPERATOR \u003d \"    ________________________________________________\\n\";"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"     * classify command based on the command word"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * @param input user input"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * @return return a command object corresponding to user input, return an InvalidCommand object if the command is not recognizable"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public Command parseCommand(String input) {"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        if (input.trim().equals(\"list\")) {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"            return new ListCommand();"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        if(input.trim().equals(\"help\")){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            return new HelpCommand();"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        String[] inputParts \u003d input.trim().split(\"\\\\s+\", 2);"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        switch (inputParts[0]) {"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        case \"todo\":"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddTodo(inputParts);"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        case \"deadline\":"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddDeadline(inputParts);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        case \"event\":"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"            return prepareAddEvent(inputParts);"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        case \"done\":"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return prepareDone(inputParts);"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        case \"delete\":"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            return prepareDelete(inputParts);"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        case \"find\":"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"            return prepareFind(inputParts);"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        default:"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(new InvalidCommandException());"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"     * Check validity of parameters for done command. The parameter should be in Integer format."},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"     * The index should be within the bound."},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"     * @return a DoneCommand object if the parameter is valid, an InvalidCommand object if the second parameter is invalid"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareFind(String[] inputParts){"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"                throw new FindFormatException();"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"            return new FindCommand(inputParts[1]);"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"        } catch (FindFormatException e){"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e);"},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareDone(String[] inputParts){"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":"                throw new DoneFormatException();"},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":"            String index \u003d inputParts[1];"},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":"            return new DoneCommand(indexInt);"},{"lineNumber":72,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(new DoneFormatException());"},{"lineNumber":74,"author":{"gitId":"PingruiLi"},"content":"        } catch (DoneFormatException e){"},{"lineNumber":75,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e);"},{"lineNumber":76,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":79,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"     * Check validity of parameters for delete command. The parameter should be in Integer format."},{"lineNumber":81,"author":{"gitId":"PingruiLi"},"content":"     * The index should be within the bound."},{"lineNumber":82,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":83,"author":{"gitId":"PingruiLi"},"content":"     * @return a DeleteCommand object if the parameter is valid, an InvalidCommand object if the second parameter is invalid,"},{"lineNumber":84,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareDelete(String[] inputParts){"},{"lineNumber":86,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":87,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":88,"author":{"gitId":"PingruiLi"},"content":"                throw new DeleteFormatException();"},{"lineNumber":89,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"PingruiLi"},"content":"            String index \u003d inputParts[1];"},{"lineNumber":91,"author":{"gitId":"PingruiLi"},"content":"            int indexInt \u003d Integer.parseInt(index) - 1;"},{"lineNumber":92,"author":{"gitId":"PingruiLi"},"content":"            return new DeleteCommand(indexInt);"},{"lineNumber":93,"author":{"gitId":"PingruiLi"},"content":"        } catch (DeleteFormatException e){"},{"lineNumber":94,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e);"},{"lineNumber":95,"author":{"gitId":"PingruiLi"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":96,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(new DeleteFormatException());"},{"lineNumber":97,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":100,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"PingruiLi"},"content":"     * Check validity of parameters for adding a new to do task command."},{"lineNumber":102,"author":{"gitId":"PingruiLi"},"content":"     * The parameter should be the name of the to do."},{"lineNumber":103,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":104,"author":{"gitId":"PingruiLi"},"content":"     * @return a AddTodoCommand object if the parameter is valid, an InvalidCommand object if the parameter is invalid,"},{"lineNumber":105,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddTodo(String[] inputParts) {"},{"lineNumber":107,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":108,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":109,"author":{"gitId":"PingruiLi"},"content":"                throw new TodoFormatException();"},{"lineNumber":110,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"PingruiLi"},"content":"            String taskInfo \u003d inputParts[1];"},{"lineNumber":112,"author":{"gitId":"PingruiLi"},"content":"            if (taskInfo.equals(\"\")) {"},{"lineNumber":113,"author":{"gitId":"PingruiLi"},"content":"                throw new TodoFormatException();"},{"lineNumber":114,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"PingruiLi"},"content":"            return new AddTodoCommand(taskInfo);"},{"lineNumber":116,"author":{"gitId":"PingruiLi"},"content":"        } catch (TodoFormatException e){"},{"lineNumber":117,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e);"},{"lineNumber":118,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":121,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"PingruiLi"},"content":"     * Check validity of parameters for adding a new deadline task command."},{"lineNumber":123,"author":{"gitId":"PingruiLi"},"content":"     * The parameter should be the task name and time separated by \"/by\"."},{"lineNumber":124,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":125,"author":{"gitId":"PingruiLi"},"content":"     * @return a AddDeadlineCommand object if the parameter is valid, an InvalidCommand object if the parameter is invalid,"},{"lineNumber":126,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddDeadline(String[] inputParts){"},{"lineNumber":128,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":129,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":130,"author":{"gitId":"PingruiLi"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":131,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"PingruiLi"},"content":"            String taskInfo \u003d inputParts[1];"},{"lineNumber":133,"author":{"gitId":"PingruiLi"},"content":"            if (taskInfo.equals(\"\")) {"},{"lineNumber":134,"author":{"gitId":"PingruiLi"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":135,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"PingruiLi"},"content":"            String[] deadlineNameDoby \u003d taskInfo.split(\"/by\");"},{"lineNumber":137,"author":{"gitId":"PingruiLi"},"content":"            boolean hasFewerPatrs \u003d deadlineNameDoby.length \u003c 2;"},{"lineNumber":138,"author":{"gitId":"PingruiLi"},"content":"            if (hasFewerPatrs) {"},{"lineNumber":139,"author":{"gitId":"PingruiLi"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":140,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"PingruiLi"},"content":"            boolean hasEmptyName \u003d deadlineNameDoby[0].equals(\"\") || deadlineNameDoby[0].equals(\"\\\\s+\");"},{"lineNumber":142,"author":{"gitId":"PingruiLi"},"content":"            boolean hasEmptyTime \u003d deadlineNameDoby[1].equals(\"\") || deadlineNameDoby[1].equals(\"\\\\s+\");"},{"lineNumber":143,"author":{"gitId":"PingruiLi"},"content":"            if(hasEmptyName || hasEmptyTime){"},{"lineNumber":144,"author":{"gitId":"PingruiLi"},"content":"                throw new DeadlineFormatException();"},{"lineNumber":145,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"PingruiLi"},"content":"            String deadlineName \u003d deadlineNameDoby[0].trim();"},{"lineNumber":147,"author":{"gitId":"PingruiLi"},"content":"            String deadlineDoby \u003d deadlineNameDoby[1].trim();"},{"lineNumber":148,"author":{"gitId":"PingruiLi"},"content":"            return new AddDeadlineCommand(deadlineName, deadlineDoby);"},{"lineNumber":149,"author":{"gitId":"PingruiLi"},"content":"        } catch (DeadlineFormatException e){"},{"lineNumber":150,"author":{"gitId":"PingruiLi"},"content":"            return new InvalidCommand(e);"},{"lineNumber":151,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":154,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"PingruiLi"},"content":"     * Check validity of parameters for adding a new event task command."},{"lineNumber":156,"author":{"gitId":"PingruiLi"},"content":"     * The parameter should be the task name and time separated by \"/at\"."},{"lineNumber":157,"author":{"gitId":"PingruiLi"},"content":"     * @param inputParts"},{"lineNumber":158,"author":{"gitId":"PingruiLi"},"content":"     * @return a AddEventCommand object if the parameter is valid, an InvalidCommand object if the parameter is invalid,"},{"lineNumber":159,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"PingruiLi"},"content":"    private Command prepareAddEvent(String[] inputParts){"},{"lineNumber":161,"author":{"gitId":"PingruiLi"},"content":"        try{"},{"lineNumber":162,"author":{"gitId":"PingruiLi"},"content":"            if(inputParts.length \u003c 2){"},{"lineNumber":163,"author":{"gitId":"PingruiLi"},"content":"                throw new EventFormatException();"},{"lineNumber":164,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"PingruiLi"},"content":"            String taskInfo \u003d inputParts[1];"},{"lineNumber":166,"author":{"gitId":"PingruiLi"},"content":"            if (taskInfo.equals(\"\")) {"},{"lineNumber":167,"author":{"gitId":"PingruiLi"},"content":"                throw new EventFormatException();"},{"lineNumber":168,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"PingruiLi"},"content":"            String[] eventNameTime \u003d taskInfo.split(\"/at\");"},{"lineNumber":170,"author":{"gitId":"PingruiLi"},"content":"            boolean hasFewerPatrs \u003d eventNameTime.length \u003c 2;"},{"lineNumber":171,"author":{"gitId":"PingruiLi"},"content":"            if (hasFewerPatrs) {"},{"lineNumber":172,"author":{"gitId":"PingruiLi"},"content":"                throw new EventFormatException();"},{"lineNumber":173,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"PingruiLi"},"content":"            boolean hasEmptyName \u003d eventNameTime[0].equals(\"\") || eventNameTime[0].equals(\"\\\\s+\");"},{"lineNumber":175,"author":{"gitId":"PingruiLi"},"content":"            boolean hasEmptyTime \u003d eventNameTime[1].equals(\"\") || eventNameTime[1].equals(\"\\\\s+\");"},{"lineNumber":176,"author":{"gitId":"PingruiLi"},"content":"            if(hasEmptyName || hasEmptyTime){"},{"lineNumber":177,"author":{"gitId":"PingruiLi"},"content":"                throw new EventFormatException();"},{"lineNumber":178,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"PingruiLi"},"content":"            String eventName \u003d eventNameTime[0].trim();"},{"lineNumber":180,"author":{"gitId":"PingruiLi"},"content":"            String eventTime \u003d eventNameTime[1].trim();"},{"lineNumber":181,"author":{"gitId":"PingruiLi"},"content":"            return new AddEventCommand(eventName, eventTime);"},{"lineNumber":182,"author":{"gitId":"PingruiLi"},"content":"        } catch (EventFormatException e){"},{"lineNumber":183,"author":{"gitId":"PingruiLi"},"content":"             return new InvalidCommand(e);"},{"lineNumber":184,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":186}},{"path":"src/main/java/exception/DeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class DeadlineFormatException extends TaskFormatException {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Name of deadline should be specified after keyword deadline. \" +"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"                \"Name and the time to finish should be separated by \\\"/by\\\"\\n\" + PRE_SPACE +"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"                super.toString());"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":10}},{"path":"src/main/java/exception/DeleteFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class DeleteFormatException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    public DeleteFormatException(){};"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Invalid input format for delete command.\\n\" +"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"                \"    Input format for delete: delete + task index    eg. delete 1\");"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":12}},{"path":"src/main/java/exception/DoneFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class DoneFormatException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    public DoneFormatException(){}"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Invalid input format for done command.\\n\" +"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"                \"    Input format for done: done + task index    eg. done 1\");"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":11}},{"path":"src/main/java/exception/EventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class EventFormatException extends TaskFormatException {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Name of event should be specified after keyword event. \" +"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"                \"Name and the time should be separated by \\\"/at\\\"\\n\" + PRE_SPACE +"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"                super.toString());"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":10}},{"path":"src/main/java/exception/FindFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class FindFormatException extends RuntimeException{"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    public FindFormatException(){}"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Invalid input format for find command.\\n\" +"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"                \"    Input format for find: find + the keyword    eg. find book\");"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":11}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class InvalidCommandException extends RuntimeException{"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    public final static String PRE_SPACE \u003d \"    \";"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    public InvalidCommandException(){}"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"        return \"Duke accepts the following command:\\n\" +"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"                \"    1.list\\n      List current task list\\n    2.todo \u003ctask name\u003e\\n\" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"                \"      Add a new todo task to task list\\n      Eg. todo do homework\\n\" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"                \"    3.deadline \u003ctask name\u003e /by \u003cdeadline\u003e\\n\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"                \"      Add a new deadline to task list\\n      Eg. deadline return a book /by tonight\\n\" +"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"                \"    4.event \u003ctask name\u003e /at \u003ctime\u003e\\n      Add a new event to task list\\n\" +"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. event meeting /at 8pm\\n    5.done \u003ctask index\u003e\\n      Mark a task as done\\n\" +"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. done 1\\n    6.delete \u003ctask index\u003e\\n      Delete a task from task list\\n\" +"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. delete 2\\n    7.find \u003ckeyword\u003e\\n      Search task list for tasks whose names contain the keyword\\n\" +"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. find book\\n    8.help\\n      Show help message\";"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":21}},{"path":"src/main/java/exception/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class TaskAlreadyDoneException extends RuntimeException{"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"    public TaskAlreadyDoneException(){}"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"The task is already marked as done\");"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":11}},{"path":"src/main/java/exception/TaskFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class TaskFormatException extends RuntimeException{"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    protected final String PRE_SPACE \u003d \"    \";"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"    public TaskFormatException(){};"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"        return \"Duke accepts the following command:\\n\" +"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"                \"    1.list\\n      List current task list\\n    2.todo \u003ctask name\u003e\\n\" +"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"                \"      Add a new todo task to task list\\n      Eg. todo do homework\\n\" +"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"                \"    3.deadline \u003ctask name\u003e /by \u003cdeadline\u003e\\n\" +"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"                \"      Add a new deadline to task list\\n      Eg. deadline return a book /by tonight\\n\" +"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"                \"    4.event \u003ctask name\u003e /at \u003ctime\u003e\\n      Add a new event to task list\\n\" +"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. event meeting /at 8pm\\n    5.done \u003ctask index\u003e\\n      Mark a task as done\\n\" +"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. done 1\\n    6.delete \u003ctask index\u003e\\n      Delete a task from task list\\n\" +"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. delete 2\\n    7.find \u003ckeyword\u003e\\n      Search task list for tasks whose names contain the keyword\\n\" +"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"                \"      Eg. find book\\n    8.help\\n      Show help message\";"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":21}},{"path":"src/main/java/exception/TodoFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"public class TodoFormatException extends TaskFormatException {"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"    public String toString(){"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"        return new String(\"Name of Todo should be specified after todo keyword\\n\" + PRE_SPACE +"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"                super.toString());"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":9}},{"path":"src/main/java/fileHandler/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import task.Deadline;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"import task.Event;"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"import task.ToDo;"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":" * Represent the handler that processes the text file and converts the content to a task list"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"public class FileHandler {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private File source;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public final static String SEPERATOR \u003d \" \\\\| \";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public FileHandler(File file) {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        source \u003d file;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     * Convert the content of the file into a task list"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"     * @return the task list as an ArrayList"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * @throws FileNotFoundException if the file doesn\u0027t exist"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    public ArrayList\u003cTask\u003e parseToArraylist() throws FileNotFoundException {"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"        Scanner sc \u003d new Scanner(source);"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        while(sc.hasNext()) {"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"            String currentLine \u003d sc.nextLine();"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"            String[] taskParts \u003d currentLine.split(SEPERATOR);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            switch (taskParts[0]) {"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"            case \"T\":"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new ToDo(taskParts[2], false));"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"            case \"D\":"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new Deadline(taskParts[2], false, taskParts[3]));"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"            case \"E\":"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"                tasks.add(new Event(taskParts[2], false, taskParts[3]));"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"            default:"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"                System.out.println(\"Unable to recognize input format: \" + currentLine);"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"                break;"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"            if(taskParts[1].equals(\"1\")) {"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"                tasks.get(tasks.size()-1).setDone(true);"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"        return tasks;"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":56}},{"path":"src/main/java/fileHandler/FileTaskWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" * Represent the handler that stores changes made by user input to the text file"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"public class FileTaskWriter {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private String filePath;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    public final static String SEPERATOR \u003d \" \\\\| \";"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public FileTaskWriter(String path) {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        filePath \u003d path;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"     * store the current task list to the text file"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"     * @param taskList"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"     * @throws IOException if there is problem accessing or writing to the file"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    public void storeToFile(TaskList taskList) throws IOException {"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        String string \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        for(Task task : tasks) {"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"            string +\u003d task.toFile();"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"            string +\u003d \"\\n\";"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        fileWriter.write(string);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"        fileWriter.close();"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":37}},{"path":"src/main/java/fileHandler/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package fileHandler;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.TaskList;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" * A class that deals with loading from and storing to the text file"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private FileHandler fileHandler;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    private FileTaskWriter fileTaskWriter;"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    private File source;"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        source \u003d new File(filePath);"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        if (!source.exists()) {"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"            if (!source.getParentFile().exists()) {"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"                source.getParentFile().mkdirs();"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"                source.createNewFile();"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        fileTaskWriter \u003d new FileTaskWriter(filePath);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        fileHandler \u003d new FileHandler(source);"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    public TaskList getTaskList() throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"        return new TaskList(fileHandler.parseToArraylist());"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public void store(TaskList tasks) throws IOException{"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"        fileTaskWriter.storeToFile(tasks);"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":40}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represent a task with a deadline"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_FORMAT \u003d \"[D][%s]%s (by: %s)\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private String doBefore;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public Deadline(String name, boolean isDone, String doBefore){"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        this.doBefore \u003d doBefore;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of a deadline task in certain format for displaying."},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for displaying"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfo(){"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\"X\",taskName,doBefore);"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\" \",taskName,doBefore);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of a deadline task in certain format for storing in file."},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"     * @return the string for storing"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public String toFile(){"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return \"D | 1 | \" + taskName + \" | \" + doBefore;"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            return \"D | 0 | \" + taskName + \" | \" + doBefore;"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":40}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represent a task that happens at specified time"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_FORMAT \u003d \"[E][%s]%s (at: %s)\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    private String duration;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public Event(String name, boolean isDone, String duration){"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"        this.duration \u003d duration;"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of an event task in certain format for displaying."},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"     * @return"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfo(){"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\"X\",taskName,duration);"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\" \",taskName,duration);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of an event task in certain format for storing in file."},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"     * @return"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public String toFile() {"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return \"E | 1 | \" + taskName + \" | \" + duration;"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"            return \"E | 0 | \" + taskName + \" | \" + duration;"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":40}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represent the parent class for different types of tasks"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    protected String taskName;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"    protected boolean taskDone;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_FORMAT \u003d \"[ ][%s]%s\";"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"    public static final String LINE_SEPERATOR \u003d \"    ____________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"    public Task(String name, boolean done) {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"        taskName \u003d name;"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"        taskDone \u003d done;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    public String getName() {"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"        return taskName;"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    public boolean getDone() {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"        return taskDone;"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    public void setName(String name) {"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"        taskName \u003d name;"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"    public void setDone(boolean done){"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"        taskDone \u003d done;"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"    public abstract String getTaskInfo();"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"    public void getDoneOutput(){};"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    public String toFile(){"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"        return \"\";"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":42}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import exception.TaskAlreadyDoneException;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"import exception.DoneFormatException;"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import exception.DeleteFormatException;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" * Represent a list of different types of tasks"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    public ArrayList\u003cTask\u003e getTasks(){"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"        return tasks;"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"    public int getTaskCount(){"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        return tasks.size();"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    public void addTask(Task task){"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        tasks.add(task);"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    public Iterator\u003cTask\u003e getIterator(){"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"        return tasks.iterator();"},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"    public void setTaskDone(int index) throws IndexOutOfBoundsException, TaskAlreadyDoneException {"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"        if(tasks.get(index).getDone()){"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"            throw new TaskAlreadyDoneException();"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"        tasks.get(index).setDone(true);"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"    public Task get(int index){"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"        return tasks.get(index);"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"    public void deleteTask(int index) throws IndexOutOfBoundsException{"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"        tasks.remove(index);"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":58}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":" * Represent a To Do task"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"    public static final String TASK_INFO_FORMAT \u003d \"[T][%s]%s\";"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"    public ToDo(String name, boolean isDone){"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"        super(name, isDone);"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of a to do task in certain format for displaying."},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"     * @return"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    public String getTaskInfo(){"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"        if(super.getDone()){"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\"X\",taskName);"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"            return String.format(TASK_INFO_FORMAT,\" \",taskName);"},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"     * Get the information of a to do task in certain format for storing in file."},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"     * @return"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"    public String toFile(){"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"        if(taskDone) {"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"            return \"T | 1 | \" + taskName;"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"            return \"T | 0 | \" +taskName;"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":38}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"import command.CommandResult;"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"import task.Task;"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":" * A class for getting user input and displaying messages to user"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"    private static final String LOGO \u003d \" ____        _\\n\""},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"    private static final String LINE_SEPARATOR \u003d \"    ____________________________________________________________\\n\";"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"    private static final String PRE_SPACE \u003d \"    \";"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"    private Scanner sc;"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":23,"author":{"gitId":"PingruiLi"},"content":"    public Ui(){"},{"lineNumber":24,"author":{"gitId":"PingruiLi"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":25,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":27,"author":{"gitId":"PingruiLi"},"content":"    public void showWelcomeMessage(){"},{"lineNumber":28,"author":{"gitId":"PingruiLi"},"content":"        System.out.println(PRE_SPACE + \"Hello from\\n\" + LOGO);"},{"lineNumber":29,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR +"},{"lineNumber":30,"author":{"gitId":"PingruiLi"},"content":"                 PRE_SPACE + \"Hello! I\u0027m Duke\\n\" + PRE_SPACE +"},{"lineNumber":31,"author":{"gitId":"PingruiLi"},"content":"                \"What can I do for you?\\n\" +"},{"lineNumber":32,"author":{"gitId":"PingruiLi"},"content":"                LINE_SEPARATOR);"},{"lineNumber":33,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":35,"author":{"gitId":"PingruiLi"},"content":"    public String getUserInput(){"},{"lineNumber":36,"author":{"gitId":"PingruiLi"},"content":"        return sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":39,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"PingruiLi"},"content":"     * Display the feedback for a command"},{"lineNumber":41,"author":{"gitId":"PingruiLi"},"content":"     * @param result"},{"lineNumber":42,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"PingruiLi"},"content":"    public void printFeedback(CommandResult result){"},{"lineNumber":44,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR);"},{"lineNumber":45,"author":{"gitId":"PingruiLi"},"content":"        System.out.println(PRE_SPACE + result.getFeedback());"},{"lineNumber":46,"author":{"gitId":"PingruiLi"},"content":"        if(result.getRelevantTasks() \u003d\u003d null){"},{"lineNumber":47,"author":{"gitId":"PingruiLi"},"content":"            System.out.print(LINE_SEPARATOR);"},{"lineNumber":48,"author":{"gitId":"PingruiLi"},"content":"            return;"},{"lineNumber":49,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"PingruiLi"},"content":"        Iterator\u003cTask\u003e taskIterator \u003d result.getRelevantTasks().getIterator();"},{"lineNumber":51,"author":{"gitId":"PingruiLi"},"content":"        int count \u003d 1;"},{"lineNumber":52,"author":{"gitId":"PingruiLi"},"content":"        while(taskIterator.hasNext()){"},{"lineNumber":53,"author":{"gitId":"PingruiLi"},"content":"            Task currentTask \u003d taskIterator.next();"},{"lineNumber":54,"author":{"gitId":"PingruiLi"},"content":"            System.out.println(PRE_SPACE + count + \".\" + currentTask.getTaskInfo());"},{"lineNumber":55,"author":{"gitId":"PingruiLi"},"content":"            count++;"},{"lineNumber":56,"author":{"gitId":"PingruiLi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR);"},{"lineNumber":58,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":60,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"PingruiLi"},"content":"     * Display error message when the file can\u0027t be accessed"},{"lineNumber":62,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"PingruiLi"},"content":"    public void showFileErrorMessage(){"},{"lineNumber":64,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(PRE_SPACE + \"The file can\u0027t be loaded, please check\" +"},{"lineNumber":65,"author":{"gitId":"PingruiLi"},"content":"                \"and rebuild Duke\\n\" + LINE_SEPARATOR);"},{"lineNumber":66,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":68,"author":{"gitId":"PingruiLi"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"PingruiLi"},"content":"     * Display error message when the file can\u0027t be written to"},{"lineNumber":70,"author":{"gitId":"PingruiLi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"PingruiLi"},"content":"    public void showStoreIssueMessage(){"},{"lineNumber":72,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(PRE_SPACE + \"The tasks can\u0027t be correctly stored back to \" +"},{"lineNumber":73,"author":{"gitId":"PingruiLi"},"content":"                \"the file, please check the setting and try again.\\n\" + LINE_SEPARATOR);"},{"lineNumber":74,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"PingruiLi"},"content":""},{"lineNumber":76,"author":{"gitId":"PingruiLi"},"content":"    public void showGoodbyeMessage(){"},{"lineNumber":77,"author":{"gitId":"PingruiLi"},"content":"        System.out.print(LINE_SEPARATOR +"},{"lineNumber":78,"author":{"gitId":"PingruiLi"},"content":"                \"    Bye. Hope to see you again soon!\" +"},{"lineNumber":79,"author":{"gitId":"PingruiLi"},"content":"                \"\\n\" + LINE_SEPARATOR);"},{"lineNumber":80,"author":{"gitId":"PingruiLi"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"PingruiLi"},"content":"}"}],"authorContributionMap":{"PingruiLi":81}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"PingruiLi"},"content":"todo read a book"},{"lineNumber":2,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":3,"author":{"gitId":"PingruiLi"},"content":"deadline return a book /by Sunday 10am"},{"lineNumber":4,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":5,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"PingruiLi"},"content":"event"},{"lineNumber":7,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":8,"author":{"gitId":"PingruiLi"},"content":"event join concert / at tomorrow"},{"lineNumber":9,"author":{"gitId":"PingruiLi"},"content":"event tutorial /at Feb 5 10am"},{"lineNumber":10,"author":{"gitId":"PingruiLi"},"content":"deadline do online quiz Tuesday 10pm"},{"lineNumber":11,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"PingruiLi"},"content":"blah"},{"lineNumber":13,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":14,"author":{"gitId":"PingruiLi"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"PingruiLi"},"content":"delete"},{"lineNumber":16,"author":{"gitId":"PingruiLi"},"content":"delete 1"},{"lineNumber":17,"author":{"gitId":"PingruiLi"},"content":"done 2"},{"lineNumber":18,"author":{"gitId":"PingruiLi"},"content":"delete 2"},{"lineNumber":19,"author":{"gitId":"PingruiLi"},"content":"done 1"},{"lineNumber":20,"author":{"gitId":"PingruiLi"},"content":"list"},{"lineNumber":21,"author":{"gitId":"PingruiLi"},"content":"delete 1"},{"lineNumber":22,"author":{"gitId":"PingruiLi"},"content":"bye"}],"authorContributionMap":{"PingruiLi":22}}]
