[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"# Butler Duke User Guide"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"By: `Seh Xin Ru` "},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"Last Updated: `February 2021`"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"- [Personal Butler Guide](#track-the-mushroom-user-guide)"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    * [1. Introduction](#1-introduction)"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    * [2. Quick Start in Intellij](#2-quick-start-in-intellij)"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    * [3. Features](#3-features)"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"      + [3.1 Add a Todo task: `todo`](#31-add-a-todo-task-todo)"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"      + [3.2 Add a Deadline task: `deadline`](#32-add-a-deadline-task-deadline)"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"      + [3.3 Add an Event task: `event`](#33-add-an-event-task-event)"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"      + [3.4 List all tasks: `list`](#34-list-all-tasks-list)"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"      + [3.5 Mark a task as complete: `done`](#35-mark-a-task-as-complete-done)"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"      + [3.6 Delete a task: `delete`](#36-delete-a-task-delete)"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"      + [3.7 Search task by keyword: `find`](#37-search-task-by-keyword-find)"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"      + [3.8 Exit the program: `bye`](#38-exit-the-program-bye)"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"      + [3.9 Task Storage](#39-task-storage)"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    * [4. Frequently Asked Question (FAQ)](#4-faq)"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    * [5. Command Summary](#5-command-summary)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"## 1. Introduction"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"Butler Duke at your service! I help track your busy schedule of todos, deadlines and events so that you don\u0027t have to! "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"Let me know when you have completed one and I will mark them as done. Let me know of the upcoming tasks and I\u0027ll keep them in mind. "},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"## 2. Quick Start in IntelliJ):"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"### 2.1. On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"   -\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"         Hello! I\u0027m Duke, what can I do for you?"},{"lineNumber":42,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":""},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"## 3. Features"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"### 3.1. Add a todo task: `todo`"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"This operation adds a todo task to the task list. "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":""},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"Format: `todo \u003ctask description\u003e`"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":""},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"Example: `todo read a book`"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":""},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"        Got it. I\u0027ve added this task:"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"          [T][ ] read a book"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        You have 1 task(s) in the list."},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":""},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"### 3.2. Add a deadline task: `deadline`"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"This operation adds a deadline task to the task list. "},{"lineNumber":62,"author":{"gitId":"xseh"},"content":""},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"Format: `deadline \u003ctask description\u003e /by \u003cyyyy-MM-dd\u003e`"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":""},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"Example: `deadline submit homework /by 2021-02-10`"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":""},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"         Got it. I\u0027ve added this task: "},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"           [D][ ] submit homework (by: 10 Feb 2021)"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"         You have 1 task(s) in the list."},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":""},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"### 3.3. Add an event task: `event`"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"This operation adds an evvent to the task list. "},{"lineNumber":77,"author":{"gitId":"xseh"},"content":""},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"Format: `event \u003ctask description\u003e /at \u003cyyyy-MM-dd\u003e`"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":""},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"Example: `event book club meeting /at 2021-02-10`"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":""},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"Expected Output:"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"         Got it. I\u0027ve added this task: "},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"           [E][ ] book club meeting (at: 10 Feb 2021)"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"         You have 1 task(s) in the list."},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":""},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"### 3.4. List all tasks: `list`"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"This operation lists all tasks recorded in the task list. "},{"lineNumber":92,"author":{"gitId":"xseh"},"content":""},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"Format: `list`"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":""},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"         Here are the tasks in your list: "},{"lineNumber":99,"author":{"gitId":"xseh"},"content":""},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"         1. [T][ ] read a book"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"         2. [D][ ] submit homework (by: 10 Feb 2021)"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"         3. [E][ ] book club meeting (at: 10 Feb 2021)"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":104,"author":{"gitId":"xseh"},"content":""},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"### 3.5. Mark a task as complete: `done`"},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"This operation marks a task as completed. "},{"lineNumber":107,"author":{"gitId":"xseh"},"content":""},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":""},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"Example: `done 1`"},{"lineNumber":111,"author":{"gitId":"xseh"},"content":""},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"         Nice! I\u0027ve marked this task as done:"},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"         [T][X] read a book"},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":118,"author":{"gitId":"xseh"},"content":""},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"### 3.6. Delete a task: `delete`"},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"This operation deletes a task from the task list. "},{"lineNumber":121,"author":{"gitId":"xseh"},"content":""},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":123,"author":{"gitId":"xseh"},"content":""},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"Example: `delete 2`"},{"lineNumber":125,"author":{"gitId":"xseh"},"content":""},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":128,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"         Noted. I have removed this task:"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":"         [D][ ] submit homework (by: 10 Feb 2021)"},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":132,"author":{"gitId":"xseh"},"content":""},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"### 3.7. Search task by keyword: `find`"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"This operation searches the task list and shows all the tasks that contains the keyword in the task description. "},{"lineNumber":135,"author":{"gitId":"xseh"},"content":""},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":137,"author":{"gitId":"xseh"},"content":""},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"Example: `find book`"},{"lineNumber":139,"author":{"gitId":"xseh"},"content":""},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"         Here are some of the tasks in your list:"},{"lineNumber":144,"author":{"gitId":"xseh"},"content":""},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"         1. [T][ ] read a book"},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"         2. [E][ ] book club meeting (at: 10 Feb 2021)"},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":148,"author":{"gitId":"xseh"},"content":""},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"### 3.8. Exit the program: `bye`"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"This operation exits the program. "},{"lineNumber":151,"author":{"gitId":"xseh"},"content":""},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"Format: `bye`"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":""},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"Expected Output: "},{"lineNumber":155,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"         Bye. Hope to see you again soon!"},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":""},{"lineNumber":161,"author":{"gitId":"xseh"},"content":"### 3.9. Task storage"},{"lineNumber":162,"author":{"gitId":"xseh"},"content":"#### 3.9.1 Load data form existing file"},{"lineNumber":163,"author":{"gitId":"xseh"},"content":"Upon launch, Duke automatically loads stored tasks from existing file. Unless loading is unsuccessful, loading data is **transparent**.  "},{"lineNumber":164,"author":{"gitId":"xseh"},"content":""},{"lineNumber":165,"author":{"gitId":"xseh"},"content":"Expected Output (if unsuccessful):"},{"lineNumber":166,"author":{"gitId":"xseh"},"content":"```"},{"lineNumber":167,"author":{"gitId":"xseh"},"content":"-\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d--\u003d-\u003d-\u003d-\u003d-\u003d-"},{"lineNumber":168,"author":{"gitId":"xseh"},"content":"         File not found, loading new tasklist."},{"lineNumber":169,"author":{"gitId":"-"},"content":"```"},{"lineNumber":170,"author":{"gitId":"xseh"},"content":""},{"lineNumber":171,"author":{"gitId":"xseh"},"content":"#### 3.9.2. Save data to file"},{"lineNumber":172,"author":{"gitId":"xseh"},"content":"Duke automatically saves the task list to a file after every modification (i.e. `add`, `delete`, `done`). "},{"lineNumber":173,"author":{"gitId":"xseh"},"content":""},{"lineNumber":174,"author":{"gitId":"xseh"},"content":"Name of save file: _**tasks.txt**_"},{"lineNumber":175,"author":{"gitId":"xseh"},"content":""},{"lineNumber":176,"author":{"gitId":"xseh"},"content":"## 4. FAQ"},{"lineNumber":177,"author":{"gitId":"xseh"},"content":"**Q1**: What if I do not have a save file? "},{"lineNumber":178,"author":{"gitId":"xseh"},"content":"\u003e Duke will generate a new empty task list. When adding new tasks, a new save file will be created. "},{"lineNumber":179,"author":{"gitId":"xseh"},"content":""},{"lineNumber":180,"author":{"gitId":"xseh"},"content":"**Q2**: Why did Duke not load my safe file?"},{"lineNumber":181,"author":{"gitId":"xseh"},"content":"\u003e The file may have been moved to another location. Check if save file is found in the directory of the application. "},{"lineNumber":182,"author":{"gitId":"xseh"},"content":""},{"lineNumber":183,"author":{"gitId":"xseh"},"content":"\u003e An error may have been encountered, try relaunching the program. "},{"lineNumber":184,"author":{"gitId":"xseh"},"content":""},{"lineNumber":185,"author":{"gitId":"xseh"},"content":"## 5. Command Summary"},{"lineNumber":186,"author":{"gitId":"xseh"},"content":""},{"lineNumber":187,"author":{"gitId":"xseh"},"content":" Command     | Format                                   | Example   "},{"lineNumber":188,"author":{"gitId":"xseh"},"content":" ----------- | ---------------------------------------- | --------------------------------------"},{"lineNumber":189,"author":{"gitId":"xseh"},"content":" todo        | `todo \u003ctask description\u003e`                  | `todo read a book`"},{"lineNumber":190,"author":{"gitId":"xseh"},"content":" deadline    | `deadline \u003ctask description\u003e /by \u003cyyyy-MM-dd\u003e`   | `deadline submit homework /by 2021-02-10`"},{"lineNumber":191,"author":{"gitId":"xseh"},"content":" event       | `event \u003ctask description\u003e /at \u003cyyyy-MM-dd\u003e`      | `event book club meeting /at 2021-02-10`"},{"lineNumber":192,"author":{"gitId":"xseh"},"content":" list        | `list`                                     | `list`"},{"lineNumber":193,"author":{"gitId":"xseh"},"content":" done        | `done \u003ctask number\u003e`                       | `done 1`"},{"lineNumber":194,"author":{"gitId":"xseh"},"content":" delete      | `delete \u003ctask number\u003e`                     | `delete 2`"},{"lineNumber":195,"author":{"gitId":"xseh"},"content":" find        | `find \u003ctask number\u003e`                       | `find book`"},{"lineNumber":196,"author":{"gitId":"xseh"},"content":" bye         | `bye`                                      | `bye`"}],"authorContributionMap":{"xseh":178,"-":18}},{"path":"src/main/java/duke/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"public final class Constants {"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    // Words for commands."},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_TODO_WORD \u003d \"todo\";"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_EVENT_WORD \u003d \"event\";"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_MARK_WORD \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_LIST_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_DELETE_WORD \u003d \"delete\";"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_FIND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_EXIT_WORD \u003d \"bye\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":""},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    // Display messages."},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, what can I do for you?\";"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_BORDER \u003d \"-\u003d-\u003d-\u003d-\u003d-\u003d-\".repeat(6);"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task: \";"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_MARKED \u003d \"Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list: \";"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DELETE \u003d \"Noted. I have removed this task: \";"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_FIND \u003d \"Here are some of the tasks in your list: \";"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon! \";"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_NUMBER_OF_TASKS \u003d \"You have %s task(s) in the list. \"; "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":""},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    // Error messages"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INDEX_OUT_OF_RANGE \u003d \"Index out of range. \";"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_COMMAND_RECEIVED \u003d \"Invalid command. Available commands: \""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"            + System.lineSeparator() + \"\\t  list, done, todo, deadline, event, delete, find, bye\";"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_EMPTY_LIST \u003d \"No tasks found.\";"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_SYNTAX_RECEIVED \u003d \"Invalid syntax! Usage: \";"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_IO \u003d \"IO Error, please try again. \";"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_IMPORT_TASK \u003d \"Failed to import some tasks. \";"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_FILE_NOT_FOUND \u003d \"File not found, loading new tasklist.\";"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_NO_MATCH_FOUND \u003d \"No matches found. Please refine your search\";"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_DATE_RECEIVED \u003d \"Invalid date received. Format: yyyy-mm-dd\";"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_NUMBER \u003d \"Invalid task number received.\";"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":""},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    // Syntax messages for the commands."},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_MARK_SYNTAX \u003d \" done \u003ctask number\u003e\";"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_TODO_SYNTAX \u003d \" todo \u003ctask name\u003e\";"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DEADLINE_SYNTAX \u003d \" deadline \u003ctask name\u003e /by \u003cdate\u003e\";"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_EVENT_SYNTAX \u003d \" event \u003ctask name\u003e /at \u003cdate\u003e\";"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DELETE_SYNTAX \u003d \" delete \u003ctask number\u003e\";"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_FIND_SYNTAX \u003d \" find \u003ckeyword\u003e\";"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":""},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    // File path location"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    public static final String FILE_PATH \u003d \"Duke.txt\";"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":""},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"    // Index for command parameters"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    public static final int COMMAND_INDEX \u003d 0;"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    public static final int MARK_INDEX \u003d 1;"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    public static final int TASK_DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    public static final int TASK_DATE_INDEX \u003d 3;"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":""},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"    // Format to display dates"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"    public static final String DATE_FORMAT \u003d \"dd MMM yyyy\";"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":""},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"    // Filter words to locate date for deadline and event tasks."},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"    public static final String DEADLINE_DATA_PREFIX_BY \u003d \"/by\";"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    public static final String EVENT_DATA_PREFIX_AT \u003d \"/at\";"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":""},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"    // Scanner for extracting user input."},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"    public static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":66}},{"path":"src/main/java/duke/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" * Represents a date. A date object corresponds to a date (yyyy-MM-dd) given by the user input. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" * Applicable for deadline and event tasks. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"public class Date {"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    private LocalDate date;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * Converts date into LocalDate and store in Date class.  "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public Date(String date) {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * Gets the date. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public LocalDate getDate() {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        return date;"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":""},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * Converts given date into LocalDate and sets the Date class. "},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    public void setDate(String date) {"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":""},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * Formats the date into string using a date format. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * @param dateFormat A string to indicate the format of date to output."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     *                   E.g. \"yyyy-MM-dd\", \"dd-MMM-yyyy\". "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * @return Formatted String. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public String formatDateWithDelimeter(String dateFormat) {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return date.format(DateTimeFormatter.ofPattern(dateFormat));"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":""},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * Checks if string is a valid date. "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * @param dateString String to be verified. "},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     * @throws DateTimeParseException If dateString is not a valid date. "},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    protected static void checkValidDate(String dateString) throws DateTimeParseException {"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"        LocalDate.parse(dateString);"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":56}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.command.*;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":" * Represents an instance of the program. A Duke object refers to one run of the application. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     * Constructor for the Duke class. "},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     * Retrieves data from storage and add to task list. "},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * If no is data found, display fil to import message and load an empty task list. "},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * @param filePath Location of the storage file. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public Duke (String filePath) {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"            tasks \u003d new TaskList(storage.readFromFile());"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"            ui.displayToUser(Constants.ERROR_FILE_NOT_FOUND);"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        } catch (ImportTaskException exception) {"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"            ui.displayToUser(Constants.ERROR_IMPORT_TASK);"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":""},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * Runs the program. "},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * Gets user input and parses command."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * Executes the program according to the command input.  "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    public void run() {"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"        ui.displayWelcomeMessage();"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        while (true) {"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"                String fullCommand \u003d ui.getUserInput();"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"                Parser parser \u003d new Parser();"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"                Command command \u003d new Command(parser.getCommand(tasks, fullCommand));"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"                command.executeCommand(tasks, ui, storage);"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"            } catch (IllegalCommandException exception) {"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"                // If command detected is not found in available commands"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"            } catch (IndexOutOfBoundsException exception) {"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"                // If task number input by user is out of range"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INDEX_OUT_OF_RANGE, "},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"                        String.format(Constants.MESSAGE_NUMBER_OF_TASKS, tasks.getSize()));"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"            } catch (TaskListEmptyException exception) {"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"                // If task list is empty"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_EMPTY_LIST);"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"            } catch (InvalidSyntaxException exception) {"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"                // If the syntax for the command is invalid"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_SYNTAX_RECEIVED, exception.getMessage());"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            } catch (IOException exception) { "},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_IO);"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"            } catch (NullPointerException exception) {"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_IO);"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"            } catch (DateTimeParseException exception) {"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_DATE_RECEIVED);"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"            } catch (NumberFormatException exception) {"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_NUMBER);"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":""},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"     * Starts the program."},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"    public static void main(String[] args) {"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"        new Duke(\"tasks.txt\").run();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xseh":78,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" * Represents an instance of a parser. An Parse object corresponds to the processing of one input by the user. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     * Extracts the command word from user input. Removes command name from"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * userCommand. If there are parameters after command word (i.e. length \u003e 4),"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * set userCommand to the parameters. Otherwise, set userCommand to null."},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * @return Array containing parsed parameters including command, task status, task description and task date."},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    protected String[] getCommand(TaskList tasks, String fullCommand) throws NumberFormatException, "},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"            InvalidSyntaxException, TaskListEmptyException, IndexOutOfBoundsException, "},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"            IllegalCommandException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        // Split command according to first instance of \" \""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        String[] extractedCommands \u003d fullCommand.split(\" \", 2);"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":""},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        // First index (i.e. 0) contains command word, next index contains parameters if any "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        String command \u003d extractedCommands[Constants.COMMAND_INDEX].toLowerCase();"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return parseCommand(tasks, command, extractedCommands);"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * Parses the command parameters based on the command word extracted. Returns the parameters in an array of 4. "},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * Array contains: [command, task status, task description, task date]. "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     * @return Array containing parsed parameters including command, task status, task description and task date."},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    private String[] parseCommand(TaskList tasks, String command, String[] extractedCommands) "},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, IndexOutOfBoundsException, NumberFormatException, "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"            TaskListEmptyException, IllegalCommandException {"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"        switch (command) {"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_LIST_WORD:"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EXIT_WORD:"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"            // No further parsing needed, return data immediately"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"            return setCommandParameters(command, null, null);"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_FIND_WORD:"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"            checkCommandValidity(extractedCommands, command);"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"            return setCommandParameters(command, extractedCommands[1], null);"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"            // Check if command is complete, throw exception if not "},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"            checkCommandValidity(extractedCommands, command);"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"            // Check remaining parameters for valid index (i.e. task number)"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"            // Add valid index to array, otherwise invoke error"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"            int taskNumber \u003d getTaskNumber(command, tasks, extractedCommands[1].trim());"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"            if (!isTaskNumberValid(tasks, taskNumber)) {"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"            return setCommandParameters(command, String.valueOf(taskNumber), null);"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD:"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"            checkCommandValidity(extractedCommands, command);"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"            String[] processCommandParameters \u003d processParameters(command, extractedCommands[1].trim());"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            // In parsedCommandParameters, first index contains task description and the second contains task date"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"            return setCommandParameters(command, processCommandParameters[0], processCommandParameters[1]);"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"            // Invalid command receieved, throw error"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"            throw new IllegalCommandException();"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"    } "},{"lineNumber":70,"author":{"gitId":"xseh"},"content":""},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"     * Checks for the validity of command parameters. "},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"     * @param extractedCommands Commands extracted from input, split into 2 parts. The command is split with the first "},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"     *                          delimter (\" \"). "},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"     * @param command Command from extractedCommands. Effectively extractedCommand[1].toLowerCase(). "},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If there are missing parameters. "},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"    private void checkCommandValidity(String[] extractedCommands, String command) throws InvalidSyntaxException{"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"        if (extractedCommands.length \u003c 2) {"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"            String message \u003d ui.getSyntaxMessage(command);"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(message);"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":""},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"     * Sets the array with the given parameters"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"     * @param command Command word. "},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"     * @param taskDescription The description of task. The task description is task number for \"mark\" and \"delete\" "},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"     *                        commands. "},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"     * @param taskDate Task date. Task date is valid only for \"event\" and \"deadline\" commands. "},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"     *                          Returns null for the other commands. "},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"     * @return Array containing parsed parameters including command, task status, task description and task date."},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"    private String[] setCommandParameters (String command, String taskDescription, String taskDate) {"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"        return new String[]{command, \"false\", taskDescription, taskDate};"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"     * Checks if task number is valid (i.e. within the bounds of the list)."},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"     * @param taskNumber Task number."},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"     * @return True if number is valid and false if invalid."},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"    private boolean isTaskNumberValid(TaskList tasks, int taskNumber) {"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.getSize();"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"xseh"},"content":""},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"     * Gets task number from the input string."},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"     * @return Task number (Starts with 0)."},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"     * @throws NumberFormatException If userCommand is not an integer."},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"     * @throws IllegalCommandException If no task number is detected."},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException If task list is empty."},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"    private int getTaskNumber(String command, TaskList tasks, String commandParameter) throws NumberFormatException, "},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"            TaskListEmptyException {"},{"lineNumber":121,"author":{"gitId":"xseh"},"content":"        if (tasks.isTaskListEmpty()) {"},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":123,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"        // Since user input task number starts from 1, remove 1 from taskNumber to reflect the correct index in tasks."},{"lineNumber":125,"author":{"gitId":"xseh"},"content":"        int taskNumber \u003d Integer.parseInt(getTaskNumberString(commandParameter)) - 1;"},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"xseh"},"content":""},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":"     * Gets task number in string."},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":132,"author":{"gitId":"xseh"},"content":"     * @return Task number."},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"    private String getTaskNumberString(String commandParameter) {"},{"lineNumber":135,"author":{"gitId":"xseh"},"content":"        // Gets the taskNumber from the index of the first \" \""},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"        // Adds 1 to the index remove the \" \" from string"},{"lineNumber":137,"author":{"gitId":"xseh"},"content":"        return commandParameter.substring(commandParameter.indexOf(\" \") + 1);"},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"xseh"},"content":""},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"     * Finds the location of the filters and locate the date from the task. Removes"},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"     * the task date information from userCommand, keeping only the task name in"},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"     * userCommand."},{"lineNumber":144,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"     * @return The date extracted from userCommand."},{"lineNumber":148,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If date is not found."},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"    private String[] processParameters(String command, String commandParameter) "},{"lineNumber":151,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, DateTimeParseException {"},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"        String filterString;"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":"        if (command.equals(Constants.COMMAND_DEADLINE_WORD)) {"},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"            filterString \u003d Constants.DEADLINE_DATA_PREFIX_BY;"},{"lineNumber":155,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"            filterString \u003d Constants.EVENT_DATA_PREFIX_AT;"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"        String[] processCommand \u003d getDate(command, commandParameter, filterString);"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"        return processCommand;"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"xseh"},"content":""},{"lineNumber":162,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"xseh"},"content":"     * Extracts the date from userCommand."},{"lineNumber":164,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":165,"author":{"gitId":"xseh"},"content":"     * @param indexOfDate The index for the location of /by in userCommand. Indicates the begining of date."},{"lineNumber":166,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event (/at) or deadline (/by)."},{"lineNumber":167,"author":{"gitId":"xseh"},"content":"     * @return Date specified in user input (userCommand)."},{"lineNumber":168,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If no date is detected after the /by parameter."},{"lineNumber":169,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"xseh"},"content":"    private String[] getDate(String command, String commandParameter, String filterString) "},{"lineNumber":171,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, DateTimeParseException {"},{"lineNumber":172,"author":{"gitId":"xseh"},"content":"        int indexOfDate \u003d commandParameter.indexOf(filterString);"},{"lineNumber":173,"author":{"gitId":"xseh"},"content":"        if (indexOfDate \u003c\u003d 0) {"},{"lineNumber":174,"author":{"gitId":"xseh"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":175,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(ui.getSyntaxMessage(command));"},{"lineNumber":176,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"xseh"},"content":""},{"lineNumber":178,"author":{"gitId":"xseh"},"content":"        // Check if string contains date after filterString"},{"lineNumber":179,"author":{"gitId":"xseh"},"content":"        // +3 to remove filterString (/at or /by) and +1 to convert index to length. Total: +4"},{"lineNumber":180,"author":{"gitId":"xseh"},"content":"        if (commandParameter.length() \u003c indexOfDate + 4) {"},{"lineNumber":181,"author":{"gitId":"xseh"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":182,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(ui.getSyntaxMessage(command));"},{"lineNumber":183,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"xseh"},"content":""},{"lineNumber":185,"author":{"gitId":"xseh"},"content":"        // Add 3 to indexOfDate to remove the \"/by\" or \"/at\" filter strings"},{"lineNumber":186,"author":{"gitId":"xseh"},"content":"        String dateString \u003d commandParameter.substring(indexOfDate + 3).trim();"},{"lineNumber":187,"author":{"gitId":"xseh"},"content":"        Date.checkValidDate(dateString);"},{"lineNumber":188,"author":{"gitId":"xseh"},"content":"        String taskDescription \u003d commandParameter.substring(0, indexOfDate).trim();"},{"lineNumber":189,"author":{"gitId":"xseh"},"content":"        return new String[]{taskDescription, dateString};"},{"lineNumber":190,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"xseh"},"content":""},{"lineNumber":192,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":192}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"import duke.command.*;"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":" * Represents an instance of a storage. An Storage object corresponds to the saving "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":" * and loading of stored data for an application. "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    protected String filePath;"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":""},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    public Storage(String filePath) {"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":""},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     * Reads the file contents and add tasks to task list. "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     * Sets the task status depending on status data in storage file. "},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error opening file."},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * @throws FileNotFoundException If the file is not found."},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    protected ArrayList\u003cTask\u003e readFromFile() throws ImportTaskException, FileNotFoundException {"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"        if (!file.exists()) {"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"            throw new FileNotFoundException();"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":""},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"        Scanner fileScanner \u003d new Scanner(file);"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"        ArrayList\u003cTask\u003e importedTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"        while (fileScanner.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"            String[] extractedTaskParameters \u003d fileScanner.nextLine().split(\", \");"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"            Task importedTask \u003d createTask(extractedTaskParameters);"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"            importedTask.setTaskStatus();"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"            importedTasks.add(importedTask);"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"        fileScanner.close();"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"        return importedTasks;"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":""},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * Checks for presence of file before saving. If file is not found, create file"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     * for storing task list. Then, store task list into file."},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error reating file."},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    public void saveToFile(TaskList tasks) throws IOException {"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        file.createNewFile();"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"        writeToFile(tasks, file);"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":""},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"     * Writes the task list into file."},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error writing to file."},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"    private void writeToFile(TaskList tasks, File file) throws IOException {"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"        FileWriter fileWriter \u003d new FileWriter(file.getAbsolutePath(), false);"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"        fileWriter.write(convertToFileFormat(tasks));"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"        fileWriter.close();"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":""},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"     * Converts the task list into a string in the storage format."},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"    private String convertToFileFormat(TaskList tasks) {"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"            message.append(tasks.getTask(i).toStorageString() + System.lineSeparator());"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":""},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"     * Adds the tasks from storage to the task list according to the type of task. "},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"     * @param data List of parameters in storage file. "},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"    private Task createTask(String[] extractedTaskParameters) throws ImportTaskException {"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"        AddCommand addCommand \u003d new AddCommand(extractedTaskParameters);"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"        switch(extractedTaskParameters[Constants.COMMAND_INDEX]) {"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"        case \"todo\":"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"            return addCommand.addTodoFromStorage();"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"        case \"deadline\":"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"            return addCommand.addDeadlineFromStorage();"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"        case \"event\":"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"            return addCommand.addEventFromStorage();"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":101}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":" * Represents a list of tasks. A TaskList object corresponds to a list of tasks represented by "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" * their type e.g. todo, deadline and event. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * Creates a list with the given data. "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * @param tasks List containing all tasks retrieved form storage. "},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * Creates an empty list. "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * Checks if list is empty."},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * @return True if sizeOfTaskList is 0 and false if not."},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public boolean isTaskListEmpty() {"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        return getSize() \u003d\u003d 0;"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * Gets a task object from the tasks list."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * @param index Location of the task on the tasks list."},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     * @return The task at the index."},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    public Task getTask(int index) {"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"        return tasks.get(index);"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":""},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * Gets the length of task list. "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     * @return Length of task list. "},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    public int getSize() {"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"        return tasks.size();"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":""},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     * Removes a task from the task list. "},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     * @param taskNumber Number of the task in the task list to delete (starts with 1). "},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    public void removeTask(int taskNumber) {"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":""},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"     * Adds a task to the task list. "},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"     * @param task Task to add. "},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"\tpublic void addToTaskList(Task task) {"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        tasks.add(task);"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":74}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.error.TaskListEmptyException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":" * Represents the user interface of the application. A Ui objects corresponds to all the messages "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" * displayed to a user. Also includes getting input from the user. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     * Displays the welcome message."},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    protected void displayWelcomeMessage() {"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_WELCOME);"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":""},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     * Displays the message border. "},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    public void displayMessageBorder () {"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        System.out.println(Constants.MESSAGE_BORDER);"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":""},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     * Displays a given message to the user."},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     * @param message Message to be displayed."},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public void displayToUser(String... messages) {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        displayMessageBorder();"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        for (String m : messages) {"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"            System.out.println(String.format(\"\\t %s\", m));"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":""},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * Obtains user input from console. Input stored into userCommand."},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * Removes trailing sapces before returning. "},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * @return Input from user. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    protected String getUserInput() {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return Constants.SCANNER.nextLine().trim();"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":""},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * Displays the list of tasks to the user. The list will be numbered, starting from 1. "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * @param tasks Tasks to be listed."},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    public void displayToUser(TaskList tasks) {"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"        String listAsString \u003d getDisplayString(tasks);"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_LIST, listAsString);"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":""},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     * Displays the list of tasks to the user. The list will be numbered, starting"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * from 1."},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     * @param tasks Tasks to be listed."},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"    public void displayToUser(TaskList tasks, String keyword) throws TaskListEmptyException {"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"        String listAsString \u003d getDisplayString(tasks, keyword);"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_FIND, listAsString);"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":""},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"     * Displays success message after adding new task."},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"    public void displayAddTaskSuccessMessage(TaskList tasks) {"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_ADDED, \"  \" + tasks.getTask(tasks.getSize()-1).toString(), "},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"                String.format(Constants.MESSAGE_NUMBER_OF_TASKS, tasks.getSize()));"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":""},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"     * Displays the success message after deleting the task. "},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"     * @param deletedTask The description of deleted task. "},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"    public void displayDeleteTaskSuccessMessage(String deletedTask) {"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_DELETE, deletedTask);"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":""},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"     * Displays the success message after marking task as done."},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"    public void displayMarkTaskSuccessMessage(TaskList tasks, int taskNumber) {"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_MARKED, tasks.getTask(taskNumber).toString());"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":""},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"     * Returns the display string representation of the list of tasks."},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"     * For displaying the entire task list. "},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"     * @param tasks Task list used."},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"     * @return The list of all items in list, formatted with numberings and the"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"     *         total number of tasks in list."},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"    protected String getDisplayString(TaskList tasks) {"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"            int displayIndex \u003d i + 1;"},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"            message.append(System.lineSeparator() + String.format(\"\\t %d. %s\", displayIndex, tasks.getTask(i).toString()));"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"xseh"},"content":""},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"     * Returns the display string representation of the list of tasks."},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"     * For displaying a selection of the task list (i.e. tasks that macthes the keyword). "},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"     * @param tasks Task list used."},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"     * @return The list of all items in list, formatted with numberings and the"},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"     *         total number of tasks in list."},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException If the filtered list is empty (i.e. no matches found). "},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"    public String getDisplayString(TaskList tasks, String keyword) throws TaskListEmptyException {"},{"lineNumber":121,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"        int matchNumber \u003d 0;"},{"lineNumber":123,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"            Task task \u003d tasks.getTask(i);"},{"lineNumber":125,"author":{"gitId":"xseh"},"content":"            if (task.getTaskDescription().contains(keyword)) {"},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"                matchNumber++;"},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"                message.append(System.lineSeparator() + String.format(\"\\t %d. %s\", matchNumber, task.toString()));"},{"lineNumber":128,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":""},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"        if (matchNumber \u003d\u003d 0) {"},{"lineNumber":132,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":135,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":137,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"     * Gets the syntax of the commands depending on the one given by the user."},{"lineNumber":139,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"     * @return The syntax to task command given by the user."},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"xseh"},"content":"    protected String getSyntaxMessage(String command) {"},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"        switch (command) {"},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_TODO_SYNTAX;"},{"lineNumber":148,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD: "},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_DEADLINE_SYNTAX;"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":151,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_EVENT_SYNTAX;"},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_MARK_SYNTAX;"},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":155,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_DELETE_SYNTAX;"},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_FIND_WORD:"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_FIND_SYNTAX;"},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"            return null;"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":162}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.error.ImportTaskException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.error.InvalidSyntaxException;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"import duke.Storage;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":" * Represents the add command. An AddCommand object corresponds to the add command input by the user. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    private String taskDescription;"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    private String taskDate;"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public AddCommand(String[] commands) {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"        this.taskDescription \u003d commands[Constants.TASK_DESCRIPTION_INDEX];"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        this.taskDate \u003d commands[Constants.TASK_DATE_INDEX];"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":""},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     * Adds a new todo task to task list. "},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * Save to storage and display success message. "},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     * Applies to user input commands. "},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If userCommand does not contain task description.  "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    public void executeAddTodo(TaskList tasks, Ui ui, Storage storage) "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, IOException {"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null) {"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_TODO_SYNTAX);"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"        tasks.addToTaskList(new Todo(taskDescription));"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"        storage.saveToFile(tasks);"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"        ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":""},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     * Retrieves and adds todo task from storage. "},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * @return A new instance of Todo task based on task description. "},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * @throws ImportTaskException If the task description is invalid. "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    public Todo addTodoFromStorage() throws ImportTaskException {"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"        return new Todo(taskDescription);"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":""},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list."},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"     * Save to storage and display success message."},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     * Applies to user input commands. "},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If date is not found."},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    public void executeAddDeadline(TaskList tasks, Ui ui, Storage storage) "},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, IOException {"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_DEADLINE_SYNTAX);"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"        tasks.addToTaskList(new Deadline(taskDescription, taskDate));"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"        storage.saveToFile(tasks);"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"        ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":""},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"     * Retrieves and adds deadline task from storage. "},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"     * @return A new instance of Deadline task based on task description. "},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"     * @throws ImportTaskException If description or date is not found. "},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"    public Deadline addDeadlineFromStorage() throws ImportTaskException {"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"        return new Deadline(taskDescription, taskDate);"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":""},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"     * Adds a new event task to task list. "},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"     * Save to storage and display success message."},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"     * Applies to user input commands."},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If description or date is not found. "},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"    public void executeAddEvent(TaskList tasks, Ui ui, Storage storage) "},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"            throws InvalidSyntaxException, IOException {"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_EVENT_SYNTAX);"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"        tasks.addToTaskList(new Event(taskDescription, taskDate));"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"        storage.saveToFile(tasks);"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"        ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":""},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"     * Retrieves and adds deadline task from storage. "},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"     * @return A new instance of Event task based on task description. "},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"     * @throws ImportTaskException If description or date is not found. "},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"    public Event addEventFromStorage() throws ImportTaskException {"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate\u003d\u003d null) {"},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"        return new Event(taskDescription, taskDate);"},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":114}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":" * Represents the command input by user. A Command object corresponds to a command input by the user. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"public class Command {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    protected String[] commands;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    private String command;"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     * Constructor for commands used in retrieving storage data. Only command is stored in parent class. "},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     * The array is inherited by child classes. "},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * @param commands An array of size 4 containing command, task status, task description and task date. "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     *                 For todo tasks, task date is null. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public Command(String[] commands) {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        this.commands \u003d commands;"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        this.command \u003d commands[Constants.COMMAND_INDEX];"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * Retrieves the stored command. "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * @return command. "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public String getCommand() {"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        return command;"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":""},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * Executes each function according to command word given."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * The following explains the behaviour of the command words: "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     * COMMAND_EXIT_WORD:"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     * - Displays exit message and exits the program. "},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * COMMAND_LIST_WORD:"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * - Displays all tasks in the tasklist. "},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * COMMAND_MARK_WORD:"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     * - Marks a specified task (identified with task number) as done (i.e. true). "},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * COMMAND_TODO_WORD:"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * - Creates a new todo task and add to tasklist. "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * COMMAND_DEADLINE_WORD:"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     * - Creates a new deadline task and add to tasklist. "},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"     * COMMAND_EVENT_WORD:"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"     * - Creates a new event task and add to tasklist. "},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"     * COMMAND_DELETE_WORD:"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"     * - Deletes a specified task (identified with task number). "},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"     * COMMAND_FIND_WORD:"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"     * - Finds and display all tasks that matches the keyword provided. "},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     * DEFAULT: "},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * - Throw IllegalCommandException. "},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"    public void executeCommand(TaskList tasks, Ui ui, Storage storage) "},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"            throws IllegalCommandException, IndexOutOfBoundsException, "},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            TaskListEmptyException, IllegalArgumentException, IOException, "},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"            InvalidSyntaxException {"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        switch (command) {"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EXIT_WORD:"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"            // Fallthrough"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"            ExitCommand.executeExitProgramRequest(ui);"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_LIST_WORD:"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"            ListCommand.executeListAllTasks(tasks, ui);"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"            MarkCommand markCommand \u003d new MarkCommand(commands);"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"            markCommand.executeMarkTask(tasks, ui, storage);"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandTodo \u003d new AddCommand(commands);"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"            addCommandTodo.executeAddTodo(tasks, ui, storage);"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD:"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandDeadline \u003d new AddCommand(commands);"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"            addCommandDeadline.executeAddDeadline(tasks, ui, storage);"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandEvent \u003d new AddCommand(commands);"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"            addCommandEvent.executeAddEvent(tasks, ui, storage);"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"            DeleteCommand deleteCommand \u003d new DeleteCommand(commands);"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"            deleteCommand.executeDeleteTask(tasks, ui, storage);"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_FIND_WORD:"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"            FindCommand findCommand \u003d new FindCommand(commands);"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"            findCommand.executeFindTask(tasks, ui);"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"            throw new IllegalCommandException();"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":100}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":" * Represents the delete command. An DeleteCommand object corresponds to the delete command input by the user. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    private int taskNumber;"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":""},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    public DeleteCommand(String[] commands) {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        this.taskNumber \u003d Integer.parseInt(commands[Constants.TASK_DESCRIPTION_INDEX]);"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":""},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * Delete a task assigned to the task number. "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * Save to storage and display success message."},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * Applies to user input commands. "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done. "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    protected void executeDeleteTask(TaskList tasks, Ui ui, Storage storage) throws IOException{"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        String deletedTask \u003d tasks.getTask(taskNumber).toString();"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        tasks.removeTask(taskNumber);"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"        storage.saveToFile(tasks);"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        ui.displayDeleteTaskSuccessMessage(deletedTask);"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":33}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":" * Represents the exit command. An ExitCommand object corresponds to the exit command input by the user. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"public class ExitCommand {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    protected static void executeExitProgramRequest(Ui ui) {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"        ui.displayToUser(Constants.MESSAGE_EXIT);"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        ui.displayMessageBorder();"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        System.exit(0);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":15}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.error.TaskListEmptyException;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" * Represents the find command. An FindCommand object corresponds to the find command input by the user. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    private String keyword;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":""},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    public FindCommand(String[] commands) {"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        this.keyword \u003d commands[Constants.TASK_DESCRIPTION_INDEX];"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * Finds and displays all tasks that has a description that matches the keyword. "},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmpty If task list is empty. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    protected void executeFindTask(TaskList tasks, Ui ui) throws TaskListEmptyException {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        if (tasks.isTaskListEmpty()) {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        ui.displayToUser(tasks, keyword);"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.error.TaskListEmptyException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":" * Represents the list command. An ListCommand object corresponds to the list command input by the user. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"public class ListCommand extends Command{"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public ListCommand(String[] commands) {"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":""},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * Lists all tasks current in the tasks list. Shows the type of task (T, D, E) and marks X if the task is done."},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException If task list is empty."},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    protected static void executeListAllTasks(TaskList tasks, Ui ui) throws TaskListEmptyException {"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"        if (tasks.isTaskListEmpty()) {"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"        ui.displayToUser(tasks);"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":26}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import duke.Storage;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":" * Represents the mark command. An MarkCommand object corresponds to the mark command input by the user. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"public class MarkCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    private int taskNumber;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":""},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    public MarkCommand(String[] commands) {"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        this.taskNumber \u003d Integer.parseInt(commands[Constants.TASK_DESCRIPTION_INDEX]);"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * Get task number."},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * @return Task number. "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public int getTaskNumber() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * Marks a given task number as done. "},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * Displays the task taht has been marked and save changes to file. "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * Used for retrieving based on user input. "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    protected void executeMarkTask(TaskList tasks, Ui ui, Storage storage) throws IOException {"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"        tasks.getTask(taskNumber).setTaskStatus();"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"        ui.displayMarkTaskSuccessMessage(tasks, taskNumber);"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"        storage.saveToFile(tasks);"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":42}},{"path":"src/main/java/duke/error/IllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Throws if command input is not one of the available commands.  "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"public class IllegalCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":7}},{"path":"src/main/java/duke/error/ImportTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Throws if task cannot be imported properly. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"public class ImportTaskException extends Exception {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":7}},{"path":"src/main/java/duke/error/InvalidSyntaxException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Throws if the syntax recieved for a command is incorrect. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" * Exception message includes the correct syntax for the respective command. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"public class InvalidSyntaxException extends Exception{"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    public InvalidSyntaxException (String message) {"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":11}},{"path":"src/main/java/duke/error/TaskListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Throws if task list is empty. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"public class TaskListEmptyException extends Exception {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":7}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Represents the deadline task. An Deadline object corresponds to the task with a due date input by the user. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.Date;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    protected Date by;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * Creates a Deadline object. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * @param description Name of task. "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * @param by Deadline of task to complete. "},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        this.by \u003d new Date(by);"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * Retrieves the task type. In this case, it is deadline. "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return \"deadline\";"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * Formats the date according to the dateFormat provided."},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * @return Formatted date. "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    public String getTaskDate(String dateFormat) {"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"        return by.formatDateWithDelimeter(dateFormat);"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":""},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * Returns the formatted deadline task for display. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getTaskDate(Constants.DATE_FORMAT) + \")\";"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":47}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Represents the event task. An Event object corresponds to the task with a set date input by the user. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.Date;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    protected Date at;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * Creates an Event object. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * @param description Name of event. "},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * @param at Date of event occurrence. "},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public Event(String description, String at) {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        this.at \u003d new Date(at);"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * Retrieves the type of task. In this case, it is event. "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return \"event\";"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * Formats the date according to the dateFormat provided."},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * @return Formatted date. "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    public String getTaskDate(String dateFormat) {"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"        return at.formatDateWithDelimeter(dateFormat);"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":""},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * Returns the formatted event task for display. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     * @return Formatted display string. "},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getTaskDate(Constants.DATE_FORMAT) + \")\";"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":49}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Represents a task. A task object corresponds to a task represented by a description and status. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     * Creates a Task object with the given description. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * @param description Task description. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":""},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * Retrieves the task description. "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * @return Task description for the task. "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public String getTaskDescription() {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        return description;"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * Sets the task description. "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * @param description Name of the task.  "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public void setTaskDescription(String description) {"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":""},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * Gets the current status of the task. "},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * @return True if the task is marked as done, flase otherwise. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public boolean getTaskStatus() {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return isDone;"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":""},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * Sets the status of the task to true. "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"    public void setTaskStatus() {"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"        isDone \u003d true;"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":""},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"     * Marks a task accordingly to storage data"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"     * If true, mark task as done, otherwise ignore. "},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     * @param importedTask Task. "},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * @param isDone Task mark status. "},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     * @return Modified task. May or may not be changed. "},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    public void setTaskStatus(String isDone) {"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"        if (isDone.equals(\"true\")) {"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"            setTaskStatus();"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":""},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"     * Returns task date. "},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"     * @return Task date for deadline and event tasks, null for todo. "},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"    public abstract String getTaskDate(String dateFormat);"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":""},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"     * Returns the status icon depending on isDone boolean. "},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"     * If the task is done (i.e. isDone is true), \"X\" is returned. "},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"     * If the task is not done (i.e. isDone is false), \" \" is returned. "},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"     * @return Status icon. "},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"    public String getTaskStatusIcon() {"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":""},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"    public abstract String getTaskType();"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":""},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"     * Formats task information for storage (delimitered by commas). "},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"     * @return Formatted string containing task type, description, status and date. "},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"     *         Date is null for todo tasks. "},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"        return String.format(\"%s, %s, %s, %s\", getTaskType(), String.valueOf(getTaskStatus()), getTaskDescription(), getTaskDate(\"yyyy-MM-dd\"));"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":""},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"     * Formats task for display. "},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"     * @return Formatted string containing task type, description, status and date (if any). "},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"        return String.format(\"[%s] %s\", getTaskStatusIcon(), getTaskDescription());"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":109}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":" * Represents the todo task. An Todo object corresponds to the task without a date. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * Creates a Todo object. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * @param description Name of todo task. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":""},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     * Retrieves the type of task. In this case, it is todo. "},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        return \"todo\";"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * Returns null as date is absent from todo tasks. "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    public String getTaskDate(String dateFormat) {"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        return null;"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":" "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"        return super.toStorageString();"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":""},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * Returns the formatted todo task for display. "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"todo borrow book"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"bye"}],"authorContributionMap":{"xseh":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"del /q ..\\bin\\duke\\*"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xseh":3,"-":19}}]
