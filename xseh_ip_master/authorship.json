[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    // Words for commands."},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_TODO_WORD \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_EVENT_WORD \u003d \"event\";"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_MARK_WORD \u003d \"done\";"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_LIST_WORD \u003d \"list\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_DELETE_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_EXIT_WORD \u003d \"bye\";"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    // Display messages."},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, what can I do for you?\";"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_BORDER \u003d \"__________\".repeat(6);"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task: \";"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_MARKED \u003d \"Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_LIST \u003d \"Here are the tasks in your list: \";"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_DELETE \u003d \"Noted. I have removed this task: \";"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon! \";"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_NUMBER_OF_TASKS \u003d \"You have %s task(s) in the list. \"; "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":""},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_INDEX_OUT_OF_RANGE \u003d \"Index out of range. \";"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_INVALID_COMMAND_RECEIVED \u003d \"Invalid command. Available commands: \""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"            + System.lineSeparator() + \"\\t  list, done, todo, deadline, event, delete, bye\";"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_EMPTY_LIST \u003d \"You have no tasks recorded.\";"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_INVALID_SYNTAX_RECEIVED \u003d \"Invalid syntax! Usage: \";"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_UPDATING_DATA \u003d \"IO Error, please try again. \";"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":""},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"    // Syntax messages for the commands."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_MARK_SYNTAX \u003d \" done \u003ctask number\u003e\";"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_TODO_SYNTAX \u003d \" todo \u003ctask name\u003e\";"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_DEADLINE_SYNTAX \u003d \" deadline \u003ctask name\u003e /by \u003cdate\u003e\";"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_EVENT_SYNTAX \u003d \" event \u003ctask name\u003e /at \u003cdate\u003e\";"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_DELETE_SYNTAX \u003d \"delete \u003ctask number\u003e\";"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":""},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    private static final String FILE_PATH \u003d \"Duke.txt\";"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":""},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    // Filter words to locate date for deadline and event tasks."},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    private static final String DEADLINE_DATA_PREFIX_BY \u003d \"/by\";"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"    private static final String EVENT_DATA_PREFIX_AT \u003d \"/at\";"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":""},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    // List of all tasks. "},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    private static String userCommand;"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    private static String commandWord;"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":""},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"    // Scanner for extracting user input."},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":""},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     * Gets a task object from the tasks list."},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"     * @param index Location of the task on the tasks list."},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"     * @return The task at the index."},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"    private static Task getTask(int index) {"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"        return tasks.get(index);"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":""},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"     * Check if list is empty."},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"     * @return True if sizeOfTaskList is 0 and false if not."},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"    private static boolean isTaskListEmpty() {"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"        return tasks.size() \u003d\u003d 0;"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":""},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"     * Starts the program."},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"    public static void main(String[] args) {"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"        initTaskList();"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"        displayWelcomeMessage();"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"        while (true) {"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"            getUserInput();"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"            executeCommand();"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":""},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"     * Initializes the task list."},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"     * Extracts stored data and add to task list. "},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"    private static void initTaskList() {"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"            readFromFile();"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"        } catch (IOException exception) {"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_UPDATING_DATA);"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"        // Reset userCommand"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"        userCommand \u003d \"\"; "},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":""},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"     * Read the file contents and add tasks to task list. "},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error opening file. "},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"     * @throws FileNotFoundException If the file is not found. "},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"    private static void readFromFile() throws IOException, FileNotFoundException {"},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(FILE_PATH);"},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"        if (file.exists()) {"},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"            Scanner fileScanner \u003d new Scanner(file);"},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"            while (fileScanner.hasNextLine()) {"},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"                String[] data \u003d fileScanner.nextLine().split(\", \");"},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"                addToTaskList(data);"},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"            fileScanner.close();"},{"lineNumber":121,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"xseh"},"content":""},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"xseh"},"content":"     * Adds the tasks from storage to the task list. "},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"     * @param data List of parameters in storage file. "},{"lineNumber":128,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"    private static void addToTaskList(String[] data) {"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":"        switch(data[0]) {"},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"        case \"todo\":"},{"lineNumber":132,"author":{"gitId":"xseh"},"content":"            userCommand \u003d data[2];"},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"            executeAddTodo();"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":135,"author":{"gitId":"xseh"},"content":"        case \"deadline\":"},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"            userCommand \u003d data[2] + DEADLINE_DATA_PREFIX_BY + data[3];"},{"lineNumber":137,"author":{"gitId":"xseh"},"content":"            executeAddDeadline();"},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"xseh"},"content":"        case \"event\":"},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"            userCommand \u003d data[2] + EVENT_DATA_PREFIX_AT + data[3];"},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"            executeAddEvent();"},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"xseh"},"content":"        if (data[1].equals(\"true\")) {"},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"            executeMarkTask(tasks.size() - 1);"},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"xseh"},"content":""},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"     * Displays the welcome message."},{"lineNumber":151,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"    private static void displayWelcomeMessage() {"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_WELCOME);"},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"xseh"},"content":""},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"     * Obtains user input from console. Input stored into userCommand."},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"    private static void getUserInput() {"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":"        // Remove trailing spaces"},{"lineNumber":161,"author":{"gitId":"xseh"},"content":"        userCommand \u003d SCANNER.nextLine().trim();"},{"lineNumber":162,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"xseh"},"content":""},{"lineNumber":164,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"xseh"},"content":"     * Executes each function according to command word given."},{"lineNumber":166,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":167,"author":{"gitId":"xseh"},"content":"     * The following explains the behaviour of the command words: "},{"lineNumber":168,"author":{"gitId":"xseh"},"content":"     * COMMAND_EXIT_WORD:"},{"lineNumber":169,"author":{"gitId":"xseh"},"content":"     * - Displays an exit message. "},{"lineNumber":170,"author":{"gitId":"xseh"},"content":"     * - Exits program. "},{"lineNumber":171,"author":{"gitId":"xseh"},"content":"     * COMMAND_LIST_WORD: "},{"lineNumber":172,"author":{"gitId":"xseh"},"content":"     * - Lists all tasks in tasks list. "},{"lineNumber":173,"author":{"gitId":"xseh"},"content":"     * COMMAND_MARK_WORD: "},{"lineNumber":174,"author":{"gitId":"xseh"},"content":"     * - Obtains task number. "},{"lineNumber":175,"author":{"gitId":"xseh"},"content":"     * - Checks if task is valid. "},{"lineNumber":176,"author":{"gitId":"xseh"},"content":"     * - If valid, mark task as done then display success message. "},{"lineNumber":177,"author":{"gitId":"xseh"},"content":"     * - Otherwise, display error message. "},{"lineNumber":178,"author":{"gitId":"xseh"},"content":"     * COMMAND_TODO_WORD: "},{"lineNumber":179,"author":{"gitId":"xseh"},"content":"     * - Add new todo task to list. "},{"lineNumber":180,"author":{"gitId":"xseh"},"content":"     * COMMAND_DEADLINE_WORD: "},{"lineNumber":181,"author":{"gitId":"xseh"},"content":"     * - Add new deadline task to list."},{"lineNumber":182,"author":{"gitId":"xseh"},"content":"     * COMMAND_EVENT_WORD: "},{"lineNumber":183,"author":{"gitId":"xseh"},"content":"     * - Add new event task to list. "},{"lineNumber":184,"author":{"gitId":"xseh"},"content":"     * COMMAND_DELETE_WORD:"},{"lineNumber":185,"author":{"gitId":"xseh"},"content":"     * - Delete a given task from the list. "},{"lineNumber":186,"author":{"gitId":"xseh"},"content":"     * - Add new event task to list. "},{"lineNumber":187,"author":{"gitId":"xseh"},"content":"     * NO_COMMAND: "},{"lineNumber":188,"author":{"gitId":"xseh"},"content":"     * - No command detected, display error message. "},{"lineNumber":189,"author":{"gitId":"xseh"},"content":"     * DEFAULT: "},{"lineNumber":190,"author":{"gitId":"xseh"},"content":"     * - Invalid command, display error message."},{"lineNumber":191,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"xseh"},"content":"    private static void executeCommand() {"},{"lineNumber":193,"author":{"gitId":"xseh"},"content":"        int taskNumber;"},{"lineNumber":194,"author":{"gitId":"xseh"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"xseh"},"content":"            switch (getCommand()) {"},{"lineNumber":196,"author":{"gitId":"xseh"},"content":"            case COMMAND_EXIT_WORD:"},{"lineNumber":197,"author":{"gitId":"xseh"},"content":"                // Fallthrough"},{"lineNumber":198,"author":{"gitId":"xseh"},"content":"                displayToUser(MESSAGE_EXIT);"},{"lineNumber":199,"author":{"gitId":"xseh"},"content":"                executeExitProgramRequest();"},{"lineNumber":200,"author":{"gitId":"xseh"},"content":"            case COMMAND_LIST_WORD:"},{"lineNumber":201,"author":{"gitId":"xseh"},"content":"                executeListAllTasks();"},{"lineNumber":202,"author":{"gitId":"xseh"},"content":"                return;"},{"lineNumber":203,"author":{"gitId":"xseh"},"content":"            case COMMAND_MARK_WORD:"},{"lineNumber":204,"author":{"gitId":"xseh"},"content":"                taskNumber \u003d getTaskNumber();"},{"lineNumber":205,"author":{"gitId":"xseh"},"content":"                if (isTaskNumberValid(taskNumber)) {"},{"lineNumber":206,"author":{"gitId":"xseh"},"content":"                    executeMarkTask(taskNumber);"},{"lineNumber":207,"author":{"gitId":"xseh"},"content":"                    saveToFile();"},{"lineNumber":208,"author":{"gitId":"xseh"},"content":"                    displayMarkTaskSuccessMessage(taskNumber);"},{"lineNumber":209,"author":{"gitId":"xseh"},"content":"                    return;"},{"lineNumber":210,"author":{"gitId":"xseh"},"content":"                }"},{"lineNumber":211,"author":{"gitId":"xseh"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":212,"author":{"gitId":"xseh"},"content":"            case COMMAND_TODO_WORD:"},{"lineNumber":213,"author":{"gitId":"xseh"},"content":"                executeAddTodo();"},{"lineNumber":214,"author":{"gitId":"xseh"},"content":"                saveToFile();"},{"lineNumber":215,"author":{"gitId":"xseh"},"content":"                displayAddTaskSuccessMessage();"},{"lineNumber":216,"author":{"gitId":"xseh"},"content":"                return;"},{"lineNumber":217,"author":{"gitId":"xseh"},"content":"            case COMMAND_DEADLINE_WORD:"},{"lineNumber":218,"author":{"gitId":"xseh"},"content":"                executeAddDeadline();"},{"lineNumber":219,"author":{"gitId":"xseh"},"content":"                saveToFile();"},{"lineNumber":220,"author":{"gitId":"xseh"},"content":"                displayAddTaskSuccessMessage();"},{"lineNumber":221,"author":{"gitId":"xseh"},"content":"                return;"},{"lineNumber":222,"author":{"gitId":"xseh"},"content":"            case COMMAND_EVENT_WORD:"},{"lineNumber":223,"author":{"gitId":"xseh"},"content":"                executeAddEvent();"},{"lineNumber":224,"author":{"gitId":"xseh"},"content":"                saveToFile();"},{"lineNumber":225,"author":{"gitId":"xseh"},"content":"                displayAddTaskSuccessMessage();"},{"lineNumber":226,"author":{"gitId":"xseh"},"content":"                return;"},{"lineNumber":227,"author":{"gitId":"xseh"},"content":"            case COMMAND_DELETE_WORD:"},{"lineNumber":228,"author":{"gitId":"xseh"},"content":"                taskNumber \u003d getTaskNumber();"},{"lineNumber":229,"author":{"gitId":"xseh"},"content":"                if (isTaskNumberValid(taskNumber)) {"},{"lineNumber":230,"author":{"gitId":"xseh"},"content":"                    String deletedTask \u003d executeDeleteTask(taskNumber);"},{"lineNumber":231,"author":{"gitId":"xseh"},"content":"                    saveToFile();"},{"lineNumber":232,"author":{"gitId":"xseh"},"content":"                    displayDeleteTaskSuccessMessage(deletedTask);"},{"lineNumber":233,"author":{"gitId":"xseh"},"content":"                    return;"},{"lineNumber":234,"author":{"gitId":"xseh"},"content":"                }"},{"lineNumber":235,"author":{"gitId":"xseh"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":236,"author":{"gitId":"xseh"},"content":"            default:"},{"lineNumber":237,"author":{"gitId":"xseh"},"content":"                throw new IllegalThreadStateException();"},{"lineNumber":238,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":239,"author":{"gitId":"xseh"},"content":"        } catch (IllegalThreadStateException exception) {"},{"lineNumber":240,"author":{"gitId":"xseh"},"content":"            // If command detected is not found in available commands"},{"lineNumber":241,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":242,"author":{"gitId":"xseh"},"content":"        } catch (IndexOutOfBoundsException exception) {"},{"lineNumber":243,"author":{"gitId":"xseh"},"content":"            // If task number input by user is out of range"},{"lineNumber":244,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INDEX_OUT_OF_RANGE, String.format(MESSAGE_NUMBER_OF_TASKS, tasks.size()));"},{"lineNumber":245,"author":{"gitId":"xseh"},"content":"        } catch (TaskListEmptyException exception) {"},{"lineNumber":246,"author":{"gitId":"xseh"},"content":"            // If task list is empty"},{"lineNumber":247,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_EMPTY_LIST);"},{"lineNumber":248,"author":{"gitId":"xseh"},"content":"        } catch (IllegalArgumentException exception) {"},{"lineNumber":249,"author":{"gitId":"xseh"},"content":"            // If the syntax for the command is invalid"},{"lineNumber":250,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INVALID_SYNTAX_RECEIVED, getSyntaxMessage());"},{"lineNumber":251,"author":{"gitId":"xseh"},"content":"        } catch (IOException exception) { "},{"lineNumber":252,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_UPDATING_DATA);"},{"lineNumber":253,"author":{"gitId":"xseh"},"content":"        } catch (NullPointerException exception) {"},{"lineNumber":254,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_UPDATING_DATA);"},{"lineNumber":255,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"xseh"},"content":""},{"lineNumber":258,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":259,"author":{"gitId":"xseh"},"content":"     * Extracts the command word from user input. Removes command name from"},{"lineNumber":260,"author":{"gitId":"xseh"},"content":"     * userCommand. If there are parameters after command word (i.e. length \u003e 4),"},{"lineNumber":261,"author":{"gitId":"xseh"},"content":"     * set userCommand to the parameters. Otherwise, set userCommand to null."},{"lineNumber":262,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":263,"author":{"gitId":"xseh"},"content":"     * @return Command word extracted."},{"lineNumber":264,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":265,"author":{"gitId":"xseh"},"content":"    private static String getCommand() {"},{"lineNumber":266,"author":{"gitId":"xseh"},"content":"        // First word of userCommand is the task command"},{"lineNumber":267,"author":{"gitId":"xseh"},"content":"        commandWord \u003d userCommand.split(\" \")[0].toLowerCase();"},{"lineNumber":268,"author":{"gitId":"xseh"},"content":"        // Removes command name with has 4 letters"},{"lineNumber":269,"author":{"gitId":"xseh"},"content":"        if (userCommand.length() \u003e 4) {"},{"lineNumber":270,"author":{"gitId":"xseh"},"content":"            userCommand \u003d userCommand.substring(userCommand.indexOf(\" \") + 1, userCommand.length());"},{"lineNumber":271,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":272,"author":{"gitId":"xseh"},"content":"            userCommand \u003d null;"},{"lineNumber":273,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"xseh"},"content":"        return commandWord;"},{"lineNumber":275,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"xseh"},"content":""},{"lineNumber":277,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":278,"author":{"gitId":"xseh"},"content":"     * Exits the program."},{"lineNumber":279,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":280,"author":{"gitId":"xseh"},"content":"    private static void executeExitProgramRequest() {"},{"lineNumber":281,"author":{"gitId":"xseh"},"content":"        System.exit(0);"},{"lineNumber":282,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"xseh"},"content":""},{"lineNumber":284,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"xseh"},"content":"     * Lists all tasks current in the tasks list. Shows the type of task (T, D, E)"},{"lineNumber":286,"author":{"gitId":"xseh"},"content":"     * and marks X if the task is done."},{"lineNumber":287,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":288,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException If task list is empty."},{"lineNumber":289,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":290,"author":{"gitId":"xseh"},"content":"    private static void executeListAllTasks() throws TaskListEmptyException {"},{"lineNumber":291,"author":{"gitId":"xseh"},"content":"        if (isTaskListEmpty()) {"},{"lineNumber":292,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":293,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"xseh"},"content":"        displayToUser();"},{"lineNumber":295,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"xseh"},"content":""},{"lineNumber":297,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":298,"author":{"gitId":"xseh"},"content":"     * Gets task number from the input string."},{"lineNumber":299,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":300,"author":{"gitId":"xseh"},"content":"     * @return Task number (Starts with 0)."},{"lineNumber":301,"author":{"gitId":"xseh"},"content":"     * @throws NumberFormatException    If userCommand is not an integer."},{"lineNumber":302,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If no task number is detected."},{"lineNumber":303,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException   If task list is empty."},{"lineNumber":304,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":305,"author":{"gitId":"xseh"},"content":"    private static int getTaskNumber() throws NumberFormatException, IllegalArgumentException, TaskListEmptyException {"},{"lineNumber":306,"author":{"gitId":"xseh"},"content":"        if (userCommand \u003d\u003d null) {"},{"lineNumber":307,"author":{"gitId":"xseh"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":308,"author":{"gitId":"xseh"},"content":"        } else if (isTaskListEmpty()) {"},{"lineNumber":309,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":310,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":311,"author":{"gitId":"xseh"},"content":"        // Since user input task number starts from 1, remove 1 from taskNumber to"},{"lineNumber":312,"author":{"gitId":"xseh"},"content":"        // reflect the correct index in tasks."},{"lineNumber":313,"author":{"gitId":"xseh"},"content":"        int taskNumber \u003d Integer.parseInt(getTaskNumberString()) - 1;"},{"lineNumber":314,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":315,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"xseh"},"content":""},{"lineNumber":317,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":318,"author":{"gitId":"xseh"},"content":"     * Gets task number in string."},{"lineNumber":319,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":320,"author":{"gitId":"xseh"},"content":"     * @return Task number."},{"lineNumber":321,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"xseh"},"content":"    private static String getTaskNumberString() {"},{"lineNumber":323,"author":{"gitId":"xseh"},"content":"        // Gets the taskNumber from the index of the first \" \""},{"lineNumber":324,"author":{"gitId":"xseh"},"content":"        // Adds 1 to the index remove the \" \" from string"},{"lineNumber":325,"author":{"gitId":"xseh"},"content":"        return userCommand.substring(userCommand.indexOf(\" \") + 1);"},{"lineNumber":326,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"xseh"},"content":""},{"lineNumber":328,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":329,"author":{"gitId":"xseh"},"content":"     * Checks if task number is valid."},{"lineNumber":330,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":331,"author":{"gitId":"xseh"},"content":"     * @param taskNumber Task number."},{"lineNumber":332,"author":{"gitId":"xseh"},"content":"     * @return True if number is valid and false if invalid."},{"lineNumber":333,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":334,"author":{"gitId":"xseh"},"content":"    private static boolean isTaskNumberValid(int taskNumber) {"},{"lineNumber":335,"author":{"gitId":"xseh"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.size();"},{"lineNumber":336,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"xseh"},"content":""},{"lineNumber":338,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":339,"author":{"gitId":"xseh"},"content":"     * Marks a given task number as done."},{"lineNumber":340,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":341,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":342,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":343,"author":{"gitId":"xseh"},"content":"    private static void executeMarkTask(int taskNumber) {"},{"lineNumber":344,"author":{"gitId":"xseh"},"content":"        tasks.get(taskNumber).setTaskStatus();"},{"lineNumber":345,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"xseh"},"content":""},{"lineNumber":347,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":348,"author":{"gitId":"xseh"},"content":"     * Displays the success message after marking task as done."},{"lineNumber":349,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":350,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":351,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":352,"author":{"gitId":"xseh"},"content":"    private static void displayMarkTaskSuccessMessage(int taskNumber) {"},{"lineNumber":353,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_MARKED, tasks.get(taskNumber).toString());"},{"lineNumber":354,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"xseh"},"content":""},{"lineNumber":356,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":357,"author":{"gitId":"xseh"},"content":"     * Adds a new todo task to task list. If userCommand does not contain task"},{"lineNumber":358,"author":{"gitId":"xseh"},"content":"     * description, throw invalid command syntax error."},{"lineNumber":359,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":360,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If userCommand is null."},{"lineNumber":361,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":362,"author":{"gitId":"xseh"},"content":"    private static void executeAddTodo() throws IllegalArgumentException {"},{"lineNumber":363,"author":{"gitId":"xseh"},"content":"        if (userCommand \u003d\u003d null) {"},{"lineNumber":364,"author":{"gitId":"xseh"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":365,"author":{"gitId":"xseh"},"content":"        } "},{"lineNumber":366,"author":{"gitId":"xseh"},"content":"        tasks.add(new Todo(userCommand));"},{"lineNumber":367,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"xseh"},"content":""},{"lineNumber":369,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":370,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. Processes the user input to extract"},{"lineNumber":371,"author":{"gitId":"xseh"},"content":"     * date. If date is not null, create new deadline task. Otherwise, throw invalid"},{"lineNumber":372,"author":{"gitId":"xseh"},"content":"     * command syntax error."},{"lineNumber":373,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":374,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If date is not found."},{"lineNumber":375,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":376,"author":{"gitId":"xseh"},"content":"    private static void executeAddDeadline() throws IllegalArgumentException {"},{"lineNumber":377,"author":{"gitId":"xseh"},"content":"        String date \u003d processParameters(DEADLINE_DATA_PREFIX_BY);"},{"lineNumber":378,"author":{"gitId":"xseh"},"content":"        tasks.add(new Deadline(userCommand, date));"},{"lineNumber":379,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":380,"author":{"gitId":"xseh"},"content":""},{"lineNumber":381,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":382,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. "},{"lineNumber":383,"author":{"gitId":"xseh"},"content":"     * Processes the user input to exit. "},{"lineNumber":384,"author":{"gitId":"xseh"},"content":"     * If date is not null, create new deadline task.  "},{"lineNumber":385,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":386,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If date is not found."},{"lineNumber":387,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":388,"author":{"gitId":"xseh"},"content":"    private static void executeAddEvent() throws IllegalArgumentException {"},{"lineNumber":389,"author":{"gitId":"xseh"},"content":"        String date \u003d processParameters(EVENT_DATA_PREFIX_AT);"},{"lineNumber":390,"author":{"gitId":"xseh"},"content":"        tasks.add(new Event(userCommand, date));"},{"lineNumber":391,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"xseh"},"content":""},{"lineNumber":393,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":394,"author":{"gitId":"xseh"},"content":"     * Delete a task assigned to the task number. "},{"lineNumber":395,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":396,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done. "},{"lineNumber":397,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":398,"author":{"gitId":"xseh"},"content":"    private static String executeDeleteTask(int taskNumber) {"},{"lineNumber":399,"author":{"gitId":"xseh"},"content":"        String deletedTask \u003d tasks.get(taskNumber).toString();"},{"lineNumber":400,"author":{"gitId":"xseh"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":401,"author":{"gitId":"xseh"},"content":"        return deletedTask;"},{"lineNumber":402,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":403,"author":{"gitId":"xseh"},"content":""},{"lineNumber":404,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":405,"author":{"gitId":"xseh"},"content":"     * Displays the success message after deleting the task. "},{"lineNumber":406,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":407,"author":{"gitId":"xseh"},"content":"     * @param deletedTask The description of deleted task. "},{"lineNumber":408,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":409,"author":{"gitId":"xseh"},"content":"    private static void displayDeleteTaskSuccessMessage(String deletedTask) {"},{"lineNumber":410,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_DELETE, deletedTask);"},{"lineNumber":411,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":412,"author":{"gitId":"xseh"},"content":""},{"lineNumber":413,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":414,"author":{"gitId":"xseh"},"content":"     * Finds the location of the filters and locate the date from the task. Removes"},{"lineNumber":415,"author":{"gitId":"xseh"},"content":"     * the task date information from userCommand, keeping only the task name in"},{"lineNumber":416,"author":{"gitId":"xseh"},"content":"     * userCommand."},{"lineNumber":417,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":418,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":419,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":420,"author":{"gitId":"xseh"},"content":"     * @return The date extracted from userCommand."},{"lineNumber":421,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If date is not found."},{"lineNumber":422,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":423,"author":{"gitId":"xseh"},"content":"    private static String processParameters(String filterString) throws IllegalArgumentException {"},{"lineNumber":424,"author":{"gitId":"xseh"},"content":"        int indexOfDate \u003d userCommand.indexOf(filterString);"},{"lineNumber":425,"author":{"gitId":"xseh"},"content":"        if (indexOfDate \u003e 0) {"},{"lineNumber":426,"author":{"gitId":"xseh"},"content":"            String date \u003d getDate(indexOfDate, filterString);"},{"lineNumber":427,"author":{"gitId":"xseh"},"content":"            userCommand \u003d userCommand.substring(0, indexOfDate).trim();"},{"lineNumber":428,"author":{"gitId":"xseh"},"content":"            return date;"},{"lineNumber":429,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":430,"author":{"gitId":"xseh"},"content":"        throw new IllegalArgumentException();"},{"lineNumber":431,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":432,"author":{"gitId":"xseh"},"content":""},{"lineNumber":433,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":434,"author":{"gitId":"xseh"},"content":"     * Get the syntax of the commands depending on the one given by the user."},{"lineNumber":435,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":436,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":437,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":438,"author":{"gitId":"xseh"},"content":"     * @return The syntax to task command given by the user."},{"lineNumber":439,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":440,"author":{"gitId":"xseh"},"content":"    private static String getSyntaxMessage() {"},{"lineNumber":441,"author":{"gitId":"xseh"},"content":"        switch (commandWord) {"},{"lineNumber":442,"author":{"gitId":"xseh"},"content":"        case COMMAND_TODO_WORD:"},{"lineNumber":443,"author":{"gitId":"xseh"},"content":"            return MESSAGE_TODO_SYNTAX;"},{"lineNumber":444,"author":{"gitId":"xseh"},"content":"        case COMMAND_DEADLINE_WORD: "},{"lineNumber":445,"author":{"gitId":"xseh"},"content":"            return MESSAGE_DEADLINE_SYNTAX;"},{"lineNumber":446,"author":{"gitId":"xseh"},"content":"        case COMMAND_EVENT_WORD:"},{"lineNumber":447,"author":{"gitId":"xseh"},"content":"            return MESSAGE_EVENT_SYNTAX;"},{"lineNumber":448,"author":{"gitId":"xseh"},"content":"        case COMMAND_MARK_WORD:"},{"lineNumber":449,"author":{"gitId":"xseh"},"content":"            return MESSAGE_MARK_SYNTAX;"},{"lineNumber":450,"author":{"gitId":"xseh"},"content":"        case COMMAND_DELETE_WORD:"},{"lineNumber":451,"author":{"gitId":"xseh"},"content":"            return MESSAGE_DELETE_SYNTAX;"},{"lineNumber":452,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":453,"author":{"gitId":"xseh"},"content":"            return null;"},{"lineNumber":454,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":455,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":456,"author":{"gitId":"xseh"},"content":""},{"lineNumber":457,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":458,"author":{"gitId":"xseh"},"content":"     * Extracts the date from userCommand."},{"lineNumber":459,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":460,"author":{"gitId":"xseh"},"content":"     * @param indexOfDate  The index for the location of /by in userCommand."},{"lineNumber":461,"author":{"gitId":"xseh"},"content":"     *                     Indicates the begining of date."},{"lineNumber":462,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":463,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":464,"author":{"gitId":"xseh"},"content":"     * @return Date specified in user input (userCommand)."},{"lineNumber":465,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If no date is detected after the /by"},{"lineNumber":466,"author":{"gitId":"xseh"},"content":"     *                                  parameter."},{"lineNumber":467,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":468,"author":{"gitId":"xseh"},"content":"    private static String getDate(int indexOfDate, String filterString) throws IllegalArgumentException {"},{"lineNumber":469,"author":{"gitId":"xseh"},"content":"        // Check if string contains date after filterString"},{"lineNumber":470,"author":{"gitId":"xseh"},"content":"        // +3 to remove filterString and +1 to convert index to length. Total: +4"},{"lineNumber":471,"author":{"gitId":"xseh"},"content":"        if (userCommand.length() \u003c indexOfDate + 4) {"},{"lineNumber":472,"author":{"gitId":"xseh"},"content":"            throw new IllegalArgumentException(getSyntaxMessage());"},{"lineNumber":473,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":474,"author":{"gitId":"xseh"},"content":"        // Add 3 to indexOfDate to remove the \"/by\" or \"/at\" filter strings"},{"lineNumber":475,"author":{"gitId":"xseh"},"content":"        return userCommand.substring(indexOfDate + 3).trim();"},{"lineNumber":476,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":477,"author":{"gitId":"xseh"},"content":""},{"lineNumber":478,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":479,"author":{"gitId":"xseh"},"content":"     * Displays success message after adding new task."},{"lineNumber":480,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":481,"author":{"gitId":"xseh"},"content":"    private static void displayAddTaskSuccessMessage() {"},{"lineNumber":482,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_ADDED, \"  \" + getTask(tasks.size()-1).toString(), String.format(MESSAGE_NUMBER_OF_TASKS,"},{"lineNumber":483,"author":{"gitId":"xseh"},"content":"                tasks.size()));"},{"lineNumber":484,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":485,"author":{"gitId":"xseh"},"content":""},{"lineNumber":486,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":487,"author":{"gitId":"xseh"},"content":"     * Displays a given message to the user."},{"lineNumber":488,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":489,"author":{"gitId":"xseh"},"content":"     * @param message Message to be displayed."},{"lineNumber":490,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":491,"author":{"gitId":"xseh"},"content":"    private static void displayToUser(String... messages) {"},{"lineNumber":492,"author":{"gitId":"xseh"},"content":"        System.out.println(String.format(\"\\t%s\", MESSAGE_BORDER));"},{"lineNumber":493,"author":{"gitId":"xseh"},"content":"        for (String m : messages) {"},{"lineNumber":494,"author":{"gitId":"xseh"},"content":"            System.out.println(String.format(\"\\t %s\", m));"},{"lineNumber":495,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":496,"author":{"gitId":"xseh"},"content":"        System.out.println(String.format(\"\\t%s\", MESSAGE_BORDER));"},{"lineNumber":497,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":498,"author":{"gitId":"xseh"},"content":""},{"lineNumber":499,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":500,"author":{"gitId":"xseh"},"content":"     * Displays the list of tasks to the user. The list will be numbered, starting"},{"lineNumber":501,"author":{"gitId":"xseh"},"content":"     * from 1."},{"lineNumber":502,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":503,"author":{"gitId":"xseh"},"content":"     * @param tasks Tasks to be listed."},{"lineNumber":504,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":505,"author":{"gitId":"xseh"},"content":"    private static void displayToUser() {"},{"lineNumber":506,"author":{"gitId":"xseh"},"content":"        String listAsString \u003d getDisplayString(tasks);"},{"lineNumber":507,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_LIST, listAsString);"},{"lineNumber":508,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":509,"author":{"gitId":"xseh"},"content":""},{"lineNumber":510,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":511,"author":{"gitId":"xseh"},"content":"     * Returns the display string representation of the list of tasks."},{"lineNumber":512,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":513,"author":{"gitId":"xseh"},"content":"     * @param tasks Task list used."},{"lineNumber":514,"author":{"gitId":"xseh"},"content":"     * @return The list of all items in list, formatted with numberings and the"},{"lineNumber":515,"author":{"gitId":"xseh"},"content":"     *         total number of tasks in list."},{"lineNumber":516,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":517,"author":{"gitId":"xseh"},"content":"    private static String getDisplayString(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":518,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":519,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":520,"author":{"gitId":"xseh"},"content":"            int displayIndex \u003d i + 1;"},{"lineNumber":521,"author":{"gitId":"xseh"},"content":"            message.append(System.lineSeparator() + String.format(\"\\t %d. %s\", displayIndex, getTask(i).toString()));"},{"lineNumber":522,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":523,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":524,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":525,"author":{"gitId":"xseh"},"content":""},{"lineNumber":526,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":527,"author":{"gitId":"xseh"},"content":"     * Checks for presence of file before saving. "},{"lineNumber":528,"author":{"gitId":"xseh"},"content":"     * If file is not found, create file for storing task list. "},{"lineNumber":529,"author":{"gitId":"xseh"},"content":"     * Then, store task list into file. "},{"lineNumber":530,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":531,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error reating file. "},{"lineNumber":532,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":533,"author":{"gitId":"xseh"},"content":"    private static void saveToFile() throws IOException {"},{"lineNumber":534,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(FILE_PATH);"},{"lineNumber":535,"author":{"gitId":"xseh"},"content":"        file.createNewFile();"},{"lineNumber":536,"author":{"gitId":"xseh"},"content":"        writeToFile(file);"},{"lineNumber":537,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":538,"author":{"gitId":"xseh"},"content":""},{"lineNumber":539,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":540,"author":{"gitId":"xseh"},"content":"     * Writes the new task list into file. "},{"lineNumber":541,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":542,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error writing to file. "},{"lineNumber":543,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":544,"author":{"gitId":"xseh"},"content":"    private static void writeToFile(File file) throws IOException {"},{"lineNumber":545,"author":{"gitId":"xseh"},"content":"        FileWriter fw \u003d new FileWriter(file.getAbsolutePath(), false);"},{"lineNumber":546,"author":{"gitId":"xseh"},"content":"        fw.write(convertToFileFormat());"},{"lineNumber":547,"author":{"gitId":"xseh"},"content":"        fw.close();"},{"lineNumber":548,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":549,"author":{"gitId":"xseh"},"content":""},{"lineNumber":550,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":551,"author":{"gitId":"xseh"},"content":"     * Converts the task list into storage format. "},{"lineNumber":552,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":553,"author":{"gitId":"xseh"},"content":"    private static String convertToFileFormat() {"},{"lineNumber":554,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":555,"author":{"gitId":"xseh"},"content":"        for (Task t : tasks) {"},{"lineNumber":556,"author":{"gitId":"xseh"},"content":"            message.append(t.toStorageString() + System.lineSeparator());"},{"lineNumber":557,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":558,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":559,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":560,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xseh":557,"-":3}},{"path":"src/main/java/duke/error/IllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class IllegalCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":4}},{"path":"src/main/java/duke/error/TaskListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class TaskListEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":4}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * Creates a Deadline object. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * @param description Name of task. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * @param by Deadline of task to complete. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        return \"deadline\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        return super.toStorageString() + \", \" + by;"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * Creates an Event object. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * @param description Name of event. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * @param at Date of event occurrence. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public Event(String description, String at) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        return \"event\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        return super.toStorageString() + \", \" + at;"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":33}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"    /** Boolean to track if task is completed */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * Creates a Task object with the given description. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     * @param description Task description. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":""},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public String getTaskDescription() {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public void setTaskDescription(String description) {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public boolean getTaskStatus() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return isDone;"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public void setTaskStatus() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"     * Returns the status icon depending on isDone boolean. "},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     * If the task is done (i.e. isDone is true), \"X\" is returned. "},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * If the task is not done (i.e. isDone is false), \" \" is returned. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * @return Status icon. "},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    public String getTaskStatusIcon() {"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":""},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    public abstract String getTaskType();"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":""},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"        return String.format(\"%s, %s, %s\", getTaskType(), String.valueOf(getTaskStatus()), getTaskDescription());"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":""},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"        return String.format(\"[%s] %s\", getTaskStatusIcon(), getTaskDescription());"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":57}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * Creates a Todo object. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * @param description Name of todo task. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    public Todo(String description) {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        return \"todo\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":" "},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        return super.toStorageString();"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":""},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"todo borrow book"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"bye"}],"authorContributionMap":{"xseh":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"del /q ..\\bin\\duke\\*"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xseh":3,"-":19}}]
