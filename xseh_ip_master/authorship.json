[{"path":"src/main/java/duke/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public final class Constants {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    public Constants() {"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    // Words for commands."},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_TODO_WORD \u003d \"todo\";"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_EVENT_WORD \u003d \"event\";"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_MARK_WORD \u003d \"done\";"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_LIST_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_DELETE_WORD \u003d \"delete\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    public static final String COMMAND_EXIT_WORD \u003d \"bye\";"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    // Display messages."},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, what can I do for you?\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_BORDER \u003d \"-\u003d-\u003d-\u003d-\u003d-\u003d-\".repeat(6);"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task: \";"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_MARKED \u003d \"Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list: \";"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DELETE \u003d \"Noted. I have removed this task: \";"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon! \";"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_NUMBER_OF_TASKS \u003d \"You have %s task(s) in the list. \"; "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":""},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INDEX_OUT_OF_RANGE \u003d \"Index out of range. \";"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_COMMAND_RECEIVED \u003d \"Invalid command. Available commands: \""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"            + System.lineSeparator() + \"\\t  list, done, todo, deadline, event, delete, bye\";"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_EMPTY_LIST \u003d \"You have no tasks recorded.\";"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_INVALID_SYNTAX_RECEIVED \u003d \"Invalid syntax! Usage: \";"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_IO \u003d \"IO Error, please try again. \";"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_IMPORT_TASK \u003d \"Failed to import some tasks. \";"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public static final String ERROR_FILE_NOT_FOUND \u003d \"File not found, loading new tasklist.\";"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":""},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    // Syntax messages for the commands."},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_MARK_SYNTAX \u003d \" done \u003ctask number\u003e\";"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_TODO_SYNTAX \u003d \" todo \u003ctask name\u003e\";"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DEADLINE_SYNTAX \u003d \" deadline \u003ctask name\u003e /by \u003cdate\u003e\";"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_EVENT_SYNTAX \u003d \" event \u003ctask name\u003e /at \u003cdate\u003e\";"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    public static final String MESSAGE_DELETE_SYNTAX \u003d \" delete \u003ctask number\u003e\";"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":""},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    // File path location"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    public static final String FILE_PATH \u003d \"Duke.txt\";"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":""},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    // Index for command parameters"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    public static final int COMMAND_INDEX \u003d 0;"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"    public static final int MARK_INDEX \u003d 1;"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    public static final int TASK_DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"    // Index specific to deadline and event tasks "},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    public static final int TASK_DATE_INDEX \u003d 3;"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":""},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    // Filter words to locate date for deadline and event tasks."},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    public static final String DEADLINE_DATA_PREFIX_BY \u003d \"/by\";"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"    public static final String EVENT_DATA_PREFIX_AT \u003d \"/at\";"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":57}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.command.*;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    private Storage storage;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":""},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    public Duke (String filePath) {"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        ui \u003d new Ui();"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"            tasks \u003d new TaskList(storage.readFromFile());"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"            ui.displayToUser(Constants.ERROR_FILE_NOT_FOUND);"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        } catch (ImportTaskException exception) {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"            ui.displayToUser(Constants.ERROR_IMPORT_TASK);"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":""},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    public void run() {"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        ui.displayWelcomeMessage();"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        while (true) {"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"                String fullCommand \u003d ui.getUserInput();"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"                Parser parser \u003d new Parser();"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"                Command command \u003d new Command(parser.getCommand(tasks, fullCommand));"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"                command.executeCommand(tasks, ui, storage);"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"            } catch (IllegalCommandException exception) {"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"                // If command detected is not found in available commands"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"            } catch (IndexOutOfBoundsException exception) {"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"                // If task number input by user is out of range"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INDEX_OUT_OF_RANGE, "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"                        String.format(Constants.MESSAGE_NUMBER_OF_TASKS, tasks.getSize()));"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"            } catch (TaskListEmptyException exception) {"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"                // If task list is empty"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_EMPTY_LIST);"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"            } catch (InvalidSyntaxException exception) {"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"                // If the syntax for the command is invalid"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_INVALID_SYNTAX_RECEIVED, exception.getMessage()); // add syntax message here"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"            } catch (IOException exception) { "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_IO);"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"            } catch (NullPointerException exception) {"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"                ui.displayToUser(Constants.ERROR_IO);"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":""},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"     * Starts the program."},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"    public static void main(String[] args) {"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"        new Duke(\"tasks.txt\").run();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xseh":59,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    public Parser() {"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     * Extracts the command word from user input. Removes command name from"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     * userCommand. If there are parameters after command word (i.e. length \u003e 4),"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * set userCommand to the parameters. Otherwise, set userCommand to null."},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * @return Command word extracted."},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    protected String[] getCommand(TaskList tasks, String fullCommand) throws NumberFormatException, InvalidSyntaxException, TaskListEmptyException, IndexOutOfBoundsException, IllegalCommandException {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        String[] parsedCommands \u003d new String[4];"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":""},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        // Split command according to first instance of \" \""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"        String[] extractedCommands \u003d fullCommand.split(\" \", 2);"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        // First index (i.e. 0) contains command word, next index contains parameters if any "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"        parsedCommands[Constants.COMMAND_INDEX] \u003d extractedCommands[Constants.COMMAND_INDEX].toLowerCase();"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        parsedCommands[Constants.MARK_INDEX] \u003d \"false\";"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":""},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        switch (parsedCommands[Constants.COMMAND_INDEX]) {"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_LIST_WORD:"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EXIT_WORD:"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"            // No further parsing needed, return immediately"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"            if (extractedCommands.length \u003c 2) {"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"                throw new InvalidSyntaxException(Constants.MESSAGE_TODO_SYNTAX);"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"            // Add remaining parameters to array (i.e. task description)"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"            parsedCommands[Constants.TASK_DESCRIPTION_INDEX] \u003d extractedCommands[1];"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"            parsedCommands[Constants.TASK_DATE_INDEX] \u003d null;"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"            // Check if command is complete, throw exception if not "},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"            if (extractedCommands.length \u003c 2) {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"                Ui ui \u003d new Ui();"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"                throw new InvalidSyntaxException(ui.getSyntaxMessage(parsedCommands[Constants.COMMAND_INDEX]));"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":""},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"            // Check remaining parameters for valid index (i.e. task number)"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"            // Add valid index to ArrayList, otherwise invoke error"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"            int taskNumber \u003d getTaskNumber(parsedCommands[Constants.COMMAND_INDEX], tasks, extractedCommands[1]);"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"            if (!isTaskNumberValid(tasks, taskNumber)) {"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"            parsedCommands[Constants.TASK_DESCRIPTION_INDEX] \u003d String.valueOf(taskNumber);"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD:"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"            if (extractedCommands.length \u003c 2) {"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"                Ui ui \u003d new Ui();"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"                throw new InvalidSyntaxException(ui.getSyntaxMessage(parsedCommands[Constants.COMMAND_INDEX]));"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":""},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            // Get task description and date (after /by or /at clause)"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"            // Append both into commands and return"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"            String[] processCommandParameters \u003d processParameters(parsedCommands[Constants.COMMAND_INDEX], extractedCommands[1]);"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"            "},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"            // In parsedCommandParameters, first index contains task description and the second contains task date"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"            parsedCommands[Constants.TASK_DESCRIPTION_INDEX] \u003d processCommandParameters[0];"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"            parsedCommands[Constants.TASK_DATE_INDEX] \u003d processCommandParameters[1];"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"            // Invalid command receieved, throw error"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"            throw new IllegalCommandException();"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"        return parsedCommands;"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"     * Checks if task number is valid."},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"     * @param taskNumber Task number."},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"     * @return True if number is valid and false if invalid."},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"    private boolean isTaskNumberValid(TaskList tasks, int taskNumber) {"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.getSize();"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":""},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"     * Gets task number from the input string."},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"     * @return Task number (Starts with 0)."},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"     * @throws NumberFormatException    If userCommand is not an integer."},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"     * @throws IllegalCommandException If no task number is detected."},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException   If task list is empty."},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"    private int getTaskNumber(String command, TaskList tasks, String commandParameter) throws NumberFormatException, InvalidSyntaxException, TaskListEmptyException {"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"        if (tasks.isTaskListEmpty()) {"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"        // Since user input task number starts from 1, remove 1 from taskNumber to"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"        // reflect the correct index in tasks."},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"        int taskNumber \u003d Integer.parseInt(getTaskNumberString(commandParameter)) - 1;"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":""},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"     * Gets task number in string."},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"     * @return Task number."},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"    private String getTaskNumberString(String commandParameter) {"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"        // Gets the taskNumber from the index of the first \" \""},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"        // Adds 1 to the index remove the \" \" from string"},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"        return commandParameter.substring(commandParameter.indexOf(\" \") + 1);"},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"xseh"},"content":""},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"     * Finds the location of the filters and locate the date from the task. Removes"},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"     * the task date information from userCommand, keeping only the task name in"},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"     * userCommand."},{"lineNumber":121,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":123,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"     * @return The date extracted from userCommand."},{"lineNumber":125,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If date is not found."},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"    private String[] processParameters(String command, String commandParameter) throws InvalidSyntaxException {"},{"lineNumber":128,"author":{"gitId":"xseh"},"content":"        String filterString;"},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"        if (command.equals(Constants.COMMAND_DEADLINE_WORD)) {"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":"            filterString \u003d Constants.DEADLINE_DATA_PREFIX_BY;"},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"xseh"},"content":"            filterString \u003d Constants.EVENT_DATA_PREFIX_AT;"},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"        String[] processCommand \u003d getDate(command, commandParameter, filterString);"},{"lineNumber":135,"author":{"gitId":"xseh"},"content":"        return processCommand;"},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"xseh"},"content":""},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"xseh"},"content":"     * Extracts the date from userCommand."},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"     * @param indexOfDate  The index for the location of /by in userCommand."},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"     *                     Indicates the begining of date."},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":144,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"     * @return Date specified in user input (userCommand)."},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If no date is detected after the /by"},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"     *                     parameter."},{"lineNumber":148,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"    private String[] getDate(String command, String commandParameter, String filterString) throws InvalidSyntaxException {"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"        int indexOfDate \u003d commandParameter.indexOf(filterString);"},{"lineNumber":151,"author":{"gitId":"xseh"},"content":"        if (indexOfDate \u003c 0) {"},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(ui.getSyntaxMessage(command));"},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"xseh"},"content":""},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"        // Check if string contains date after filterString"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"        // +3 to remove filterString and +1 to convert index to length. Total: +4"},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"        if (commandParameter.length() \u003c indexOfDate + 4) {"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(ui.getSyntaxMessage(command));"},{"lineNumber":161,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"xseh"},"content":""},{"lineNumber":163,"author":{"gitId":"xseh"},"content":"        String date \u003d commandParameter.substring(indexOfDate + 3).trim();"},{"lineNumber":164,"author":{"gitId":"xseh"},"content":"        String taskDescription \u003d commandParameter.substring(0, indexOfDate).trim();"},{"lineNumber":165,"author":{"gitId":"xseh"},"content":"        // Add 3 to indexOfDate to remove the \"/by\" or \"/at\" filter strings"},{"lineNumber":166,"author":{"gitId":"xseh"},"content":"        return new String[]{taskDescription, date};"},{"lineNumber":167,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":168}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"import duke.command.*;"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":" * Deals with loading tasks from the file and saving tasks in the file. "},{"lineNumber":15,"author":{"gitId":"xseh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    protected String filePath;"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public Storage(String filePath) {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * Read the file contents and add tasks to task list."},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     * @throws IOException           If there is an error opening file."},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     * @throws FileNotFoundException If the file is not found."},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    protected ArrayList\u003cTask\u003e readFromFile() throws ImportTaskException, FileNotFoundException {"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"        if (!file.exists()) {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"            throw new FileNotFoundException();"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"        Scanner fileScanner \u003d new Scanner(file);"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        ArrayList\u003cTask\u003e importedTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"        while (fileScanner.hasNextLine()) {"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"            String[] extractedTaskParameters \u003d fileScanner.nextLine().split(\", \");"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"            Task importedTask \u003d createTask(extractedTaskParameters);"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"            importedTask \u003d markTask(importedTask, extractedTaskParameters[Constants.MARK_INDEX]);"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"            importedTasks.add(importedTask);"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"        fileScanner.close();"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"        return importedTasks;"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":""},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     * Checks for presence of file before saving. If file is not found, create file"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * for storing task list. Then, store task list into file."},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error reating file."},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    public void saveToFile(TaskList tasks) throws IOException {"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"        file.createNewFile();"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"        writeToFile(tasks, file);"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":""},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"     * Writes the new task list into file."},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"     * @throws IOException If there is an error writing to file."},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"    private void writeToFile(TaskList tasks, File file) throws IOException {"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"        FileWriter fileWriter \u003d new FileWriter(file.getAbsolutePath(), false);"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        fileWriter.write(convertToFileFormat(tasks));"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"        fileWriter.close();"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":""},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"     * Converts the task list into storage format."},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"    private String convertToFileFormat(TaskList tasks) {"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"            message.append(tasks.getTask(i).toStorageString() + System.lineSeparator());"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":""},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"     * Adds the tasks from storage to the task list. "},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"     * @param data List of parameters in storage file. "},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"    private Task createTask(String[] extractedTaskParameters) throws ImportTaskException {"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"        Task importedTask;"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"        AddCommand addCommand \u003d new AddCommand(extractedTaskParameters);"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"        switch(extractedTaskParameters[Constants.COMMAND_INDEX]) {"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"        case \"todo\":"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"            importedTask \u003d addCommand.addTodoFromStorage();"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"        case \"deadline\":"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"            importedTask \u003d addCommand.addDeadlineFromStorage();"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"        case \"event\":"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"            importedTask \u003d addCommand.addEventFromStorage();"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":""},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"        return importedTask;"},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":""},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"    private Task markTask(Task importedTask, String isDone) {"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"        if (isDone.equals(\"true\")) {"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"            importedTask.setTaskStatus();"},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"        return importedTask;"},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":112}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    public ArrayList\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     * If data found, create a lit with stored data. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * @param tasks List containing all tasks retrieved form storage. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * If Storage data not found, create an empty list. "},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * Check if list is empty."},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * @return True if sizeOfTaskList is 0 and false if not."},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    public boolean isTaskListEmpty() {"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        return getSize() \u003d\u003d 0;"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     * Gets a task object from the tasks list."},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * @param index Location of the task on the tasks list."},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * @return The task at the index."},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    public Task getTask(int index) {"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"        return tasks.get(index);"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":""},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    public int getSize() {"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"        return tasks.size();"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":""},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    public void removeTask(int taskNumber) throws IOException{"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"        tasks.remove(taskNumber);"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":""},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"\tpublic void addToTaskList(Task task) throws IOException{"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"        tasks.add(task);"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":""},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":57}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    // Scanner for extracting user input."},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":""},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    public Ui() { "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"     * Displays the welcome message."},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    protected void displayWelcomeMessage() {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_WELCOME);"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    public void displayMessageBorder () {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        System.out.println(Constants.MESSAGE_BORDER);"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     * Displays a given message to the user."},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"     * @param message Message to be displayed."},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    public void displayToUser(String... messages) {"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        displayMessageBorder();"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"        for (String m : messages) {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"            System.out.println(String.format(\"\\t %s\", m));"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":""},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     * Obtains user input from console. Input stored into userCommand."},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    protected String getUserInput() {"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"        // Remove trailing spaces"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"        return SCANNER.nextLine().trim();"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":""},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * Displays the list of tasks to the user. The list will be numbered, starting"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * from 1."},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     * @param tasks Tasks to be listed."},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    public void displayToUser(TaskList tasks) {"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"        String listAsString \u003d getDisplayString(tasks);"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_LIST, listAsString);"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":""},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"     * Displays success message after adding new task."},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"    public void displayAddTaskSuccessMessage(TaskList tasks) {"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_ADDED, \"  \" + tasks.getTask(tasks.getSize()-1).toString(), String.format(Constants.MESSAGE_NUMBER_OF_TASKS,"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"                tasks.getSize()));"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":""},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"     * Displays the success message after deleting the task. "},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"     * @param deletedTask The description of deleted task. "},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"    public void displayDeleteTaskSuccessMessage(String deletedTask) {"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_DELETE, deletedTask);"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":""},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"     * Displays the success message after marking task as done."},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"    public void displayMarkTaskSuccessMessage(TaskList tasks, int taskNumber) {"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"        displayToUser(Constants.MESSAGE_MARKED, tasks.getTask(taskNumber).toString());"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":""},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"     * Returns the display string representation of the list of tasks."},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"     * @param tasks Task list used."},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"     * @return The list of all items in list, formatted with numberings and the"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"     *         total number of tasks in list."},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"    protected String getDisplayString(TaskList tasks) {"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"            int displayIndex \u003d i + 1;"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"            message.append(System.lineSeparator() + String.format(\"\\t %d. %s\", displayIndex, tasks.getTask(i).toString()));"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":""},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"     * Get the syntax of the commands depending on the one given by the user."},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"     *                     (/at) or deadline (/by)."},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"     * @return The syntax to task command given by the user."},{"lineNumber":103,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"    protected String getSyntaxMessage(String command) {"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"        switch (command) {"},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_TODO_SYNTAX;"},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD: "},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_DEADLINE_SYNTAX;"},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_EVENT_SYNTAX;"},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_MARK_SYNTAX;"},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"            return Constants.MESSAGE_DELETE_SYNTAX;"},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"            return null;"},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":120}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.error.ImportTaskException;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.error.InvalidSyntaxException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.task.*;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    private String taskDescription;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    private String taskDate;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public AddCommand(String[] commands) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.taskDescription \u003d commands[Constants.TASK_DESCRIPTION_INDEX];"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        this.taskDate \u003d commands[Constants.TASK_DATE_INDEX];"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":""},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     * Adds a new todo task to task list. If userCommand does not contain task"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * description, throw invalid command syntax error."},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * Used for user input commands. "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * @throws InvalidSyntaxException If userCommand is null."},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    public Todo executeAddTodo() throws InvalidSyntaxException {"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null) {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_TODO_SYNTAX);"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"        } "},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        return new Todo(taskDescription);"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":""},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    public Todo addTodoFromStorage() throws ImportTaskException {"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null) {"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":""},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"        return new Todo(taskDescription);"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":""},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. Processes the user input to extract"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     * date. If date is not null, create new deadline task. Otherwise, throw invalid"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     * command syntax error."},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If date is not found."},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    public Deadline executeAddDeadline() throws InvalidSyntaxException {"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_DEADLINE_SYNTAX);"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"        return new Deadline(taskDescription, taskDate);"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":""},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    public Deadline addDeadlineFromStorage() throws ImportTaskException {"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":""},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"        return new Deadline(taskDescription, taskDate);"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":""},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. "},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"     * Processes the user input to exit. "},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"     * If date is not null, create new deadline task.  "},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"     * @throws IllegalArgumentException If date is not found."},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"    public Event executeAddEvent() throws InvalidSyntaxException {"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"            throw new InvalidSyntaxException(Constants.MESSAGE_EVENT_SYNTAX);"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"        return new Event(taskDescription, taskDate);"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":""},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"    public Event addEventFromStorage() throws ImportTaskException {"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"        if (taskDescription \u003d\u003d null | taskDate\u003d\u003d null) {"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"            throw new ImportTaskException();"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":""},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"        return new Event(taskDescription, taskDate);"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":83}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.error.*;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"import duke.Storage;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"public class Command {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    // If done and delete commands, taskDescription contains task number"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    // Otherwise, taskDescription contains task name"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    protected String[] commands;"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    private String command;"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":""},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public Command(String[] commands) {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        this.commands \u003d commands;"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        this.command \u003d commands[Constants.COMMAND_INDEX];"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":""},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    public String getCommand(int index) {"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"        return command;"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":""},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     * Executes each function according to command word given."},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * The following explains the behaviour of the command words: "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * COMMAND_EXIT_WORD:"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     * - Displays an exit message. "},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * - Exits program. "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     * COMMAND_LIST_WORD: "},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"     * - Lists all tasks in tasks list. "},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     * COMMAND_MARK_WORD: "},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * - Obtains task number. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * - Checks if task is valid. "},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * - If valid, mark task as done then display success message. "},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * - Otherwise, display error message. "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * COMMAND_TODO_WORD: "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     * - Add new todo task to list. "},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"     * COMMAND_DEADLINE_WORD: "},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * - Add new deadline task to list."},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * COMMAND_EVENT_WORD: "},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * - Add new event task to list. "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     * COMMAND_DELETE_WORD:"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * - Delete a given task from the list. "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     * - Add new event task to list. "},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"     * NO_COMMAND: "},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"     * - No command detected, display error message. "},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"     * DEFAULT: "},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"     * - Invalid command, display error message."},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"    public void executeCommand(TaskList tasks, Ui ui, Storage storage) throws IllegalCommandException, IndexOutOfBoundsException, TaskListEmptyException, IllegalArgumentException, IOException, NullPointerException, InvalidSyntaxException {"},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"        switch (command) {"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EXIT_WORD:"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"            // Fallthrough"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"            ui.displayToUser(Constants.MESSAGE_EXIT);"},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"            ui.displayMessageBorder();"},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"            ExitCommand.executeExitProgramRequest();"},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_LIST_WORD:"},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"            ListCommand.executeListAllTasks(tasks, ui);"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_MARK_WORD:"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":"            MarkCommand markCommand \u003d new MarkCommand(commands);"},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"            markCommand.executeMarkTask(tasks);"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"            ui.displayMarkTaskSuccessMessage(tasks, markCommand.getTaskNumber());"},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":70,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_TODO_WORD:"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandTodo \u003d new AddCommand(commands);"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"            tasks.addToTaskList(addCommandTodo.executeAddTodo());"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"            ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DEADLINE_WORD:"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandDeadline \u003d new AddCommand(commands);"},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"            tasks.addToTaskList(addCommandDeadline.executeAddDeadline());"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"            ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_EVENT_WORD:"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"            AddCommand addCommandEvent \u003d new AddCommand(commands);"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"            tasks.addToTaskList(addCommandEvent.executeAddEvent());"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"            ui.displayAddTaskSuccessMessage(tasks);"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"        case Constants.COMMAND_DELETE_WORD:"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"            DeleteCommand deleteCommand \u003d new DeleteCommand(commands);"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"            String deletedTask \u003d deleteCommand.executeDeleteTask(tasks);"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"            storage.saveToFile(tasks);"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":"            ui.displayDeleteTaskSuccessMessage(deletedTask);"},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"            throw new IllegalCommandException();"},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":99}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":""},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    private int taskNumber;"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":""},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public DeleteCommand(String[] commands) {"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        this.taskNumber \u003d Integer.parseInt(commands[Constants.TASK_DESCRIPTION_INDEX]);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":""},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     * Delete a task assigned to the task number. "},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done. "},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    protected String executeDeleteTask(TaskList tasks) throws IOException{"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        String deletedTask \u003d tasks.getTask(taskNumber).toString();"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        tasks.removeTask(taskNumber);"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"        return deletedTask;"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":26}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class ExitCommand {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * Exits the program."},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    protected static void executeExitProgramRequest() {"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"        System.exit(0);"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":10}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.error.TaskListEmptyException;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"public class ListCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    public ListCommand(String[] commands) {"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":""},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"     * Lists all tasks current in the tasks list. Shows the type of task (T, D, E)"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"     * and marks X if the task is done."},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"     * @throws TaskListEmptyException If task list is empty."},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    protected static void executeListAllTasks(TaskList tasks, Ui ui) throws TaskListEmptyException {"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"        if (tasks.isTaskListEmpty()) {"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"            throw new TaskListEmptyException();"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        ui.displayToUser(tasks);"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":25}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"import duke.Constants;"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":""},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"public class MarkCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    private int taskNumber;"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":""},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    public MarkCommand(String[] commands) {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"        super(commands);"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        this.taskNumber \u003d Integer.parseInt(commands[Constants.TASK_DESCRIPTION_INDEX]);"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":""},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    public int getTaskNumber() {"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":""},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"     * Marks a given task number as done."},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    protected void executeMarkTask(TaskList tasks) {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        tasks.getTask(taskNumber).setTaskStatus();"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":""},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"     * Marks a given task number as done."},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done."},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    protected void executeMarkTask(Task task) {"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"        task.setTaskStatus();"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":36}},{"path":"src/main/java/duke/error/IllegalCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class IllegalCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":4}},{"path":"src/main/java/duke/error/ImportTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class ImportTaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":4}},{"path":"src/main/java/duke/error/InvalidSyntaxException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class InvalidSyntaxException extends Exception{"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    public InvalidSyntaxException (String message) {"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":7}},{"path":"src/main/java/duke/error/TaskListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class TaskListEmptyException extends Exception {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":4}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * Creates a Deadline object. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * @param description Name of task. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * @param by Deadline of task to complete. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        return \"deadline\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public String getTaskDate() {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        return by;"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        return super.toStorageString() + \", \" + by;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":38}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * Creates an Event object. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * @param description Name of event. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * @param at Date of event occurrence. "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public Event(String description, String at) {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"        return \"event\";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":""},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public String getTaskDate() {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        return at;"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        return super.toStorageString() + \", \" + at;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":38}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"    /** Boolean to track if task is completed */"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":""},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * Creates a Task object with the given description. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"     * @param description Task description. "},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":""},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public String getTaskDescription() {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":""},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    public void setTaskDescription(String description) {"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":""},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public boolean getTaskStatus() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return isDone;"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    public void setTaskStatus() {"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"        isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    public abstract String getTaskDate();"},{"lineNumber":35,"author":{"gitId":"xseh"},"content":""},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * Returns the status icon depending on isDone boolean. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     * If the task is done (i.e. isDone is true), \"X\" is returned. "},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"     * If the task is not done (i.e. isDone is false), \" \" is returned. "},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"     * @return Status icon. "},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public String getTaskStatusIcon() {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":""},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"    public abstract String getTaskType();"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":""},{"lineNumber":52,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"        return String.format(\"%s, %s, %s, %s\", getTaskType(), String.valueOf(getTaskStatus()), getTaskDescription(), getTaskDate());"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xseh"},"content":""},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"        return String.format(\"[%s] %s\", getTaskStatusIcon(), getTaskDescription());"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":59}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * Creates a Todo object. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * @param description Name of todo task. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    public Todo(String description) {"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":""},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    public String getTaskType() {"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"        return \"todo\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":""},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    public String getTaskDate() {"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"        return null;"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":" "},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"     * Returns the string format for file storing. "},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    public String toStorageString() {"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"        return super.toStorageString();"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":34}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"event, true, task, hgj, hgj"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"todo, false, haha, null"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"event, false, aha, haha, haha"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"deadline, false, purposely no date field, d, d"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"deadline, false, purposely no date field, h, h"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"deadline, false, purposely no date field, h, h"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"deadline, false, purposely no date field, h, h"}],"authorContributionMap":{"xseh":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"todo borrow book"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"bye"}],"authorContributionMap":{"xseh":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"del /q ..\\bin\\duke\\*"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xseh":3,"-":19}}]
