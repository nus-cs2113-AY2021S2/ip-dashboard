[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"    protected String by;"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":""},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * Creates a Deadline object. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * @param description Name of task. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * @param by Deadline of task to complete. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        this.by \u003d by;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":""},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":19}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    // Words for commands. "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_TODO_WORD \u003d \"todo\";"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_EVENT_WORD \u003d \"event\";"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_MARK_WORD \u003d \"done\";"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_LIST_WORD \u003d \"list\";"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    private static final String COMMAND_EXIT_WORD \u003d \"bye\";"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    private static final String NO_COMMAND \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    // Display messages. "},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, what can I do for you?\";"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_BORDER \u003d \"__________\".repeat(6);"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task: \";"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_MARKED \u003d \"Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_LIST \u003d \"Here are the tasks in your list: \";"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon! \";"},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    private static final String MESSAGE_NUMBER_OF_TASKS \u003d \"Now you have %s tasks in the list. \";"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_INDEX_OUT_OF_RANGE \u003d \"Index out of range. \";"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_NO_COMMAND_RECEIVED \u003d \"No command detected. \";"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":"    private static final String ERROR_INVALID_COMMAND_RECEIVED \u003d \"Invalid command. \";"},{"lineNumber":24,"author":{"gitId":"xseh"},"content":""},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"    // Filter words to locate date for deadline and event tasks. "},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    private static final String DEADLINE_DATA_PREFIX_BY \u003d \"/by\";"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":"    private static final String EVENT_DATA_PREFIX_AT \u003d \"/at\";"},{"lineNumber":28,"author":{"gitId":"xseh"},"content":""},{"lineNumber":29,"author":{"gitId":"xseh"},"content":""},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    // List of all tasks. "},{"lineNumber":31,"author":{"gitId":"xseh"},"content":"    private static Task[] tasks;"},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    private static String userCommand;"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":""},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"    // Maximum number of tasks that can be held. "},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"    private static final int MAX_LIST_SIZE \u003d 100;"},{"lineNumber":36,"author":{"gitId":"xseh"},"content":""},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"    // Total number of tasks in task list. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"    private static int sizeOfTaskList \u003d 0;"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":""},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"    // Scanner for extracting user input. "},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":"    "},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"     * Gets a task object from the tasks list. "},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"     * @param index Location of the task on the tasks list. "},{"lineNumber":47,"author":{"gitId":"xseh"},"content":"     * @return The task at the index. "},{"lineNumber":48,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"xseh"},"content":"    private static Task getTask(int index) {"},{"lineNumber":50,"author":{"gitId":"xseh"},"content":"        return tasks[index];"},{"lineNumber":51,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"xseh"},"content":""},{"lineNumber":53,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"xseh"},"content":"     * Gets task number from the input string. "},{"lineNumber":55,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":56,"author":{"gitId":"xseh"},"content":"     * @return Task number. "},{"lineNumber":57,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"xseh"},"content":"    private static int getTaskNumber(String command) {"},{"lineNumber":59,"author":{"gitId":"xseh"},"content":"        // Gets the taskNumber from the index of the first \" \". "},{"lineNumber":60,"author":{"gitId":"xseh"},"content":"        // Adds 1 to the index remove the \" \" from string. "},{"lineNumber":61,"author":{"gitId":"xseh"},"content":"        // Since user input task number starts from 1, remove 1 from taskNumber to "},{"lineNumber":62,"author":{"gitId":"xseh"},"content":"        //         reflect the correct taskNumber in tasks. "},{"lineNumber":63,"author":{"gitId":"xseh"},"content":"        int taskNumber \u003d Integer.parseInt(command.substring(command.indexOf(\" \") + 1)) - 1;"},{"lineNumber":64,"author":{"gitId":"xseh"},"content":"        return taskNumber;"},{"lineNumber":65,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"xseh"},"content":""},{"lineNumber":67,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"xseh"},"content":"     * Starts the program. "},{"lineNumber":69,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":71,"author":{"gitId":"xseh"},"content":"        initTaskList();"},{"lineNumber":72,"author":{"gitId":"xseh"},"content":"        displayWelcomeMessage();"},{"lineNumber":73,"author":{"gitId":"xseh"},"content":"        while (true) {"},{"lineNumber":74,"author":{"gitId":"xseh"},"content":"            getUserInput();"},{"lineNumber":75,"author":{"gitId":"xseh"},"content":"            executeCommand();"},{"lineNumber":76,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xseh"},"content":""},{"lineNumber":79,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"xseh"},"content":"     * Initializes the task list. "},{"lineNumber":81,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"xseh"},"content":"    private static void initTaskList() {"},{"lineNumber":83,"author":{"gitId":"xseh"},"content":"        tasks \u003d new Task[MAX_LIST_SIZE];"},{"lineNumber":84,"author":{"gitId":"xseh"},"content":"        sizeOfTaskList \u003d 0;"},{"lineNumber":85,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"xseh"},"content":""},{"lineNumber":87,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"xseh"},"content":"     * Displays the welcome message. "},{"lineNumber":89,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"xseh"},"content":"    private static void displayWelcomeMessage() {"},{"lineNumber":91,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_WELCOME);"},{"lineNumber":92,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"xseh"},"content":""},{"lineNumber":94,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"xseh"},"content":"     * Obtains user input from console. "},{"lineNumber":96,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":97,"author":{"gitId":"xseh"},"content":"     * @return The user input obtained.  "},{"lineNumber":98,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"xseh"},"content":"    private static void getUserInput() {"},{"lineNumber":100,"author":{"gitId":"xseh"},"content":"        // Remove trailing spaces"},{"lineNumber":101,"author":{"gitId":"xseh"},"content":"        userCommand \u003d SCANNER.nextLine().trim();"},{"lineNumber":102,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"xseh"},"content":""},{"lineNumber":104,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"xseh"},"content":"     * Executes each function according to command word given. "},{"lineNumber":106,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":107,"author":{"gitId":"xseh"},"content":"     * The following explains the behaviour of the command words: "},{"lineNumber":108,"author":{"gitId":"xseh"},"content":"     * COMMAND_EXIT_WORD: "},{"lineNumber":109,"author":{"gitId":"xseh"},"content":"     *  - Displays an exit message. "},{"lineNumber":110,"author":{"gitId":"xseh"},"content":"     *  - Exits program. "},{"lineNumber":111,"author":{"gitId":"xseh"},"content":"     * COMMAND_LIST_WORD: "},{"lineNumber":112,"author":{"gitId":"xseh"},"content":"     *  - Lists all tasks in tasks list. "},{"lineNumber":113,"author":{"gitId":"xseh"},"content":"     * COMMAND_MARK_WORD: "},{"lineNumber":114,"author":{"gitId":"xseh"},"content":"     *  - Obtains task number. "},{"lineNumber":115,"author":{"gitId":"xseh"},"content":"     *  - Checks if task is valid. "},{"lineNumber":116,"author":{"gitId":"xseh"},"content":"     *  - If valid, mark task as done then display success message. "},{"lineNumber":117,"author":{"gitId":"xseh"},"content":"     *  - Otherwise, display error message. "},{"lineNumber":118,"author":{"gitId":"xseh"},"content":"     * COMMAND_TODO_WORD:"},{"lineNumber":119,"author":{"gitId":"xseh"},"content":"     *  - Add new todo task to list. "},{"lineNumber":120,"author":{"gitId":"xseh"},"content":"     * COMMAND_DEADLINE_WORD: "},{"lineNumber":121,"author":{"gitId":"xseh"},"content":"     *  - Add new deadline task to list."},{"lineNumber":122,"author":{"gitId":"xseh"},"content":"     * COMMAND_EVENT_WORD: "},{"lineNumber":123,"author":{"gitId":"xseh"},"content":"     *  - Add new event task to list. "},{"lineNumber":124,"author":{"gitId":"xseh"},"content":"     * NO_COMMAND:"},{"lineNumber":125,"author":{"gitId":"xseh"},"content":"     *  - No command detected, display error message. "},{"lineNumber":126,"author":{"gitId":"xseh"},"content":"     * DEFAULT: "},{"lineNumber":127,"author":{"gitId":"xseh"},"content":"     *  - Invalid command, display error message. "},{"lineNumber":128,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"xseh"},"content":"    private static void executeCommand() {"},{"lineNumber":130,"author":{"gitId":"xseh"},"content":"        switch(getCommand()) {"},{"lineNumber":131,"author":{"gitId":"xseh"},"content":"        case COMMAND_EXIT_WORD:"},{"lineNumber":132,"author":{"gitId":"xseh"},"content":"            // Fallthrough"},{"lineNumber":133,"author":{"gitId":"xseh"},"content":"            displayToUser(MESSAGE_EXIT);"},{"lineNumber":134,"author":{"gitId":"xseh"},"content":"            executeExitProgramRequest();"},{"lineNumber":135,"author":{"gitId":"xseh"},"content":"        case COMMAND_LIST_WORD:"},{"lineNumber":136,"author":{"gitId":"xseh"},"content":"            executeListAllTasks();"},{"lineNumber":137,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":138,"author":{"gitId":"xseh"},"content":"        case COMMAND_MARK_WORD:"},{"lineNumber":139,"author":{"gitId":"xseh"},"content":"            int taskNumber \u003d getTaskNumber(userCommand);"},{"lineNumber":140,"author":{"gitId":"xseh"},"content":"            if (isTaskNumberValid(taskNumber)) {"},{"lineNumber":141,"author":{"gitId":"xseh"},"content":"                executeMarkTask(taskNumber);"},{"lineNumber":142,"author":{"gitId":"xseh"},"content":"                displayMarkTaskSuccessMessage(taskNumber);"},{"lineNumber":143,"author":{"gitId":"xseh"},"content":"            } else {"},{"lineNumber":144,"author":{"gitId":"xseh"},"content":"                displayToUser(ERROR_INDEX_OUT_OF_RANGE);"},{"lineNumber":145,"author":{"gitId":"xseh"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":147,"author":{"gitId":"xseh"},"content":"        case COMMAND_TODO_WORD:"},{"lineNumber":148,"author":{"gitId":"xseh"},"content":"            executeAddTodo(); "},{"lineNumber":149,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":150,"author":{"gitId":"xseh"},"content":"        case COMMAND_DEADLINE_WORD:"},{"lineNumber":151,"author":{"gitId":"xseh"},"content":"            executeAddDeadline();"},{"lineNumber":152,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":153,"author":{"gitId":"xseh"},"content":"        case COMMAND_EVENT_WORD:"},{"lineNumber":154,"author":{"gitId":"xseh"},"content":"            executeAddEvent();"},{"lineNumber":155,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":156,"author":{"gitId":"xseh"},"content":"        case NO_COMMAND:"},{"lineNumber":157,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_NO_COMMAND_RECEIVED);"},{"lineNumber":158,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":159,"author":{"gitId":"xseh"},"content":"        default:"},{"lineNumber":160,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":161,"author":{"gitId":"xseh"},"content":"            return;"},{"lineNumber":162,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"xseh"},"content":""},{"lineNumber":165,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"xseh"},"content":"     * Extracts the command word from user input. "},{"lineNumber":167,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":168,"author":{"gitId":"xseh"},"content":"     * @return Command extracted. "},{"lineNumber":169,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"xseh"},"content":"    private static String getCommand() {"},{"lineNumber":171,"author":{"gitId":"xseh"},"content":"        String commandWord \u003d userCommand.split(\" \")[0].toLowerCase();"},{"lineNumber":172,"author":{"gitId":"xseh"},"content":"        if (userCommand.length() \u003e 4) {"},{"lineNumber":173,"author":{"gitId":"xseh"},"content":"            userCommand \u003d userCommand.substring(userCommand.indexOf(\" \") + 1, userCommand.length());"},{"lineNumber":174,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":175,"author":{"gitId":"xseh"},"content":"            userCommand \u003d null;"},{"lineNumber":176,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"xseh"},"content":"        return commandWord;"},{"lineNumber":178,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"xseh"},"content":""},{"lineNumber":180,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"xseh"},"content":"     * Exits the program. "},{"lineNumber":182,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"xseh"},"content":"    private static void executeExitProgramRequest() {"},{"lineNumber":184,"author":{"gitId":"xseh"},"content":"        System.exit(0);"},{"lineNumber":185,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"xseh"},"content":""},{"lineNumber":187,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"xseh"},"content":"     * Lists all tasks current in the tasks list. "},{"lineNumber":189,"author":{"gitId":"xseh"},"content":"     * Shows the type of task (T, D, E) and marks X if the task is done. "},{"lineNumber":190,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"xseh"},"content":"    private static void executeListAllTasks() {"},{"lineNumber":192,"author":{"gitId":"xseh"},"content":"        displayToUser(tasks);"},{"lineNumber":193,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"xseh"},"content":""},{"lineNumber":195,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"xseh"},"content":"     * Checks if task number is valid. "},{"lineNumber":197,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":198,"author":{"gitId":"xseh"},"content":"     * @param taskNumber Task number. "},{"lineNumber":199,"author":{"gitId":"xseh"},"content":"     * @return True if number is valid and false if invalid. "},{"lineNumber":200,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"xseh"},"content":"    private static boolean isTaskNumberValid(int taskNumber) {"},{"lineNumber":202,"author":{"gitId":"xseh"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c sizeOfTaskList;"},{"lineNumber":203,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"xseh"},"content":""},{"lineNumber":205,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"xseh"},"content":"     * Marks a given task number as done. "},{"lineNumber":207,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":208,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number to mark as done (starting with 1). "},{"lineNumber":209,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"xseh"},"content":"    private static void executeMarkTask(int taskNumber) {"},{"lineNumber":211,"author":{"gitId":"xseh"},"content":"        tasks[taskNumber].setTaskStatus();"},{"lineNumber":212,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"xseh"},"content":""},{"lineNumber":214,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"xseh"},"content":"     * Displays the success message after marking task as done. "},{"lineNumber":216,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":217,"author":{"gitId":"xseh"},"content":"     * @param taskNumber The task number (starting from 1) that was marked as done. "},{"lineNumber":218,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"xseh"},"content":"    private static void displayMarkTaskSuccessMessage(int taskNumber) {"},{"lineNumber":220,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_MARKED, tasks[taskNumber].toString());"},{"lineNumber":221,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"xseh"},"content":""},{"lineNumber":223,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"xseh"},"content":"     * Adds a new todo task to task list. "},{"lineNumber":225,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"xseh"},"content":"    private static void executeAddTodo() {"},{"lineNumber":227,"author":{"gitId":"xseh"},"content":"        tasks[sizeOfTaskList] \u003d new Todo(userCommand);"},{"lineNumber":228,"author":{"gitId":"xseh"},"content":"        sizeOfTaskList++;"},{"lineNumber":229,"author":{"gitId":"xseh"},"content":"        displayAddTaskSuccessMessage();"},{"lineNumber":230,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"xseh"},"content":""},{"lineNumber":232,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. "},{"lineNumber":234,"author":{"gitId":"xseh"},"content":"     * Processes the user input to extract date. "},{"lineNumber":235,"author":{"gitId":"xseh"},"content":"     * If date is not null, create new deadline task. "},{"lineNumber":236,"author":{"gitId":"xseh"},"content":"     * Otherwise, display invalid command error. "},{"lineNumber":237,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"xseh"},"content":"    private static void executeAddDeadline() {"},{"lineNumber":239,"author":{"gitId":"xseh"},"content":"        String date \u003d processParameters(DEADLINE_DATA_PREFIX_BY);"},{"lineNumber":240,"author":{"gitId":"xseh"},"content":"        if (date !\u003d null) {"},{"lineNumber":241,"author":{"gitId":"xseh"},"content":"            tasks[sizeOfTaskList] \u003d new Deadline(userCommand, date);"},{"lineNumber":242,"author":{"gitId":"xseh"},"content":"            sizeOfTaskList++;"},{"lineNumber":243,"author":{"gitId":"xseh"},"content":"            displayAddTaskSuccessMessage();"},{"lineNumber":244,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":245,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":246,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"xseh"},"content":""},{"lineNumber":249,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":250,"author":{"gitId":"xseh"},"content":"     * Adds a new deadline task to task list. "},{"lineNumber":251,"author":{"gitId":"xseh"},"content":"     * Processes the user input to extract date. "},{"lineNumber":252,"author":{"gitId":"xseh"},"content":"     * If date is not null, create new deadline task. "},{"lineNumber":253,"author":{"gitId":"xseh"},"content":"     * Otherwise, display invalid command error. "},{"lineNumber":254,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":255,"author":{"gitId":"xseh"},"content":"    private static void executeAddEvent() {"},{"lineNumber":256,"author":{"gitId":"xseh"},"content":"        String date \u003d processParameters(EVENT_DATA_PREFIX_AT);"},{"lineNumber":257,"author":{"gitId":"xseh"},"content":"        if (date !\u003d null) {"},{"lineNumber":258,"author":{"gitId":"xseh"},"content":"            tasks[sizeOfTaskList] \u003d new Event(userCommand, date);"},{"lineNumber":259,"author":{"gitId":"xseh"},"content":"            sizeOfTaskList++;"},{"lineNumber":260,"author":{"gitId":"xseh"},"content":"            displayAddTaskSuccessMessage();"},{"lineNumber":261,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":262,"author":{"gitId":"xseh"},"content":"            // Display error message"},{"lineNumber":263,"author":{"gitId":"xseh"},"content":"            displayToUser(ERROR_INVALID_COMMAND_RECEIVED);"},{"lineNumber":264,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"xseh"},"content":""},{"lineNumber":266,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"xseh"},"content":""},{"lineNumber":268,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":269,"author":{"gitId":"xseh"},"content":"     * Finds the location of the filters and locate the date from the task. "},{"lineNumber":270,"author":{"gitId":"xseh"},"content":"     * Removes the task date information from userCommand, keeping only the task name in userCommand. "},{"lineNumber":271,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":272,"author":{"gitId":"xseh"},"content":"     * @param filterString The string to find in userCommand depending on an event (/at) or deadline (/by). "},{"lineNumber":273,"author":{"gitId":"xseh"},"content":"     * @return The date extracted from userCommand. "},{"lineNumber":274,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"xseh"},"content":"    private static String processParameters(String filterString) {"},{"lineNumber":276,"author":{"gitId":"xseh"},"content":"        int indexOfDate \u003d userCommand.indexOf(filterString);"},{"lineNumber":277,"author":{"gitId":"xseh"},"content":"        if (indexOfDate \u003e 0) {"},{"lineNumber":278,"author":{"gitId":"xseh"},"content":"            // Add 4 to indexOfDate to remove the \"/by \" or \"/at \" filter strings. "},{"lineNumber":279,"author":{"gitId":"xseh"},"content":"            String date \u003d userCommand.substring(indexOfDate + 4);"},{"lineNumber":280,"author":{"gitId":"xseh"},"content":"            userCommand \u003d userCommand.substring(0, indexOfDate - 1);"},{"lineNumber":281,"author":{"gitId":"xseh"},"content":"            return date;"},{"lineNumber":282,"author":{"gitId":"xseh"},"content":"        } else {"},{"lineNumber":283,"author":{"gitId":"xseh"},"content":"            return null;"},{"lineNumber":284,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"xseh"},"content":"        "},{"lineNumber":286,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"xseh"},"content":""},{"lineNumber":288,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":289,"author":{"gitId":"xseh"},"content":"     * Displays success message after adding new task. "},{"lineNumber":290,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":291,"author":{"gitId":"xseh"},"content":"    private static void displayAddTaskSuccessMessage() {"},{"lineNumber":292,"author":{"gitId":"xseh"},"content":"        displayToUser(MESSAGE_ADDED, \"  \" + getTask(sizeOfTaskList-1).toString(), String.format(MESSAGE_NUMBER_OF_TASKS,"},{"lineNumber":293,"author":{"gitId":"xseh"},"content":"                sizeOfTaskList));"},{"lineNumber":294,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"xseh"},"content":""},{"lineNumber":296,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":297,"author":{"gitId":"xseh"},"content":"     * Displays a given message to the user. "},{"lineNumber":298,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":299,"author":{"gitId":"xseh"},"content":"     * @param message Message to be displayed. "},{"lineNumber":300,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"xseh"},"content":"    private static void displayToUser(String... message) {"},{"lineNumber":302,"author":{"gitId":"xseh"},"content":"        System.out.println(String.format(\"\\t%s\", MESSAGE_BORDER));"},{"lineNumber":303,"author":{"gitId":"xseh"},"content":"        for (String m : message) {"},{"lineNumber":304,"author":{"gitId":"xseh"},"content":"            System.out.println(String.format(\"\\t %s\", m));"},{"lineNumber":305,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":306,"author":{"gitId":"xseh"},"content":"        System.out.println(String.format(\"\\t%s\", MESSAGE_BORDER));"},{"lineNumber":307,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"xseh"},"content":""},{"lineNumber":309,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":310,"author":{"gitId":"xseh"},"content":"     * Displays the list of tasks to the user. "},{"lineNumber":311,"author":{"gitId":"xseh"},"content":"     * The list will be indexed, starting from 1. "},{"lineNumber":312,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":313,"author":{"gitId":"xseh"},"content":"     * @param tasks Tasks to be listed. "},{"lineNumber":314,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":315,"author":{"gitId":"xseh"},"content":"    private static void displayToUser(Task[] tasks) {"},{"lineNumber":316,"author":{"gitId":"xseh"},"content":"        String listAsString \u003d getDisplayString(tasks);"},{"lineNumber":317,"author":{"gitId":"xseh"},"content":"        displayToUser(listAsString);"},{"lineNumber":318,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"xseh"},"content":""},{"lineNumber":320,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":321,"author":{"gitId":"xseh"},"content":"     * Returns the display string representation of the list of tasks."},{"lineNumber":322,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":323,"author":{"gitId":"xseh"},"content":"     * @param tasks Task list used. "},{"lineNumber":324,"author":{"gitId":"xseh"},"content":"     * @return The list of all items in list, formatted with numberings and the total number of tasks in list. "},{"lineNumber":325,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"xseh"},"content":"    private static String getDisplayString(Task[] tasks) {"},{"lineNumber":327,"author":{"gitId":"xseh"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":328,"author":{"gitId":"xseh"},"content":"        message.append(String.format(\"%s\", MESSAGE_LIST));"},{"lineNumber":329,"author":{"gitId":"xseh"},"content":""},{"lineNumber":330,"author":{"gitId":"xseh"},"content":"        for (int i \u003d 0; i \u003c sizeOfTaskList; i++) {"},{"lineNumber":331,"author":{"gitId":"xseh"},"content":"            int displayIndex \u003d i + 1;"},{"lineNumber":332,"author":{"gitId":"xseh"},"content":"            message.append(String.format(\"\\n\\t %d. %s\", displayIndex, getTask(i).toString()));"},{"lineNumber":333,"author":{"gitId":"xseh"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"xseh"},"content":"        return message.toString();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xseh":332,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"    protected String at;"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":""},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * Creates an Event object. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * @param description Name of event. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * @param at Date of event occurrence. "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"    public Event(String description, String at) {"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":""},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":19}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"    /** Boolean to track if task is completed */"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"    protected boolean isDone;"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":""},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"     * Creates a Task object with the given description. "},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"     * @param description Task description. "},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":""},{"lineNumber":16,"author":{"gitId":"xseh"},"content":"    public String getTaskDescription() {"},{"lineNumber":17,"author":{"gitId":"xseh"},"content":"        return description;"},{"lineNumber":18,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xseh"},"content":""},{"lineNumber":20,"author":{"gitId":"xseh"},"content":"    public void setTaskDescription(String description) {"},{"lineNumber":21,"author":{"gitId":"xseh"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"xseh"},"content":""},{"lineNumber":24,"author":{"gitId":"xseh"},"content":"    public boolean getTaskStatus() {"},{"lineNumber":25,"author":{"gitId":"xseh"},"content":"        return isDone;"},{"lineNumber":26,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xseh"},"content":""},{"lineNumber":28,"author":{"gitId":"xseh"},"content":"    public void setTaskStatus() {"},{"lineNumber":29,"author":{"gitId":"xseh"},"content":"        isDone \u003d true;"},{"lineNumber":30,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xseh"},"content":""},{"lineNumber":32,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"xseh"},"content":"     * Returns the status icon depending on isDone boolean. "},{"lineNumber":34,"author":{"gitId":"xseh"},"content":"     * If the task is done (i.e. isDone is true), \"X\" is returned. "},{"lineNumber":35,"author":{"gitId":"xseh"},"content":"     * If the task is not done (i.e. isDone is false), \" \" is returned. "},{"lineNumber":36,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":37,"author":{"gitId":"xseh"},"content":"     * @return Status icon. "},{"lineNumber":38,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"xseh"},"content":"    public String getTaskStatusIcon() {"},{"lineNumber":40,"author":{"gitId":"xseh"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":41,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xseh"},"content":""},{"lineNumber":43,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"xseh"},"content":"        return String.format(\"[%s] %s\", getTaskStatusIcon(), getTaskDescription());"},{"lineNumber":45,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":46}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"     * Creates a Todo object. "},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"     * "},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"     * @param description Name of todo task. "},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"    public Todo(String description) {"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":""},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"xseh"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"xseh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":14,"author":{"gitId":"xseh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xseh"},"content":"}"}],"authorContributionMap":{"xseh":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xseh"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"xseh"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"xseh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"xseh"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"xseh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"xseh"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"xseh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"xseh"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"xseh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"xseh"},"content":"bye"}],"authorContributionMap":{"xseh":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"xseh"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xseh":1,"-":20}}]
