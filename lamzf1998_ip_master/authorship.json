[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"# Duke project "},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java baddest mascot _Duke the Dawg_. Duke is a certified fresh task list handler that allows you to plan your activities according to your schedule. Quite sick right? Given below are input commands:"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"- todo _TASKNAME_ : adds a todo task to the list."},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"- event _TASKNAME_ /at _TASKDATETIME_* : adds a event task to the list."},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"- deadline _TASKNAME_ /by _TASKDATETIME_* : adds a deadline task to the list."},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"- list : displays list of tasks."},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"- done _NUMBER_ : checks task as done."},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"- delete _NUMBER_ : removes task from list."},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"- find KEYWORD: search and display tasks that contains keywords."},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"- date DATE**: search and display tasks that contains date."},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"- save : save task list in a seperate text file."},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"- bye : exits system."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"If the task list is saved, it will be re-loaded into the console and available for further edits upon running duke.main()."},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"Do take note:"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"* TASKDATETIME: must be entered in the following format dd-MM-yyyy HH:mm."},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"* * DATE: must be entered in the following format dd-MM-yyyy."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":24,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":25,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"   Credits:"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"   Had assistance from fellow course mate Jethro Phuah for following methods: save and load file."},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"   "}],"authorContributionMap":{"lamzf1998":19,"-":12}},{"path":"saveDuke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"T / 0 / run"}],"authorContributionMap":{"lamzf1998":1}},{"path":"src/main/java/duke/controller/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":" * Parser class that processes the input of the user."},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"     * Sorts input of the user to perform the specific commands."},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"     * @return Command strings (list, done, bye, delete, save, date), and keyword and task processed from the input."},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"    public String sortTask(String input) {"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"        if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"            return \"list\";"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"            return \"bye\";"},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"done\")) {"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"            return \"done\";"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"delete\")) {"},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"            return \"delete\";"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"save\")) {"},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"            return \"save\";"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"find\")) {"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"            String keyword \u003d extractKeyword(input);"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"            return keyword;"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"date\")) {"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"            return \"date\";"},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"todo\") || input.contains(\"deadline\") || input.contains(\"event\")) {"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":"            String extractedTask \u003d extractTask(input);"},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"            return extractedTask;"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"            return \"nonsense\";"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"     * Extracts the task from the user input."},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"     * @return Task extracted from input."},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"    public String extractTask(String input) {"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"        String task;"},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"        int indexOfSpace \u003d input.indexOf(\" \");"},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"        if (indexOfSpace \u003d\u003d -1) {"},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"            return \"retry\";"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"            String subString \u003d input.substring(indexOfSpace + 1);"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"            if (subString.contains(\"/\")) {"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"                int indexOfSlash \u003d subString.indexOf(\"/\");"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":"                task \u003d subString.substring(0, indexOfSlash - 1);"},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"lamzf1998"},"content":"                task \u003d subString;"},{"lineNumber":58,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"lamzf1998"},"content":"            return task;"},{"lineNumber":60,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":63,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"lamzf1998"},"content":"     * Sorts input from the user to obtain the date and time."},{"lineNumber":65,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":66,"author":{"gitId":"lamzf1998"},"content":"     * @return Command strings (list, done, bye, delete, save, todo), and date and time processed from the input."},{"lineNumber":67,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"lamzf1998"},"content":"    public String sortDate(String input) {"},{"lineNumber":69,"author":{"gitId":"lamzf1998"},"content":"        if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":70,"author":{"gitId":"lamzf1998"},"content":"            return \"list\";"},{"lineNumber":71,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":72,"author":{"gitId":"lamzf1998"},"content":"            return \"bye\";"},{"lineNumber":73,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"done\")) {"},{"lineNumber":74,"author":{"gitId":"lamzf1998"},"content":"            return \"done\";"},{"lineNumber":75,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"todo\")) {"},{"lineNumber":76,"author":{"gitId":"lamzf1998"},"content":"            return \"todo\";"},{"lineNumber":77,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"delete\")) {"},{"lineNumber":78,"author":{"gitId":"lamzf1998"},"content":"            return \"delete\";"},{"lineNumber":79,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"save\")) {"},{"lineNumber":80,"author":{"gitId":"lamzf1998"},"content":"            return \"save\";"},{"lineNumber":81,"author":{"gitId":"lamzf1998"},"content":"        } else if (input.contains(\"deadline\") || input.contains(\"event\")) {"},{"lineNumber":82,"author":{"gitId":"lamzf1998"},"content":"            String extractedDateTime \u003d extractDateTime(input);"},{"lineNumber":83,"author":{"gitId":"lamzf1998"},"content":"            return extractedDateTime;"},{"lineNumber":84,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"lamzf1998"},"content":"            return \"nonsense\";"},{"lineNumber":86,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":89,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"lamzf1998"},"content":"     * Extracts date from the user input for search by date."},{"lineNumber":91,"author":{"gitId":"lamzf1998"},"content":"     * @param dateTime Date which the task is due as a string."},{"lineNumber":92,"author":{"gitId":"lamzf1998"},"content":"     * @return Date in which task is due."},{"lineNumber":93,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"lamzf1998"},"content":"    public String extractDate(String dateTime) {"},{"lineNumber":95,"author":{"gitId":"lamzf1998"},"content":"        int indexOfSpace \u003d dateTime.indexOf(\" \");"},{"lineNumber":96,"author":{"gitId":"lamzf1998"},"content":"        String date \u003d dateTime.substring(indexOfSpace+1);"},{"lineNumber":97,"author":{"gitId":"lamzf1998"},"content":"        return date;"},{"lineNumber":98,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":100,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"lamzf1998"},"content":"     * Extracts date and time from user input."},{"lineNumber":102,"author":{"gitId":"lamzf1998"},"content":"     * If no date and time present, returns a \"missing\" statement that will prompt an error message in the user interface."},{"lineNumber":103,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":104,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time in which task is due."},{"lineNumber":105,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"lamzf1998"},"content":"    public String extractDateTime(String input) {"},{"lineNumber":107,"author":{"gitId":"lamzf1998"},"content":"        String date;"},{"lineNumber":108,"author":{"gitId":"lamzf1998"},"content":"        int indexOfSpace \u003d input.indexOf(\" \");"},{"lineNumber":109,"author":{"gitId":"lamzf1998"},"content":"        String subString \u003d input.substring(indexOfSpace + 1);"},{"lineNumber":110,"author":{"gitId":"lamzf1998"},"content":"        if (subString.contains(\"/\")) {"},{"lineNumber":111,"author":{"gitId":"lamzf1998"},"content":"            int indexOfSlash \u003d subString.indexOf(\"/\");"},{"lineNumber":112,"author":{"gitId":"lamzf1998"},"content":"            String subStringDate \u003d subString.substring(indexOfSlash);"},{"lineNumber":113,"author":{"gitId":"lamzf1998"},"content":"            int indexNext \u003d subStringDate.indexOf(\" \");"},{"lineNumber":114,"author":{"gitId":"lamzf1998"},"content":"            if (indexNext \u003d\u003d -1) {"},{"lineNumber":115,"author":{"gitId":"lamzf1998"},"content":"                return \"missing\";"},{"lineNumber":116,"author":{"gitId":"lamzf1998"},"content":"            } else {"},{"lineNumber":117,"author":{"gitId":"lamzf1998"},"content":"                date \u003d subStringDate.substring(indexNext + 1);"},{"lineNumber":118,"author":{"gitId":"lamzf1998"},"content":"                return date;"},{"lineNumber":119,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":121,"author":{"gitId":"lamzf1998"},"content":"            return \"missing\";"},{"lineNumber":122,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":125,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"lamzf1998"},"content":"     * Processes the date and time of input into DateTime format."},{"lineNumber":127,"author":{"gitId":"lamzf1998"},"content":"     * @param dateTime Date and time of task."},{"lineNumber":128,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time in DateTime format."},{"lineNumber":129,"author":{"gitId":"lamzf1998"},"content":"     * @throws DateTimeParseException"},{"lineNumber":130,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"lamzf1998"},"content":"    public LocalDate processSearch(String dateTime) throws DateTimeParseException {"},{"lineNumber":132,"author":{"gitId":"lamzf1998"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":133,"author":{"gitId":"lamzf1998"},"content":"        LocalDate datetime \u003d LocalDate.parse(dateTime, formatter);"},{"lineNumber":134,"author":{"gitId":"lamzf1998"},"content":"        return datetime;"},{"lineNumber":135,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":137,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"lamzf1998"},"content":"     * Extracts keyword from user input for search task by keyword."},{"lineNumber":139,"author":{"gitId":"lamzf1998"},"content":"     * If no keyword present, returns a \"retry\" statement that will prompt an error message in the user interface."},{"lineNumber":140,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":141,"author":{"gitId":"lamzf1998"},"content":"     * @return Keyword."},{"lineNumber":142,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"lamzf1998"},"content":"    public String extractKeyword(String input) {"},{"lineNumber":144,"author":{"gitId":"lamzf1998"},"content":"        String keyword;"},{"lineNumber":145,"author":{"gitId":"lamzf1998"},"content":"        int indexOfSpace \u003d input.indexOf(\" \");"},{"lineNumber":146,"author":{"gitId":"lamzf1998"},"content":"        if (indexOfSpace \u003d\u003d -1) {"},{"lineNumber":147,"author":{"gitId":"lamzf1998"},"content":"            return \"retry\";"},{"lineNumber":148,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"lamzf1998"},"content":"            keyword \u003d input.substring(indexOfSpace + 1);"},{"lineNumber":150,"author":{"gitId":"lamzf1998"},"content":"            return keyword;"},{"lineNumber":151,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"lamzf1998"},"content":"}"},{"lineNumber":154,"author":{"gitId":"lamzf1998"},"content":""}],"authorContributionMap":{"lamzf1998":154}},{"path":"src/main/java/duke/controller/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.toDo;"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":" * Storage class that handles saving and loading of the file."},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"     * Saves the output task list into a txt file."},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"     * If IOException occurs, returns an error message."},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"    public void saveFile(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"            FileWriter writer \u003d new FileWriter(\"saveDuke.txt\");"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"            for (Task task : tasks) {"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"                if (task instanceof toDo) {"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"                    writer.write(\"T\" + \" / \" + task.getSaveDone() + \" / \" + task.getDescription());"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"                } else if (task instanceof Deadline) {"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"                    writer.write(\"D\" + \" / \" + task.getSaveDone() + \" / \" + task.getDescription() + \" / \" + ((Deadline) task).getByDate());"},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"                } else if (task instanceof Event) {"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":"                    writer.write(\"E\" + \" / \" + task.getSaveDone() + \" / \" + task.getDescription() + \" / \" + ((Event) task).getAtDate());"},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"                writer.write(\"\\n\");"},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"            writer.close();"},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"            System.out.print(\"Yea cuhhhh... filed saved!\\n\");"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Cannot save file my G!\");"},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"     * Loads task list containing saved tasks from the txt file."},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"     * If task list cannot be loaded, returns an error message and user is required to make a new list."},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"     * @return Task list."},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"    public ArrayList\u003cTask\u003e printFileContents() {"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"            File saveDuke \u003d new File(\"saveDuke.txt\");"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":"            Scanner fileReader \u003d new Scanner(saveDuke);"},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"            while (fileReader.hasNext()) {"},{"lineNumber":57,"author":{"gitId":"lamzf1998"},"content":"                String line \u003d fileReader.nextLine();"},{"lineNumber":58,"author":{"gitId":"lamzf1998"},"content":"                String[] stringSplit \u003d line.split(\" / \");"},{"lineNumber":59,"author":{"gitId":"lamzf1998"},"content":"                if (stringSplit[0].equals(\"T\")) {"},{"lineNumber":60,"author":{"gitId":"lamzf1998"},"content":"                    Task task \u003d new toDo(stringSplit[2]);"},{"lineNumber":61,"author":{"gitId":"lamzf1998"},"content":"                    if (stringSplit[1].equals(\"0\")) {"},{"lineNumber":62,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(false);"},{"lineNumber":63,"author":{"gitId":"lamzf1998"},"content":"                    } else {"},{"lineNumber":64,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(true);"},{"lineNumber":65,"author":{"gitId":"lamzf1998"},"content":"                    }"},{"lineNumber":66,"author":{"gitId":"lamzf1998"},"content":"                    tasks.add(task);"},{"lineNumber":67,"author":{"gitId":"lamzf1998"},"content":"                } else if (stringSplit[0].equals(\"E\")) {"},{"lineNumber":68,"author":{"gitId":"lamzf1998"},"content":"                    Task task \u003d new Event(stringSplit[2], stringSplit[3]);"},{"lineNumber":69,"author":{"gitId":"lamzf1998"},"content":"                    if (stringSplit[1].equals(\"0\")) {"},{"lineNumber":70,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(false);"},{"lineNumber":71,"author":{"gitId":"lamzf1998"},"content":"                    } else {"},{"lineNumber":72,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(true);"},{"lineNumber":73,"author":{"gitId":"lamzf1998"},"content":"                    }"},{"lineNumber":74,"author":{"gitId":"lamzf1998"},"content":"                    tasks.add(task);"},{"lineNumber":75,"author":{"gitId":"lamzf1998"},"content":"                } else if (stringSplit[0].equals(\"D\")) {"},{"lineNumber":76,"author":{"gitId":"lamzf1998"},"content":"                    Task task \u003d new Deadline(stringSplit[2], stringSplit[3]);"},{"lineNumber":77,"author":{"gitId":"lamzf1998"},"content":"                    if (stringSplit[1].equals(\"0\")) {"},{"lineNumber":78,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(false);"},{"lineNumber":79,"author":{"gitId":"lamzf1998"},"content":"                    } else {"},{"lineNumber":80,"author":{"gitId":"lamzf1998"},"content":"                        task.setAsDone(true);"},{"lineNumber":81,"author":{"gitId":"lamzf1998"},"content":"                    }"},{"lineNumber":82,"author":{"gitId":"lamzf1998"},"content":"                    tasks.add(task);"},{"lineNumber":83,"author":{"gitId":"lamzf1998"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"lamzf1998"},"content":"            fileReader.close();"},{"lineNumber":86,"author":{"gitId":"lamzf1998"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":87,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Cannot load file...you are clapped! Churn up new list please.\");"},{"lineNumber":88,"author":{"gitId":"lamzf1998"},"content":"            return tasks;"},{"lineNumber":89,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(\"File loaded boi...lets gooooooo!\");"},{"lineNumber":91,"author":{"gitId":"lamzf1998"},"content":"        return tasks;"},{"lineNumber":92,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":93}},{"path":"src/main/java/duke/controller/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.toDo;"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":" * Task list is a controller class that contains all methods such as"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":" * save, load, print, adding, deleting, mark as done and find by keyword or date."},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"     * Creates task list object."},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    public TaskList() {}"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"     * Prints the task list containing task type, check box to be marked as done and the task description."},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"        int number \u003d 1;"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(\"Here are the tings in yo list: \");"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"        for (Task task : tasks) {"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(number + \". \" + task.printDescription());"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"            number++;"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"     * Marks the task as done based on the user specified number."},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"     * If the user does not enter a task number, an error message will be displayed."},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"     * If the user keys in a task number not in the list index, an error message will be displayed."},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"    public void showDone(ArrayList\u003cTask\u003e tasks, String input) {"},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"        int indexSpace \u003d input.indexOf(\" \");"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"        if (indexSpace \u003d\u003d -1) {"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"I see you forget how to type numbers yea... you donut! Type in your task number man!\");"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"            String numberString \u003d input.substring(indexSpace + 1);"},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"            int taskNumber \u003d Integer.parseInt(numberString);"},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"                if (taskNumber \u003e tasks.size() || taskNumber \u003d\u003d 0) {"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"                    throw new NullPointerException(\"Are you blind? There is no such task number you fool!\");"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"                tasks.get(taskNumber - 1).markAsDone();"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Awwww yeah! I\u0027ve marked this task as done... brrrrrap brrrrrap: \");"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(tasks.get(taskNumber - 1).printDescription());"},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":57,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(e.getMessage());"},{"lineNumber":58,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":62,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"lamzf1998"},"content":"     * Deletes task based on the task number that the user has indicated."},{"lineNumber":64,"author":{"gitId":"lamzf1998"},"content":"     * If the user does not enter a task number, an error message will be displayed."},{"lineNumber":65,"author":{"gitId":"lamzf1998"},"content":"     * If the user keys in a task number not in the list index, an error message will be displayed."},{"lineNumber":66,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":67,"author":{"gitId":"lamzf1998"},"content":"     * @param input User input."},{"lineNumber":68,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"lamzf1998"},"content":"    public void deleteTask(ArrayList\u003cTask\u003e tasks, String input) {"},{"lineNumber":70,"author":{"gitId":"lamzf1998"},"content":"        int indexSpace \u003d input.indexOf(\" \");"},{"lineNumber":71,"author":{"gitId":"lamzf1998"},"content":"        if (indexSpace \u003d\u003d -1) {"},{"lineNumber":72,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"I see you forget how to type numbers yea... you donut! Type in your task number man!\");"},{"lineNumber":73,"author":{"gitId":"lamzf1998"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"lamzf1998"},"content":"            String numberString \u003d input.substring(indexSpace + 1);"},{"lineNumber":75,"author":{"gitId":"lamzf1998"},"content":"            int taskNumber \u003d Integer.parseInt(numberString);"},{"lineNumber":76,"author":{"gitId":"lamzf1998"},"content":"            try {"},{"lineNumber":77,"author":{"gitId":"lamzf1998"},"content":"                if (taskNumber \u003e tasks.size() || taskNumber \u003d\u003d 0) {"},{"lineNumber":78,"author":{"gitId":"lamzf1998"},"content":"                    throw new NullPointerException(\"Are you blind? There is no such task number you fool!\");"},{"lineNumber":79,"author":{"gitId":"lamzf1998"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Awwww yeah! I\u0027ve deleted this task like a beast: \");"},{"lineNumber":81,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(tasks.get(taskNumber - 1).printDescription());"},{"lineNumber":82,"author":{"gitId":"lamzf1998"},"content":"                tasks.remove(taskNumber - 1);"},{"lineNumber":83,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":84,"author":{"gitId":"lamzf1998"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":85,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(e.getMessage());"},{"lineNumber":86,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":90,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"lamzf1998"},"content":"     * Adds a todo task into the list."},{"lineNumber":92,"author":{"gitId":"lamzf1998"},"content":"     * Displays a confirmation message with the task details and current number of tasks in the list."},{"lineNumber":93,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":94,"author":{"gitId":"lamzf1998"},"content":"     * @param description Task description."},{"lineNumber":95,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"lamzf1998"},"content":"    public void printToDo(ArrayList\u003cTask\u003e tasks, String description) {"},{"lineNumber":97,"author":{"gitId":"lamzf1998"},"content":"        Task todo \u003d new toDo(description);"},{"lineNumber":98,"author":{"gitId":"lamzf1998"},"content":"        tasks.add(todo);"},{"lineNumber":99,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(\"Ayy I got you my brother. I\u0027ve added this ting: \");"},{"lineNumber":100,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(todo.printDescription());"},{"lineNumber":101,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(\"Dayuum son! You have \" + tasks.size() + \" mad tings in the list.\");"},{"lineNumber":102,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":104,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"lamzf1998"},"content":"     * Adds a deadline task into the list."},{"lineNumber":106,"author":{"gitId":"lamzf1998"},"content":"     * Displays a confirmation message with the task details and current number of tasks in the list."},{"lineNumber":107,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":108,"author":{"gitId":"lamzf1998"},"content":"     * @param description Task description."},{"lineNumber":109,"author":{"gitId":"lamzf1998"},"content":"     * @param date Date and time in which task is due."},{"lineNumber":110,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"lamzf1998"},"content":"    public void printDeadline(ArrayList\u003cTask\u003e tasks, String description, String date) {"},{"lineNumber":112,"author":{"gitId":"lamzf1998"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"lamzf1998"},"content":"            Task deadline \u003d new Deadline(description, date);"},{"lineNumber":114,"author":{"gitId":"lamzf1998"},"content":"            tasks.add(deadline);"},{"lineNumber":115,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Ayy I got you my brother. I\u0027ve added this ting: \");"},{"lineNumber":116,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(deadline.printDescription());"},{"lineNumber":117,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Jeeeeeeez! You have \" + tasks.size() + \" mad tings in the list.\");"},{"lineNumber":118,"author":{"gitId":"lamzf1998"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":119,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Oi you gotta key input in specified format dd-MM-yyyy HH:mm\");"},{"lineNumber":120,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":123,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"lamzf1998"},"content":"     * Adds an event task into the list."},{"lineNumber":125,"author":{"gitId":"lamzf1998"},"content":"     * Displays a confirmation message with the task details and current number of tasks in the list."},{"lineNumber":126,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":127,"author":{"gitId":"lamzf1998"},"content":"     * @param description Task description."},{"lineNumber":128,"author":{"gitId":"lamzf1998"},"content":"     * @param date Date and time in which task is due."},{"lineNumber":129,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"lamzf1998"},"content":"    public void printEvent(ArrayList\u003cTask\u003e tasks, String description, String date) {"},{"lineNumber":131,"author":{"gitId":"lamzf1998"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"lamzf1998"},"content":"            Task event \u003d new Event(description, date);"},{"lineNumber":133,"author":{"gitId":"lamzf1998"},"content":"            tasks.add(event);"},{"lineNumber":134,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Ayy I got you my brother. I\u0027ve added this ting: \");"},{"lineNumber":135,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(event.printDescription());"},{"lineNumber":136,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"I feer! You have \" + tasks.size() + \" mad tings in the list.\");"},{"lineNumber":137,"author":{"gitId":"lamzf1998"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":138,"author":{"gitId":"lamzf1998"},"content":"            System.out.println(\"Oi you gotta key input in specified format dd-MM-yyyy HH:mm!\");"},{"lineNumber":139,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":142,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"lamzf1998"},"content":"     * Finds and display tasks containing the keyword indicated by user."},{"lineNumber":144,"author":{"gitId":"lamzf1998"},"content":"     * If the keyword not found in any tasks, returns an empty search."},{"lineNumber":145,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":146,"author":{"gitId":"lamzf1998"},"content":"     * @param keyword Keyword used for search."},{"lineNumber":147,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"lamzf1998"},"content":"    public void findTask(ArrayList\u003cTask\u003e tasks, String keyword) {"},{"lineNumber":149,"author":{"gitId":"lamzf1998"},"content":"        System.out.print(\"Here are the search results:\\n\");"},{"lineNumber":150,"author":{"gitId":"lamzf1998"},"content":"        for (Task task : tasks) {"},{"lineNumber":151,"author":{"gitId":"lamzf1998"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":152,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(task.printDescription());"},{"lineNumber":153,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":157,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"lamzf1998"},"content":"     * Finds and display tasks containing the date indicated by user."},{"lineNumber":159,"author":{"gitId":"lamzf1998"},"content":"     * If the date is not found in any tasks, returns an empty search."},{"lineNumber":160,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":161,"author":{"gitId":"lamzf1998"},"content":"     * @param date Date used for search."},{"lineNumber":162,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"lamzf1998"},"content":"    public void findByDate(ArrayList\u003cTask\u003e tasks, LocalDate date) {"},{"lineNumber":164,"author":{"gitId":"lamzf1998"},"content":"        System.out.print(\"Here are the search results:\\n\");"},{"lineNumber":165,"author":{"gitId":"lamzf1998"},"content":"        for (Task task : tasks) {"},{"lineNumber":166,"author":{"gitId":"lamzf1998"},"content":"            if (task instanceof Deadline \u0026\u0026 ((Deadline) task).getDateTime().toLocalDate().isEqual(date)) {"},{"lineNumber":167,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(task.printDescription());"},{"lineNumber":168,"author":{"gitId":"lamzf1998"},"content":"            } else if (task instanceof Event \u0026\u0026 ((Event) task).getDateTime().toLocalDate().isEqual(date)) {"},{"lineNumber":169,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(task.printDescription());"},{"lineNumber":170,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":171,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":173}},{"path":"src/main/java/duke/controller/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":" * UI class that handles the user interface commands."},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"public class UI {"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"     * Creates new task list object."},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"    private TaskList tasklist \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"     * Creates parser object."},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"    private Parser parser \u003d new Parser();"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"     * Creates storage object."},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"    private Storage store \u003d new Storage();"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"     * Creates UI object."},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"    public UI() {};"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"     * Displays welcome message."},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"    public void displayWelcome() {"},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(logo);"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(\"Ay yo homie! You lookin PENGGGGGGGG today!\\nIt\u0027s ya boi Duke the Dawg. What can I do for ma G?\\n\");"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"     * Displays all available commands for user input."},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"    public void displayCommands() {"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"        String instructions \u003d \"1. todo TASKNAME : adds a todo task to the list.\\n\" +"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"            \"2. event TASKNAME /at TASKDATETIME* : adds a event task to the list.\\n\" +"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"            \"3. deadline TASKNAME /by TASKDATETIME* : adds a deadline task to the list.\\n\" +"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":"            \"4. list : displays list of tasks.\\n\" +"},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"            \"5. done NUMBER : checks task as done.\\n\" +"},{"lineNumber":57,"author":{"gitId":"lamzf1998"},"content":"            \"6. delete NUMBER : removes task from list.\\n\" +"},{"lineNumber":58,"author":{"gitId":"lamzf1998"},"content":"            \"7. save : save task list in a seperate text file.\\n\" +"},{"lineNumber":59,"author":{"gitId":"lamzf1998"},"content":"            \"8. find KEYWORD : Displays tasks containing keyword.\\n\" +"},{"lineNumber":60,"author":{"gitId":"lamzf1998"},"content":"            \"9. date DATE** : Displays tasks matched with date.\\n\" +"},{"lineNumber":61,"author":{"gitId":"lamzf1998"},"content":"            \"10. bye : exits system.\\n\" +"},{"lineNumber":62,"author":{"gitId":"lamzf1998"},"content":"            \"\\n*TASKDATETIME must be keyed in the following format dd-MM-yyyy HH:mm.\\n\" +"},{"lineNumber":63,"author":{"gitId":"lamzf1998"},"content":"            \"**DATE must be keyed in the following format dd-MM-yyyy.\\n\";"},{"lineNumber":64,"author":{"gitId":"lamzf1998"},"content":"        System.out.println(instructions);"},{"lineNumber":65,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":67,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"lamzf1998"},"content":"     * Handles user input and provides the desired output for each command."},{"lineNumber":69,"author":{"gitId":"lamzf1998"},"content":"     * If user does not input any task or date, returns an error message."},{"lineNumber":70,"author":{"gitId":"lamzf1998"},"content":"     * @param tasks Array list of tasks."},{"lineNumber":71,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"lamzf1998"},"content":"    public void handleTasklist(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":73,"author":{"gitId":"lamzf1998"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":74,"author":{"gitId":"lamzf1998"},"content":"        Boolean isSame \u003d true;"},{"lineNumber":75,"author":{"gitId":"lamzf1998"},"content":"        while (isSame) {"},{"lineNumber":76,"author":{"gitId":"lamzf1998"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":77,"author":{"gitId":"lamzf1998"},"content":"            String stringTask \u003d parser.sortTask(input);"},{"lineNumber":78,"author":{"gitId":"lamzf1998"},"content":"            String stringDate \u003d parser.sortDate(input);"},{"lineNumber":79,"author":{"gitId":"lamzf1998"},"content":"            if (stringTask.contains(\"retry\")) {"},{"lineNumber":80,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Hoi allow it fam! Why you typed nothing in? Are you dumb? Try again... you melon!\");"},{"lineNumber":81,"author":{"gitId":"lamzf1998"},"content":"                continue;"},{"lineNumber":82,"author":{"gitId":"lamzf1998"},"content":"            } else if (stringDate.contains(\"missing\")) {"},{"lineNumber":83,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Hoi you forgot your date yea? Type in your time period boi!\");"},{"lineNumber":84,"author":{"gitId":"lamzf1998"},"content":"                continue;"},{"lineNumber":85,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":87,"author":{"gitId":"lamzf1998"},"content":"            if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":88,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"Ciao Ciao. See ya soon fam!\");"},{"lineNumber":89,"author":{"gitId":"lamzf1998"},"content":"                isSame \u003d false;"},{"lineNumber":90,"author":{"gitId":"lamzf1998"},"content":"                System.exit(0);"},{"lineNumber":91,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":92,"author":{"gitId":"lamzf1998"},"content":"                tasklist.printTaskList(tasks);"},{"lineNumber":93,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"done\")) {"},{"lineNumber":94,"author":{"gitId":"lamzf1998"},"content":"                tasklist.showDone(tasks, input);"},{"lineNumber":95,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"delete\")) {"},{"lineNumber":96,"author":{"gitId":"lamzf1998"},"content":"                tasklist.deleteTask(tasks, input);"},{"lineNumber":97,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"todo\")) {"},{"lineNumber":98,"author":{"gitId":"lamzf1998"},"content":"                tasklist.printToDo(tasks, stringTask);"},{"lineNumber":99,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"deadline\")) {"},{"lineNumber":100,"author":{"gitId":"lamzf1998"},"content":"                tasklist.printDeadline(tasks, stringTask, stringDate);"},{"lineNumber":101,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"event\")) {"},{"lineNumber":102,"author":{"gitId":"lamzf1998"},"content":"                tasklist.printEvent(tasks, stringTask, stringDate);"},{"lineNumber":103,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"find\")) {"},{"lineNumber":104,"author":{"gitId":"lamzf1998"},"content":"                String keyword \u003d parser.extractKeyword(input);"},{"lineNumber":105,"author":{"gitId":"lamzf1998"},"content":"                tasklist.findTask(tasks, keyword);"},{"lineNumber":106,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"date\")) {"},{"lineNumber":107,"author":{"gitId":"lamzf1998"},"content":"                try {"},{"lineNumber":108,"author":{"gitId":"lamzf1998"},"content":"                    String date \u003d parser.extractDate(input);"},{"lineNumber":109,"author":{"gitId":"lamzf1998"},"content":"                    LocalDate Date \u003d parser.processSearch(date);"},{"lineNumber":110,"author":{"gitId":"lamzf1998"},"content":"                    tasklist.findByDate(tasks, Date);"},{"lineNumber":111,"author":{"gitId":"lamzf1998"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":112,"author":{"gitId":"lamzf1998"},"content":"                    System.out.println(\"Please key in specified format dd-MM-yyyy.\");"},{"lineNumber":113,"author":{"gitId":"lamzf1998"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"lamzf1998"},"content":"            } else if (input.contains(\"save\")) {"},{"lineNumber":115,"author":{"gitId":"lamzf1998"},"content":"                store.saveFile(tasks);"},{"lineNumber":116,"author":{"gitId":"lamzf1998"},"content":"            } else {"},{"lineNumber":117,"author":{"gitId":"lamzf1998"},"content":"                System.out.println(\"What are you tryna say to me? Chatting nonsense yea?\");"},{"lineNumber":118,"author":{"gitId":"lamzf1998"},"content":"                continue;"},{"lineNumber":119,"author":{"gitId":"lamzf1998"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"lamzf1998"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"lamzf1998"},"content":""}],"authorContributionMap":{"lamzf1998":121,"-":2}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import duke.controller.UI;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":"import duke.controller.Storage;"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":" * Represents the main duke class."},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"     * Creates new static UI object."},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"    private static UI ui \u003d new UI();"},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"     * Creates new static Storage object."},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"    private static Storage storage \u003d new Storage();"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"     * Creates ArrayList tasks."},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"     * Creates a duke object."},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"    public Duke() {}"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"     * Loads save file."},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"    public void load() {"},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"        tasks \u003d storage.printFileContents();"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"     * Run duke app."},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"    public void run() {"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"        ui.displayWelcome();"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"        ui.displayCommands();"},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"        load();"},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"        ui.handleTasklist(tasks);"},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"        duke.run();"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":56}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":" * Represents a deadline class. Deadline inherits task, in which the user can input and indicated by deadline TASKNAME /by dd-MM-yyyy HH:mm."},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"     * Date and time of deadline in string format."},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"    protected String byDate;"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"     * Date and time of deadline in DateTime format."},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"     * Creates an deadline task object to be added into the task list."},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"     * @param description Deadline description."},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"     * @param by Date and time which deadline is by."},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"        this.byDate \u003d by;"},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"        this.dateTime \u003d LocalDateTime.parse(by, dateTimeFormat);"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"     * Gets date and time of deadline in string format."},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time."},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"    public String getByDate() {"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"        return byDate;"},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"     * Gets date and time of deadline in DateTime format."},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time."},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"        return dateTime;"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"     * Prints details of deadline."},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"     * @return Task type D, description, and date time."},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"    public String printDescription() {"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"        return \"[D]\" + super.printDescription() + \" (by: \" + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\")) + \")\";"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":54}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":" * Represents an event class. Event inherits task, in which the user can input and indicated by event TASKNAME /at dd-MM-yyyy HH:mm."},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"     * Date and time of event in string format."},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"    protected String atDate;"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":"     * Date and time of event in DateTime format."},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"     * Creates an Event task object to be added into the task list."},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"     * @param description Event task description."},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"     * @param at Date and time of event."},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":"    public Event(String description, String at) {"},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"        this.atDate \u003d at;"},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"        this.dateTime \u003d LocalDateTime.parse(at, dateTimeFormat);"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":"     * Gets date and time of event in string format."},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time."},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"    public String getAtDate() {"},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"        return atDate;"},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":"     * Gets date amd time in DateTime format."},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"     * @return Date and time."},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"        return dateTime;"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"     * Prints details of event."},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"     * @return Task type E, description, and date time."},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"    public String printDescription() {"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"        return \"[E]\" + super.printDescription() + \" (at: \" + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\")) + \")\";"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":54}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":" * Represents a Task class. A task can be indicated as an event, deadline or todo."},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"public class Task{"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"     * Description of task."},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"     * Boolean expression for whether task is done or not."},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"    protected boolean isDone;"},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"     * Creates a Task object. that represents task that the user can input. A task can be todo, event or deadline."},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"     * @param description Task description."},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    public Task(String description) {"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lamzf1998"},"content":"     * Gets task description."},{"lineNumber":27,"author":{"gitId":"lamzf1998"},"content":"     * @return Task description."},{"lineNumber":28,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lamzf1998"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"lamzf1998"},"content":"        return description;"},{"lineNumber":31,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":33,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"lamzf1998"},"content":"     * Sets task as done or not upon loading the file."},{"lineNumber":35,"author":{"gitId":"lamzf1998"},"content":"     * @param done Boolean isDone."},{"lineNumber":36,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lamzf1998"},"content":"    public void setAsDone(boolean done) {"},{"lineNumber":38,"author":{"gitId":"lamzf1998"},"content":"        isDone \u003d done;"},{"lineNumber":39,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":41,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lamzf1998"},"content":"     * Marks task as done and returns the boolean isDone as true."},{"lineNumber":43,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lamzf1998"},"content":"    public void markAsDone() {"},{"lineNumber":45,"author":{"gitId":"lamzf1998"},"content":"        isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":48,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lamzf1998"},"content":"     * Gets the status icon depending on boolean isDone."},{"lineNumber":50,"author":{"gitId":"lamzf1998"},"content":"     * @return A tick if true, else blank."},{"lineNumber":51,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"lamzf1998"},"content":"    public String getStatusIcon() {"},{"lineNumber":53,"author":{"gitId":"lamzf1998"},"content":"        return (isDone ? \"\\u2713\" : \"\\u0020\");"},{"lineNumber":54,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":56,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lamzf1998"},"content":"     * Prints the task description."},{"lineNumber":58,"author":{"gitId":"lamzf1998"},"content":"     * @return Task description."},{"lineNumber":59,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"lamzf1998"},"content":"    public String printDescription() {"},{"lineNumber":61,"author":{"gitId":"lamzf1998"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":62,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":64,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"lamzf1998"},"content":"     * Marks the task as 1 or 0 in save file."},{"lineNumber":66,"author":{"gitId":"lamzf1998"},"content":"     * @return 1 if done, else 0."},{"lineNumber":67,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"lamzf1998"},"content":"    public int getSaveDone() {"},{"lineNumber":69,"author":{"gitId":"lamzf1998"},"content":"        return (isDone? 1:0);"},{"lineNumber":70,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":71}},{"path":"src/main/java/duke/tasks/toDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lamzf1998"},"content":" * Represents a todo class. toDo inherits task, in which the user can input and indicated by todo TASKNAME."},{"lineNumber":5,"author":{"gitId":"lamzf1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lamzf1998"},"content":"public class toDo extends Task {"},{"lineNumber":7,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":8,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"lamzf1998"},"content":"     * Creates todo task to be added into the task list."},{"lineNumber":10,"author":{"gitId":"lamzf1998"},"content":"     * @param description"},{"lineNumber":11,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"lamzf1998"},"content":"    public toDo(String description) {"},{"lineNumber":13,"author":{"gitId":"lamzf1998"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"lamzf1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lamzf1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lamzf1998"},"content":"     * Prints details of todo."},{"lineNumber":18,"author":{"gitId":"lamzf1998"},"content":"     * @return Task type T and description."},{"lineNumber":19,"author":{"gitId":"lamzf1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lamzf1998"},"content":"    public String printDescription() {"},{"lineNumber":21,"author":{"gitId":"lamzf1998"},"content":"        return \"[T]\" + super.printDescription();"},{"lineNumber":22,"author":{"gitId":"lamzf1998"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lamzf1998"},"content":"}"}],"authorContributionMap":{"lamzf1998":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lamzf1998"},"content":"todo running"},{"lineNumber":2,"author":{"gitId":"lamzf1998"},"content":"list"},{"lineNumber":3,"author":{"gitId":"lamzf1998"},"content":"bye"}],"authorContributionMap":{"lamzf1998":3}}]
