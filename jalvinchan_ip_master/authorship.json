[{"path":"data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"D;0;a;b"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":"E;0;c;d"}],"authorContributionMap":{"jalvinchan":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"Duke is a desktop app for managing user\u0027s tasks based on the Command Line Interface (CLI)."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"## Quick Start "},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":" "},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"1. Ensure you have Java 11 or above installed in your Computer.  "},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"1. Download the latest Duke.jar from [here](https://github.com/jalvinchan/ip/releases/download/A-Jar/ip.jar).  "},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"1. Copy the file to the folder you want to use as the home folder for your TaskManager."},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"1. Double-click the file to start the app."},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing list and pressing Enter will list all the tasks."},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"1. Some example commands you can try:"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"    1. [todo](https://jalvinchan.github.io/ip/#todo---add-todo)"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"    1. [deadline](https://jalvinchan.github.io/ip/#deadline---add-deadline) "},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"    1. [event](https://jalvinchan.github.io/ip/#event---add-event)"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"    1. [list](https://jalvinchan.github.io/ip/#list---list-all-tasks)"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    1. [done](https://jalvinchan.github.io/ip/#done---mark-task-as-done)"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"    1. [delete](https://jalvinchan.github.io/ip/#delete---deletes-a-task)"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"    1. [find](https://jalvinchan.github.io/ip/#find---finds-tasks)"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    1. [bye](https://jalvinchan.github.io/ip/#bye---exits-program)"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"1. Refer to the Usage below for details of each command."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"### `todo` - Add todo"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"Add a basic task to the task list."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"Format `todo TASK`  "},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":"`todo CS2113 IP`   "},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"`Got it. I\u0027ve added this task:`  "},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"`[T][ ] CS2113 IP`  "},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"`Now you have 1 tasks in the list.`  "},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"### `deadline` - Add deadline"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"Add a task that has to be done by a certain date/time to the task list."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"Format `deadline TASK /by DATETIME`  "},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"`deadline CS2113 homework /by Mar 5th`   "},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"`Got it. I\u0027ve added this task:`  "},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"`[D][ ] CS2113 homework (by: Mar 5th)`  "},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"`Now you have 2 tasks in the list.`"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"### `event` - Add event"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"Add an event to the task list."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"Format `event EVENT /at DATETIME`  "},{"lineNumber":52,"author":{"gitId":"-"},"content":"Example of usage:  "},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"`event CS2113 exam /at Apr 9th 4-6pm`  "},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":"`Got it. I\u0027ve added this task:`  "},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":"`[E][ ] CS2113 exam (at: Apr 9th 4-6pm)`  "},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":"`Now you have 3 tasks in the list.` "},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":"### `list` - List all tasks"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":"Shows a list of all the tasks currently in the task list."},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"Format: `list`  "},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":"`list`  "},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":"`Here are the tasks in your list:`  "},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"`1: [T][ ] CS2113 IP\u0027  `"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"jalvinchan"},"content":"### `done` - Mark task as done"},{"lineNumber":69,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":70,"author":{"gitId":"jalvinchan"},"content":"Mark a specified task from the task list as done."},{"lineNumber":71,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":72,"author":{"gitId":"jalvinchan"},"content":"Format `done INDEX`  "},{"lineNumber":73,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":74,"author":{"gitId":"jalvinchan"},"content":"`done 2`   "},{"lineNumber":75,"author":{"gitId":"jalvinchan"},"content":"`Nice! I\u0027ve marked this task as done:`  "},{"lineNumber":76,"author":{"gitId":"jalvinchan"},"content":"`[T][X] CS2113 IP`"},{"lineNumber":77,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":78,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":79,"author":{"gitId":"jalvinchan"},"content":"### `delete` - Deletes a task"},{"lineNumber":80,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":81,"author":{"gitId":"jalvinchan"},"content":"Deletes the specified task from the list of task"},{"lineNumber":82,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":83,"author":{"gitId":"jalvinchan"},"content":"Format `delete INDEX`  "},{"lineNumber":84,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":85,"author":{"gitId":"jalvinchan"},"content":"`delete 3`   "},{"lineNumber":86,"author":{"gitId":"jalvinchan"},"content":"`Noted. I\u0027ve removed this task:`  "},{"lineNumber":87,"author":{"gitId":"jalvinchan"},"content":"`[E][ ] CS2113 exam (at: Apr 9th 4-6pm)`  "},{"lineNumber":88,"author":{"gitId":"jalvinchan"},"content":"`Now you have 2 tasks in the list.`"},{"lineNumber":89,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":90,"author":{"gitId":"jalvinchan"},"content":"### `find` - Finds tasks"},{"lineNumber":91,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":92,"author":{"gitId":"jalvinchan"},"content":"Finds tasks that contains the keywords and list them."},{"lineNumber":93,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":94,"author":{"gitId":"jalvinchan"},"content":"Format `find KEYWORDS`  "},{"lineNumber":95,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":96,"author":{"gitId":"jalvinchan"},"content":"`find homework`  "},{"lineNumber":97,"author":{"gitId":"jalvinchan"},"content":"`[D][X] CS2113 homework (by: Mar 5th)`  "},{"lineNumber":98,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":99,"author":{"gitId":"jalvinchan"},"content":"### `bye` - Exits program"},{"lineNumber":100,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":101,"author":{"gitId":"jalvinchan"},"content":"Says goodbye to the program."},{"lineNumber":102,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":103,"author":{"gitId":"jalvinchan"},"content":"Format: `bye`  "},{"lineNumber":104,"author":{"gitId":"jalvinchan"},"content":"Example of usage:  "},{"lineNumber":105,"author":{"gitId":"jalvinchan"},"content":"`bye`  "},{"lineNumber":106,"author":{"gitId":"jalvinchan"},"content":"`Bye. Hope to see you again soon!`"}],"authorContributionMap":{"jalvinchan":89,"-":17}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"import duke.data.DataManager;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"import duke.parser.CommandParser;"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"import duke.task.TaskManager;"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"import duke.user_interface.UserInterface;"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":" * The Duke program implements an application"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":" * that allow users to keep track of their task"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":" *"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":" * @author Jalvin Chan Jia Xiang"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":" * @version 0.2"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":" * @since 16 Jan 2021"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    private static final String DATA_FILE_PATH \u003d \"data/data.txt\";"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"    private static UserInterface ui;"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"    private static TaskManager taskManager;"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"    private static DataManager dataManager;"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"    private static CommandParser parser;"},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"        ui \u003d new UserInterface();"},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"        taskManager \u003d new TaskManager();"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"        dataManager \u003d new DataManager(DATA_FILE_PATH);"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"        parser \u003d new CommandParser();"},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"        ArrayList\u003cTask\u003e taskList \u003d dataManager.loadData();"},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"        taskManager.setData(taskList);"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"        while (true) {"},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"            String input \u003d ui.getUserInput();"},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"            String feedback;"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"                feedback \u003d executeCommand(input);"},{"lineNumber":48,"author":{"gitId":"jalvinchan"},"content":"            } catch (InvalidCommandException e) {"},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"                feedback \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :(\";"},{"lineNumber":50,"author":{"gitId":"jalvinchan"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"            ui.printFeedback(feedback);"},{"lineNumber":52,"author":{"gitId":"jalvinchan"},"content":"            ArrayList\u003cTask\u003e data \u003d taskManager.getData();"},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"            dataManager.saveData(data);"},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":57,"author":{"gitId":"jalvinchan"},"content":"    private static String executeCommand(String input) throws InvalidCommandException {"},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":59,"author":{"gitId":"jalvinchan"},"content":"        String[] parsedInput \u003d parser.parseCommand(input);"},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":"        String command \u003d parsedInput[0];"},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"        String description \u003d parsedInput[1];"},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":"        String feedback \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"        switch (command) {"},{"lineNumber":67,"author":{"gitId":"jalvinchan"},"content":"        case \"bye\":"},{"lineNumber":68,"author":{"gitId":"jalvinchan"},"content":"            exitProgram();"},{"lineNumber":69,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"jalvinchan"},"content":"        case \"list\":"},{"lineNumber":71,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d listTask();"},{"lineNumber":72,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"jalvinchan"},"content":"        case \"done\":"},{"lineNumber":74,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d setTaskAsDone(description);"},{"lineNumber":75,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"jalvinchan"},"content":"        case \"delete\":"},{"lineNumber":77,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d deleteTask(description);"},{"lineNumber":78,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"jalvinchan"},"content":"        case \"todo\":"},{"lineNumber":80,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d addTodo(description);"},{"lineNumber":81,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"jalvinchan"},"content":"        case \"deadline\":"},{"lineNumber":83,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d addDeadline(description);"},{"lineNumber":84,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"jalvinchan"},"content":"        case \"event\":"},{"lineNumber":86,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d addEvent(description);"},{"lineNumber":87,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"jalvinchan"},"content":"        case \"find\":"},{"lineNumber":89,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d findTask(description);"},{"lineNumber":90,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"jalvinchan"},"content":"        default:"},{"lineNumber":92,"author":{"gitId":"jalvinchan"},"content":"            throw new InvalidCommandException();"},{"lineNumber":93,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":95,"author":{"gitId":"jalvinchan"},"content":"        return feedback;"},{"lineNumber":96,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":98,"author":{"gitId":"jalvinchan"},"content":"    private static String listTask() {"},{"lineNumber":99,"author":{"gitId":"jalvinchan"},"content":"        return taskManager.listTask();"},{"lineNumber":100,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":102,"author":{"gitId":"jalvinchan"},"content":"    private static String setTaskAsDone(String description) {"},{"lineNumber":103,"author":{"gitId":"jalvinchan"},"content":"        String feedback;"},{"lineNumber":104,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"jalvinchan"},"content":"            int taskNumber \u003d Integer.parseInt(description) - 1;"},{"lineNumber":106,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d taskManager.doneTask(taskNumber);"},{"lineNumber":107,"author":{"gitId":"jalvinchan"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":108,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d \"OOPS!!! Task number has to be a number\";"},{"lineNumber":109,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"jalvinchan"},"content":"        return feedback;"},{"lineNumber":111,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":113,"author":{"gitId":"jalvinchan"},"content":"    private static String deleteTask(String description) {"},{"lineNumber":114,"author":{"gitId":"jalvinchan"},"content":"        String feedback;"},{"lineNumber":115,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"jalvinchan"},"content":"            int taskNumber \u003d Integer.parseInt(description) - 1;"},{"lineNumber":117,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d taskManager.deleteTask(taskNumber);"},{"lineNumber":118,"author":{"gitId":"jalvinchan"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":119,"author":{"gitId":"jalvinchan"},"content":"            feedback \u003d \"OOPS!!! Task number has to be a number\";"},{"lineNumber":120,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"jalvinchan"},"content":"        return feedback;"},{"lineNumber":122,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":124,"author":{"gitId":"jalvinchan"},"content":"    private static String addTodo(String description) {"},{"lineNumber":125,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"jalvinchan"},"content":"            return taskManager.addTodo(description);"},{"lineNumber":127,"author":{"gitId":"jalvinchan"},"content":"        } catch (EmptyDescriptionException e) {"},{"lineNumber":128,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":129,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":132,"author":{"gitId":"jalvinchan"},"content":"    private static String addDeadline(String description) {"},{"lineNumber":133,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"jalvinchan"},"content":"            return taskManager.addDeadline(description);"},{"lineNumber":135,"author":{"gitId":"jalvinchan"},"content":"        } catch (EmptyDescriptionException e) {"},{"lineNumber":136,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! The description of a deadline cannot be empty.\";"},{"lineNumber":137,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":140,"author":{"gitId":"jalvinchan"},"content":"    private static String addEvent(String description) {"},{"lineNumber":141,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"jalvinchan"},"content":"            return taskManager.addEvent(description);"},{"lineNumber":143,"author":{"gitId":"jalvinchan"},"content":"        } catch (EmptyDescriptionException e) {"},{"lineNumber":144,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! The description of an event cannot be empty.\";"},{"lineNumber":145,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":148,"author":{"gitId":"jalvinchan"},"content":"    private static String findTask(String description) {"},{"lineNumber":149,"author":{"gitId":"jalvinchan"},"content":"        try{"},{"lineNumber":150,"author":{"gitId":"jalvinchan"},"content":"            return taskManager.findTask(description);"},{"lineNumber":151,"author":{"gitId":"jalvinchan"},"content":"        }catch (EmptyDescriptionException e){"},{"lineNumber":152,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! The description of a find cannot be empty.\";"},{"lineNumber":153,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":156,"author":{"gitId":"jalvinchan"},"content":"    private static void exitProgram() {"},{"lineNumber":157,"author":{"gitId":"jalvinchan"},"content":"        ui.showExitMessage();"},{"lineNumber":158,"author":{"gitId":"jalvinchan"},"content":"        System.exit(0);"},{"lineNumber":159,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jalvinchan":156,"-":4}},{"path":"src/main/java/duke/data/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.data;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"import duke.exception.LoadDataException;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"import duke.parser.DataParser;"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"import java.nio.charset.Charset;"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":" * Manages the storing and loading of data"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":" * into/from the hard disk."},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"public class DataManager {"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    private final String FILEPATH;"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"    private DataParser parser;"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"     * Constructor"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"     * @param FILEPATH Path where the data is stored."},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"    public DataManager(String FILEPATH) {"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"        this.FILEPATH \u003d FILEPATH;"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"        parser \u003d new DataParser();"},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"     * Saves the tasks\u0027 data into the hard disk."},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"     * @param tasks list of tasks to be saved."},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"    public void saveData(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"        StringBuilder data \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"        for (Task task : tasks) {"},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"            String taskString \u003d parser.parseTaskToString(task);"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"            data.append(taskString);"},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"            data.append(System.lineSeparator());"},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"            FileWriter writer \u003d new FileWriter(FILEPATH);"},{"lineNumber":48,"author":{"gitId":"jalvinchan"},"content":"            writer.write(data.toString());"},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"            writer.close();"},{"lineNumber":50,"author":{"gitId":"jalvinchan"},"content":"        } catch (IOException e) {"},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(\"Error writing to file: \" + FILEPATH);"},{"lineNumber":52,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":"     * loads the task\u0027s data from the hard disk."},{"lineNumber":57,"author":{"gitId":"jalvinchan"},"content":"     * @return List of tasks extracted from hard disk."},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jalvinchan"},"content":"    public ArrayList\u003cTask\u003e loadData() {"},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":"        File file \u003d new File(FILEPATH);"},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"        ArrayList\u003cTask\u003e taskList \u003d null;"},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":"            ArrayList\u003cString\u003e taskStringList \u003d readFile(file);"},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"            taskList \u003d parser.parseTaskString(taskStringList);"},{"lineNumber":67,"author":{"gitId":"jalvinchan"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(\"Error creating file: \" + FILEPATH);"},{"lineNumber":69,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(\"Data will not be saved in \" + FILEPATH);"},{"lineNumber":70,"author":{"gitId":"jalvinchan"},"content":"            return null;"},{"lineNumber":71,"author":{"gitId":"jalvinchan"},"content":"        } catch (LoadDataException e) {"},{"lineNumber":72,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(\"Error loading file: \" + FILEPATH);"},{"lineNumber":73,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(\"Existing file will be overwritten\");"},{"lineNumber":74,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":76,"author":{"gitId":"jalvinchan"},"content":"        return taskList;"},{"lineNumber":77,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":79,"author":{"gitId":"jalvinchan"},"content":"    private ArrayList\u003cString\u003e readFile(File file) throws IOException {"},{"lineNumber":80,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":81,"author":{"gitId":"jalvinchan"},"content":"        if (!file.getParentFile().exists()) {"},{"lineNumber":82,"author":{"gitId":"jalvinchan"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":83,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jalvinchan"},"content":"        if (!file.exists()) {"},{"lineNumber":85,"author":{"gitId":"jalvinchan"},"content":"            file.createNewFile();"},{"lineNumber":86,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":88,"author":{"gitId":"jalvinchan"},"content":"        return (ArrayList\u003cString\u003e) Files.readAllLines(file.toPath(), Charset.defaultCharset());"},{"lineNumber":89,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":91,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":91}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Thrown when description of task (todo, deadline, event) is empty."},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":7}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Thrown when user command is not recognized by the program"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":8}},{"path":"src/main/java/duke/exception/LoadDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Thrown when the programs fails parse data string"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" * that is extracted from the hard disk."},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"public class LoadDataException extends Exception {"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":8}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Parse user input into a format recognizable by the program."},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"public class CommandParser {"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"     * Extracts the command from user input."},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"     * @param input User input."},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"     * @return Command and its description extracted from the input."},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"    public String[] parseCommand(String input) {"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"        String[] output \u003d splitDescription(input, \" \");"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"        output[0] \u003d output[0].toLowerCase();"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"        return output;"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"     * Separates the deadline\u0027s date and name from the description."},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"     * @param description deadline\u0027s description provided by user"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"     * @return deadline\u0027s name and its date"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    public String[] parseDeadline(String description) {"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"        return splitDescription(description, \" /by \");"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"     * Separates the event\u0027s date and name from the description."},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"     * @param description event\u0027s description provided by user"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":"     * @return event\u0027s name and its date"},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"    public String[] parseEvent(String description) {"},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"        return splitDescription(description, \" /at \");"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":"    private String[] splitDescription(String description, String regex) {"},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"        String[] splitted \u003d description.split(regex, 2);"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":"        if (splitted.length \u003d\u003d 2) {"},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"            return splitted;"},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"            return new String[]{splitted[0], \"\"};"},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":46}},{"path":"src/main/java/duke/parser/DataParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"import duke.exception.LoadDataException;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":" * Converts between Task and String data types."},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":" * Task objects are used in the program while String"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":" * is used to store in the hard disk."},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"public class DataParser {"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"     * Converts tasks\u0027 data extracted from hard disk into a list"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"     * of Task objects for the program to use."},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"     * @param taskStringList Data extracted from hard disk."},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"     * @return List of Task objects converted from hard disk data."},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"     * @throws LoadDataException On corrupted data."},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"    public ArrayList\u003cTask\u003e parseTaskString(ArrayList\u003cString\u003e taskStringList) throws LoadDataException {"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"        for (String taskString : taskStringList) {"},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"            Task task \u003d parseStringToTask(taskString);"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":"            taskList.add(task);"},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"        return taskList;"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":"    private Task parseStringToTask(String taskString) throws LoadDataException {"},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":"        String[] parsedLine \u003d taskString.split(\";\", 3);"},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"        char taskType \u003d parsedLine[0].charAt(0);"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"        boolean taskIsDone \u003d parsedLine[1].equals(\"1\");"},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"        String taskDescription \u003d parsedLine[2];"},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"        Task task;"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"        switch (taskType) {"},{"lineNumber":48,"author":{"gitId":"jalvinchan"},"content":"        case \u0027T\u0027:"},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"            task \u003d new Todo(taskDescription);"},{"lineNumber":50,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"        case \u0027D\u0027: {"},{"lineNumber":52,"author":{"gitId":"jalvinchan"},"content":"            String[] nameAndDate \u003d taskDescription.split(\";\", 2);"},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"            task \u003d new Deadline(nameAndDate[0], nameAndDate[1]);"},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":"        case \u0027E\u0027: {"},{"lineNumber":57,"author":{"gitId":"jalvinchan"},"content":"            String[] nameAndDate \u003d taskDescription.split(\";\", 2);"},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":"            task \u003d new Event(nameAndDate[0], nameAndDate[1]);"},{"lineNumber":59,"author":{"gitId":"jalvinchan"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"            throw new LoadDataException();"},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":"        if (taskIsDone) {"},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"            task.setAsDone();"},{"lineNumber":67,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":69,"author":{"gitId":"jalvinchan"},"content":"        return task;"},{"lineNumber":70,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":72,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"jalvinchan"},"content":"     * Converts task data into String format so as to be"},{"lineNumber":74,"author":{"gitId":"jalvinchan"},"content":"     * stored inside hard disk."},{"lineNumber":75,"author":{"gitId":"jalvinchan"},"content":"     * @param task Task object to be converted."},{"lineNumber":76,"author":{"gitId":"jalvinchan"},"content":"     * @return task data in String format."},{"lineNumber":77,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jalvinchan"},"content":"    public String parseTaskToString(Task task) {"},{"lineNumber":79,"author":{"gitId":"jalvinchan"},"content":"        return task.getData();"},{"lineNumber":80,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":81}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Task that has o be done by a certain date/time."},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"    private final String date;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"     * Constructor"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"     * @param taskName Name of task."},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"     * @param date Date/time where the task must be done by."},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"    public Deadline(String taskName, String date) {"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"        super(taskName);"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), date);"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"    public String getData() {"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"D;%d;%s;%s\", (isDone ? 1 : 0), taskName, date);"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":28}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Task that happens at a specific date/time."},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"    private final String date;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"     * Constructor"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"     * @param taskName Name of event."},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"     * @param date Date/time of the event."},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"    public Event(String taskName, String date) {"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"        super(taskName);"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), date);"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"    public String getData() {"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"E;%d;%s;%s\", (isDone?1:0), taskName, date);"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":28}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Template for task sub-class"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"    protected String taskName;"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"     * Constructor"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"     * @param taskName Task name"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"    public Task(String taskName) {"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"        isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"    public String getDescription(){"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"        return taskName;"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"     * Marks this task as done."},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"    public void setAsDone() {"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"        char doneChar;"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"        if (isDone) {"},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"            doneChar \u003d \u0027X\u0027;"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"            doneChar \u003d \u0027 \u0027;"},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"[%c] %s\", doneChar, taskName);"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"     * Converts the task\u0027s data into String format"},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"     * to be saved inside the hard disk."},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"     * @return Task\u0027s data in String format."},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"    public abstract String getData();"},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":47}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"import duke.parser.CommandParser;"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":" * Stores and handles the list of tasks in the program"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"public class TaskManager {"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"    private CommandParser parser \u003d new CommandParser();"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"    public ArrayList\u003cTask\u003e getData() {"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"        return tasks;"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"     * Gets all the tasks\u0027 description."},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"     * @return tasks\u0027 information"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    public String listTask() {"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"        if(tasks.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"            return \"Your task list is empty... ):\";"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"            taskStrings.add(String.format(\"%d: %s\", (i + 1), tasks.get(i)));"},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"        return \"Here are the tasks in your list:\" + System.lineSeparator()"},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":"                + String.join(System.lineSeparator(), taskStrings);"},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"     * Marks the task as done in the task list."},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"     * @param taskNum 1-based index of the task that has been done."},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"     * @return Feedback of whether the process has been successful."},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"    public String doneTask(int taskNum) {"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"            tasks.get(taskNum).setAsDone();"},{"lineNumber":48,"author":{"gitId":"jalvinchan"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! Invalid task number. Try 1-\" + tasks.size();"},{"lineNumber":50,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"        return \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"},{"lineNumber":52,"author":{"gitId":"jalvinchan"},"content":"                + tasks.get(taskNum);"},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":"     * Removes the task from the task list."},{"lineNumber":57,"author":{"gitId":"jalvinchan"},"content":"     * @param taskNumber 1-based index of the task to be removed."},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":"     * @return Feedback of whether the process has been successful."},{"lineNumber":59,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":"    public String deleteTask(int taskNumber) {"},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":"        String task \u003d tasks.get(taskNumber).toString();"},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":"            tasks.remove(taskNumber);"},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! Invalid task number. Try 1-\" + tasks.size();"},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"jalvinchan"},"content":"        return \"Noted. I\u0027ve removed this task:\" + System.lineSeparator() +"},{"lineNumber":68,"author":{"gitId":"jalvinchan"},"content":"                task + System.lineSeparator() +"},{"lineNumber":69,"author":{"gitId":"jalvinchan"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":70,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":72,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"jalvinchan"},"content":"     * Loads the tasks into the task list."},{"lineNumber":74,"author":{"gitId":"jalvinchan"},"content":"     * @param tasks The task list to be loaded."},{"lineNumber":75,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"jalvinchan"},"content":"    public void setData(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":77,"author":{"gitId":"jalvinchan"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":78,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":80,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"jalvinchan"},"content":"     * Add todo task into the task list."},{"lineNumber":82,"author":{"gitId":"jalvinchan"},"content":"     * @param description Name of the todo task."},{"lineNumber":83,"author":{"gitId":"jalvinchan"},"content":"     * @return Feedback of whether the process has been successful."},{"lineNumber":84,"author":{"gitId":"jalvinchan"},"content":"     * @throws EmptyDescriptionException On missing todo description."},{"lineNumber":85,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"jalvinchan"},"content":"    public String addTodo(String description) throws EmptyDescriptionException {"},{"lineNumber":87,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":88,"author":{"gitId":"jalvinchan"},"content":"        if(description.isEmpty()){"},{"lineNumber":89,"author":{"gitId":"jalvinchan"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":90,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":92,"author":{"gitId":"jalvinchan"},"content":"        Todo todo \u003d new Todo(description);"},{"lineNumber":93,"author":{"gitId":"jalvinchan"},"content":"        tasks.add(todo);"},{"lineNumber":94,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":95,"author":{"gitId":"jalvinchan"},"content":"        return addTaskSuccessMessage(todo);"},{"lineNumber":96,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":98,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"jalvinchan"},"content":"     * Add deadline task into the task list."},{"lineNumber":100,"author":{"gitId":"jalvinchan"},"content":"     * @param description Name of the deadline task."},{"lineNumber":101,"author":{"gitId":"jalvinchan"},"content":"     * @return Feedback of whether the process has been successful."},{"lineNumber":102,"author":{"gitId":"jalvinchan"},"content":"     * @throws EmptyDescriptionException On missing deadline description."},{"lineNumber":103,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"jalvinchan"},"content":"    public String addDeadline(String description) throws EmptyDescriptionException {"},{"lineNumber":105,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":106,"author":{"gitId":"jalvinchan"},"content":"        if(description.isEmpty()){"},{"lineNumber":107,"author":{"gitId":"jalvinchan"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":108,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":110,"author":{"gitId":"jalvinchan"},"content":"        String[] parsedDescription \u003d parser.parseDeadline(description);"},{"lineNumber":111,"author":{"gitId":"jalvinchan"},"content":"        Deadline deadline \u003d new Deadline(parsedDescription[0], parsedDescription[1]);"},{"lineNumber":112,"author":{"gitId":"jalvinchan"},"content":"        tasks.add(deadline);"},{"lineNumber":113,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":114,"author":{"gitId":"jalvinchan"},"content":"        return addTaskSuccessMessage(deadline);"},{"lineNumber":115,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":117,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"jalvinchan"},"content":"     * Add event task into the task list."},{"lineNumber":119,"author":{"gitId":"jalvinchan"},"content":"     * @param description Name of the event task."},{"lineNumber":120,"author":{"gitId":"jalvinchan"},"content":"     * @return Feedback of whether the process has been successful."},{"lineNumber":121,"author":{"gitId":"jalvinchan"},"content":"     * @throws EmptyDescriptionException On missing event description."},{"lineNumber":122,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"jalvinchan"},"content":"    public String addEvent(String description) throws EmptyDescriptionException {"},{"lineNumber":124,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":125,"author":{"gitId":"jalvinchan"},"content":"        if(description.isEmpty()){"},{"lineNumber":126,"author":{"gitId":"jalvinchan"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":127,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":129,"author":{"gitId":"jalvinchan"},"content":"        String[] parsedDescription \u003d parser.parseEvent(description);"},{"lineNumber":130,"author":{"gitId":"jalvinchan"},"content":"        Event event \u003d new Event(parsedDescription[0], parsedDescription[1]);"},{"lineNumber":131,"author":{"gitId":"jalvinchan"},"content":"        tasks.add(event);"},{"lineNumber":132,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":133,"author":{"gitId":"jalvinchan"},"content":"        return addTaskSuccessMessage(event);"},{"lineNumber":134,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":136,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":137,"author":{"gitId":"jalvinchan"},"content":"    private String addTaskSuccessMessage(Task task) {"},{"lineNumber":138,"author":{"gitId":"jalvinchan"},"content":"        return \"Got it. I\u0027ve added this task:\" + System.lineSeparator()"},{"lineNumber":139,"author":{"gitId":"jalvinchan"},"content":"                + task + System.lineSeparator()"},{"lineNumber":140,"author":{"gitId":"jalvinchan"},"content":"                + \"Now you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":141,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":143,"author":{"gitId":"jalvinchan"},"content":"    public String findTask(String description) throws EmptyDescriptionException {"},{"lineNumber":144,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":145,"author":{"gitId":"jalvinchan"},"content":"        if(description.isEmpty()){"},{"lineNumber":146,"author":{"gitId":"jalvinchan"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":147,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":149,"author":{"gitId":"jalvinchan"},"content":"        ArrayList\u003cString\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitId":"jalvinchan"},"content":"        for(Task task: tasks){"},{"lineNumber":151,"author":{"gitId":"jalvinchan"},"content":"            String taskDescription \u003d task.getDescription();"},{"lineNumber":152,"author":{"gitId":"jalvinchan"},"content":"            if(taskDescription.contains(description)){"},{"lineNumber":153,"author":{"gitId":"jalvinchan"},"content":"                foundTasks.add(task.toString());"},{"lineNumber":154,"author":{"gitId":"jalvinchan"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":157,"author":{"gitId":"jalvinchan"},"content":"        if(foundTasks.isEmpty()){"},{"lineNumber":158,"author":{"gitId":"jalvinchan"},"content":"            return \"OOPS!!! Couldn\u0027t find task with \\\"\" + description + \"\\\"\";"},{"lineNumber":159,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":161,"author":{"gitId":"jalvinchan"},"content":"        return String.join(System.lineSeparator(), foundTasks);"},{"lineNumber":162,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":163}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":" * Task that has to be done without any specified"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":" * deadline."},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"     * Constructor"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"     * @param taskName Name of task."},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"    public Todo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"    public String getData() {"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"        return String.format(\"T;%d;%s\", (isDone?1:0), taskName);"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":26}},{"path":"src/main/java/duke/user_interface/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"package duke.user_interface;"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":" * Handles input and output to the command line."},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"public class UserInterface {"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":18,"author":{"gitId":"jalvinchan"},"content":"    private static final Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":20,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jalvinchan"},"content":"     * Displays the welcome message when the user"},{"lineNumber":22,"author":{"gitId":"jalvinchan"},"content":"     * open the program."},{"lineNumber":23,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jalvinchan"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":25,"author":{"gitId":"jalvinchan"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);"},{"lineNumber":26,"author":{"gitId":"jalvinchan"},"content":"        printDivider();"},{"lineNumber":27,"author":{"gitId":"jalvinchan"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":28,"author":{"gitId":"jalvinchan"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":29,"author":{"gitId":"jalvinchan"},"content":"        printDivider();"},{"lineNumber":30,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":32,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jalvinchan"},"content":"     * Takes in the user input and sends it to the program."},{"lineNumber":34,"author":{"gitId":"jalvinchan"},"content":"     * @return user input"},{"lineNumber":35,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jalvinchan"},"content":"    public String getUserInput() {"},{"lineNumber":37,"author":{"gitId":"jalvinchan"},"content":"        String input;"},{"lineNumber":38,"author":{"gitId":"jalvinchan"},"content":"        do {"},{"lineNumber":39,"author":{"gitId":"jalvinchan"},"content":"            input \u003d scanner.nextLine();"},{"lineNumber":40,"author":{"gitId":"jalvinchan"},"content":"        } while (input.trim().isEmpty());"},{"lineNumber":41,"author":{"gitId":"jalvinchan"},"content":"        printDivider();"},{"lineNumber":42,"author":{"gitId":"jalvinchan"},"content":"        return input;"},{"lineNumber":43,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":45,"author":{"gitId":"jalvinchan"},"content":"    private void printDivider() {"},{"lineNumber":46,"author":{"gitId":"jalvinchan"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":47,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":49,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"jalvinchan"},"content":"     * Displays the exit message when the user ends the program."},{"lineNumber":51,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jalvinchan"},"content":"    public void showExitMessage() {"},{"lineNumber":53,"author":{"gitId":"jalvinchan"},"content":"        System.out.println(EXIT_MESSAGE);"},{"lineNumber":54,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jalvinchan"},"content":""},{"lineNumber":56,"author":{"gitId":"jalvinchan"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jalvinchan"},"content":"     * Displays the output from the execution of command to the user."},{"lineNumber":58,"author":{"gitId":"jalvinchan"},"content":"     * @param feedback To be shown to the user."},{"lineNumber":59,"author":{"gitId":"jalvinchan"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jalvinchan"},"content":"    public void printFeedback(String feedback) {"},{"lineNumber":61,"author":{"gitId":"jalvinchan"},"content":"        if (feedback !\u003d null) {"},{"lineNumber":62,"author":{"gitId":"jalvinchan"},"content":"            System.out.println(feedback);"},{"lineNumber":63,"author":{"gitId":"jalvinchan"},"content":"            printDivider();"},{"lineNumber":64,"author":{"gitId":"jalvinchan"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"jalvinchan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jalvinchan"},"content":"}"}],"authorContributionMap":{"jalvinchan":66}},{"path":"text-ui-test/data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"T;1;borrow book"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":"D;0;return book;June 6th"},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"D;0;assignment;"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"E;0;project meeting;Aug 6th 2-4pm"}],"authorContributionMap":{"jalvinchan":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jalvinchan"},"content":"list"},{"lineNumber":2,"author":{"gitId":"jalvinchan"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"jalvinchan"},"content":"list"},{"lineNumber":4,"author":{"gitId":"jalvinchan"},"content":"ToDo read book"},{"lineNumber":5,"author":{"gitId":"jalvinchan"},"content":"deadline return book /by June 6th"},{"lineNumber":6,"author":{"gitId":"jalvinchan"},"content":"deadline assignment"},{"lineNumber":7,"author":{"gitId":"jalvinchan"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"list"},{"lineNumber":9,"author":{"gitId":"jalvinchan"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"jalvinchan"},"content":"list"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"delete 2"},{"lineNumber":12,"author":{"gitId":"jalvinchan"},"content":"list"},{"lineNumber":13,"author":{"gitId":"jalvinchan"},"content":"find book"},{"lineNumber":14,"author":{"gitId":"jalvinchan"},"content":"someRandomCommand"},{"lineNumber":15,"author":{"gitId":"jalvinchan"},"content":"some random command"},{"lineNumber":16,"author":{"gitId":"jalvinchan"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"jalvinchan"},"content":"bye"}],"authorContributionMap":{"jalvinchan":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"jalvinchan"},"content":"if exist data\\data.txt del data\\data.txt"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"jalvinchan"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\Exception\\*.java ..\\src\\main\\java\\duke\\Task\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"jalvinchan"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"jalvinchan":3,"-":19}}]
