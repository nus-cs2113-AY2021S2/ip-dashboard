[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"# Class project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"1. After that, locate the `src/main/java/Class.java` file, right-click it, and choose `Run Class.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"CabbageTime":2,"-":24}},{"path":"src/main/java/Class/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return \"[D][\" + super.getStatusIcon() + \"] \" + super.getDescription() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":15}},{"path":"src/main/java/Class/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return \"[E][\" + super.getStatusIcon() + \"] \" + super.getDescription() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":15}},{"path":"src/main/java/Class/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return description;"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"    public void markAsDone(){"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        this.isDone \u003d true;"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":23}},{"path":"src/main/java/Class/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"        return \"[T][\" + super.getStatusIcon() + \"] \" + super.getDescription();"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":12}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"import java.util.Vector;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"import Class.*;"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.*;"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"    public static String lineDivider \u003d \"    --------------------------------------------------------------------------\";"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public static void addMessage(Task task, int size){"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     \" + task.getDescription());"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Now you have \" + size + \" tasks in this list.\");"},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    public static void takeCommand(String command,List\u003cTask\u003e tasks) throws UnknownCommand, EmptyDescription {"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":"        String[] subStrings \u003d command.split(\" \");"},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"        String description \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        int slashIndex \u003d command.indexOf(\u0027/\u0027);"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"        switch(subStrings[0]){"},{"lineNumber":24,"author":{"gitId":"CabbageTime"},"content":"        case \"list\":"},{"lineNumber":25,"author":{"gitId":"CabbageTime"},"content":"            printTasks(tasks);"},{"lineNumber":26,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"CabbageTime"},"content":"        case \"bye\":"},{"lineNumber":28,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"     Bye. Hope to see you again soon!\");"},{"lineNumber":29,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"CabbageTime"},"content":"        case \"done\":"},{"lineNumber":31,"author":{"gitId":"CabbageTime"},"content":"            if(subStrings.length \u003e 1){"},{"lineNumber":32,"author":{"gitId":"CabbageTime"},"content":"                int taskNo \u003d Integer.parseInt(subStrings[1]);"},{"lineNumber":33,"author":{"gitId":"CabbageTime"},"content":"                Task taskDone \u003d tasks.get(taskNo-1);"},{"lineNumber":34,"author":{"gitId":"CabbageTime"},"content":"                taskDone.markAsDone();"},{"lineNumber":35,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":36,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"      [\" + taskDone.getStatusIcon() + \"] \" +"},{"lineNumber":37,"author":{"gitId":"CabbageTime"},"content":"                        taskDone.getDescription());"},{"lineNumber":38,"author":{"gitId":"CabbageTime"},"content":"                tasks.set(taskNo-1, taskDone);"},{"lineNumber":39,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":40,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"done\");"},{"lineNumber":41,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"CabbageTime"},"content":"        case \"todo\":"},{"lineNumber":44,"author":{"gitId":"CabbageTime"},"content":"            if(subStrings.length \u003e 2){"},{"lineNumber":45,"author":{"gitId":"CabbageTime"},"content":"                description \u003d command.substring(5);"},{"lineNumber":46,"author":{"gitId":"CabbageTime"},"content":"                Todo todo \u003d new Todo(description);"},{"lineNumber":47,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(todo);"},{"lineNumber":48,"author":{"gitId":"CabbageTime"},"content":"                addMessage(todo,tasks.size());"},{"lineNumber":49,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"todo\");"},{"lineNumber":51,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"CabbageTime"},"content":"        case \"deadline\":"},{"lineNumber":54,"author":{"gitId":"CabbageTime"},"content":"            if(slashIndex !\u003d -1) {"},{"lineNumber":55,"author":{"gitId":"CabbageTime"},"content":"                description \u003d command.substring(9, slashIndex-1);"},{"lineNumber":56,"author":{"gitId":"CabbageTime"},"content":"                String by \u003d command.substring(slashIndex+4);"},{"lineNumber":57,"author":{"gitId":"CabbageTime"},"content":"                Deadline deadline \u003d new Deadline(description, by);"},{"lineNumber":58,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(deadline);"},{"lineNumber":59,"author":{"gitId":"CabbageTime"},"content":"                addMessage(deadline,tasks.size());"},{"lineNumber":60,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"deadline\");"},{"lineNumber":62,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"CabbageTime"},"content":"        case \"event\":"},{"lineNumber":65,"author":{"gitId":"CabbageTime"},"content":"            if(slashIndex !\u003d -1) {"},{"lineNumber":66,"author":{"gitId":"CabbageTime"},"content":"                description \u003d command.substring(6, slashIndex-1);"},{"lineNumber":67,"author":{"gitId":"CabbageTime"},"content":"                String at \u003d command.substring(slashIndex+4);"},{"lineNumber":68,"author":{"gitId":"CabbageTime"},"content":"                Event event \u003d new Event(description, at);"},{"lineNumber":69,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(event);"},{"lineNumber":70,"author":{"gitId":"CabbageTime"},"content":"                addMessage(event,tasks.size());"},{"lineNumber":71,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"event\");"},{"lineNumber":73,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"CabbageTime"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"CabbageTime"},"content":"            throw new UnknownCommand();"},{"lineNumber":77,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":80,"author":{"gitId":"CabbageTime"},"content":"    public static void printTasks(List\u003cTask\u003e tasks){"},{"lineNumber":81,"author":{"gitId":"CabbageTime"},"content":"        int i \u003d 1;"},{"lineNumber":82,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Here are the tasks in your list:\");"},{"lineNumber":83,"author":{"gitId":"CabbageTime"},"content":"        for(Task task:tasks){"},{"lineNumber":84,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"     \" + i + \".\" + task.getDescription());"},{"lineNumber":85,"author":{"gitId":"CabbageTime"},"content":"            ++i;"},{"lineNumber":86,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":90,"author":{"gitId":"CabbageTime"},"content":"        Scanner in \u003d new Scanner(System.in).useDelimiter(\" \");"},{"lineNumber":91,"author":{"gitId":"CabbageTime"},"content":"        String command \u003d \"\";"},{"lineNumber":92,"author":{"gitId":"CabbageTime"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":93,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":94,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" +"},{"lineNumber":95,"author":{"gitId":"CabbageTime"},"content":"                \"What can I do for you?\");"},{"lineNumber":96,"author":{"gitId":"CabbageTime"},"content":"        do{"},{"lineNumber":97,"author":{"gitId":"CabbageTime"},"content":"            command \u003d in.nextLine();"},{"lineNumber":98,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(lineDivider);"},{"lineNumber":99,"author":{"gitId":"CabbageTime"},"content":"            try{"},{"lineNumber":100,"author":{"gitId":"CabbageTime"},"content":"                takeCommand(command,tasks);"},{"lineNumber":101,"author":{"gitId":"CabbageTime"},"content":"            } catch (UnknownCommand e) {"},{"lineNumber":102,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Oops!!! I\u0027m sorry, but I have no idea what that means \u003d(\");"},{"lineNumber":103,"author":{"gitId":"CabbageTime"},"content":"            } catch (EmptyDescription e) {"},{"lineNumber":104,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Oops!!! The description of \" + e.TaskName() + \" cannot be empty.\");"},{"lineNumber":105,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(lineDivider);"},{"lineNumber":107,"author":{"gitId":"CabbageTime"},"content":"        }while(!command.equals(\"bye\"));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CabbageTime":105,"-":4}},{"path":"src/main/java/ErrorHandling/EmptyDescription.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package ErrorHandling;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class EmptyDescription extends Exception{"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    String task;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"    public EmptyDescription(String task){"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"        this.task \u003d task;"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    public String TaskName(){"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"        return task;"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":12}},{"path":"src/main/java/ErrorHandling/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package ErrorHandling;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class UnknownCommand extends Exception{"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    public UnknownCommand(){"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"        // No code for now"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"list"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"deadline do homework /by no idea :-p"}],"authorContributionMap":{"CabbageTime":11}}]
