[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"# Class project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"1. After that, locate the `src/main/java/Class.java` file, right-click it, and choose `Run Class.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"CabbageTime":2,"-":24}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"1 todo read book | "},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"0 deadline return book | June 6th"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"0 event project meeting | Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"1 todo join sports club | "}],"authorContributionMap":{"CabbageTime":4}},{"path":"src/main/java/Class/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String by;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return \"[D][\" + super.getStatusIcon() + \"] \" + super.getDescription() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"    public String getType(){"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"        return \"deadline\";"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"    public String getTime(){"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        return this.by;"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":23}},{"path":"src/main/java/Class/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String at;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    public Event(String description, String at) {"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return \"[E][\" + super.getStatusIcon() + \"] \" + super.getDescription() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"    public String getType(){"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"        return \"event\";"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"    public String getTime(){"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        return this.at;"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":23}},{"path":"src/main/java/Class/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"        return this.description;"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"    public void markAsDone(){"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        this.isDone \u003d true;"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":24,"author":{"gitId":"CabbageTime"},"content":"    public String getType(){"},{"lineNumber":25,"author":{"gitId":"CabbageTime"},"content":"        return \"task\";"},{"lineNumber":26,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":28,"author":{"gitId":"CabbageTime"},"content":"    public String getTime(){"},{"lineNumber":29,"author":{"gitId":"CabbageTime"},"content":"        return \"nothing\";"},{"lineNumber":30,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":32,"author":{"gitId":"CabbageTime"},"content":"    public String getTaskName(){"},{"lineNumber":33,"author":{"gitId":"CabbageTime"},"content":"        return this.description;"},{"lineNumber":34,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":36,"author":{"gitId":"CabbageTime"},"content":"    public int isDone(){"},{"lineNumber":37,"author":{"gitId":"CabbageTime"},"content":"        if(this.isDone){"},{"lineNumber":38,"author":{"gitId":"CabbageTime"},"content":"            return 1;"},{"lineNumber":39,"author":{"gitId":"CabbageTime"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"CabbageTime"},"content":"            return 0;"},{"lineNumber":41,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":43}},{"path":"src/main/java/Class/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Class;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    public String getDescription() {"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"        return \"[T][\" + super.getStatusIcon() + \"] \" + super.getDescription();"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"    public String getType(){"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"        return \"todo\";"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"    public String getTime(){"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"        return \"\";"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":20}},{"path":"src/main/java/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package Command;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"import Class.Deadline;"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"import Class.Event;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"import Class.Task;"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"import Class.Todo;"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.EmptyDescription;"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.OutOfBound;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.UnknownCommand;"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"public class Command {"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"    private static String setDescription(String[] subStrings, int startIndex, int slashIndex) {"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":"        String description \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":"        // Input the description of the task"},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        for (int i \u003d startIndex; i \u003c slashIndex; ++i) {"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":"            description +\u003d subStrings[i];"},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"            if (i !\u003d slashIndex - 1) {"},{"lineNumber":24,"author":{"gitId":"CabbageTime"},"content":"                description +\u003d \" \";"},{"lineNumber":25,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":28,"author":{"gitId":"CabbageTime"},"content":"        return description;"},{"lineNumber":29,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":31,"author":{"gitId":"CabbageTime"},"content":"    private static String setTime(String[] subStrings, int slashIndex) {"},{"lineNumber":32,"author":{"gitId":"CabbageTime"},"content":"        String time \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"CabbageTime"},"content":"        // Input the time for the task (will be skipped if there is no time parameter)"},{"lineNumber":34,"author":{"gitId":"CabbageTime"},"content":"        for (int i \u003d slashIndex + 1; i \u003c subStrings.length; ++i) {"},{"lineNumber":35,"author":{"gitId":"CabbageTime"},"content":"            time +\u003d subStrings[i];"},{"lineNumber":36,"author":{"gitId":"CabbageTime"},"content":"            if (i !\u003d subStrings.length - 1) {"},{"lineNumber":37,"author":{"gitId":"CabbageTime"},"content":"                time +\u003d \" \";"},{"lineNumber":38,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":41,"author":{"gitId":"CabbageTime"},"content":"        return time;"},{"lineNumber":42,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":44,"author":{"gitId":"CabbageTime"},"content":"    public static void readFile(List\u003cTask\u003e tasks) throws IOException, UnknownCommand, EmptyDescription {"},{"lineNumber":45,"author":{"gitId":"CabbageTime"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"CabbageTime"},"content":"            File saveFolder \u003d new File(\"data\");"},{"lineNumber":47,"author":{"gitId":"CabbageTime"},"content":"            if (!saveFolder.exists()) {"},{"lineNumber":48,"author":{"gitId":"CabbageTime"},"content":"                saveFolder.mkdir();"},{"lineNumber":49,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"CabbageTime"},"content":"            File saveFile \u003d new File(\"data/tasks.txt\");"},{"lineNumber":51,"author":{"gitId":"CabbageTime"},"content":"            if (!saveFile.exists()) {"},{"lineNumber":52,"author":{"gitId":"CabbageTime"},"content":"                saveFile.createNewFile();"},{"lineNumber":53,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":55,"author":{"gitId":"CabbageTime"},"content":"            Scanner s \u003d new Scanner(saveFile);"},{"lineNumber":56,"author":{"gitId":"CabbageTime"},"content":"            int isDone;"},{"lineNumber":57,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":58,"author":{"gitId":"CabbageTime"},"content":"            while (s.hasNext()) {"},{"lineNumber":59,"author":{"gitId":"CabbageTime"},"content":"                String input \u003d s.nextLine();"},{"lineNumber":60,"author":{"gitId":"CabbageTime"},"content":"                String[] subStrings \u003d input.split(\" \");"},{"lineNumber":61,"author":{"gitId":"CabbageTime"},"content":"                int slashIndex \u003d subStrings.length;"},{"lineNumber":62,"author":{"gitId":"CabbageTime"},"content":"                // String description \u003d input.substring(2, input.indexOf(\u0027|\u0027) - 1);"},{"lineNumber":63,"author":{"gitId":"CabbageTime"},"content":"                for (int i \u003d 0; i \u003c subStrings.length; ++i) {"},{"lineNumber":64,"author":{"gitId":"CabbageTime"},"content":"                    if (subStrings[i].equals(\"|\")) {"},{"lineNumber":65,"author":{"gitId":"CabbageTime"},"content":"                        slashIndex \u003d i;"},{"lineNumber":66,"author":{"gitId":"CabbageTime"},"content":"                        break;"},{"lineNumber":67,"author":{"gitId":"CabbageTime"},"content":"                    }"},{"lineNumber":68,"author":{"gitId":"CabbageTime"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"CabbageTime"},"content":"                String description \u003d setDescription(subStrings, 2, slashIndex);"},{"lineNumber":70,"author":{"gitId":"CabbageTime"},"content":"                String time \u003d setTime(subStrings, slashIndex);"},{"lineNumber":71,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":72,"author":{"gitId":"CabbageTime"},"content":"                // Check if the task is done"},{"lineNumber":73,"author":{"gitId":"CabbageTime"},"content":"                isDone \u003d Character.getNumericValue(input.charAt(0));"},{"lineNumber":74,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":75,"author":{"gitId":"CabbageTime"},"content":"                switch (subStrings[1]) {"},{"lineNumber":76,"author":{"gitId":"CabbageTime"},"content":"                case \"todo\":"},{"lineNumber":77,"author":{"gitId":"CabbageTime"},"content":"                    Todo todo \u003d new Todo(description);"},{"lineNumber":78,"author":{"gitId":"CabbageTime"},"content":"                    if (isDone \u003d\u003d 1) {"},{"lineNumber":79,"author":{"gitId":"CabbageTime"},"content":"                        todo.markAsDone();"},{"lineNumber":80,"author":{"gitId":"CabbageTime"},"content":"                    }"},{"lineNumber":81,"author":{"gitId":"CabbageTime"},"content":"                    tasks.add(todo);"},{"lineNumber":82,"author":{"gitId":"CabbageTime"},"content":"                    break;"},{"lineNumber":83,"author":{"gitId":"CabbageTime"},"content":"                case \"event\":"},{"lineNumber":84,"author":{"gitId":"CabbageTime"},"content":"                    Event event \u003d new Event(description, time);"},{"lineNumber":85,"author":{"gitId":"CabbageTime"},"content":"                    if (isDone \u003d\u003d 1) {"},{"lineNumber":86,"author":{"gitId":"CabbageTime"},"content":"                        event.markAsDone();"},{"lineNumber":87,"author":{"gitId":"CabbageTime"},"content":"                    }"},{"lineNumber":88,"author":{"gitId":"CabbageTime"},"content":"                    tasks.add(event);"},{"lineNumber":89,"author":{"gitId":"CabbageTime"},"content":"                    break;"},{"lineNumber":90,"author":{"gitId":"CabbageTime"},"content":"                case \"deadline\":"},{"lineNumber":91,"author":{"gitId":"CabbageTime"},"content":"                    Deadline deadline \u003d new Deadline(description, time);"},{"lineNumber":92,"author":{"gitId":"CabbageTime"},"content":"                    if (isDone \u003d\u003d 1) {"},{"lineNumber":93,"author":{"gitId":"CabbageTime"},"content":"                        deadline.markAsDone();"},{"lineNumber":94,"author":{"gitId":"CabbageTime"},"content":"                    }"},{"lineNumber":95,"author":{"gitId":"CabbageTime"},"content":"                    tasks.add(deadline);"},{"lineNumber":96,"author":{"gitId":"CabbageTime"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"CabbageTime"},"content":"                default:"},{"lineNumber":98,"author":{"gitId":"CabbageTime"},"content":"                    break;"},{"lineNumber":99,"author":{"gitId":"CabbageTime"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"CabbageTime"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"An error occurred when accessing the save file.\");"},{"lineNumber":103,"author":{"gitId":"CabbageTime"},"content":"            e.printStackTrace();"},{"lineNumber":104,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":107,"author":{"gitId":"CabbageTime"},"content":"    public static void writeFile(List\u003cTask\u003e tasks) {"},{"lineNumber":108,"author":{"gitId":"CabbageTime"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"CabbageTime"},"content":"            FileWriter fw \u003d new FileWriter(\"data/tasks.txt\");"},{"lineNumber":110,"author":{"gitId":"CabbageTime"},"content":"            for (Task task : tasks) {"},{"lineNumber":111,"author":{"gitId":"CabbageTime"},"content":"                fw.write(task.isDone() + \" \" + task.getType() + \" \" + task.getTaskName() + \" | \" + task.getTime() + System.lineSeparator());"},{"lineNumber":112,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"CabbageTime"},"content":"            fw.close();"},{"lineNumber":114,"author":{"gitId":"CabbageTime"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"An error occurred when writing to the save file.\");"},{"lineNumber":116,"author":{"gitId":"CabbageTime"},"content":"            e.printStackTrace();"},{"lineNumber":117,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":120,"author":{"gitId":"CabbageTime"},"content":"    private static void addMessage(Task task, int size) {"},{"lineNumber":121,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");"},{"lineNumber":122,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     \" + task.getDescription());"},{"lineNumber":123,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Now you have \" + size + \" tasks in this list.\");"},{"lineNumber":124,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":126,"author":{"gitId":"CabbageTime"},"content":"    public static void takeCommand(String command, List\u003cTask\u003e tasks) throws UnknownCommand, EmptyDescription, OutOfBound {"},{"lineNumber":127,"author":{"gitId":"CabbageTime"},"content":"        String[] subStrings \u003d command.split(\" \");"},{"lineNumber":128,"author":{"gitId":"CabbageTime"},"content":"        int slashIndex \u003d subStrings.length;"},{"lineNumber":129,"author":{"gitId":"CabbageTime"},"content":"        for (int i \u003d 0; i \u003c subStrings.length; ++i) {"},{"lineNumber":130,"author":{"gitId":"CabbageTime"},"content":"            if (subStrings[i].equals(\"/\") || subStrings[i].equals(\"/by\") || subStrings[i].equals(\"/at\")) {"},{"lineNumber":131,"author":{"gitId":"CabbageTime"},"content":"                slashIndex \u003d i;"},{"lineNumber":132,"author":{"gitId":"CabbageTime"},"content":"                break;"},{"lineNumber":133,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"CabbageTime"},"content":"        String description \u003d setDescription(subStrings, 1, slashIndex);"},{"lineNumber":136,"author":{"gitId":"CabbageTime"},"content":"        String time \u003d setTime(subStrings, slashIndex);"},{"lineNumber":137,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":138,"author":{"gitId":"CabbageTime"},"content":"        switch (subStrings[0]) {"},{"lineNumber":139,"author":{"gitId":"CabbageTime"},"content":"        case \"list\":"},{"lineNumber":140,"author":{"gitId":"CabbageTime"},"content":"            printTasks(tasks);"},{"lineNumber":141,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"CabbageTime"},"content":"        case \"bye\":"},{"lineNumber":143,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"     Bye. Hope to see you again soon!\");"},{"lineNumber":144,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"CabbageTime"},"content":"        case \"done\":"},{"lineNumber":146,"author":{"gitId":"CabbageTime"},"content":"            if (subStrings.length \u003d\u003d 2) {"},{"lineNumber":147,"author":{"gitId":"CabbageTime"},"content":"                int taskNo \u003d Integer.parseInt(subStrings[1]);"},{"lineNumber":148,"author":{"gitId":"CabbageTime"},"content":"                if (taskNo \u003e tasks.size()) {"},{"lineNumber":149,"author":{"gitId":"CabbageTime"},"content":"                    throw new OutOfBound();"},{"lineNumber":150,"author":{"gitId":"CabbageTime"},"content":"                } else {"},{"lineNumber":151,"author":{"gitId":"CabbageTime"},"content":"                    Task taskDone \u003d tasks.get(taskNo - 1);"},{"lineNumber":152,"author":{"gitId":"CabbageTime"},"content":"                    taskDone.markAsDone();"},{"lineNumber":153,"author":{"gitId":"CabbageTime"},"content":"                    System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":154,"author":{"gitId":"CabbageTime"},"content":"                    System.out.println(\"      \" + taskDone.getDescription());"},{"lineNumber":155,"author":{"gitId":"CabbageTime"},"content":"                    tasks.set(taskNo - 1, taskDone);"},{"lineNumber":156,"author":{"gitId":"CabbageTime"},"content":"                }"},{"lineNumber":157,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":158,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"done\");"},{"lineNumber":159,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":161,"author":{"gitId":"CabbageTime"},"content":"        case \"todo\":"},{"lineNumber":162,"author":{"gitId":"CabbageTime"},"content":"            if (subStrings.length \u003e 1) {"},{"lineNumber":163,"author":{"gitId":"CabbageTime"},"content":"                Todo todo \u003d new Todo(description);"},{"lineNumber":164,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(todo);"},{"lineNumber":165,"author":{"gitId":"CabbageTime"},"content":"                addMessage(todo, tasks.size());"},{"lineNumber":166,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":167,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"todo\");"},{"lineNumber":168,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":170,"author":{"gitId":"CabbageTime"},"content":"        case \"deadline\":"},{"lineNumber":171,"author":{"gitId":"CabbageTime"},"content":"            if (!time.equals(\"\") \u0026\u0026 !description.equals(\"\")) {"},{"lineNumber":172,"author":{"gitId":"CabbageTime"},"content":"                Deadline deadline \u003d new Deadline(description, time);"},{"lineNumber":173,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(deadline);"},{"lineNumber":174,"author":{"gitId":"CabbageTime"},"content":"                addMessage(deadline, tasks.size());"},{"lineNumber":175,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":176,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"deadline\");"},{"lineNumber":177,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":179,"author":{"gitId":"CabbageTime"},"content":"        case \"event\":"},{"lineNumber":180,"author":{"gitId":"CabbageTime"},"content":"            if (!time.equals(\"\") \u0026\u0026 !description.equals(\"\")) {"},{"lineNumber":181,"author":{"gitId":"CabbageTime"},"content":"                Event event \u003d new Event(description, time);"},{"lineNumber":182,"author":{"gitId":"CabbageTime"},"content":"                tasks.add(event);"},{"lineNumber":183,"author":{"gitId":"CabbageTime"},"content":"                addMessage(event, tasks.size());"},{"lineNumber":184,"author":{"gitId":"CabbageTime"},"content":"            } else {"},{"lineNumber":185,"author":{"gitId":"CabbageTime"},"content":"                throw new EmptyDescription(\"event\");"},{"lineNumber":186,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":188,"author":{"gitId":"CabbageTime"},"content":"        case \"delete\":"},{"lineNumber":189,"author":{"gitId":"CabbageTime"},"content":"            if(subStrings.length \u003e 1){"},{"lineNumber":190,"author":{"gitId":"CabbageTime"},"content":"                int taskNo \u003d Integer.parseInt(subStrings[1]);"},{"lineNumber":191,"author":{"gitId":"CabbageTime"},"content":"                Task taskDelete \u003d tasks.get(taskNo-1);"},{"lineNumber":192,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Noted. I\u0027ve removed this task:\");"},{"lineNumber":193,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"       \" + taskDelete.getDescription());"},{"lineNumber":194,"author":{"gitId":"CabbageTime"},"content":"                tasks.remove(taskNo-1);"},{"lineNumber":195,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Now you have \" + tasks.size() + \" tasks in this list.\");"},{"lineNumber":196,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"CabbageTime"},"content":"            break;"},{"lineNumber":198,"author":{"gitId":"CabbageTime"},"content":"        default:"},{"lineNumber":199,"author":{"gitId":"CabbageTime"},"content":"            throw new UnknownCommand();"},{"lineNumber":200,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":203,"author":{"gitId":"CabbageTime"},"content":"    public static void printTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":204,"author":{"gitId":"CabbageTime"},"content":"        int i \u003d 1;"},{"lineNumber":205,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"     Here are the tasks in your list:\");"},{"lineNumber":206,"author":{"gitId":"CabbageTime"},"content":"        for (Task task : tasks) {"},{"lineNumber":207,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(\"     \" + i + \".\" + task.getDescription());"},{"lineNumber":208,"author":{"gitId":"CabbageTime"},"content":"            ++i;"},{"lineNumber":209,"author":{"gitId":"CabbageTime"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":211}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"import Class.Task;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"import Command.Command;"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.EmptyDescription;"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.OutOfBound;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"import ErrorHandling.UnknownCommand;"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"CabbageTime"},"content":"    private static String lineDivider \u003d \"    --------------------------------------------------------------------------\";"},{"lineNumber":14,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":15,"author":{"gitId":"CabbageTime"},"content":"    public static void main(String[] args) throws UnknownCommand, EmptyDescription, IOException {"},{"lineNumber":16,"author":{"gitId":"CabbageTime"},"content":"        Scanner in \u003d new Scanner(System.in).useDelimiter(\" \");"},{"lineNumber":17,"author":{"gitId":"CabbageTime"},"content":"        String command \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"CabbageTime"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"CabbageTime"},"content":"        Command Command \u003d new Command();"},{"lineNumber":20,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":21,"author":{"gitId":"CabbageTime"},"content":"        Command.readFile(tasks);"},{"lineNumber":22,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":23,"author":{"gitId":"CabbageTime"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"},{"lineNumber":24,"author":{"gitId":"CabbageTime"},"content":"        do {"},{"lineNumber":25,"author":{"gitId":"CabbageTime"},"content":"            command \u003d in.nextLine();"},{"lineNumber":26,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(lineDivider);"},{"lineNumber":27,"author":{"gitId":"CabbageTime"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"CabbageTime"},"content":"                Command.takeCommand(command, tasks);"},{"lineNumber":29,"author":{"gitId":"CabbageTime"},"content":"            } catch (UnknownCommand e) {"},{"lineNumber":30,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Oops!!! I\u0027m sorry, but I have no idea what that means \u003d(\");"},{"lineNumber":31,"author":{"gitId":"CabbageTime"},"content":"            } catch (EmptyDescription e) {"},{"lineNumber":32,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Oops!!! The description of \" + e.TaskName() + \" cannot be empty.\");"},{"lineNumber":33,"author":{"gitId":"CabbageTime"},"content":"            } catch (OutOfBound e) {"},{"lineNumber":34,"author":{"gitId":"CabbageTime"},"content":"                System.out.println(\"     Oops!!! I think you are trying to access things that aren\u0027t even there yet!\");"},{"lineNumber":35,"author":{"gitId":"CabbageTime"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"CabbageTime"},"content":"            System.out.println(lineDivider);"},{"lineNumber":37,"author":{"gitId":"CabbageTime"},"content":"        } while (!command.equals(\"bye\"));"},{"lineNumber":38,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":39,"author":{"gitId":"CabbageTime"},"content":"        Command.writeFile(tasks);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CabbageTime":38,"-":3}},{"path":"src/main/java/ErrorHandling/EmptyDescription.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package ErrorHandling;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class EmptyDescription extends Exception{"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    String task;"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"    public EmptyDescription(String task){"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"        this.task \u003d task;"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"    public String TaskName(){"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"        return task;"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":12}},{"path":"src/main/java/ErrorHandling/OutOfBound.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package ErrorHandling;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class OutOfBound extends Exception {"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    // No code for now"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":5}},{"path":"src/main/java/ErrorHandling/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"package ErrorHandling;"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":""},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"public class UnknownCommand extends Exception{"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"    public UnknownCommand(){"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"        // No code for now"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"}"}],"authorContributionMap":{"CabbageTime":7}},{"path":"src/main/java/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"1 todo read book | "},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"0 deadline return book | Aug 6th 2-4pm"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"0 event project meeting | Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"1 todo join sports club | "}],"authorContributionMap":{"CabbageTime":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CabbageTime"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"CabbageTime"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"CabbageTime"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"CabbageTime"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"CabbageTime"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"CabbageTime"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"CabbageTime"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"CabbageTime"},"content":"list"},{"lineNumber":9,"author":{"gitId":"CabbageTime"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"CabbageTime"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"CabbageTime"},"content":"deadline do homework /by no idea :-p"}],"authorContributionMap":{"CabbageTime":11}}]
