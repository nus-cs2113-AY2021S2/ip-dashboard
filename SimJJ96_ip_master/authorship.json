[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"TaskTracker is a **desktop app for tracking daily task, optimized for use "},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"via a Command Line Interface (CLI)**. If you can type fast, TaskTracker "},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"can get your task schedule faster than other task tracking application. "},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"* Adding a task: `todo`, `deadline`, `event`"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"* Listing all the task: `list`"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"* Mark a task as done: `done`"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"* Locating the tasks by a keyword: `find`"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"* Deleting a task: `delete`"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"* Exiting the application: `bye`"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"* Loading the data"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"* Saving the data"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"## Adding a task: `todo, deadline, event`"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"Adds a task based on the type of task into the task list and return "},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"the type of task follow by the number of tasks in the list."},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"Format`todo` : `todo /description`\\"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"Format`deadline` : `deadline /description /by date`\\"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"Format`event` : `event /description /at date` "},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"#### `todo`, `deadline`, `event` - add the specific task into the task list"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"1. `todo borrow book`"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"2. `deadline return book /by June 6th`"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"3. `event attend party /at Friday 4 to 6 pm`"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"1. `Got it. I\u0027ve added this task:`\\"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"   `[T][ ] borrow book`\\"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"   `Now you have 1 tasks in the list.`"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"2. `Got it. I\u0027ve added this task:`\\"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"   `[D][ ] return book (by: June 6th)`\\"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"   `Now you have 2 tasks in the list.`"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"3. `Got it. I\u0027ve added this task:`\\"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"   `[E][ ] attend party (at: Friday 4 to 6 pm)`\\"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"   `Now you have 3 tasks in the list.`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"## Listing all the task: `list`"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"Return the list of task with their task type in the list.."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"Format: `list`"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"#### `list` - Shows the task in the list"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"* `list`"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"* `Here are the task in your list:`\\"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"  `1.[T][ ] borrow book`\\"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"  `2.[D][ ] return book (by: June 6th)`\\"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"  `3.[E][ ] attend party (at: Friday 4 to 6 pm)`"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"## Mark as done: `done`"},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"Mark a specific task in the list as done and return a cross on the task."},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"Format: `done /number`"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"#### `done` - Mark the task in the list as done"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"* `done 1`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"* `Nice! I\u0027ve marked this as done:`\\"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":"  `1.[T][X] borrow book`"},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"## Locating the tasks by a keyword: `find`"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"Find the list of item that contain the key word and return the item that contain it."},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"Format: `find /keyword`"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"#### `find` - find the keyword entered by using in the task list"},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"* `find book`"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"* `Here are the matching tasks in your list:`\\"},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"  `1.[T][X] borrow book`\\"},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"  `2.[D][ ] return book (by: June 6th)`"},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"## Deleting a task: `delete`"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"Delete a specific item in the list and return the number of item left in the list."},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"Format: `delete /number`"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"#### `delete` - Delete a specific task in the list"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":116,"author":{"gitId":"SimJJ96"},"content":"* `delete 2`"},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":119,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":"* `Noted! I\u0027ve removed this task:`\\"},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":"  `[D][ ] return book (by: June 6th)`\\"},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"  `Now you have 1 tasks in the list`"},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"## Exiting the application: `bye`- Close the application"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"Exits the program."},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"Format: `bye`"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":"#### `bye` - Exits the program"},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":"* `bye`"},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"* `Exiting task tracker...`\\"},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"  `Good Bye. Hope to see you again soon!`"},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"## Loading the data"},{"lineNumber":142,"author":{"gitId":"SimJJ96"},"content":"Task tracker automatically load data from the hard disk."},{"lineNumber":143,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":144,"author":{"gitId":"SimJJ96"},"content":"If the file path does not exist, task tracker automatically create a directory"},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":"from the user directory."},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"## Saving the data"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":"Task tracker automatically save data to the hard disk after "},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":"any command that changes the data. There is no need to save manually."}],"authorContributionMap":{"-":17,"SimJJ96":132}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.InvalidFileFormatException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.Parser;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.Storage;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.TaskList;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.Ui;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":" * \u003ch1\u003eDuke\u003c/h1\u003e"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":" * The Duke program implements an application that"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":" * interact with users to keep track of their daily"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":" * task."},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":" *"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":" * @author Sim Jing Jie"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":" * @version 0.2"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    private final Ui ui;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    private TaskList tasks;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    private Storage storage;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"     * Create the required objects and load previous saved data"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"     * from specify file path."},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"     * @param filePath the file path specify by the user"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    public Duke(String filePath) {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        ui \u003d new Ui();"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"            ui.showLoadSuccess();"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"        } catch (FileNotFoundException fileNotFoundException) {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"            ui.showLoadError();"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"                storage.createDirectory();"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"                ui.showCreateDirectorySuccess();"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"            } catch (IOException ioException) {"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"                ui.showFailToCreateDirectory();"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"        } catch (InvalidFileFormatException invalidFileFormatException) {"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"            ui.showExceptionMessage(invalidFileFormatException);"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"     }"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    public static void main(String[] args) {"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        new Duke(\"src/data/tasks.txt\").run();"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"     * Reads user command and execute it until user initiate an exit command."},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"    public void run() {"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"        boolean isExit \u003d false;"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        while (!isExit) {"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"                String userInput \u003d ui.getUserInput();"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"                Command command \u003d new Parser().parseInput(userInput, tasks);"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"                command.setTasks(tasks);"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"                CommandResult result \u003d command.execute();"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"                ui.showMessage(result.messageToUser);"},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"                storage.save(tasks);"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"            } catch (Exception exception) {"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"                ui.showExceptionMessage(exception);"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"        ui.showExitMessage();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"SimJJ96":77}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.Parser;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.TaskList;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":" * Add a task to TaskList."},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    private static final String EMPTY_DESCRIPTION \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     * Construct AddCommand after parsed input."},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"     * @param commandWord the command to identify the type of task."},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description to be added to the TaskList."},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks the TaskList for data to be stored into."},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyDescriptionException if description entered by user are empty."},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    public AddCommand(String commandWord, String description, TaskList tasks) throws EmptyDescriptionException {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        if (description.equals(EMPTY_DESCRIPTION)) {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        setTasks(tasks);"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        switch (commandWord) {"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"        case TODO_COMMAND:"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"            ToDo todo \u003d new ToDo(description);"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"            addTodo(todo);"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(addMessage(todo));"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"                Deadline deadline \u003d new Parser().parseDeadline(description);"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"                addDeadline(deadline);"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"                return new CommandResult(addMessage(deadline));"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"            } catch (Exception exception) {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, exception).execute();"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        case EVENT_COMMAND:"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"                Event event \u003d new Parser().parseEvent(description);"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"                addEvent(event);"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"                return new CommandResult(addMessage(event));"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"            } catch (InvalidInputException | EmptyDescriptionException invalidInputException) {"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, invalidInputException).execute();"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"             }"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        return null;"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"    private void addTodo(ToDo todo) {"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(todo);"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"    private void addDeadline(Deadline deadline) {"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(deadline);"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"    private void addEvent(Event event) {"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(event);"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"    private String addMessage (Task task) {"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"        String addMessage \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + task + \"\\n\""},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have \" + tasks.size() + \" tasks in the list.\\n\";"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"        return addMessage;"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":88}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.utilities.TaskList;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":" * Represents a command."},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    protected TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    protected boolean isExit;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    protected String commandWord;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    protected String description;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    //@@author SimJJ96-reused"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /* https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            addressbook/commands/Command.java*/"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command in the child class and return the result."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of user command."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"     * Supply the data that the command will operate on."},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks the TaskList to operate on."},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    public void setTasks(TaskList tasks) {"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"     * Check if the user command entered is to exit the application."},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"     * @return true if exit command is entered."},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    public boolean isExit () {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        return isExit;"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"-":10,"SimJJ96":33}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent the results of the command executed."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class CommandResult {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    public String messageToUser;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult(String messageToUser) {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.messageToUser \u003d messageToUser;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":13}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to delete the Task in TaskList."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    private final int indexFromList;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    private static final int LIST_INITIAL_INDEX \u003d 1;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"     * Construct DeleteCommand instance."},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     * @param taskNumber the position of Task to be deleted in TaskList."},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        this.indexFromList \u003d taskNumber - LIST_INITIAL_INDEX;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d DELETE_COMMAND;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d Integer.toString(taskNumber);"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"            CommandResult commandResult \u003d new CommandResult(deleteMessage());"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"            tasks.deleteTask(indexFromList);"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"            return commandResult;"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException).execute();"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    private String deleteMessage() {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        int listSizeAfterDelete \u003d tasks.size() - 1;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        String deleteMessage \u003d \"Noted! I\u0027ve removed this task:\\n\""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + tasks.get(indexFromList) + \"\\n\""},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have \" + listSizeAfterDelete"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"                + \" tasks in the list\\n\";"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        return deleteMessage;"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":43}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to mark the Task in TaskList as done."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    private final int indexFromList;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    private static final int LIST_INITIAL_INDEX \u003d 1;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public static final String DONE_COMMAND \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"     * Construct DoneCommand instance."},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     * @param taskNumber the position of Task to be mark as done in TaskList."},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        this.indexFromList \u003d taskNumber - LIST_INITIAL_INDEX;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d DONE_COMMAND;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d Integer.toString(taskNumber);"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"            tasks.get(indexFromList).setAsDone();"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(doneMessage());"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException).execute();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private String doneMessage () {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        String doneMessage \u003d \"Nice! I\u0027ve marked this as done: \\n\""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + tasks.get(indexFromList).toString() + \"\\n\";"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        return doneMessage;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":39}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to exit the application."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    public static final String EXIT_COMMAND \u003d \"bye\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        setExitCommand();"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(exitMessage());"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    protected void setExitCommand () {"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        this.isExit \u003d true;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    protected String exitMessage () {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        String message \u003d \"Exiting task tracker...\\n\";"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":23}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.UnmatchedListException;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to find the items in the TaskList"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" * with the user input word."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"public class FindCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    public static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private static final int COUNTER_START_VALUE \u003d 1;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    private boolean isMatch;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"     * Construct FindCommand instance."},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"     * @param description the keyword to search in TaskList"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyDescriptionException if description entered by user are empty."},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    public FindCommand (String description) throws EmptyDescriptionException {"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        this.isMatch \u003d false;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        if (description.equals(EMPTY_STRING)) {"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(findMessage());"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        } catch (UnmatchedListException unmatchedListException) {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, unmatchedListException).execute();"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    private boolean isFound(int taskIndex, String description) {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        Task task \u003d tasks.get(taskIndex);"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        String taskDescription \u003d task.getDescription();"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        return taskDescription.contains(description);"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    private void setIsMatch () {"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"        isMatch \u003d true;"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"    private boolean getIsMatch() {"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        return isMatch;"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"    private String findMessage() throws UnmatchedListException {"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder find \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        int count \u003d COUNTER_START_VALUE;"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"            if (isFound(i, description)) {"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"                find.append(count).append(\".\").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"                ++count;"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"                setIsMatch();"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        if (getIsMatch() \u003d\u003d false) {"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"            throw new UnmatchedListException();"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"        return find.toString();"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"}"},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":""}],"authorContributionMap":{"SimJJ96":72}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.UnmatchedListException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" * Represent a invalid command entered the user."},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    private String commandWord;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    private String description;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    private Exception error;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     * Construct InvalidCommand using the commandWord, description and the exception occur."},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"     * @param commandWord the command that error occur."},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description that error occur."},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"     * @param exception the error type that has occurred."},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    public InvalidCommand(String commandWord, String description, Exception exception) {"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        this.error \u003d exception;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(invalidCommandMessage());"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private String invalidCommandMessage() {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        String message;"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        if (error instanceof NumberFormatException) {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" can only be numeric.\\n\";"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof IndexOutOfBoundsException) {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The number \" + description + \" is not in the list.\\n\";"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof InvalidInputException) {"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" must comes with a date.\\n\";"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof EmptyDescriptionException) {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" cannot be empty.\\n\";"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof UnmatchedListException) {"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! There is no matching task in the list.\\n\";"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! Sorry I don\u0027t understand what you mean.\\n\";"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":50}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to list the items in TaskList."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ListCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    public static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(ListMessage());"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private String ListMessage() {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder listMessage \u003d new StringBuilder(\"Here are the task in your list:\\n\");"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"            int indexShownToUser \u003d i+1;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"            listMessage.append(indexShownToUser).append(\".\").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        return listMessage.toString();"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":22}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signals an error caused by the description entered by the user is empty."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":7}},{"path":"src/main/java/duke/exception/InvalidFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signals an error occur when the user saved tasks file is in the wrong format."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class InvalidFileFormatException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    private static final String errorMessage \u003d \"Invalid File Format.\\n\" +"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"            \"Abort loading file.\\n\";"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        return errorMessage;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":15}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signals an error occur when user entered an empty string."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    public String errorMessage \u003d \"☹ OOPS!!! Sorry I don\u0027t understand what you mean.\\n\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        return errorMessage;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":14}},{"path":"src/main/java/duke/exception/UnmatchedListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Signals an error occur when system is unable to find a matching task in the task list."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class UnmatchedListException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":7}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a deadline that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected String date;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public Deadline (String description, String date) {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.date \u003d date;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[D]\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public String getDate () {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        return date;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        return super.toString() + \" (by: \" + date + \")\";"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":25}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent an event that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Event extends Task{"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected String date;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public Event (String description, String date) {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.date \u003d date;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[E]\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public String getDate () {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        return date;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        return super.toString() + \" (at: \" + date + \")\";"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":24}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    protected String taskType;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    protected static int TRUE \u003d 1;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    protected static int FALSE \u003d 0;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[]\";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    protected String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        return (isDone ? \"X\" : \" \"); //return space or tick symbols"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"     * Mark the task as completed."},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    public void setAsDone() {"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"        isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"     * Returns the description of the task."},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"     * @return a description of the task"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    public String getDescription() {"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        return description;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        return taskType + \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"     * Return the specific type of the task."},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     * @return the type of the task"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    public String getTaskType() {"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        return taskType;"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"    public String getDate() {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        return null;"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"     * Check if a task has been done."},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"     * @return true if the task has been done"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"    public int getIsDone() {"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        return isDone ? TRUE : FALSE ;"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":65}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a todo that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[T]\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":13}},{"path":"src/main/java/duke/utilities/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.utilities;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.TODO_COMMAND;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.DEADLINE_COMMAND;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.EVENT_COMMAND;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.DeleteCommand.DELETE_COMMAND;"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.DoneCommand.DONE_COMMAND;"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.ExitCommand.EXIT_COMMAND;"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.FindCommand.FIND_COMMAND;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.ListCommand.LIST_COMMAND;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":" * Parses user input."},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"public class Parser {"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    private static final int FIRST_WORD \u003d 0;"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    private static final int SECOND_WORD \u003d 1;"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private static final int SPLIT_SIZE \u003d 2;"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    public static final int EMPTY_WORD_SIZE \u003d 0;"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    public static final int ONE_WORD_SIZE \u003d 1;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //@@author SimJJ96-reused"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /*Reused from https://github.com/se-edu/addressbook-level2/blob/master/src/"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            seedu/addressbook/parser/Parser.java with minor modification*/"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses user input into command and description for execution."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param userInput user input string."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param tasks a list of task store together."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @return the command based on the user input."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws InvalidInputException if the user input an empty string."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Command parseInput(String userInput, TaskList tasks) throws InvalidInputException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String[] words \u003d userInput.trim().split(\"\\\\s+\", SPLIT_SIZE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String commandWord \u003d words[FIRST_WORD].toLowerCase();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String description \u003d userInput.replaceFirst(commandWord, EMPTY_STRING).trim();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if(words.length \u003d\u003d EMPTY_WORD_SIZE) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new InvalidInputException();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case TODO_COMMAND:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            //Fallthrough"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            //Fallthrough"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case EVENT_COMMAND:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                return new AddCommand(commandWord, description, tasks);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            } catch (EmptyDescriptionException emptyDescriptionException) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                return new InvalidCommand(commandWord, description, emptyDescriptionException);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case DONE_COMMAND:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            //Fallthrough"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case DELETE_COMMAND:"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return prepareDoneAndDeleteCommand(commandWord, description);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case FIND_COMMAND:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                return new FindCommand(description);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            } catch (EmptyDescriptionException emptyDescriptionException) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                return new InvalidCommand(commandWord, description, emptyDescriptionException);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        case LIST_COMMAND:"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            if (words.length \u003e ONE_WORD_SIZE) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                throw new InvalidInputException();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case EXIT_COMMAND:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (words.length \u003e ONE_WORD_SIZE) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                throw new InvalidInputException();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new InvalidInputException();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Parses the description from string to integer for done and delete command."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param commandWord the command based on the user input."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @param description the description of string based on user input."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @return the prepared command."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws NumberFormatException if the description is not an integer."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws IndexOutOfBoundsException if the number given by user is not found in the array list."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Command prepareDoneAndDeleteCommand(String commandWord, String description) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            int task_number \u003d Integer.parseInt(description);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            switch (commandWord) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            case DONE_COMMAND:"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                return new DoneCommand(task_number);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            case DELETE_COMMAND:"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                return new DeleteCommand(task_number);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return new InvalidCommand(commandWord, description, numberFormatException);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":"     * Parse the description string into description of task and date for deadline subclass."},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description of string based on user input."},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"     * @return the task in deadline format."},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":"     * @throws InvalidInputException if the description does not contain the required regex."},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyDescriptionException if the description is an empty string."},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":"    public Deadline parseDeadline(String description) throws InvalidInputException, EmptyDescriptionException {"},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":"        String[] words \u003d description.trim().split(\"/by\", SPLIT_SIZE);"},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":"        String extractedDescription \u003d words[FIRST_WORD].trim();"},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"        if (extractedDescription.equals(EMPTY_STRING)) {"},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"        if (words.length \u003d\u003d ONE_WORD_SIZE) {"},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidInputException();"},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"SimJJ96"},"content":"        String date \u003d words[SECOND_WORD].trim();"},{"lineNumber":143,"author":{"gitId":"SimJJ96"},"content":"        if (date.equals(EMPTY_STRING)) {"},{"lineNumber":144,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidInputException();"},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"        return new Deadline(extractedDescription,date);"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":150,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"SimJJ96"},"content":"     * Parse the description string into description of task and date for event subclass."},{"lineNumber":152,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description of string based on user input."},{"lineNumber":154,"author":{"gitId":"SimJJ96"},"content":"     * @return the task in event format."},{"lineNumber":155,"author":{"gitId":"SimJJ96"},"content":"     * @throws InvalidInputException if the description does not contain the required regex."},{"lineNumber":156,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyDescriptionException if the description is an empty string."},{"lineNumber":157,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"SimJJ96"},"content":"    public Event parseEvent(String description) throws InvalidInputException, EmptyDescriptionException {"},{"lineNumber":159,"author":{"gitId":"SimJJ96"},"content":"        String[] words \u003d description.trim().split(\"/at\", SPLIT_SIZE);"},{"lineNumber":160,"author":{"gitId":"SimJJ96"},"content":"        String extractedDescription \u003d words[FIRST_WORD].trim();"},{"lineNumber":161,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":162,"author":{"gitId":"SimJJ96"},"content":"        if (extractedDescription.equals(EMPTY_STRING)) {"},{"lineNumber":163,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":164,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":166,"author":{"gitId":"SimJJ96"},"content":"        if (words.length \u003d\u003d ONE_WORD_SIZE) {"},{"lineNumber":167,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidInputException();"},{"lineNumber":168,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"SimJJ96"},"content":"        String date \u003d words[SECOND_WORD].trim();"},{"lineNumber":170,"author":{"gitId":"SimJJ96"},"content":"        if (date.equals(EMPTY_STRING)) {"},{"lineNumber":171,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidInputException();"},{"lineNumber":172,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":174,"author":{"gitId":"SimJJ96"},"content":"        return new Event(extractedDescription,date);"},{"lineNumber":175,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"-":84,"SimJJ96":92}},{"path":"src/main/java/duke/utilities/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.utilities;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.InvalidFileFormatException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"import java.nio.file.Files;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":" * Represents a data handler to save and load a list of task in a specific format."},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    private final Path filePath;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    private static final int DONE_INDEX \u003d 1;"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    private static final int DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    private static final int DATE_INDEX \u003d 3;"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"    public static final int TODO_FORMAT \u003d 3;"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    public static final int EVENT_DEADLINE_FORMAT \u003d 4;"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private static final String IS_DONE \u003d \"1\";"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private static final String EVENT_TYPE \u003d \"[E]\";"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    private static final String DEADLINE_TYPE \u003d \"[D]\";"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    private static final String TODO_TYPE \u003d \"[T]\";"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    private static final String separator \u003d \" | \";"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"     * Construct Storage using a file path."},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"     * @param path the default path to store task."},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    public Storage (String path) {"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        this.filePath \u003d new File(path).toPath();"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"     * Load the saved data from a specific file location into TaskList."},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"     * @return a list of task."},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"     * @throws FileNotFoundException if data is not found in the file path."},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, InvalidFileFormatException {"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"        ArrayList\u003cTask\u003e tasksData \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        readFileContents(tasksData);"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"        return tasksData;"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"     * Save the TaskList into a local file."},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks he supply data to be saved."},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"    public void save(TaskList tasks) throws IOException {"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"        writeToFile(tasks);"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"     * Creates a directory from the specific file directory."},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"     * if the directory already exist, then no action is done."},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"    public void createDirectory() throws IOException {"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"        Path directory \u003d filePath.getParent();"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"        if (directory !\u003d null \u0026\u0026 !Files.isDirectory(directory)) {"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"            Files.createDirectories(directory);"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"        if (!Files.isRegularFile(filePath)) {"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"            Files.createFile(filePath);"},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"    private void readFileContents(ArrayList\u003cTask\u003e tasksData) throws FileNotFoundException,"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":"            InvalidFileFormatException {"},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":"        File file \u003d new File(String.valueOf(filePath));"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"        while(scanner.hasNext()){"},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"            String data \u003d scanner.nextLine();"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"            addFileContents(data, tasksData);"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":"    private void addFileContents(String data, ArrayList\u003cTask\u003e tasksData) throws InvalidFileFormatException {"},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"        String[] contents  \u003d splitContent(data);"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"        if (contents.length \u003c TODO_FORMAT || contents.length \u003e EVENT_DEADLINE_FORMAT) {"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"            throw new InvalidFileFormatException();"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"        String taskType \u003d contents[TASK_TYPE_INDEX].trim();"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":"        String isDone \u003d contents[DONE_INDEX].trim();"},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"        String description \u003d contents[DESCRIPTION_INDEX].trim();"},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"        switch(taskType) {"},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"        case EVENT_TYPE:"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"            if (contents.length !\u003d EVENT_DEADLINE_FORMAT) {"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"                throw  new InvalidFileFormatException();"},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"            String at \u003d contents[DATE_INDEX].trim();"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":"            Task event \u003d new Event(description, at);"},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, event);"},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(event);"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":"        case DEADLINE_TYPE:"},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":"            if (contents.length !\u003d EVENT_DEADLINE_FORMAT) {"},{"lineNumber":116,"author":{"gitId":"SimJJ96"},"content":"                throw  new InvalidFileFormatException();"},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"            String by \u003d contents[DATE_INDEX].trim();"},{"lineNumber":119,"author":{"gitId":"SimJJ96"},"content":"            Task deadline \u003d new Deadline(description, by);"},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, deadline);"},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(deadline);"},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":"        case TODO_TYPE:"},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"            Task todo \u003d new ToDo(description);"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, todo);"},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(todo);"},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"    private String[] splitContent(String content) {"},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"        return content.split(\"\\\\|\");"},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":"    private void checkIsDone(String isDone, Task task) {"},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"        if (isDone.equals(IS_DONE)) {"},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"            task.setAsDone();"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"    private void writeToFile(TaskList tasks) throws IOException {"},{"lineNumber":142,"author":{"gitId":"SimJJ96"},"content":"        FileWriter fileWriter \u003d new FileWriter(String.valueOf(filePath));"},{"lineNumber":143,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":144,"author":{"gitId":"SimJJ96"},"content":"            switch (tasks.get(i).getTaskType()) {"},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":"            case EVENT_TYPE:"},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":"                //Fallthrough"},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"            case DEADLINE_TYPE:"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":"                tasks.get(i).getDate();"},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":"                fileWriter.write(tasks.get(i).getTaskType() + separator"},{"lineNumber":150,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getIsDone() + separator"},{"lineNumber":151,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDescription() + separator"},{"lineNumber":152,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDate()"},{"lineNumber":153,"author":{"gitId":"SimJJ96"},"content":"                        + System.lineSeparator());"},{"lineNumber":154,"author":{"gitId":"SimJJ96"},"content":"                break;"},{"lineNumber":155,"author":{"gitId":"SimJJ96"},"content":"            case TODO_TYPE:"},{"lineNumber":156,"author":{"gitId":"SimJJ96"},"content":"                fileWriter.write(tasks.get(i).getTaskType() + separator"},{"lineNumber":157,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getIsDone() + separator"},{"lineNumber":158,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDescription()"},{"lineNumber":159,"author":{"gitId":"SimJJ96"},"content":"                        + System.lineSeparator());"},{"lineNumber":160,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"SimJJ96"},"content":"        fileWriter.close();"},{"lineNumber":163,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":165,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":165}},{"path":"src/main/java/duke/utilities/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.utilities;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" * Represents a list of tasks."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     * Constructs empty list of task."},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public TaskList () {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     * Constructs a list of task using stored values."},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     * @param tasksData the supply data of a list of task."},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasksData) {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        this.tasks \u003d tasksData;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"     * Add a task into the TaskList."},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"     * @param task the task object entered by the user."},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    public void addTask(Task task) {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        tasks.add(task);"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"     * Delete a task from the TaskList."},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"     * @param indexToDelete the index specified to delete"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"     * @throws IndexOutOfBoundsException if the index is outside of the range of TaskList"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    public void deleteTask(int indexToDelete) throws IndexOutOfBoundsException {"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        tasks.remove(indexToDelete);"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"     * Returns the size of the TaskList."},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"     * @return the size of the TaskList"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"    public int size() {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        return tasks.size();"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"     * Returns the specific Task object from the TaskList."},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"     * @param taskIndex the index of the task from the list"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"     * @return the task object in TaskList of the particular index"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"    public Task get(int taskIndex) {"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":67}},{"path":"src/main/java/duke/utilities/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.utilities;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import java.io.PrintStream;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" * Represent the Text UI of the application."},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    private final Scanner input;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private final PrintStream output;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    private static final String BORDER \u003d \"_________________________________________________________________\\n\";"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    private static final String LINE_PREFIX \u003d \"\\t \";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    private static final String LS \u003d System.lineSeparator();"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    //@@author SimJJ96-reused"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /*Reused from https://github.com/se-edu/addressbook-level2/blob/master/src/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            seedu/addressbook/ui/TextUi.java*/"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Ui() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this(System.in,System.out);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Ui(InputStream input, PrintStream output) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.input \u003d new Scanner(input);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.output \u003d output;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"     * Retrieves the next line of input entered by the user."},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"     * @return string of the next input"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    public String getUserInput() {"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        return input.nextLine();"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"     * Print to user a welcome message."},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX + BORDER"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Welcome to Task Tracker!\\n\""},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"This is your assistant Jack.\\n\""},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"How may I assist you ?\\n\""},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    //@@author SimJJ96-reused"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /*Reused from https://github.com/se-edu/addressbook-level2/blob/master/src/"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            seedu/addressbook/ui/TextUi.java*/"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Format the result of the command and print the message."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param message results of user command."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void showMessage(String... message) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        output.print(LINE_PREFIX + BORDER);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        for (String m : message) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            output.print(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        output.print(BORDER);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"     * Print error loading message to user when the required file does not exist."},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"    public void showLoadError() {"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"System unable to find directory...\" + \"\\n\""},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Load failed.\\n\""},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"     * Print success loading message to user when the required file exist."},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"    public void showLoadSuccess() {"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"System able to find directory...\" + \"\\n\""},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Load successful.\\n\""},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"     * Print the exception message when the program encounter an exception."},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"     * @param exception the exception encountered"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":"    public void showExceptionMessage(Exception exception) {"},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"        if (exception instanceof IOException) {"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"            showSaveFailedMessage();"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"            showMessage(exception.getMessage());"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"     * Print exit message to give acknowledgement to user to end the program."},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"    public void showExitMessage() {"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Good Bye. Hope to see you again soon!\\n\""},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":"     * Print failure message in saving the data into the specified file."},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":"    public void showSaveFailedMessage() {"},{"lineNumber":116,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Save failed. System unable to find directory\\n\""},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":119,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"     * Print success message in creating the directory."},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"    public void showCreateDirectorySuccess() {"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Creating new directory...\\n\""},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Directory created successfully.\\n\""},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"     * Print failure message in creating the directory."},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":"    public void showFailToCreateDirectory() {"},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Unable create directory.. Please try again later. \\n\""},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"-":28,"SimJJ96":112}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":"deadline weekly CS2113 quiz /by Monday 9pm"},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"event CS2113 lecture /at Friday 4 to 6 pm"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"todo read book"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"deadline return book /by June 6th"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"find book"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"done 500"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"done fun"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"find"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"find abcdefg"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"delete fun"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"delete 10"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"list 200"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"event /at asd"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"deadline /by asd"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"delete 3"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"blah blah"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"todo"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"deadline"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"event"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"done"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"delete"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"deadline return book"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"event CS2113 lecture"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"bye"}],"authorContributionMap":{"SimJJ96":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"SimJJ96":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/exception/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"SimJJ96":2}}]
