[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"TaskTracker is a **desktop app for tracking daily task, optimized for use "},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"via a Command Line Interface (CLI)**. If you can type fast, TaskTracker "},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"can get your task schedule faster than other task tracking application. "},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"* Adding a task: `todo`, `deadline`, `event`"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"* Listing all the task: `list`"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"* Mark a task as done: `done`"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"* Locating the tasks by a keyword: `find`"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"* Deleting a task: `delete`"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"* Exiting the application: `bye`"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"* Loading the data"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"* Saving the data"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"## Adding a task: `todo, deadline, event`"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"Adds a task based on the type of task into the task list and return "},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"the type of task follow by the number of tasks in the list."},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"Format`todo` : `todo /description`\\"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"Format`deadline` : `deadline /description /by date`\\"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"Format`event` : `event /description /at date` "},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"#### `todo`, `deadline`, `event` - add the specific task into the task list"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"1. `todo borrow book`"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"2. `deadline return book /by June 6th`"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"3. `event attend party /at Friday 4 to 6 pm`"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"1. "},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"   `Got it. I\u0027ve added this task:`\\"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"   `[T][ ] borrow book`\\"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"   `Now you have 1 tasks in the list.`"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"2."},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    `Got it. I\u0027ve added this task:`\\"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    `[D][ ] return book (by: June 6th)`\\"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    `Now you have 2 tasks in the list.`"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"3."},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"    `Got it. I\u0027ve added this task:`\\"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    `[E][ ] attend party (at: Friday 4 to 6 pm)`\\"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"    `Now you have 3 tasks in the list.`"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"## Listing all the task: `list`"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"Return the list of task with their task type in the list.."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"Format: `list`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"#### `list` - Shows the task in the list"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"* `list`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"*"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"    `Here are the task in your list:`\\"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    `1.[T][ ] borrow book`\\"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"    `2.[D][ ] return book (by: June 6th)`\\"},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"    `3.[E][ ] attend party (at: Friday 4 to 6 pm)`"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"## Mark as done: `done`"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"Mark a specific task in the list as done and return a cross on the task."},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"Format: `done /number`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"#### `done` - Mark the task in the list as done"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"* `done 1`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"*"},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"    `Nice! I\u0027ve marked this as done:`\\"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"    `1.[T][X] borrow book`"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"## Locating the tasks by a keyword: `find`"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"Find the list of item that contain the key word and return the item that contain it."},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"Format: `find /keyword`"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"#### `find` - find the keyword entered by using in the task list"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"* `find task`"},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"*"},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"    `Here are the matching tasks in your list:`\\"},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"    `1.[T][X] borrow book`\\"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":"    `2.[D][ ] return book (by: June 6th)`"},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"## Deleting a task: `delete`"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":"Delete a specific item in the list and return the number of item left in the list."},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":"Format: `delete /number`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"#### `delete` - Delete a specific task in the list"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"* `delete 2`"},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"Expected outcome:"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":"*"},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"    `Noted! I\u0027ve removed this task:`\\"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"    `[D][ ] return book (by: June 6th)`\\"},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"    `Now you have 1 tasks in the list`"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"## Exiting the application: `bye`- Close the application"},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"Exits the program."},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":"Format: `bye`"},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"### Usage"},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"#### `bye` - Exits the program"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"Example of usage:"},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"* `bye`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":"*"},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":"    `Exiting task tracker...`\\"},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"    `Good Bye. Hope to see you again soon!`"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":"    "},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":150,"author":{"gitId":"SimJJ96"},"content":"## Loading the data"},{"lineNumber":151,"author":{"gitId":"SimJJ96"},"content":"Task tracker automatically load data from the hard disk."},{"lineNumber":152,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":153,"author":{"gitId":"SimJJ96"},"content":"If the file path does not exist, task tracker automatically create a directory"},{"lineNumber":154,"author":{"gitId":"SimJJ96"},"content":"from the user directory."},{"lineNumber":155,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":156,"author":{"gitId":"SimJJ96"},"content":"## Saving the data"},{"lineNumber":157,"author":{"gitId":"SimJJ96"},"content":"Task tracker automatically save data to the hard disk after "},{"lineNumber":158,"author":{"gitId":"SimJJ96"},"content":"any command that changes the data. There is no need to save manually."}],"authorContributionMap":{"-":22,"SimJJ96":136}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" * \u003ch1\u003eDuke\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" * The Duke program implements an application that"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":" * interact with users to keep track of their daily"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":" * task."},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":" *"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":" * @author Sim Jing Jie"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":" * @version 0.2"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    private Storage storage;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     * Create the required objects and load previous saved data"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"     * from specify file path."},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"     * @param filePath the file path specify by the user"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    public Duke(String filePath) {"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"            ui.showLoadSuccess();"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        } catch (FileNotFoundException fileNotFoundException) {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"            ui.showLoadError();"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"            storage.createDirectory();"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        new Duke(\"src/data/tasks.txt\").run();"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"     * Reads user command and execute it until user initiate an exit command."},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    public void run() {"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        boolean isExit \u003d false;"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        while (!isExit) {"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"                String userInput \u003d ui.getUserInput();"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"                Command command \u003d new Parser().parseInput(userInput, tasks);"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"                command.setTasks(tasks);"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"                CommandResult result \u003d command.execute();"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"                ui.showMessage(result.messageToUser);"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"            } catch (Exception exception) {"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"                ui.showErrorMessage();"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        ui.showExitMessage();"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"        storage.save(tasks);"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        ui.showSavedMessage();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"SimJJ96":64}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyStringException;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.TODO_COMMAND;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.DEADLINE_COMMAND;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.AddCommand.EVENT_COMMAND;"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.DeleteCommand.DELETE_COMMAND;"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.DoneCommand.DONE_COMMAND;"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.ExitCommand.EXIT_COMMAND;"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.FindCommand.FIND_COMMAND;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"import static duke.command.ListCommand.LIST_COMMAND;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":" * Parses user input."},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"public class Parser {"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    private static final int FIRST_WORD \u003d 0;"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    private static final int SECOND_WORD \u003d 1;"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private static final int SPLIT_SIZE \u003d 2;"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    public static final int EMPTY_WORD_SIZE \u003d 0;"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    public static final int ONE_WORD_SIZE \u003d 1;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"     * Parses user input into command and description for execution."},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"     * @param userInput user input string."},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks a list of task store together."},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"     * @return the command based on the user input."},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyStringException if the user input an empty string."},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    public Command parseInput(String userInput, TaskList tasks) throws EmptyStringException {"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        String[] words \u003d userInput.trim().split(\"\\\\s+\", SPLIT_SIZE);"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        String commandWord \u003d words[FIRST_WORD].toLowerCase();"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"        String description \u003d userInput.replaceFirst(commandWord, EMPTY_STRING).trim();"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        if (words.length \u003d\u003d EMPTY_WORD_SIZE) {"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyStringException();"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"        switch (commandWord) {"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"        case TODO_COMMAND:"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"            //Fallthrough"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"            //Fallthrough"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        case EVENT_COMMAND:"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"                return new AddCommand(commandWord, description, tasks);"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"            } catch (EmptyDescriptionException emptyDescriptionException) {"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, emptyDescriptionException);"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"        case DONE_COMMAND:"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"            //Fallthrough"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"        case DELETE_COMMAND:"},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"            return prepareDoneAndDeleteCommand(commandWord, description);"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"        case FIND_COMMAND:"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"                return new FindCommand(description);"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"            } catch (EmptyDescriptionException emptyDescriptionException) {"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, emptyDescriptionException);"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":"        case LIST_COMMAND:"},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"            return new ListCommand();"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"        case EXIT_COMMAND:"},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"            return new ExitCommand();"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"        default:"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyStringException();"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"     * Parses the description from string to integer for done and delete command."},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"     * @param commandWord the command based on the user input."},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description of string based on user input."},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"     * @return the prepared command."},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"     * @throws NumberFormatException if the description is not an integer."},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":"     * @throws IndexOutOfBoundsException if the number given by user is not found in the array list."},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"    public Command prepareDoneAndDeleteCommand(String commandWord, String description) {"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"            int task_number \u003d Integer.parseInt(description);"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"            switch (commandWord) {"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":"            case DONE_COMMAND:"},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"                return new DoneCommand(task_number);"},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"            case DELETE_COMMAND:"},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"                return new DeleteCommand(task_number);"},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"            default:"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"                return null;"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, numberFormatException);"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException);"},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":116,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":"     * Parse the description string into description of task and date for deadline subclass."},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description of string based on user input."},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":"     * @return the task in deadline format."},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyStringException if the description does not contain the required regex."},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":"    public Deadline parseDeadline(String description) throws EmptyStringException {"},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"        String[] words \u003d description.trim().split(\"/by\", SPLIT_SIZE);"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"        String extractedDescription \u003d words[FIRST_WORD].trim();"},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"        if (words.length \u003d\u003d ONE_WORD_SIZE) {"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyStringException();"},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"        String date \u003d words[SECOND_WORD].trim();"},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"        return new Deadline(extractedDescription,date);"},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"     * Parse the description string into description of task and date for event subclass."},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description of string based on user input."},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"     * @return the task in event format."},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyStringException if the description does not contain the required regex."},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"SimJJ96"},"content":"    public Event parseEvent(String description) throws EmptyStringException {"},{"lineNumber":143,"author":{"gitId":"SimJJ96"},"content":"        String[] words \u003d description.trim().split(\"/at\", SPLIT_SIZE);"},{"lineNumber":144,"author":{"gitId":"SimJJ96"},"content":"        String extractedDescription \u003d words[FIRST_WORD].trim();"},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":"        if (words.length \u003d\u003d ONE_WORD_SIZE) {"},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyStringException();"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":150,"author":{"gitId":"SimJJ96"},"content":"        String date \u003d words[SECOND_WORD].trim();"},{"lineNumber":151,"author":{"gitId":"SimJJ96"},"content":"        return new Event(extractedDescription,date);"},{"lineNumber":152,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":153}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":" * Represents a data handler to save and load a list of task in a specific format."},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    private final String filePath;"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    private static final String USER_DIRECTORY \u003d System.getProperty(\"user.dir\");"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    private static final String FILE_DIRECTORY \u003d USER_DIRECTORY + \"/src/data\";"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    private static final int DONE_INDEX \u003d 1;"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    private static final int DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    private static final int DATE_INDEX \u003d 3;"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    private static final String IS_DONE \u003d \"1\";"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    private static final String EVENT_TYPE \u003d \"[E]\";"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private static final String DEADLINE_TYPE \u003d \"[D]\";"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private static final String TODO_TYPE \u003d \"[T]\";"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"     * Construct Storage using a file path."},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"     * @param filePath the file path specify by the user."},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    public Storage (String filePath) {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"     * Returns a list of task load from a specific file location."},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"     * @return a list of task."},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"     * @throws FileNotFoundException if data is not found in the file path."},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"        ArrayList\u003cTask\u003e tasksData \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"        readFileContents(tasksData);"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"        return tasksData;"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"     * Save the TaskList into a local file."},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks the supply data to be saved."},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"    public void save(TaskList tasks) {"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"            writeToFile(tasks);"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        } catch (IOException ioException) {"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"            System.out.print(\"Something went wrong... System unable to find directory\\n\");"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"     * Creates a directory from the specific file directory."},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"     * if the directory already exist, then no action is done."},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"    public void createDirectory() {"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"        new File(FILE_DIRECTORY).mkdir();"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"    private void readFileContents(ArrayList\u003cTask\u003e tasksData) throws FileNotFoundException {"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"        while(scanner.hasNext()){"},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"            String data \u003d scanner.nextLine();"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"            addFileContents(data, tasksData);"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":"    private void addFileContents(String data, ArrayList\u003cTask\u003e tasksData) {"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"        String[] contents  \u003d splitContent(data);"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"        String taskType \u003d contents[TASK_TYPE_INDEX].trim();"},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"        String isDone \u003d contents[DONE_INDEX].trim();"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"        String description \u003d contents[DESCRIPTION_INDEX].trim();"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"        switch(taskType) {"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"        case EVENT_TYPE:"},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":"            String at \u003d contents[DATE_INDEX].trim();"},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"            Task event \u003d new Event(description, at);"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, event);"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(event);"},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"        case DEADLINE_TYPE:"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":"            String by \u003d contents[DATE_INDEX].trim();"},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"            Task deadline \u003d new Deadline(description, by);"},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, deadline);"},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(deadline);"},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"        case TODO_TYPE:"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"            Task todo \u003d new ToDo(description);"},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"            checkIsDone(isDone, todo);"},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"            tasksData.add(todo);"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":"            break;"},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":114,"author":{"gitId":"SimJJ96"},"content":"    private String[] splitContent(String content) {"},{"lineNumber":115,"author":{"gitId":"SimJJ96"},"content":"        return content.split(\"\\\\|\");"},{"lineNumber":116,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":118,"author":{"gitId":"SimJJ96"},"content":"    private void checkIsDone(String isDone, Task task) {"},{"lineNumber":119,"author":{"gitId":"SimJJ96"},"content":"        if (isDone.equals(IS_DONE)) {"},{"lineNumber":120,"author":{"gitId":"SimJJ96"},"content":"            task.setAsDone();"},{"lineNumber":121,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":124,"author":{"gitId":"SimJJ96"},"content":"    private void writeToFile(TaskList tasks) throws IOException {"},{"lineNumber":125,"author":{"gitId":"SimJJ96"},"content":"        String fileDestination \u003d USER_DIRECTORY + \"\\\\\" + filePath;"},{"lineNumber":126,"author":{"gitId":"SimJJ96"},"content":"        FileWriter fileWriter \u003d new FileWriter(fileDestination);"},{"lineNumber":127,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":128,"author":{"gitId":"SimJJ96"},"content":"            switch (tasks.get(i).getTaskType()) {"},{"lineNumber":129,"author":{"gitId":"SimJJ96"},"content":"            case EVENT_TYPE:"},{"lineNumber":130,"author":{"gitId":"SimJJ96"},"content":"                //Fallthrough"},{"lineNumber":131,"author":{"gitId":"SimJJ96"},"content":"            case DEADLINE_TYPE:"},{"lineNumber":132,"author":{"gitId":"SimJJ96"},"content":"                tasks.get(i).getDate();"},{"lineNumber":133,"author":{"gitId":"SimJJ96"},"content":"                fileWriter.write(tasks.get(i).getTaskType() + \" | \""},{"lineNumber":134,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getIsDone() + \" | \""},{"lineNumber":135,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDescription() + \" | \""},{"lineNumber":136,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDate()"},{"lineNumber":137,"author":{"gitId":"SimJJ96"},"content":"                        + System.lineSeparator());"},{"lineNumber":138,"author":{"gitId":"SimJJ96"},"content":"                break;"},{"lineNumber":139,"author":{"gitId":"SimJJ96"},"content":"            case TODO_TYPE:"},{"lineNumber":140,"author":{"gitId":"SimJJ96"},"content":"                fileWriter.write(tasks.get(i).getTaskType() + \" | \""},{"lineNumber":141,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getIsDone() + \" | \""},{"lineNumber":142,"author":{"gitId":"SimJJ96"},"content":"                        + tasks.get(i).getDescription()"},{"lineNumber":143,"author":{"gitId":"SimJJ96"},"content":"                        + System.lineSeparator());"},{"lineNumber":144,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"SimJJ96"},"content":"        fileWriter.close();"},{"lineNumber":147,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":149,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":149}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" * Represents a list of tasks."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     * Constructs empty list of task."},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public TaskList () {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     * Constructs a list of task using stored values."},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     * @param tasksData the supply data of a list of task."},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasksData) {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        this.tasks \u003d tasksData;"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    public void addTask(Task task) {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        tasks.add(task);"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    public void deleteTask(int indexToDelete) throws IndexOutOfBoundsException {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        tasks.remove(indexToDelete);"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    public int size() {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        return tasks.size();"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    public Task get(int taskIndex) {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":45}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyStringException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import java.io.PrintStream;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":" * Represent the Text UI of the application."},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private final Scanner input;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    private final PrintStream output;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    private static final String BORDER \u003d \"_________________________________________________________________\\n\";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    private static final String LINE_PREFIX \u003d \"\\t \";"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    private static final String LS \u003d System.lineSeparator();"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public Ui() {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        this(System.in,System.out);"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    public Ui(InputStream input, PrintStream output) {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"        this.input \u003d new Scanner(input);"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        this.output \u003d output;"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"     * Reads the lines that user entered."},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"     * @return the line that user entered."},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"    public String getUserInput() {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        return input.nextLine();"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"     * Print welcome message to user when starting the application."},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX + BORDER"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Welcome to Task Tracker!\\n\""},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"This is your assistant Jack.\\n\""},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"How may I assist you ?\\n\""},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"     * Print results of the message to user after entering their input."},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"     * @param message results of user command."},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"    public void showMessage(String... message) {"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        output.print(LINE_PREFIX + BORDER);"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"        for (String m : message) {"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"            output.print(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX));"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"        output.print(BORDER);"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"     * Print load failure message when system unable load the file."},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"    public void showLoadError() {"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"System unable to find directory...\" + \"\\n\""},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Load failed.\\n\""},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Creating new directory...\\n\""},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Directory created successfully.\\n\""},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"     * Print load success message when system able to load the file."},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"    public void showLoadSuccess() {"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"System able to find directory...\" + \"\\n\""},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Load successful.\\n\""},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":"     * Print error message when user entered empty string."},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"    public void showErrorMessage() {"},{"lineNumber":89,"author":{"gitId":"SimJJ96"},"content":"        String errorMessage \u003d \"☹ OOPS!!! Sorry I don\u0027t understand what you mean.\\n\";"},{"lineNumber":90,"author":{"gitId":"SimJJ96"},"content":"        showMessage(errorMessage);"},{"lineNumber":91,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":93,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"SimJJ96"},"content":"     * Print exit message when user entered exit command."},{"lineNumber":95,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"SimJJ96"},"content":"    public void showExitMessage() {"},{"lineNumber":97,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":98,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Good Bye. Hope to see you again soon!\\n\""},{"lineNumber":99,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":100,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":102,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"SimJJ96"},"content":"     * Print save message when system able to save the data successful."},{"lineNumber":104,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"SimJJ96"},"content":"    public void showSavedMessage() {"},{"lineNumber":106,"author":{"gitId":"SimJJ96"},"content":"        System.out.print(LINE_PREFIX +BORDER"},{"lineNumber":107,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + \"Data has been saved.\\n\""},{"lineNumber":108,"author":{"gitId":"SimJJ96"},"content":"                + LINE_PREFIX + BORDER);"},{"lineNumber":109,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":111,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":112,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":112}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyStringException;"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":" * Add a task to TaskList."},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    private static final String EMPTY_DESCRIPTION \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     * Construct AddCommand using input values after being parsed."},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"     * @param commandWord the command to identify the type of task."},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description to be added to the TaskList."},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks the TaskList for data to be stored into."},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"     * @throws EmptyDescriptionException if description entered by user are empty."},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    public AddCommand(String commandWord, String description, TaskList tasks) throws EmptyDescriptionException {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"        if (description.equals(EMPTY_DESCRIPTION)) {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"        setTasks(tasks);"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        switch (commandWord) {"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"        case TODO_COMMAND:"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"            ToDo todo \u003d new ToDo(description);"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"            addTodo(todo);"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(addMessage(todo));"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        case DEADLINE_COMMAND:"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"                Deadline deadline \u003d new Parser().parseDeadline(description);"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"                addDeadline(deadline);"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"                return new CommandResult(addMessage(deadline));"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"            } catch (EmptyStringException emptyStringException) {"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, emptyStringException).execute();"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"        case EVENT_COMMAND:"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":"                Event event \u003d new Parser().parseEvent(description);"},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"                addEvent(event);"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"                return new CommandResult(addMessage(event));"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"            } catch (EmptyStringException emptyStringException) {"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":"                return new InvalidCommand(commandWord, description, emptyStringException).execute();"},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"             }"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"        return null;"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":68,"author":{"gitId":"SimJJ96"},"content":"    private void addTodo(ToDo todo) {"},{"lineNumber":69,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(todo);"},{"lineNumber":70,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":72,"author":{"gitId":"SimJJ96"},"content":"    private void addDeadline(Deadline deadline) {"},{"lineNumber":73,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(deadline);"},{"lineNumber":74,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":76,"author":{"gitId":"SimJJ96"},"content":"    private void addEvent(Event event) {"},{"lineNumber":77,"author":{"gitId":"SimJJ96"},"content":"        tasks.addTask(event);"},{"lineNumber":78,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":80,"author":{"gitId":"SimJJ96"},"content":"    private String addMessage (Task task) {"},{"lineNumber":81,"author":{"gitId":"SimJJ96"},"content":"        String addMessage \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":82,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + task + \"\\n\""},{"lineNumber":83,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have \" + tasks.size() + \" tasks in the list.\\n\";"},{"lineNumber":84,"author":{"gitId":"SimJJ96"},"content":"        return addMessage;"},{"lineNumber":85,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":87,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":88,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":88}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":" * Represents a command."},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    protected TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    protected boolean isExit;"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    protected String commandWord;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    protected String description;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     * Executes the command in the child class and return the result."},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     * @return the result of user command."},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    public abstract CommandResult execute();"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     * Supply the data that the command will operate on."},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"     * @param tasks the TaskList to operate on."},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    public void setTasks(TaskList tasks) {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"     * Check if the user command entered is to exit the application."},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"     * @return true if exit command is entered."},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    public boolean isExit () {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        return isExit;"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":35}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent the results of the command executed."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class CommandResult {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    public String messageToUser;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult(String messageToUser) {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.messageToUser \u003d messageToUser;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":13}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to delete the Task in TaskList."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    private final int indexFromList;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    private static final int LIST_INITIAL_INDEX \u003d 1;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"     * Construct DeleteCommand using task number"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"     * @param taskNumber the position of Task to be deleted in TaskList."},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"        this.indexFromList \u003d taskNumber - LIST_INITIAL_INDEX;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d DELETE_COMMAND;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d Integer.toString(taskNumber);"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"            CommandResult commandResult \u003d new CommandResult(deleteMessage());"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"            tasks.deleteTask(indexFromList);"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"            return commandResult;"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException).execute();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private String deleteMessage() {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        int listSizeAfterDelete \u003d tasks.size() - 1;"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        String deleteMessage \u003d \"Noted! I\u0027ve removed this task:\\n\""},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + tasks.get(indexFromList) + \"\\n\""},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"                + \"Now you have \" + listSizeAfterDelete"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"                + \" tasks in the list\\n\";"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"        return deleteMessage;"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":42}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to mark the Task in TaskList as done."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    private final int indexFromList;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    private static final int LIST_INITIAL_INDEX \u003d 1;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public static final String DONE_COMMAND \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"     * Construct DoneCommand using task number."},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"     * @param taskNumber the position of Task to be mark as done in TaskList."},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"        this.indexFromList \u003d taskNumber - LIST_INITIAL_INDEX;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d DONE_COMMAND;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d Integer.toString(taskNumber);"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"            tasks.get(indexFromList).setAsDone();"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(doneMessage());"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, indexOutOfBoundsException).execute();"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private String doneMessage () {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        String doneMessage \u003d \"Nice! I\u0027ve marked this as done: \\n\""},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"                + \"  \" + tasks.get(indexFromList).toString() + \"\\n\";"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        return doneMessage;"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":38}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to exit the application."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    public static final String EXIT_COMMAND \u003d \"bye\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        setExitCommand();"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(exitMessage());"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    protected void setExitCommand () {"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        this.isExit \u003d true;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"    protected String exitMessage () {"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        String message \u003d \"Exiting task tracker...\\n\";"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":23}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.UnmatchListException;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to find the items in the TaskList"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" * with the user input word."},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"public class FindCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    public static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private static final int COUNTER_START_VALUE \u003d 1;"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    private boolean isMatch;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"    public FindCommand (String description) throws EmptyDescriptionException {"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        this.isMatch \u003d false;"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        if (description.equals(EMPTY_STRING)) {"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"            throw new EmptyDescriptionException();"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"            return new CommandResult(findMessage());"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        } catch (UnmatchListException unmatchListException) {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"            return new InvalidCommand(commandWord, description, unmatchListException).execute();"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    private boolean isFound(int taskIndex, String description) {"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        Task task \u003d tasks.get(taskIndex);"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"        String taskDescription \u003d task.getDescription();"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        return taskDescription.contains(description);"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    private void setIsMatch () {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        isMatch \u003d true;"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    private boolean getIsMatch() {"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        return isMatch;"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"    private String findMessage() throws UnmatchListException {"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder find \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"        int count \u003d COUNTER_START_VALUE;"},{"lineNumber":51,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":52,"author":{"gitId":"SimJJ96"},"content":"            if (isFound(i,description)) {"},{"lineNumber":53,"author":{"gitId":"SimJJ96"},"content":"                find.append(count).append(\".\").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":54,"author":{"gitId":"SimJJ96"},"content":"                ++count;"},{"lineNumber":55,"author":{"gitId":"SimJJ96"},"content":"                setIsMatch();"},{"lineNumber":56,"author":{"gitId":"SimJJ96"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":59,"author":{"gitId":"SimJJ96"},"content":"        if (getIsMatch() \u003d\u003d false) {"},{"lineNumber":60,"author":{"gitId":"SimJJ96"},"content":"            throw new UnmatchListException();"},{"lineNumber":61,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":63,"author":{"gitId":"SimJJ96"},"content":"        return find.toString();"},{"lineNumber":64,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"SimJJ96"},"content":"}"},{"lineNumber":66,"author":{"gitId":"SimJJ96"},"content":""}],"authorContributionMap":{"SimJJ96":66}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.EmptyStringException;"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"import duke.exception.UnmatchListException;"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":" * Represent a invalid command entered the user."},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    private String commandWord;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    private String description;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    private Exception error;"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"     * Construct InvalidCommand using the commandWord, description and the exception occur."},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"     * @param commandWord the command that error occur."},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"     * @param description the description that error occur."},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"     * @param exception the error type that has occurred."},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    public InvalidCommand(String commandWord, String description, Exception exception) {"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        this.error \u003d exception;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(invalidCommandMessage());"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"    private String invalidCommandMessage() {"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"        String message;"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":"        if (error instanceof NumberFormatException) {"},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" can only be numeric.\\n\";"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof IndexOutOfBoundsException) {"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The number \" + description + \" is not in the list.\\n\";"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof EmptyStringException) {"},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" must comes with a date.\\n\";"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof EmptyDescriptionException) {"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! The description of \" + commandWord + \" cannot be empty.\\n\";"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":"        } else if (error instanceof UnmatchListException) {"},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! There is no matching task in the list.\\n\";"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"            message \u003d \"☹ OOPS!!! Sorry I don\u0027t understand what you mean.\\n\";"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"SimJJ96"},"content":"        return message;"},{"lineNumber":49,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":50}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a command to list the items in TaskList."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ListCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    public static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"    public CommandResult execute() {"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        return new CommandResult(ListMessage());"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    private String ListMessage() {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"        StringBuilder listMessage \u003d new StringBuilder(\"Here are the task in your list:\\n\");"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"            int indexShownToUser \u003d i+1;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"            listMessage.append(indexShownToUser).append(\".\").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"        return listMessage.toString();"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":22}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent an error caused by the description entered by the user is empty."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":7}},{"path":"src/main/java/duke/exception/EmptyStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent an error occur when user entered an empty string."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class EmptyStringException extends Exception {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":7}},{"path":"src/main/java/duke/exception/UnmatchListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"public class UnmatchListException extends Exception {"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":4}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a deadline that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected String date;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public Deadline (String description, String date) {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.date \u003d date;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[D]\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public String getDate () {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        return date;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        return super.toString() + \" (by: \" + date + \")\";"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":25}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent an event that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Event extends Task{"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected String date;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    public Event (String description, String date) {"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"        this.date \u003d date;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[E]\";"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"    public String getDate () {"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        return date;"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"        return super.toString() + \" (at: \" + date + \")\";"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":24}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"    protected String taskType;"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    protected static int TRUE \u003d 1;"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"    protected static int FALSE \u003d 0;"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[]\";"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"    protected String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":"        return (isDone ? \"X\" : \" \"); //return space or tick symbols"},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"    public void setAsDone() {"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"        isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"        return description;"},{"lineNumber":30,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":32,"author":{"gitId":"SimJJ96"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"SimJJ96"},"content":"        return taskType + \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":34,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":36,"author":{"gitId":"SimJJ96"},"content":"    public String getTaskType() {"},{"lineNumber":37,"author":{"gitId":"SimJJ96"},"content":"        return taskType;"},{"lineNumber":38,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":40,"author":{"gitId":"SimJJ96"},"content":"    public String getDate() {"},{"lineNumber":41,"author":{"gitId":"SimJJ96"},"content":"        return null;"},{"lineNumber":42,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":44,"author":{"gitId":"SimJJ96"},"content":"    public int getIsDone() {"},{"lineNumber":45,"author":{"gitId":"SimJJ96"},"content":"        return isDone ? TRUE : FALSE ;"},{"lineNumber":46,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":47}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":" * Represent a todo that is a specific type of task."},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"        this.taskType \u003d \"[T]\";"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"}"}],"authorContributionMap":{"SimJJ96":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SimJJ96"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"SimJJ96"},"content":"deadline weekly CS2113 quiz /by Monday 9pm"},{"lineNumber":3,"author":{"gitId":"SimJJ96"},"content":"event CS2113 lecture /at Friday 4 to 6 pm"},{"lineNumber":4,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":5,"author":{"gitId":"SimJJ96"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"SimJJ96"},"content":"todo read book"},{"lineNumber":7,"author":{"gitId":"SimJJ96"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":9,"author":{"gitId":"SimJJ96"},"content":"deadline return book /by June 6th"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"find book"},{"lineNumber":11,"author":{"gitId":"SimJJ96"},"content":"done 500"},{"lineNumber":12,"author":{"gitId":"SimJJ96"},"content":"done fun"},{"lineNumber":13,"author":{"gitId":"SimJJ96"},"content":"find"},{"lineNumber":14,"author":{"gitId":"SimJJ96"},"content":"find abcdefg"},{"lineNumber":15,"author":{"gitId":"SimJJ96"},"content":"delete fun"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"delete 10"},{"lineNumber":17,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"delete 3"},{"lineNumber":19,"author":{"gitId":"SimJJ96"},"content":"list"},{"lineNumber":20,"author":{"gitId":"SimJJ96"},"content":"blah blah"},{"lineNumber":21,"author":{"gitId":"SimJJ96"},"content":""},{"lineNumber":22,"author":{"gitId":"SimJJ96"},"content":"todo"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"deadline"},{"lineNumber":24,"author":{"gitId":"SimJJ96"},"content":"event"},{"lineNumber":25,"author":{"gitId":"SimJJ96"},"content":"done"},{"lineNumber":26,"author":{"gitId":"SimJJ96"},"content":"delete"},{"lineNumber":27,"author":{"gitId":"SimJJ96"},"content":"deadline return book"},{"lineNumber":28,"author":{"gitId":"SimJJ96"},"content":"event CS2113 lecture"},{"lineNumber":29,"author":{"gitId":"SimJJ96"},"content":"bye"}],"authorContributionMap":{"SimJJ96":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"SimJJ96"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"SimJJ96"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"SimJJ96":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"SimJJ96"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/exception/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"SimJJ96"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"SimJJ96":2}}]
