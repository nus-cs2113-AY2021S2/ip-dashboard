[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"Duke is a command line application for managing tasks such as todos, deadlines and events. It is an individual project based on the Software Engineering \u0026 Object-Oriented Programming module (CS2113T) offered by NUS for AY2020/21 Semester 2. Details about the project can be found on the [module website](https://nus-cs2113-ay2021s2.github.io/website/admin/ip-overview.html)."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"- [Quick Start](#quick-start)"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"- [Features](#features)"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"  - [Viewing help: `help`](#viewing-help-help)"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"  - [Adding a todo: `todo`](#adding-a-todo-todo)"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"  - [Adding a deadline: `deadline`](#adding-a-deadline-deadline)"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"  - [Adding an event: `event`](#adding-an-event-event)"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"  - [Listing all tasks: `list`](#listing-all-tasks-list)"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"  - [Marking a task as done: `done`](#marking-a-task-as-done-done)"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"  - [Deleting a task: `delete`](#deleting-a-task-delete)"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"  - [Finding tasks by keyword: `find`](#finding-tasks-by-keyword-find)"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"  - [Finding tasks by date: `date`](#finding-tasks-by-date-date)"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"  - [Exiting the program: `bye`](#exiting-the-program-bye)"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"  - [Saving the data](#saving-the-data)"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"  - [Editing the data file](#editing-the-data-file)"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"- [Command summary](#command-summary)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"## Quick Start"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"1. Ensure you have Java `11` or above installed in your Computer with environment variables set."},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"1. Download the latest `ip.jar` from [here](https://github.com/isaharon/ip/releases)."},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"1. Copy the file to the folder where you want to use as the application\u0027s _home folder_. (User data will be stored here in a `data` folder.)"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"1. On your favourite command-line app, run `java -jar ip.jar` in the chosen _home folder_."},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will list the usage information of the app."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"Some example commands you can try:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"* `todo Read Quick Start guide` : Adds a todo task with the description provided to Duke."},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"* `list` : List all the tasks added."},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"* `done 1` : Marks the 1st item in the task list as done."},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"* `bye` : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"\u003eNotes about command format:"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"\u003e* Words surrounded by `\u003cangle brackets\u003e` are the parameters to be supplied by the user."},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"\u003e* Parameters must be in order and following the format specified."},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"\u003e* Date follows the format `d/M/yyyy` (e.g. `25/12/2021`)."},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"\u003e* Time follows the 24h format `HHmm` (e.g. `1730` to describe 5.30pm)."},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"\u003e* Both date and time has to be in the future from current date and/or time when adding tasks."},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"\u003e"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"\u003e* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `bye`) will be ignored. (e.g. if the command specifies `bye duke`, it will be interpreted as `bye`)."},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"### Viewing help: `help`"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"Shows usage information and the commands available to the user."},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"### Adding a todo: `todo`"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"Adds a todo task to the task list."},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"Format: `todo \u003ctask\u003e`"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"Sample input: `todo Update Duke User Guide`"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":"        [T][ ] Update Duke User Guide"},{"lineNumber":73,"author":{"gitId":"isaharon"},"content":"Now you have 1 tasks in the list."},{"lineNumber":74,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":75,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":76,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":77,"author":{"gitId":"isaharon"},"content":"### Adding a deadline: `deadline`"},{"lineNumber":78,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":79,"author":{"gitId":"isaharon"},"content":"Adds a deadline task to the task list."},{"lineNumber":80,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":81,"author":{"gitId":"isaharon"},"content":"Format: `deadline \u003ctask\u003e /by \u003cdeadline date\u003e`"},{"lineNumber":82,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":83,"author":{"gitId":"isaharon"},"content":"Sample input: `deadline Publish Final Version /by 2/3/2021`"},{"lineNumber":84,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":85,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":86,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":87,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":88,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":89,"author":{"gitId":"isaharon"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":90,"author":{"gitId":"isaharon"},"content":"        [D][ ] Publish Final Version (by: 2 Mar 2021)"},{"lineNumber":91,"author":{"gitId":"isaharon"},"content":"Now you have 2 tasks in the list."},{"lineNumber":92,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":93,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":94,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":95,"author":{"gitId":"isaharon"},"content":"### Adding an event: `event`"},{"lineNumber":96,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":97,"author":{"gitId":"isaharon"},"content":"Adds an event task to the task list."},{"lineNumber":98,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":99,"author":{"gitId":"isaharon"},"content":"Format: `event \u003ctask\u003e /at \u003cevent date\u003e \u003cevent time\u003e`"},{"lineNumber":100,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":101,"author":{"gitId":"isaharon"},"content":"Sample input: `event CS2113T Tutorial /at 3/3/2021 0900`"},{"lineNumber":102,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":103,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":104,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":105,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":106,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":107,"author":{"gitId":"isaharon"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":108,"author":{"gitId":"isaharon"},"content":"        [E][ ] CS2113T Tutorial (at: 3 Mar 2021 09:00 AM)"},{"lineNumber":109,"author":{"gitId":"isaharon"},"content":"Now you have 3 tasks in the list."},{"lineNumber":110,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":111,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":112,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":113,"author":{"gitId":"isaharon"},"content":"### Listing all tasks: `list`"},{"lineNumber":114,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":115,"author":{"gitId":"isaharon"},"content":"Shows a list of all tasks in the task list."},{"lineNumber":116,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":117,"author":{"gitId":"isaharon"},"content":"Format: `list`"},{"lineNumber":118,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":119,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":120,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":121,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":122,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":123,"author":{"gitId":"isaharon"},"content":"Here are the tasks in your list:"},{"lineNumber":124,"author":{"gitId":"isaharon"},"content":" 1. [T][ ] Update Duke User Guide"},{"lineNumber":125,"author":{"gitId":"isaharon"},"content":" 2. [D][ ] Publish Final Version (by: 2 Mar 2021)"},{"lineNumber":126,"author":{"gitId":"isaharon"},"content":" 3. [E][ ] CS2113T Tutorial (at: 3 Mar 2021 09:00 AM)"},{"lineNumber":127,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":128,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":129,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":130,"author":{"gitId":"isaharon"},"content":"### Marking a task as done: `done`"},{"lineNumber":131,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":132,"author":{"gitId":"isaharon"},"content":"Sets the task specified as done."},{"lineNumber":133,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":134,"author":{"gitId":"isaharon"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":135,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":136,"author":{"gitId":"isaharon"},"content":"* Requires knowledge of the task number to be set done. Use `list`."},{"lineNumber":137,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":138,"author":{"gitId":"isaharon"},"content":"Sample input: `done 1`"},{"lineNumber":139,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":140,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":141,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":142,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":143,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":144,"author":{"gitId":"isaharon"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":145,"author":{"gitId":"isaharon"},"content":"        [T][✘] Update Duke User Guide"},{"lineNumber":146,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":147,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":148,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":149,"author":{"gitId":"isaharon"},"content":"### Deleting a task: `delete`"},{"lineNumber":150,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":151,"author":{"gitId":"isaharon"},"content":"Deletes the task specified from the task list."},{"lineNumber":152,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":153,"author":{"gitId":"isaharon"},"content":"Format: `delete \u003ctask nunber\u003e`"},{"lineNumber":154,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":155,"author":{"gitId":"isaharon"},"content":"* Requires knowledge of the task number to be deleted. Use `list`."},{"lineNumber":156,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":157,"author":{"gitId":"isaharon"},"content":"Sample input: `delete 3`"},{"lineNumber":158,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":159,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":160,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":161,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":162,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":163,"author":{"gitId":"isaharon"},"content":"Got it. I\u0027ve deleted this task:"},{"lineNumber":164,"author":{"gitId":"isaharon"},"content":"        [E][ ] CS2113T Tutorial (at: 3 Mar 2021 09:00 AM)"},{"lineNumber":165,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":166,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":167,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":168,"author":{"gitId":"isaharon"},"content":"### Finding tasks by keyword: `find`"},{"lineNumber":169,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":170,"author":{"gitId":"isaharon"},"content":"Finds tasks with task description that contain the keyword."},{"lineNumber":171,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":172,"author":{"gitId":"isaharon"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":173,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":174,"author":{"gitId":"isaharon"},"content":"Sample input: `find Final`"},{"lineNumber":175,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":176,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":177,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":178,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":179,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":180,"author":{"gitId":"isaharon"},"content":"Here are the matching tasks in your list:"},{"lineNumber":181,"author":{"gitId":"isaharon"},"content":" 2. [D][ ] Publish Final Version (by: 2 Mar 2021)"},{"lineNumber":182,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":183,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":184,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":185,"author":{"gitId":"isaharon"},"content":"### Finding tasks by date: `date`"},{"lineNumber":186,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":187,"author":{"gitId":"isaharon"},"content":"Finds events/deadlines that is due/occur at the given date."},{"lineNumber":188,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":189,"author":{"gitId":"isaharon"},"content":"Format: `date \u003cdd/MM/yyyy\u003e`"},{"lineNumber":190,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":191,"author":{"gitId":"isaharon"},"content":"Sample input: `find 2/3/2021`"},{"lineNumber":192,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":193,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":194,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":195,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":196,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":197,"author":{"gitId":"isaharon"},"content":"Here are deadlines/events on 2 Mar 2021:"},{"lineNumber":198,"author":{"gitId":"isaharon"},"content":" 2. [D][ ] Publish Final Version (by: 2 Mar 2021)"},{"lineNumber":199,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":200,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":201,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":202,"author":{"gitId":"isaharon"},"content":"### Exiting the program: `bye`"},{"lineNumber":203,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":204,"author":{"gitId":"isaharon"},"content":"Exits the program."},{"lineNumber":205,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":206,"author":{"gitId":"isaharon"},"content":"Format: `bye`"},{"lineNumber":207,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":208,"author":{"gitId":"isaharon"},"content":"Expected output:"},{"lineNumber":209,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":210,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":211,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":212,"author":{"gitId":"isaharon"},"content":" Bye. Hope to see you again soon!"},{"lineNumber":213,"author":{"gitId":"isaharon"},"content":"────────────────────────────────────────────────────────────"},{"lineNumber":214,"author":{"gitId":"isaharon"},"content":"```"},{"lineNumber":215,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":216,"author":{"gitId":"isaharon"},"content":"### Saving the data"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"isaharon"},"content":"Duke\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"isaharon"},"content":"### Editing the data file"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"isaharon"},"content":"Editing of the data file is possible but not recommended although Duke tries to handle any malformed data file appropriately by discarding the malformed data file and creating a new one."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"isaharon"},"content":"## Command summary"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"isaharon"},"content":"| Action | Format                       | Examples                                     |"},{"lineNumber":227,"author":{"gitId":"isaharon"},"content":"| ------ | ---------------------------- | -------------------------------------------- |"},{"lineNumber":228,"author":{"gitId":"isaharon"},"content":"| Add    | `todo/deadline/event \u003ctask\u003e` | `deadline Duke Command Summary /by 1/3/2021` |"},{"lineNumber":229,"author":{"gitId":"isaharon"},"content":"| List   | `list`                       | `list`                                       |"},{"lineNumber":230,"author":{"gitId":"isaharon"},"content":"| Done   | `done \u003ctask number\u003e`         | `done 3`                                     |"},{"lineNumber":231,"author":{"gitId":"isaharon"},"content":"| Delete | `delete \u003ctask number\u003e`       | `delete 1`                                   |"},{"lineNumber":232,"author":{"gitId":"isaharon"},"content":"| Find   | `find \u003ckeyword\u003e`             | `find CS2113T`                               |"},{"lineNumber":233,"author":{"gitId":"isaharon"},"content":"| Date   | `date \u003cdd/MM/yyyy\u003e`          | `date 28/2/2021`                             |"},{"lineNumber":234,"author":{"gitId":"isaharon"},"content":"| Bye    | `bye`                        | `bye`                                        |"},{"lineNumber":235,"author":{"gitId":"isaharon"},"content":"| Help   | `help`                       | `help`                                       |"}],"authorContributionMap":{"isaharon":218,"-":17}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" * Duke is a command line tasks manager."},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     * Constructor for Duke that takes in a file path to load/store tasks information."},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * @param filePath"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    public Duke(String filePath) {"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"            ui.printError(e);"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * Runs Duke"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        ui.printGreeting();"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        boolean isExit \u003d false;"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        while (!isExit) {"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"                String userInput \u003d ui.readUserInput();"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"                ui.printLine();"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"                Command command \u003d Parser.parseUserInput(userInput);"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"                command.execute(tasks, ui, storage);"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"            } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"                ui.printError(e);"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"            } finally {"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"                ui.printLine();"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"     * Creates a Duke object with file path for storage and invokes the run method"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"     * @param args"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"    public static void main(String[] args) {"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"isaharon":59,"-":2}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":" * Command to terminate Duke"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"public class ByeCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"     * Constructor for ByeCommand. Sets the command type."},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    public ByeCommand() {"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"        super(CommandType.BYE);"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * Executes printing of bye message."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"        ui.printBye();"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        return true;"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":38}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":" * Abstract class that represents commands entered by user."},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    protected CommandType commandType;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    protected String commandArgs;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     * Constructor for Command. For commands without arguments."},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * @param commandType the type of command"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    public Command(CommandType commandType) {"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * Alternative constructor for Command. For commands with arguments."},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @param commandType the type of command"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs the command arguments"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public Command(CommandType commandType, String commandArgs) {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        this.commandArgs \u003d commandArgs;"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * Abstract method that executes depending on its command type."},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"     * Abstract method that sets Duke for termination."},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     * @return"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    public abstract boolean isExit();"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":47}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":" * All command types used in the program."},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":" * LIST: lists tasks"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * DATE: lists deadlines/events on given date"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" * DONE: mark task as done"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":" * TODO: create new todo"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":" * DEADLINE: create new deadline"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" * EVENT: create new event"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" * DELETE: delete tasks"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":" * FIND: find tasks based on keyword(s) of task description"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":" * BYE: exit program"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":" * HELP: prints usage information for Duke"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"public enum CommandType {"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    LIST, DONE, BYE, TODO, DEADLINE, EVENT, DELETE, DATE, FIND, HELP;"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":18}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":" * Command to find tasks by date"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"public class DateCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * Constructor for DateCommand. Takes in command arguments, sets the command type and arguments."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs command arguments for user input"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    public DateCommand(String commandArgs) {"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"        super(CommandType.DATE, commandArgs);"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * Handles finding tasks by date and printing output information."},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        LocalDateTime date \u003d Utils.getDateFromUserInput(commandArgs);"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        ArrayList\u003cTask\u003e matches \u003d tasks.findTasksByDate(date);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        if (matches.size() \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"            ui.printText(Messages.INFO_DATES_NOT_FOUND + commandArgs);"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"            return;"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"        ui.printText(\"Here are deadlines/events on \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \":\");"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"        matches.stream()"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"                .forEach(m -\u003e ui.printText(\" \" + tasks.getTaskNumber(m) + \". \" + m));"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":56}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidDeadlineException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import duke.exception.MissingDescriptionException;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":" * Command to add a task with deadline"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * Constructor for DeadlineCommand. Takes in command arguments, sets the command type and arguments."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs command arguments from user input"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    public DeadlineCommand(String commandArgs) {"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"        super(CommandType.DEADLINE, commandArgs);"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * Handles adding task with deadline, saving and printing output information."},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        if (commandArgs.length() \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"            throw new MissingDescriptionException(commandType);"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        String[] deadlineArgs \u003d Utils.splitUserInputByRegex(commandArgs, \"\\\\s+/by\\\\s+\");"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"        LocalDateTime date \u003d Utils.getDateFromUserInput(deadlineArgs[1]);"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        if (!Utils.isValidDeadline(date)) {"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"        Task task \u003d new Deadline(deadlineArgs[0], date);"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"        tasks.addTask(task);"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"        storage.save(tasks.getTasks());"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"        ui.printAddedTask(task);"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"        ui.printTotalTasks(tasks.getTasks());"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":60}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidTaskNumberException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.exception.MissingDescriptionException;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":" * Command to delete tasks"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * Constructor for DeleteCommand. Takes in command arguments, sets command type and arguments."},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs command arguments from user input"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    public DeleteCommand(String commandArgs) {"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"        super(CommandType.DELETE, commandArgs);"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * Handles deleting tasks, saving and printing output information."},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        if (commandArgs.length() \u003d\u003d 0) {"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"            throw new MissingDescriptionException(commandType);"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        if (!Utils.isValidTaskNumber(tasks.getTasks(), commandArgs)) {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"            throw new InvalidTaskNumberException(commandArgs);"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        int taskIndex \u003d Integer.parseInt(commandArgs) - 1;"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"        Task taskRemoved \u003d tasks.deleteTaskByIndex(taskIndex);"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"        storage.save(tasks.getTasks());"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        ui.printDeletedTask(taskRemoved);"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":52}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidTaskNumberException;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":" * Command to mark task as done"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"public class DoneCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * Construct for DoneCommand. Takes in command arguments, sets the command type and arguments."},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs command arguments from user input"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    public DoneCommand(String commandArgs) {"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"        super(CommandType.DONE, commandArgs);"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * Handles marking the tasks as done by their task number, saving and printing output information."},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        if (!Utils.isValidTaskNumber(tasks.getTasks(), commandArgs)) {"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"            throw new InvalidTaskNumberException(commandArgs);"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        int taskIndex \u003d Integer.parseInt(commandArgs) - 1;"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        Task task \u003d tasks.getTaskByIndex(taskIndex);"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        if (task.isDone()) {"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"            ui.printText(Messages.INFO_TASK_ALREADY_MARKED);"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"            return;"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        task.setDone(true);"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"        storage.save(tasks.getTasks());"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"        ui.printText(Messages.INFO_TASK_MARKED + task);"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":54}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidEventException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import duke.exception.MissingDescriptionException;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":" * Command to add event task"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"public class EventCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * Constructor for EventCommand. Takes in command arguments, sets the command type and arguments."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    public EventCommand(String commandArgs) {"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"        super(CommandType.EVENT, commandArgs);"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * Handles adding event task, saving and printing output information."},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        if (commandArgs.length() \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"            throw new MissingDescriptionException(commandType);"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        String[] eventArgs \u003d Utils.splitUserInputByRegex(commandArgs, \"\\\\s+/at\\\\s+\");"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"        LocalDateTime dateTime \u003d Utils.getDateTimeFromUserInput(eventArgs[1]);"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        if (!Utils.isValidEvent(dateTime)) {"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"            throw new InvalidEventException();"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"        Task task \u003d new Event(eventArgs[0], dateTime);"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"        tasks.addTask(task);"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"        storage.save(tasks.getTasks());"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"        ui.printAddedTask(task);"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"        ui.printTotalTasks(tasks.getTasks());"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":59}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":" * Command to find tasks by keyword"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * Constructor for FindCommand. Takes in command arguments, sets command type and arguments."},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs command arguments from user input"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    public FindCommand(String commandArgs) {"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"        super(CommandType.FIND, commandArgs);"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * Handles finding tasks that match the keyword, and printing output information."},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        ArrayList\u003cTask\u003e matches \u003d tasks.findTasksByKeyword(commandArgs);"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"        if (matches.size() \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"            ui.printText(Messages.INFO_TASKS_NOT_FOUND + commandArgs);"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"            return;"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        ui.printText(Messages.INFO_FOUND_TASKS);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        matches.stream()"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"                .forEach((m) -\u003e ui.printText(\" \" + tasks.getTaskNumber(m) + \". \" + m));"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":50}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" * Command to list usage information"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"public class HelpCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"     * Constructor for HelpCommand. Sets the command type."},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    public HelpCommand() {"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"        super(CommandType.HELP);"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * Handles printing usage information."},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        ui.printText(Messages.INFO_HELP);"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" * Command to list all tasks"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    public ListCommand() {"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"        super(CommandType.LIST);"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"        ui.printText(Messages.INFO_LIST_TASKS);"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"        tasks.getTasks().stream()"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"                .forEach((t) -\u003e ui.printText(\" \" + tasks.getTaskNumber(t) + \". \" + t));"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":31}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.exception.MissingDescriptionException;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":" * Command to add a todo task"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"public class TodoCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     * Constructor for TodoCommand. Takes in command arguments, sets command type and arguments."},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * @param commandArgs"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    public TodoCommand(String commandArgs) {"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"        super(CommandType.TODO, commandArgs);"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * Handles adding todo tasks, saving and printing output information."},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @param tasks"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param ui"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * @param storage"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"        if (commandArgs.length() \u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"            throw new MissingDescriptionException(commandType);"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"        Task task \u003d new Todo(commandArgs);"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        tasks.addTask(task);"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        storage.save(tasks.getTasks());"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        ui.printAddedTask(task);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        ui.printTotalTasks(tasks.getTasks());"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"     * @return boolean result if Duke should exit after execution of command"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    public boolean isExit() {"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":49}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"     * Informational"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_GREETING \u003d \" Hello! I\u0027m Duke\" + System.lineSeparator()"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"            + \" What can I do for you?\" + System.lineSeparator() + \"Type \\\"help\\\" for usage information\";"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_HELP \u003d"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"            \"help\\n - list this usage information and the commands available\" + System.lineSeparator()"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"            + \"todo \u003ctask\u003e\\n - create new todo task\" + System.lineSeparator()"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"            + \"deadline \u003ctask\u003e /by \u003cdd/MM/yyyy\u003e\\n - create new task with deadline\" + System.lineSeparator()"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"            + \"event \u003ctask\u003e /at \u003cdd/MM/yyyy hhmm\u003e\\n - create new event task\" + System.lineSeparator()"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"            + \"list\\n - list all tasks\" + System.lineSeparator()"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"            + \"done \u003ctask number\u003e\\n - mark task as done via task number\" + System.lineSeparator()"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"            + \"delete \u003ctask number\u003e\\n - delete task via task number\" + System.lineSeparator()"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"            + \"find \u003ckeyword\u003e\\n - find tasks by description\" + System.lineSeparator()"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"            + \"date \u003cdd/MM/yyyy\u003e\\n - find tasks by date\" + System.lineSeparator()"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"            + \"bye\\n - exit the program\";"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_BYE \u003d \" Bye. Hope to see you again soon!\";"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_ADDED_TASK \u003d \"Got it. I\u0027ve added this task:\" + System.lineSeparator() + \"\\t\";"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_DELETED_TASK \u003d \"Got it. I\u0027ve deleted this task:\" + System.lineSeparator() + \"\\t\";"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_LIST_TASKS \u003d \"Here are the tasks in your list:\";"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_FOUND_TASKS \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_TASK_ALREADY_MARKED \u003d \"Task already marked as done!\";"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_TASK_MARKED \u003d \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"            + \"\\t\";"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_TASKS_NOT_FOUND \u003d \"No tasks found with given keyword: \";"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    public static final String INFO_DATES_NOT_FOUND \u003d \"No deadlines/events found on given date: \";"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"     * Exceptions"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    public static final String DUKE_EXCEPTION \u003d \"☹ OOPS!!!\";"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"    public static final String INVALID_DEADLINE_EXCEPTION \u003d \"Please enter a valid deadline date!\";"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    public static final String INVALID_EVENT_EXCEPTION \u003d \"Please enter a valid event date and time!\";"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    public static final String INVALID_DATE_EXCEPTION \u003d"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"            \"Please follow the correct format and/or enter a valid date! (e.g. 25/12/2021)\";"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    public static final String INVALID_DATETIME_EXCEPTION \u003d"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"            \"Please follow the correct format and/or enter a valid date and time! (e.g. 25/12/2021 1600)\";"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    public static final String LOADING_EXCEPTION \u003d \"Unable to load tasks file! New list will be created.\";"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    public static final String UNKNOWN_COMMAND_EXCEPTION \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"     * Miscellaneous"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    public static final String ICON_DONE \u003d \"\\u2718\";"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":53}},{"path":"src/main/java/duke/common/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.InvalidDateTimeFormatException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":" * Utility methods"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"public class Utils {"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     * Takes in user input and splits it into 2 as long as there is whitespace"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * character in the middle."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * Reused from Lecture Week 4 Contacts program."},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * @param userInput user input string"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @return Array of command type and command arguments"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    public static String[] getCommandAndArgs(String userInput) {"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\", 2);"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"        return split.length \u003d\u003d 2 ? split : new String[] { split[0], \"\" };"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"     * Takes in user input and splits it into 2 following the regex pattern given."},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * Generalized version of commandAndArgs."},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     * @param userInput user input string"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * @param regex pattern to match and split string"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     * @return Array of 2 strings"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"    public static String[] splitUserInputByRegex(String userInput, String regex) {"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        String[] split \u003d userInput.split(regex, 2);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        return split.length \u003d\u003d 2 ? split : new String[] {split[0], \"\" };"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"     * Checks if input task number is valid."},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     * @param tasks, number"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"     * @return validity of input."},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    public static boolean isValidTaskNumber(ArrayList\u003cTask\u003e tasks, String number) {"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"            tasks.get(Integer.parseInt(number) - 1);"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"        return true;"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"     * Takes in user input string and parses it to a LocalDateTime object if it matches the pattern."},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"     * @param userInput"},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"     * @return LocalDateTime object with date specified in user input string."},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":"     * @throws InvalidDateFormatException"},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":"    public static LocalDateTime getDateFromUserInput(String userInput) throws InvalidDateFormatException {"},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":"            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"            LocalDateTime date \u003d LocalDate.parse(userInput, dateTimeFormatter).atStartOfDay();"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":"            return date;"},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"            throw new InvalidDateFormatException();"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":74,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"isaharon"},"content":"     * Checks if deadline specified is before current date."},{"lineNumber":76,"author":{"gitId":"isaharon"},"content":"     * @param date"},{"lineNumber":77,"author":{"gitId":"isaharon"},"content":"     * @return validity of deadline."},{"lineNumber":78,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"isaharon"},"content":"    public static boolean isValidDeadline(LocalDateTime date) {"},{"lineNumber":80,"author":{"gitId":"isaharon"},"content":"        if (date.toLocalDate().isBefore(LocalDateTime.now().toLocalDate())) {"},{"lineNumber":81,"author":{"gitId":"isaharon"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"isaharon"},"content":"        return true;"},{"lineNumber":84,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":86,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"isaharon"},"content":"     * Takes in user input string and parses it to a LocalDateTime object if it matches the pattern."},{"lineNumber":88,"author":{"gitId":"isaharon"},"content":"     * @param userInput"},{"lineNumber":89,"author":{"gitId":"isaharon"},"content":"     * @return LocalDateTime object with date and time specified in user input string."},{"lineNumber":90,"author":{"gitId":"isaharon"},"content":"     * @throws InvalidDateTimeFormatException"},{"lineNumber":91,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"isaharon"},"content":"    public static LocalDateTime getDateTimeFromUserInput(String userInput) throws InvalidDateTimeFormatException {"},{"lineNumber":93,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"isaharon"},"content":"            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"},{"lineNumber":95,"author":{"gitId":"isaharon"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(userInput, dateTimeFormatter);"},{"lineNumber":96,"author":{"gitId":"isaharon"},"content":"            return dateTime;"},{"lineNumber":97,"author":{"gitId":"isaharon"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":98,"author":{"gitId":"isaharon"},"content":"            throw new InvalidDateTimeFormatException();"},{"lineNumber":99,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":102,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"isaharon"},"content":"     * Checks if event specified is before current date and time."},{"lineNumber":104,"author":{"gitId":"isaharon"},"content":"     * @param dateTime"},{"lineNumber":105,"author":{"gitId":"isaharon"},"content":"     * @return validity of event."},{"lineNumber":106,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"isaharon"},"content":"    public static boolean isValidEvent(LocalDateTime dateTime) {"},{"lineNumber":108,"author":{"gitId":"isaharon"},"content":"        if (dateTime.isBefore(LocalDateTime.now())) {"},{"lineNumber":109,"author":{"gitId":"isaharon"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"isaharon"},"content":"        return true;"},{"lineNumber":112,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":113}},{"path":"src/main/java/duke/dao/TaskDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.dao;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":" * Data access object interface for Tasks"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"public interface TaskDao {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    ArrayList\u003cTask\u003e loadAllTasks() throws DukeException;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    void saveAllTasks(ArrayList\u003cTask\u003e tasks);"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":14}},{"path":"src/main/java/duke/dao/TaskDaoImpl.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.dao;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.LoadingException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":" * Implementation of TaskDao for local human-readable text files"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"public class TaskDaoImpl implements TaskDao {"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    private File taskFile;"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * Constructor creates file and necessary directory from file path given if they do not already exists."},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     * @param filePath"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    public TaskDaoImpl(String filePath) {"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"        Path taskDataPath \u003d Paths.get(System.getProperty(\"user.dir\"), filePath);"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"        taskFile \u003d new File(String.valueOf(taskDataPath));"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"            taskFile.getParentFile().mkdirs();"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"            taskFile.createNewFile();"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"     * Reads the tasks file stored, converts them into appropriate Tasks subclasses and stores them into an array list."},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"     * @return An array list of tasks."},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    public ArrayList\u003cTask\u003e loadAllTasks() throws DukeException {"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"            Scanner sc \u003d new Scanner(taskFile);"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"            while (sc.hasNext()) {"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"                // check if line of task is valid length"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"                if (line.length() \u003c 8) {"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"                    continue;"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"                char taskType \u003d line.charAt(1);"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"                boolean isDone \u003d String.valueOf(line.charAt(4)).compareTo(Messages.ICON_DONE) \u003d\u003d 0;"},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"                String commandArgs \u003d line.substring(7);"},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"                Task task;"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":"                switch (taskType) {"},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"                case \u0027T\u0027:"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":"                    task \u003d new Todo(commandArgs, isDone);"},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"                    tasks.add(task);"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":"                    break;"},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":"                case \u0027D\u0027:"},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"                    String[] deadlineArgs \u003d commandArgs.split(\"\\\\s+\\\\(by:\\\\s+\", 2);"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"                    String deadlineDate \u003d deadlineArgs[1].substring(0, deadlineArgs[1].length() - 1);"},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":"                    LocalDateTime date \u003d LocalDateTime.parse(deadlineDate);"},{"lineNumber":73,"author":{"gitId":"isaharon"},"content":"                    task \u003d new Deadline(deadlineArgs[0], isDone, date);"},{"lineNumber":74,"author":{"gitId":"isaharon"},"content":"                    tasks.add(task);"},{"lineNumber":75,"author":{"gitId":"isaharon"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"isaharon"},"content":"                case \u0027E\u0027:"},{"lineNumber":77,"author":{"gitId":"isaharon"},"content":"                    String[] eventArgs \u003d commandArgs.split(\"\\\\s+\\\\(at:\\\\s+\", 2);"},{"lineNumber":78,"author":{"gitId":"isaharon"},"content":"                    String eventDateTime \u003d eventArgs[1].substring(0, eventArgs[1].length() - 1);"},{"lineNumber":79,"author":{"gitId":"isaharon"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(eventDateTime);"},{"lineNumber":80,"author":{"gitId":"isaharon"},"content":"                    task \u003d new Event(eventArgs[0], isDone, dateTime);"},{"lineNumber":81,"author":{"gitId":"isaharon"},"content":"                    tasks.add(task);"},{"lineNumber":82,"author":{"gitId":"isaharon"},"content":"                    break;"},{"lineNumber":83,"author":{"gitId":"isaharon"},"content":"                default:"},{"lineNumber":84,"author":{"gitId":"isaharon"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"isaharon"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"isaharon"},"content":"        } catch (Exception e) {"},{"lineNumber":87,"author":{"gitId":"isaharon"},"content":"            throw new LoadingException();"},{"lineNumber":88,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":90,"author":{"gitId":"isaharon"},"content":"        return tasks;"},{"lineNumber":91,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":93,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"isaharon"},"content":"     * Takes an array list of tasks and writes to the defined tasks file."},{"lineNumber":95,"author":{"gitId":"isaharon"},"content":"     * @param tasks the array list of tasks"},{"lineNumber":96,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"isaharon"},"content":"    public void saveAllTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":99,"author":{"gitId":"isaharon"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"isaharon"},"content":"            FileWriter fw \u003d new FileWriter(taskFile, false);"},{"lineNumber":101,"author":{"gitId":"isaharon"},"content":"            for (Task task : tasks) {"},{"lineNumber":102,"author":{"gitId":"isaharon"},"content":"                fw.write(task.toFileOutput() + \"\\n\");"},{"lineNumber":103,"author":{"gitId":"isaharon"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"isaharon"},"content":"            fw.close();"},{"lineNumber":105,"author":{"gitId":"isaharon"},"content":"        } catch (IOException e) {"},{"lineNumber":106,"author":{"gitId":"isaharon"},"content":"            e.printStackTrace();"},{"lineNumber":107,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":109}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Superclass for all exceptions within Duke"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return Messages.DUKE_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for invalid date format given by user"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class InvalidDateFormatException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.INVALID_DATE_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for invalid date time format given by user"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class InvalidDateTimeFormatException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.INVALID_DATETIME_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for invalid deadline date"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class InvalidDeadlineException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.INVALID_DEADLINE_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for invalid event date"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class InvalidEventException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.INVALID_EVENT_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":" * Exception for invalid task number given by user"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"public class InvalidTaskNumberException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"    private String taskNumber;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    public InvalidTaskNumberException(String taskNumber) {"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + taskNumber + \" is an invalid task number.\";"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":17}},{"path":"src/main/java/duke/exception/LoadingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for failing to load the storage file"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class LoadingException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.LOADING_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/exception/MissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.command.CommandType;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for user input commands with missing description for the task"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class MissingDescriptionException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    private CommandType commandType;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"    public MissingDescriptionException(CommandType commandType) {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" The description of a \" + commandType.name() + \" cannot be empty.\";"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":19}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Exception for unknown user input commands"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"        return super.toString() + \" \" + Messages.UNKNOWN_COMMAND_EXCEPTION;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":13}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.command.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.command.DateCommand;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"import duke.command.HelpCommand;"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"import duke.command.TodoCommand;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"import duke.common.Utils;"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"     * Takes in user input string and returns a Command object."},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"     * @param userInput the user input string"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * @return Command object based on command type given."},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @throws UnknownCommandException"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    public static Command parseUserInput(String userInput) throws UnknownCommandException {"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"        String[] commandAndArgs \u003d Utils.getCommandAndArgs(userInput);"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"        String commandType \u003d commandAndArgs[0];"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"        String commandArgs \u003d commandAndArgs[1];"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        switch (commandType) {"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"        case \"list\":"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"            return new ListCommand();"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        case \"done\":"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"            return new DoneCommand(commandArgs);"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"        case \"bye\":"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"            return new ByeCommand();"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        case \"todo\":"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"            return new TodoCommand(commandArgs);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"        case \"deadline\":"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"            return new DeadlineCommand(commandArgs);"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"        case \"event\":"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"            return new EventCommand(commandArgs);"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"        case \"delete\":"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"            return new DeleteCommand(commandArgs);"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"        case \"find\":"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"            return new FindCommand(commandArgs);"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"        case \"date\":"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"            return new DateCommand(commandArgs);"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"        case \"help\":"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"            return new HelpCommand();"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"        default:"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"            throw new UnknownCommandException();"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":55}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.dao.TaskDaoImpl;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" * Class that represents the storage load/save access for Duke."},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    private TaskDaoImpl taskDao;"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     * Sole constructor. Creates a data access object with the given file path."},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * @param filePath the path of the file used for storage"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    public Storage(String filePath) {"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"        this.taskDao \u003d new TaskDaoImpl(filePath);"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * Loads all tasks from storage file"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @return an array list of tasks that was loaded"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @throws DukeException"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        return taskDao.loadAllTasks();"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     * Saves all tasks to storage file"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * @param tasks the array list of tasks to be stored"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        taskDao.saveAllTasks(tasks);"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":39}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" * Class that represents a task with deadline."},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    private LocalDateTime deadline;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"     * Constructor for Deadline."},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the task with deadline"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"     * @param deadline a LocalDateTime object with the date of the deadline"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    public Deadline(String description, LocalDateTime deadline) {"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * Alternative constructor for Deadline. Creates Deadline from existing information."},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the task with deadline"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @param isDone the completion status of the task"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param deadline a LocalDateTime object with the date of the deadline"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime deadline) {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        super(description, isDone);"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * @return LocalDateTime object with the date and time of the deadline"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        return deadline;"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"     * @return string for command line output"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) +\")\";"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"    public String toFileOutput() {"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":52}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" * Class that represents an event task."},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"     * Constructor for Event. All events require a date and time."},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the task"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"     * @param dateTime a LocalDateTime object with the date and time of the event"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    public Event(String description, LocalDateTime dateTime) {"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * Alternative constructor for Event. Creates Event from existing information."},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the event"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @param isDone the completion status of the event"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     * @param dateTime a LocalDateTime object with the date and time of the event"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public Event(String description, boolean isDone, LocalDateTime dateTime) {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        super(description, isDone);"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * @return date \u0026 time of event"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public LocalDateTime getDatetime() {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        return dateTime;"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"     * @return string for command line output"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy HH:mm a\")) + \")\";"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"     * @return string for file output"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    public String toFileOutput() {"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":55}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":" * Abstract that represents a task."},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"    private String description;"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"     * Constructor for Task. Sets task to be incomplete by default."},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the task"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * Alternative constructor for Task. Takes in description and completion status."},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the task"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     * @param isDone the completion status of the task"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"     * @return description of task"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    public String getDescription() {"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"        return description;"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"     * @return completion status of task"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    public boolean isDone() {"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        return isDone;"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"     * @param done completion status to set"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    public void setDone(boolean done) {"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"        isDone \u003d done;"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"     * @return status icon based on the task\u0027s completion status"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"    public String getStatusIcon() {"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"        return (isDone ? Messages.ICON_DONE : \" \");"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"     * @return string for command line output"},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":"     * Abstract method for all subclass to implement for storing to text file."},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":"     * @return string for file output"},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"    public abstract String toFileOutput();"},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":72}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"import static java.util.stream.Collectors.toList;"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":" * Class that stores all the tasks in a list."},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"     * Default constructor. Creates a new arraylist of task."},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"     * Constructor. Loads an existing arraylist of task."},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"     * @param tasks an arraylist of task"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"     * @return array list of tasks"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"        return tasks;"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"     * Gets a task by their task number"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"     * @param taskIndex the task number from 1 to maximum number of tasks"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"     * @return the task associated with the task number"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    public Task getTaskByIndex(int taskIndex) {"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"     * @param task task to be added"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":"    public void addTask(Task task) {"},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"        tasks.add(task);"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"     * Deletes task from the task list by their task number."},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"     * @param taskIndex the task number of the task to be deleted"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"     * @return the deleted task"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"    public Task deleteTaskByIndex(int taskIndex) {"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"        return tasks.remove(taskIndex);"},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"     * @param task the task to get the task number from"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":"     * @return task number from 1 to maximum number of tasks"},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":"    public int getTaskNumber(Task task) {"},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"        return tasks.indexOf(task) + 1;"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"     * Takes in a keyword and returns an array list of tasks that match the keyword."},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":"     * @param keyword the string to be used for matching"},{"lineNumber":73,"author":{"gitId":"isaharon"},"content":"     * @return an array list of tasks"},{"lineNumber":74,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"isaharon"},"content":"    public ArrayList\u003cTask\u003e findTasksByKeyword(String keyword) {"},{"lineNumber":76,"author":{"gitId":"isaharon"},"content":"        ArrayList\u003cTask\u003e matches \u003d (ArrayList\u003cTask\u003e) getTasks().stream()"},{"lineNumber":77,"author":{"gitId":"isaharon"},"content":"                .filter((t) -\u003e t.getDescription().contains(keyword))"},{"lineNumber":78,"author":{"gitId":"isaharon"},"content":"                .collect(toList());"},{"lineNumber":79,"author":{"gitId":"isaharon"},"content":"        return matches;"},{"lineNumber":80,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":82,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"isaharon"},"content":"     * Takes in a date and returns an array list of tasks to be completed on the specified date."},{"lineNumber":84,"author":{"gitId":"isaharon"},"content":"     * @param date the LocalDateTime object with date to be used for matching"},{"lineNumber":85,"author":{"gitId":"isaharon"},"content":"     * @return an array list of tasks"},{"lineNumber":86,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"isaharon"},"content":"    public ArrayList\u003cTask\u003e findTasksByDate(LocalDateTime date) {"},{"lineNumber":88,"author":{"gitId":"isaharon"},"content":"        ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"isaharon"},"content":"        // Add matching deadlines"},{"lineNumber":90,"author":{"gitId":"isaharon"},"content":"        matches.addAll(getTasks().stream()"},{"lineNumber":91,"author":{"gitId":"isaharon"},"content":"                .filter(t -\u003e t instanceof Deadline)"},{"lineNumber":92,"author":{"gitId":"isaharon"},"content":"                .map(t -\u003e (Deadline) t)"},{"lineNumber":93,"author":{"gitId":"isaharon"},"content":"                .filter(d -\u003e d.getDeadline().toLocalDate().equals(date.toLocalDate()))"},{"lineNumber":94,"author":{"gitId":"isaharon"},"content":"                .collect(toList()));"},{"lineNumber":95,"author":{"gitId":"isaharon"},"content":"        // Add matching events"},{"lineNumber":96,"author":{"gitId":"isaharon"},"content":"        matches.addAll(getTasks().stream()"},{"lineNumber":97,"author":{"gitId":"isaharon"},"content":"                .filter(t -\u003e t instanceof Event)"},{"lineNumber":98,"author":{"gitId":"isaharon"},"content":"                .map(t -\u003e (Event) t)"},{"lineNumber":99,"author":{"gitId":"isaharon"},"content":"                .filter(e -\u003e e.getDatetime().toLocalDate().equals(date.toLocalDate()))"},{"lineNumber":100,"author":{"gitId":"isaharon"},"content":"                .collect(toList()));"},{"lineNumber":101,"author":{"gitId":"isaharon"},"content":"        return matches;"},{"lineNumber":102,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":103}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":" * Class that represents a todo task."},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"     * Default constructor for Todo."},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the todo"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"    public Todo(String description) {"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"     * Alternative constructor for Todo. Create todo task from existing information."},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"     * @param description the description of the todo"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     * @param isDone completion status of the todo"},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"        super(description, isDone);"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":"     * @return string for command line output"},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"     * @return string for file output"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"    public String toFileOutput() {"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"        return this.toString();"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":39}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"import duke.common.Messages;"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":" * Handles user input and output for Duke"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":" */"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"isaharon"},"content":"    private final String LINE \u003d \"\\u2500\".repeat(60);"},{"lineNumber":15,"author":{"gitId":"isaharon"},"content":"    private final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":17,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"isaharon"},"content":"     * Prints greeting message with lines."},{"lineNumber":19,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"isaharon"},"content":"    public void printGreeting() {"},{"lineNumber":21,"author":{"gitId":"isaharon"},"content":"        printLine();"},{"lineNumber":22,"author":{"gitId":"isaharon"},"content":"        printText(Messages.INFO_GREETING);"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"        printLine();"},{"lineNumber":24,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":26,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"isaharon"},"content":"     * Prints bye message."},{"lineNumber":28,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"isaharon"},"content":"    public void printBye() {"},{"lineNumber":30,"author":{"gitId":"isaharon"},"content":"        System.out.println(Messages.INFO_BYE);"},{"lineNumber":31,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":33,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"isaharon"},"content":"     * Prints given text string."},{"lineNumber":35,"author":{"gitId":"isaharon"},"content":"     * @param text the text to be printed"},{"lineNumber":36,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"isaharon"},"content":"    public void printText(String text) {"},{"lineNumber":38,"author":{"gitId":"isaharon"},"content":"        System.out.println(text);"},{"lineNumber":39,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":41,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"isaharon"},"content":"     * Prints task that was added by Duke."},{"lineNumber":43,"author":{"gitId":"isaharon"},"content":"     * @param task the added task"},{"lineNumber":44,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"isaharon"},"content":"    public void printAddedTask(Task task) {"},{"lineNumber":46,"author":{"gitId":"isaharon"},"content":"        System.out.println(Messages.INFO_ADDED_TASK + task);"},{"lineNumber":47,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":49,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"isaharon"},"content":"     * Prints total tasks in the tasks list."},{"lineNumber":51,"author":{"gitId":"isaharon"},"content":"     * @param tasks the tasks list"},{"lineNumber":52,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"isaharon"},"content":"    public void printTotalTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":54,"author":{"gitId":"isaharon"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":55,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":57,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"isaharon"},"content":"     * Prints error message of given DukeException."},{"lineNumber":59,"author":{"gitId":"isaharon"},"content":"     * @param error the exception for error message to be printed"},{"lineNumber":60,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"isaharon"},"content":"    public void printError(DukeException error) {"},{"lineNumber":62,"author":{"gitId":"isaharon"},"content":"        System.out.println(error);"},{"lineNumber":63,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":65,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"isaharon"},"content":"     * Prints the deleted task line."},{"lineNumber":67,"author":{"gitId":"isaharon"},"content":"     * @param task the deleted task"},{"lineNumber":68,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"isaharon"},"content":"    public void printDeletedTask(Task task) {"},{"lineNumber":70,"author":{"gitId":"isaharon"},"content":"        System.out.println(Messages.INFO_DELETED_TASK + task);"},{"lineNumber":71,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":73,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"isaharon"},"content":"     * Prints a horizontal line."},{"lineNumber":75,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"isaharon"},"content":"    public void printLine() {"},{"lineNumber":77,"author":{"gitId":"isaharon"},"content":"        System.out.println(LINE);"},{"lineNumber":78,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"isaharon"},"content":""},{"lineNumber":80,"author":{"gitId":"isaharon"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"isaharon"},"content":"     * Reads the user input by line."},{"lineNumber":82,"author":{"gitId":"isaharon"},"content":"     * @return string of the user\u0027s input"},{"lineNumber":83,"author":{"gitId":"isaharon"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"isaharon"},"content":"    public String readUserInput() {"},{"lineNumber":85,"author":{"gitId":"isaharon"},"content":"        String userInput;"},{"lineNumber":86,"author":{"gitId":"isaharon"},"content":"        userInput \u003d SCANNER.nextLine();"},{"lineNumber":87,"author":{"gitId":"isaharon"},"content":"        return userInput;"},{"lineNumber":88,"author":{"gitId":"isaharon"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"isaharon"},"content":"}"}],"authorContributionMap":{"isaharon":89}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"isaharon"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"isaharon"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"isaharon"},"content":"event project meet /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"isaharon"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"isaharon"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"isaharon"},"content":"list"},{"lineNumber":7,"author":{"gitId":"isaharon"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"isaharon"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":9,"author":{"gitId":"isaharon"},"content":"todo"},{"lineNumber":10,"author":{"gitId":"isaharon"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"isaharon"},"content":"done 100"},{"lineNumber":12,"author":{"gitId":"isaharon"},"content":"done notanumber"},{"lineNumber":13,"author":{"gitId":"isaharon"},"content":"bye"}],"authorContributionMap":{"isaharon":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"isaharon"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"isaharon"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"isaharon":2,"-":36}}]
