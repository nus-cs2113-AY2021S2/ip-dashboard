[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"KimIdeas8":2,"-":24}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Deadlines;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Events;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.ToDos;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.commandWord;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.index;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.taskName;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.taskDate;"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.keyword;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Storage.tasksCount;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":" * Command Class: Contains methods for executing the User\u0027s command."},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"public class Command {"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public static boolean isExit \u003d false;"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    public Command() {"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"     * Executes User\u0027s command through specific methods included for each command."},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"     * Adds task if command is of todo, deadline, or event type."},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"     * Removes task if command is delete."},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"     * Marks task as done if command is done."},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"     * Lists all tasks in current list of tasks if command is list."},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"     * Returns isExit to signal for Duke to stop program. Boolean value isExit is set to true when command is \u0027bye\u0027."},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks most current list storing user\u0027s tasks"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"     * @param ui ui object associated with methods that deals with interaction with User"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"     * @return isExit"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"    */"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"    public static boolean execute(TaskList tasks, Ui ui) {"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"        //adds task to list of tasks:"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"        if (commandWord.equals(\"todo\")) {"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"            addToDo(taskName, tasks);"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"        } else if (commandWord.equals(\"deadline\")) {"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"            addDeadline(taskName, taskDate, tasks);"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"        } else if (commandWord.equals(\"event\")) {"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"            addEvent(taskName, taskDate, tasks);"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"        //OR: remove task from list of tasks"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"delete\")) {"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"            deleteAndPrintTask(index, tasks);"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"        //OR: mark current task as \u0027done\u0027 \u0026 outputs the taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"done\")) {"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"            markAndPrintsTaskAsDone(index, tasks);"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"        //OR: lists all the user\u0027s current tasks in the format of taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"list\")) {"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"            printsList(tasks);"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"        //OR: searches for all tasks with the keyword"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"find\")) {"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"            findTasksContainingKeyWord(keyword, tasks);"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"        //OR: exits program"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"bye\")) {"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"            ui.saysByeToUser();"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"            isExit \u003d true;"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"        //OR: deal with invalid command"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"        return isExit;"},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in user\u0027s input of \u0027todo\u0027 task to"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"     * add task to current list of tasks."},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"     * Then, it shows the user the added task for success of addition."},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName Name of the task parsed from user\u0027s input"},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"    private static void addToDo(String taskName, TaskList tasks) {"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new ToDos(taskName)); //add task to list"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in user\u0027s input of \u0027deadline\u0027 task to"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"     * add task to current list of tasks."},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"     * Then, it shows the user the added task for success of addition."},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName Name of the task parsed from user\u0027s input"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskDate Date of the task parsed from user\u0027s input"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"    private static void addDeadline(String taskName, String taskDate, TaskList tasks) {"},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new Deadlines(taskName, taskDate)); //add task to list"},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in user\u0027s input of \u0027event\u0027 task to"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":"     * add task to current list of tasks."},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":"     * Then, it shows the user the added task for success of addition."},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName Name of the task parsed from user\u0027s input."},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskDate Date of the task parsed from user\u0027s input."},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks."},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":"    private static void addEvent(String taskName, String taskDate, TaskList tasks) {"},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new Events(taskName, taskDate)); //add task to list"},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":123,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":124,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":125,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":127,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"KimIdeas8"},"content":"     * Remove the task from the current list using the index."},{"lineNumber":129,"author":{"gitId":"KimIdeas8"},"content":"     * Finds task in current list using index parsed from the \u0027delete\u0027 command"},{"lineNumber":130,"author":{"gitId":"KimIdeas8"},"content":"     * and show user the deleted task for success of deletion."},{"lineNumber":131,"author":{"gitId":"KimIdeas8"},"content":"     * \u003cp\u003e"},{"lineNumber":132,"author":{"gitId":"KimIdeas8"},"content":"     * If user inputs an \u0027out of range\u0027 index, tells user to input index that is within current list."},{"lineNumber":133,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"KimIdeas8"},"content":"     * @param index derived from taskNumber, tells position of task in current list."},{"lineNumber":135,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks."},{"lineNumber":136,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IndexOutOfBoundsException if user inputs an \u0027out of range\u0027 taskNumber."},{"lineNumber":137,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"KimIdeas8"},"content":"    private static void deleteAndPrintTask(int index, TaskList tasks) {"},{"lineNumber":139,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"KimIdeas8"},"content":"            Tasks deletedTask \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":141,"author":{"gitId":"KimIdeas8"},"content":"            tasks.remove(index); //remove task"},{"lineNumber":142,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":143,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":144,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + deletedTask.convertToTaskOutputString());"},{"lineNumber":145,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":146,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":147,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":148,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":149,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":152,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"KimIdeas8"},"content":"     * Mark the task (as \u0027done\u0027) from the current list using the index."},{"lineNumber":154,"author":{"gitId":"KimIdeas8"},"content":"     * Finds task in current list using index parsed from the \u0027done\u0027 command"},{"lineNumber":155,"author":{"gitId":"KimIdeas8"},"content":"     * and show user the marked task for success of marking task."},{"lineNumber":156,"author":{"gitId":"KimIdeas8"},"content":"     * \u003cp\u003e"},{"lineNumber":157,"author":{"gitId":"KimIdeas8"},"content":"     * If user inputs an \u0027out of range\u0027 index, tells user to input index that is within current list."},{"lineNumber":158,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":159,"author":{"gitId":"KimIdeas8"},"content":"     * @param index derived from taskNumber, tells position of task in current list."},{"lineNumber":160,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks."},{"lineNumber":161,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IndexOutOfBoundsException if user inputs an \u0027out of range\u0027 taskNumber."},{"lineNumber":162,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"KimIdeas8"},"content":"    private static void markAndPrintsTaskAsDone(int index, TaskList tasks) {"},{"lineNumber":164,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":165,"author":{"gitId":"KimIdeas8"},"content":"            Tasks taskDone \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":166,"author":{"gitId":"KimIdeas8"},"content":"            taskDone.markAsDone(); //mark task given by current command as \u0027done\u0027"},{"lineNumber":167,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":168,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":169,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + taskDone.convertToTaskOutputString());"},{"lineNumber":170,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":171,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":172,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":173,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":174,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":177,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"KimIdeas8"},"content":"     * Prints out the taskType, status, taskName and taskDate of the task added by the user."},{"lineNumber":179,"author":{"gitId":"KimIdeas8"},"content":"     * It also prints the current total number of tasks in the user\u0027s list."},{"lineNumber":180,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks."},{"lineNumber":182,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"KimIdeas8"},"content":"    private static void printAddedTask(TaskList tasks) {"},{"lineNumber":184,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"  \" + tasks.get(tasksCount-1).convertToTaskOutputString()); //prints task added"},{"lineNumber":185,"author":{"gitId":"KimIdeas8"},"content":"        //prints current total number of tasks:"},{"lineNumber":186,"author":{"gitId":"KimIdeas8"},"content":"        System.out.print(\"Now you have \" + tasksCount + \" task\");"},{"lineNumber":187,"author":{"gitId":"KimIdeas8"},"content":"        if (tasksCount \u003e 1) {"},{"lineNumber":188,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"s\");"},{"lineNumber":189,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\" in the list.\");"},{"lineNumber":191,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":193,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"KimIdeas8"},"content":"     * Prints all tasks in the current list."},{"lineNumber":195,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"KimIdeas8"},"content":"     * @param tasks Most current list storing all tasks."},{"lineNumber":197,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"KimIdeas8"},"content":"    private static void printsList(TaskList tasks) {"},{"lineNumber":199,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":200,"author":{"gitId":"KimIdeas8"},"content":"        for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":201,"author":{"gitId":"KimIdeas8"},"content":"            int taskNumber \u003d i+1; //stores the current numbering of the bulleted tasks"},{"lineNumber":202,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(taskNumber + \".\" + tasks.get(i).convertToTaskOutputString());"},{"lineNumber":203,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":206,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"KimIdeas8"},"content":"     * Searches through the latest List called tasks"},{"lineNumber":208,"author":{"gitId":"KimIdeas8"},"content":"     * to add all tasks with: taskName or taskDate containing the keyword"},{"lineNumber":209,"author":{"gitId":"KimIdeas8"},"content":"     * to a list called matchingTasks"},{"lineNumber":210,"author":{"gitId":"KimIdeas8"},"content":"     * Outputs \u0027no tasks found\u0027 or all matchingTasks"},{"lineNumber":211,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"KimIdeas8"},"content":"    private static void findTasksContainingKeyWord(String keyword, TaskList tasks) {"},{"lineNumber":213,"author":{"gitId":"KimIdeas8"},"content":"        int matchingTasksCount \u003d 0;"},{"lineNumber":214,"author":{"gitId":"KimIdeas8"},"content":"        //Adds all tasks containing \u0027keyword\u0027 to a list:"},{"lineNumber":215,"author":{"gitId":"KimIdeas8"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":216,"author":{"gitId":"KimIdeas8"},"content":"        for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":217,"author":{"gitId":"KimIdeas8"},"content":"            int taskNumber \u003d i+1; //stores the current numbering of the bulleted tasks"},{"lineNumber":218,"author":{"gitId":"KimIdeas8"},"content":"            if (tasks.get(i).description.contains(keyword) || tasks.get(i).date.contains(keyword)) {"},{"lineNumber":219,"author":{"gitId":"KimIdeas8"},"content":"                matchingTasks.add(taskNumber + \".\" + tasks.get(i).convertToTaskOutputString());"},{"lineNumber":220,"author":{"gitId":"KimIdeas8"},"content":"                matchingTasksCount++;"},{"lineNumber":221,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":224,"author":{"gitId":"KimIdeas8"},"content":"        //Output:"},{"lineNumber":225,"author":{"gitId":"KimIdeas8"},"content":"        if (matchingTasksCount \u003d\u003d 0) {"},{"lineNumber":226,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"There are no matching tasks that contains the word.\");"},{"lineNumber":227,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":229,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Here are the matching tasks in the list:\");"},{"lineNumber":230,"author":{"gitId":"KimIdeas8"},"content":"            for (String currentTask: matchingTasks) {"},{"lineNumber":231,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(currentTask);"},{"lineNumber":232,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":233,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":236,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":236}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.EmptyTaskDateException;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskDateException;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskNameException;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.TaskDateFormatException;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.KeywordFormatException;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":" * Main Duke Class: This class controls the flow for the entire program which manages a User\u0027s tasks."},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":" * When \u0027bye\u0027 command is executed, entire program stops immediately"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":" * and program exits with status code -1."},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    private static Storage storage;"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    private static TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    private static Ui ui;"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in a filepath given by User"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"     * and load the older list from the \u003ccode\u003eStorage\u003c/code\u003e object containing the filepath"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"     * into an empty list which stores the User\u0027s tasks"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"     * @param filePath filepath given by User storing all the User\u0027s tasks"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    public Duke(String filePath) {"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"        ui \u003d new Ui();"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList(storage.loadPrevListIntoNewList());"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"            ui.showNullPointerError();"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"            ui.showCreateFileError();"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"     * Gives instructions for program to interact with User,"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"     * store tasks given by User or execute other (valid) User\u0027s command."},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"    public void run() {"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        ui.saysHiToUser();"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        boolean isExit \u003d false;"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"        while (!isExit) {"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"                storage.overwriteDukeListFile(); //update DukeList (stores all latest tasks)"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"                String fullCommand \u003d ui.readCommand(); //take in User\u0027s Command"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"                ui.showLine(); // start of current Response to User"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"                Parser.parse(fullCommand); //parse User\u0027s Command"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"                isExit \u003d Command.execute(tasks, ui); //Check if command \u003d \u0027bye\u0027 \u0026 Execute the current command"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NoTaskNameException e) {"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"â˜¹ OOPS!!! The description of a task cannot be empty.\");"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"            } catch (TaskDateFormatException e) {"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add date in the format of \\\"Task /by Date\\\" for Deadlines or \\\"Task /at Date\\\" for Events.\"); //wrong date format"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NoTaskDateException e) {"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add a date to the task description. :))\"); //missing date"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"            } catch (EmptyTaskDateException e) {"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add a date to the task description. :))\"); //empty date"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input in the format of \\\u0027done taskNumber OR delete taskNumber\\\u0027\"); //wrong format"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"            } catch (KeywordFormatException e) {"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input in the format of: find \\\u0027keyword\\\u0027\"); //wrong format"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"            } finally {"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"                ui.showLine(); //end of current Response to User"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"     * Loads older task data from the list in the given filepath"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"     * Then, proceeds to run the entire program."},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"     * Otherwise, creates a file (embedded in the created directory) from filepath and uses the file for storage of tasks."},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"     * @param args"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"    public static void main(String[] args) {"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"        new Duke(\"data/dukeList.txt\").run();"},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":93}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"public class DukeException extends IOException {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"}"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":""}],"authorContributionMap":{"KimIdeas8":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.EmptyTaskDateException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskDateException;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskNameException;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.TaskDateFormatException;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.KeywordFormatException;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":" * Command Class: Contains methods for parsing and making sense of the User\u0027s command."},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    public static String commandWord;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskInputString; //contains taskName and taskDate (from user\u0027s input)"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskName;"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskDate;"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public static int index; //contains index of task to be \u0027marked as done\u0027 OR \u0027deleted\u0027"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    public static String keyword; //tasks with \u0027keyword\u0027 are to be found"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public Parser() {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"     * Parse each command differently based on the format of the command."},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"     * For all commands, parses into commandWord to help identify the type of command during execution."},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"     * Parses commands into taskName, taskDate or index according to the format of the command"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"     * for execution."},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input of user."},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskNameException if user does not input the taskName."},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskDateException if user does not input the taskDate."},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"     * @throws EmptyTaskDateException if user does not input the taskDate."},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"     * @throws TaskDateFormatException if user input the portion of command after taskName incorrectly."},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NumberFormatException if user does not input a TaskNumber(index)."},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"    public static void parse (String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException, NumberFormatException, KeywordFormatException {"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"        if (input.startsWith(\"todo\")) {"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"todo\";"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"            parseAddToDoCommand(input);"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"        } else if (input.startsWith(\"deadline\")) {"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"deadline\";"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"            parseAddDeadlineCommand(input);"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        } else if (input.startsWith(\"event\")) {"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"event\";"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"            parseAddEventCommand(input);"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"delete\")) {"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"delete\";"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"            parseDeleteCommand(input);"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"done\")) {"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"done\";"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"            parseDoneCommand(input);"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"list\")) {"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"list\";"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"find\")) {"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"find\";"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"            parseFindCommand(input);"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"         else if (input.startsWith(\"bye\")) {"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"bye\";"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"random\";"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"        };"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string and splits into 2 parts, the \u0027todo\u0027 command \u0026 the taskName."},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made of taskType(\u0027todo\u0027) + taskName."},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskNameException if user does not input a description of the task."},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddToDoCommand (String input) throws NoTaskNameException {"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"        taskName \u003d taskInputString;"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string and splits into 3 parts, the \u0027deadline\u0027 command, the taskName \u0026 the taskDate."},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made of taskType(\u0027deadline\u0027) + taskName + taskDate."},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskNameException if user does not input the taskName."},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskDateException if user does not input the taskDate."},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"     * @throws EmptyTaskDateException if user does not input the taskDate."},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"     * @throws TaskDateFormatException if user input the portion of command after taskName incorrectly."},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddDeadlineCommand(String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException {"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"        splitTaskNameAndDate(taskInputString);"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string and splits into 3 parts, the \u0027event\u0027 command, the taskName \u0026 the taskDate."},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made of taskType(\u0027event\u0027) + taskName + taskDate."},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskNameException if user does not input the taskName."},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskDateException if user does not input the taskDate."},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"     * @throws EmptyTaskDateException if user does not input the taskDate."},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"     * @throws TaskDateFormatException if user input the portion of command after taskName incorrectly."},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddEventCommand(String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException {"},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"        splitTaskNameAndDate(taskInputString);"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string and splits into 2 parts, the \u0027delete\u0027 command \u0026 the taskNumber."},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"     * Index is derived from taskNumber, which tells the position of task in current list."},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made up of \u0027delete\u0027 + taskNumber."},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NumberFormatException if user does not input a TaskNumber(index)."},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseDeleteCommand(String input) throws NumberFormatException {"},{"lineNumber":124,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":125,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":126,"author":{"gitId":"KimIdeas8"},"content":"            throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":127,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"KimIdeas8"},"content":"        index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":129,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":131,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string and splits into 2 parts, the \u0027done\u0027 command \u0026 the taskNumber."},{"lineNumber":133,"author":{"gitId":"KimIdeas8"},"content":"     * Index is derived from taskNumber, which tells the position of task in current list."},{"lineNumber":134,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made up of \u0027done\u0027 + taskNumber."},{"lineNumber":136,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NumberFormatException if user does not input a TaskNumber(index)."},{"lineNumber":137,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseDoneCommand(String input) throws NumberFormatException {"},{"lineNumber":139,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":140,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":141,"author":{"gitId":"KimIdeas8"},"content":"            throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":142,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"KimIdeas8"},"content":"        index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":144,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":146,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseFindCommand(String input) throws KeywordFormatException {"},{"lineNumber":147,"author":{"gitId":"KimIdeas8"},"content":"        //format: find + keyword"},{"lineNumber":148,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndKeyword\u003d input.split(\" \");"},{"lineNumber":149,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndKeyword.length \u003c 2) {"},{"lineNumber":150,"author":{"gitId":"KimIdeas8"},"content":"            throw new KeywordFormatException(); //throws KeywordFormatException() when user does not input a keyword after \u0027find\u0027 command"},{"lineNumber":151,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"KimIdeas8"},"content":"        keyword \u003d commandAndKeyword[1]; //tasks with \u0027keyword\u0027 are to be found"},{"lineNumber":153,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":155,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"KimIdeas8"},"content":"     * Complement all \u0027todo\u0027,\u0027deadline\u0027 and \u0027event\u0027 commands."},{"lineNumber":157,"author":{"gitId":"KimIdeas8"},"content":"     * Removes taskType from user\u0027s entire input string"},{"lineNumber":158,"author":{"gitId":"KimIdeas8"},"content":"     * and stores remaining string (with taskName and taskDate combined) in static variable taskInputString."},{"lineNumber":159,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"KimIdeas8"},"content":"     * @param input entire input string of the user, made of taskType + taskName + taskDate."},{"lineNumber":161,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskNameException if user does not input the taskName."},{"lineNumber":162,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"KimIdeas8"},"content":"    private static void separateTypeOfTaskAndTaskInputString(String input) throws NoTaskNameException {"},{"lineNumber":164,"author":{"gitId":"KimIdeas8"},"content":"        //find position between taskType and rest of task description:"},{"lineNumber":165,"author":{"gitId":"KimIdeas8"},"content":"        int taskInputStringPosition \u003d input.indexOf(\" \") + 1;"},{"lineNumber":166,"author":{"gitId":"KimIdeas8"},"content":"        taskInputString \u003d input.substring(taskInputStringPosition);"},{"lineNumber":167,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":168,"author":{"gitId":"KimIdeas8"},"content":"        boolean hasNoTaskInputString \u003d false;"},{"lineNumber":169,"author":{"gitId":"KimIdeas8"},"content":"        if(taskInputStringPosition \u003d\u003d 0) {"},{"lineNumber":170,"author":{"gitId":"KimIdeas8"},"content":"            hasNoTaskInputString \u003d true; //since input.indexOf(\" \") returns -1 if no TaskName"},{"lineNumber":171,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":173,"author":{"gitId":"KimIdeas8"},"content":"        if (hasNoTaskInputString || taskInputString.isBlank() || taskInputString.startsWith(\"/\")) {"},{"lineNumber":174,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskNameException();"},{"lineNumber":175,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":178,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in the remaining \u0027taskInputString\u0027 of the user\u0027s input"},{"lineNumber":180,"author":{"gitId":"KimIdeas8"},"content":"     * and splits it into two parts, the taskName and taskDate."},{"lineNumber":181,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"KimIdeas8"},"content":"     * taskDate is derived from taskDateString which includes the complement word \u0027at\u0027 or \u0027by\u0027."},{"lineNumber":183,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskInput - essentially taskInputString, which does not include taskType."},{"lineNumber":185,"author":{"gitId":"KimIdeas8"},"content":"     * @throws NoTaskDateException if user does not input the taskDate."},{"lineNumber":186,"author":{"gitId":"KimIdeas8"},"content":"     * @throws EmptyTaskDateException if user does not input the taskDate."},{"lineNumber":187,"author":{"gitId":"KimIdeas8"},"content":"     * @throws TaskDateFormatException if user input the portion of command after taskName incorrectly."},{"lineNumber":188,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"KimIdeas8"},"content":"    private static void splitTaskNameAndDate(String taskInput) throws NoTaskDateException, EmptyTaskDateException, TaskDateFormatException {"},{"lineNumber":190,"author":{"gitId":"KimIdeas8"},"content":"        int beforeDatePosition \u003d taskInput.indexOf(\"/\");"},{"lineNumber":191,"author":{"gitId":"KimIdeas8"},"content":"        if (beforeDatePosition \u003d\u003d -1) {"},{"lineNumber":192,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if no \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":193,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"KimIdeas8"},"content":"        taskName \u003d taskInput.substring(0, beforeDatePosition);"},{"lineNumber":195,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":196,"author":{"gitId":"KimIdeas8"},"content":"        int dateStringPosition \u003d beforeDatePosition + 1;"},{"lineNumber":197,"author":{"gitId":"KimIdeas8"},"content":"        String taskDateString \u003d taskInput.substring(dateStringPosition);"},{"lineNumber":198,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":199,"author":{"gitId":"KimIdeas8"},"content":"        String[] taskDateStringWord \u003d taskDateString.split(\" \");"},{"lineNumber":200,"author":{"gitId":"KimIdeas8"},"content":"        if (!(taskDateStringWord[0].equals(\"at\") || taskDateStringWord[0].equals(\"by\"))) {"},{"lineNumber":201,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if incorrect complement word in non-empty string after \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":202,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":204,"author":{"gitId":"KimIdeas8"},"content":"        int datePosition \u003d taskDateString.indexOf(\" \") + 1;"},{"lineNumber":205,"author":{"gitId":"KimIdeas8"},"content":"        if (datePosition \u003d\u003d 0) {"},{"lineNumber":206,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskDateException(); //if no date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":207,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"KimIdeas8"},"content":"        taskDate \u003d taskDateString.substring(datePosition);"},{"lineNumber":209,"author":{"gitId":"KimIdeas8"},"content":"        if (taskDate.isBlank()) {"},{"lineNumber":210,"author":{"gitId":"KimIdeas8"},"content":"            throw new EmptyTaskDateException(); //if empty date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":211,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":214,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":214}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Deadlines;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Events;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.ToDos;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"import java.io.PrintWriter;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"import static duke.TaskList.tasks;"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":" * \u003ccode\u003eStorage\u003c/code\u003e object represents a file (embedded in directory) in the filepath given by the User."},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":" * Storage objects are associated with methods that handles the saving into and loading of tasks from storage object."},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e updatedTasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    public static String storagePath;"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"    public static int tasksCount;"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    public Storage(String filepath) {"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"        this.storagePath \u003d filepath;"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"        this.tasksCount \u003d 0;"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"    //Methods to Save \u0027DukeList.txt\u0027:"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"     * If file with given filepath (by user) exists, it loads older data from that file into the \u0027tasks\u0027 list."},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"     * Else, creates a new file (in a new directory) with the given filepath."},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"     * In both cases, the file which exists or may have been created"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"     * is used to store the tasks, including older tasks."},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IOException if the creation of new non-existent file was not successful."},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e loadPrevListIntoNewList() throws IOException {"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"            Scanner s \u003d new Scanner(new File(storagePath)); // create a Scanner using the File as the source"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"            // add one todo, deadline OR event task"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"            // based on current entry:"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"            while (s.hasNext()) {"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"                String[] prevListEntryWord \u003d s.nextLine().split(\"/\");"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"                switch (prevListEntryWord[0]) {"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"                    case \"T\":"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new ToDos(prevListEntryWord[2]));"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"                    case \"D\":"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new Deadlines(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"                    case \"E\":"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new Events(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"                    default:"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"                if (prevListEntryWord[1].equals(\"true\")) {"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"                    updatedTasksList.get(tasksCount).markAsDone(); //if is a \u0027false\u0027, task is auto-marked as not done"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"                tasksCount++; //increment taskCount for added task"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"            //Split given filepath by \"/\":"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"            String[] storagePathArray \u003d storagePath.split(\"/\");"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"            //For the first time, create a new file for the user:"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"            File dataDirectory \u003d new File(storagePathArray[0]);"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"            dataDirectory.mkdir();"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"            File dukeFile \u003d new File(storagePathArray[0], storagePathArray[1]); //File(parent, child)"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"            dukeFile.createNewFile();"},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"        } finally {"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":"            return updatedTasksList;"},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"     * Clears the file in the given filepath and"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"     * re-assigns all the tasks in the updated \u0027tasks\u0027 list to the given filepath."},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"    public static void overwriteDukeListFile() {"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"        //write to file:"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"            PrintWriter writer \u003d new PrintWriter(storagePath);"},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"            writer.print(\"\");"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"            writer.close();"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"            for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"                Tasks currentTask \u003d tasks.get(i);"},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(currentTask.typeOfTask + \"/\" +"},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.isDone + \"/\" +"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.description);"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"                if (currentTask.typeOfTask.equals(\"D\") || currentTask.typeOfTask.equals(\"E\")) {"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":"                    appendToDukeListFile(\"/\" + currentTask.date);"},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(System.lineSeparator());"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Write: File not found\");"},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"Unable to write to file\");"},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"     * For complementing overwriteDukeListFile() function, it adds to the file in the given filepath."},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":"     * @param textToAdd text that is formatted and contains information about a task in the task list"},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IOException"},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":"    public static void appendToDukeListFile(String textToAdd) throws IOException {"},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":"        FileWriter fw \u003d new FileWriter(storagePath, true);"},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"        fw.write(textToAdd);"},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"        fw.close();"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":122}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Storage.tasksCount;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":" * \u003ccode\u003eTaskList\u003c/code\u003e object represents the list to store all tasks."},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        this(new ArrayList\u003c\u003e());"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    "},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    public TaskList(ArrayList\u003cTasks\u003e prevTaskList) {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        tasks \u003d new ArrayList\u003c\u003e(); //for storing (all types of) tasks"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        if (prevTaskList.size() \u003e 0){"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"            for (Tasks prevTask:prevTaskList) {"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"                tasks.add(prevTask);"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"     * Adds new tasks into current \u0027tasks\u0027 list using the index."},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"     * It also increments the overall variable tasksCount."},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"     * @param currentTask \u003ccode\u003eTaskList\u003c/code\u003e object given by user to be added to the current list."},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"    public static void add(Tasks currentTask) {"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(currentTask);"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"        tasksCount++;"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"     * Removes existing tasks from the current \u0027tasks\u0027 list using the index."},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"     * It also decrements the overall variable tasksCount."},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"     * @param index position of the task in the \u0027tasks\u0027 list."},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"    public static void remove(int index) {"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"        tasks.remove(index);"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"        tasksCount--;"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"     * Returns task with given \u0027index\u0027 position in the \u0027tasks\u0027 list."},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"     * Complements methods for \u0027delete\u0027 and \u0027done\u0027 commands."},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"     * @return task with \u0027index\u0027 position in the TaskList"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"    public static Tasks get(int index) {"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"        return tasks.get(index);"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":58}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":" * \u003ccode\u003eUi\u003c/code\u003e object associated with methods that deals with interactions from User."},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public static String line \u003d \"____________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public static Scanner in \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    //deal with new user input:"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines to welcome the user."},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysHiToUser() {"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"        //Greeting:"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines when user exits."},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysByeToUser() {"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        //exits with \"bye\":"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\"); //exits"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"     * Prints a line to mark the start and end of the current response to user."},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"    public static void showLine() {"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in next line of the user command and stores it to \u0027input\u0027."},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"     * @return input"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"    public static String readCommand() {"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        String input \u003d in.nextLine(); //take in User\u0027s current input"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        return input;"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"     * Shows error when creating new file with given filepath."},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"     * Associated with IOException thrown in Storage and caught in Duke."},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"    public static void showCreateFileError() {"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Error creating new file. :((\");"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"     * Shows error when there is nothing returned from the storage.load() method."},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"     * Associated with NullPointerException thrown in Storage and caught in Duke."},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"    public void showNullPointerError() {"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Null Pointer Error :((\");"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"  "},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":69}},{"path":"src/main/java/duke/taskexceptions/EmptyTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class EmptyTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/KeywordFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"public class KeywordFormatException extends IOException{"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":7}},{"path":"src/main/java/duke/taskexceptions/NoTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/NoTaskNameException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskNameException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/TaskDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class TaskDateFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/tasksmanager/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Deadlines extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Deadlines(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"D\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString()  + \"(\" + \"by: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Events extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Events(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString() + \"(\" + \"at: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":" * Tasks Class: Parent of subsequent subtask classes"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":" * for storing the typeOfTask, status of Task, taskName, Date."},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":" */"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"public class Tasks {"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    public String description;"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public boolean isDone;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String typeOfTask;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    public String date;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    public Tasks(String description) {"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    public void markAsDone() {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d true;"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or blank space"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    public String getDescription() {"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"        return this.description;"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"    //common output for \u0027todo\u0027, \u0027deadlines\u0027, \u0027events\u0027 + \u0027tasks\u0027 + \u0027done\u0027 command:"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":36}},{"path":"src/main/java/duke/tasksmanager/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class ToDos extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public ToDos(String description) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString();"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":19}},{"path":"text-ui-test/data/dukeList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":""}],"authorContributionMap":{"KimIdeas8":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"list"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"bye"}],"authorContributionMap":{"KimIdeas8":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"KimIdeas8":2,"-":19}}]
