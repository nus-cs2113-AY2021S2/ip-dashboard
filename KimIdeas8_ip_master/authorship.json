[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"KimIdeas8":2,"-":24}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.EmptyTaskDateException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskDateException;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskNameException;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.TaskDateFormatException;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.*;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"import java.io.PrintWriter;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    public static String line \u003d \"____________________________________________________________\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e tasks \u003d new ArrayList\u003c\u003e(); //for storing (all types of) tasks"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"    public static int taskCount \u003d 0; //for counting tasks"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskInputString; //contains taskName and taskDate (from user\u0027s input)"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskName;"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskDate;"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    public static File dukePrevInputList \u003d new File(\"data/dukeList.txt\");"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    // creates a File object to represent a file duke.txt"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"    // that exists in the data directory relative to the current working directory"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines to welcome the user:"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysHiToUser() {"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"        //Greeting:"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines when user exits:"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysByeToUser() {"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"        //exits with \"bye\":"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\"); //exits"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"     * Adds todo type task to \u0027tasks\u0027 array"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added todo task"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - user\u0027s input string"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"    public static void addToDo(String input) {"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"            separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"            taskName \u003d taskInputString;"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"            tasks.add(new ToDos(taskName)); //add task to list"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"            printAddedTask();"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NoTaskNameException e) {"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"     * Adds deadline type task to \u0027tasks\u0027 array"},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added deadline task"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - user\u0027s input string"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"    public static void addDeadline(String input) {"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"            separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"            splitTaskNameAndDate(taskInputString);"},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"            tasks.add(new Deadlines(taskName, taskDate)); //add task to list"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"            printAddedTask();"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NoTaskNameException e) {"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a Deadline task cannot be empty.\");"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"        } catch (TaskDateFormatException e) {"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add date in the format of \\\"Task /by: Date\\\".\"); //wrong date format"},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NoTaskDateException e) {"},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add a date to the Deadline description. :))\"); //missing date"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"        } catch (EmptyTaskDateException e) {"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add a date to the Deadline task description. :))\"); //empty date"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"     * Adds event type task to \u0027tasks\u0027 array"},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added event task"},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - user\u0027s input string"},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":"    public static void addEvent(String input) {"},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"            separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"            splitTaskNameAndDate(taskInputString);"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":"            tasks.add(new Events(taskName, taskDate)); //add task to list"},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":"            printAddedTask();"},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NoTaskNameException e) {"},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"â˜¹ OOPS!!! The description of a Event task cannot be empty.\");"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":"        } catch (TaskDateFormatException e) {"},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add date in the format of \\\"Task /at: Date\\\".\"); //wrong date format"},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NoTaskDateException e) {"},{"lineNumber":123,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add a date to the Event description. :))\"); //missing date"},{"lineNumber":124,"author":{"gitId":"KimIdeas8"},"content":"        } catch (EmptyTaskDateException e) {"},{"lineNumber":125,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please add a date to the Event task description. :))\"); //empty date"},{"lineNumber":126,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":129,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":131,"author":{"gitId":"KimIdeas8"},"content":"     * Splits into 2 parts, the command \u0027delete\u0027 \u0026 TaskNumber"},{"lineNumber":132,"author":{"gitId":"KimIdeas8"},"content":"     * NumberFormatException() - when user does not input a TaskNumber"},{"lineNumber":133,"author":{"gitId":"KimIdeas8"},"content":"     * Obtains Index of Task to be deleted from it\u0027s taskNumber"},{"lineNumber":134,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"KimIdeas8"},"content":"     * IndexOutOfBoundsException() - when user inputs an \u0027out of range\u0027 taskNumber"},{"lineNumber":136,"author":{"gitId":"KimIdeas8"},"content":"     * Removes Task from \u0027tasks\u0027 array"},{"lineNumber":137,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"KimIdeas8"},"content":"     * Prints deleted task"},{"lineNumber":139,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - user\u0027s input string - format: \u0027delete taskNumber\u0027"},{"lineNumber":141,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"KimIdeas8"},"content":"    private static void deleteAndPrintTask(String input) {"},{"lineNumber":143,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"KimIdeas8"},"content":"            String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":145,"author":{"gitId":"KimIdeas8"},"content":"            if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":146,"author":{"gitId":"KimIdeas8"},"content":"                throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":147,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"KimIdeas8"},"content":"            int index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":149,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":150,"author":{"gitId":"KimIdeas8"},"content":"            Tasks deletedTask \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":151,"author":{"gitId":"KimIdeas8"},"content":"            tasks.remove(index); //remove task"},{"lineNumber":152,"author":{"gitId":"KimIdeas8"},"content":"            taskCount--;"},{"lineNumber":153,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":154,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":155,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + deletedTask.convertToTaskOutputString());"},{"lineNumber":156,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":157,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":158,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input in the format of \\\u0027delete taskNumber\\\u0027\"); //wrong format for TaskNumber"},{"lineNumber":159,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":160,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":161,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":162,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":165,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":167,"author":{"gitId":"KimIdeas8"},"content":"     * Splits into 2 parts, the command \u0027done\u0027 \u0026 TaskNumber"},{"lineNumber":168,"author":{"gitId":"KimIdeas8"},"content":"     * NumberFormatException() - when user does not input a TaskNumber"},{"lineNumber":169,"author":{"gitId":"KimIdeas8"},"content":"     * Obtains Index of Task to be deleted from it\u0027s taskNumber"},{"lineNumber":170,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"KimIdeas8"},"content":"     * IndexOutOfBoundsException() - when user inputs an \u0027out of range\u0027 taskNumber"},{"lineNumber":172,"author":{"gitId":"KimIdeas8"},"content":"     * Marks Task as done (in \u0027tasks\u0027 array)"},{"lineNumber":173,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"KimIdeas8"},"content":"     * Prints marked task"},{"lineNumber":175,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - user\u0027s input string - format: \u0027delete taskNumber\u0027"},{"lineNumber":177,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"KimIdeas8"},"content":"    public static void markAndPrintsTaskAsDone(String input) {"},{"lineNumber":179,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"KimIdeas8"},"content":"            String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":181,"author":{"gitId":"KimIdeas8"},"content":"            if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":182,"author":{"gitId":"KimIdeas8"},"content":"                throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":183,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"KimIdeas8"},"content":"            int index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":185,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":186,"author":{"gitId":"KimIdeas8"},"content":"            Tasks taskDone \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":187,"author":{"gitId":"KimIdeas8"},"content":"            taskDone.markAsDone(); //mark task given by current command as \u0027done\u0027"},{"lineNumber":188,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":189,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":190,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + taskDone.convertToTaskOutputString());"},{"lineNumber":191,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":192,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":193,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input in the format of \\\u0027done taskNumber\\\u0027\"); //wrong format for TaskNumber"},{"lineNumber":194,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":195,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":196,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":197,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":200,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"KimIdeas8"},"content":"     * Prints all tasks in current List \u0027tasks\u0027"},{"lineNumber":202,"author":{"gitId":"KimIdeas8"},"content":"     * */"},{"lineNumber":203,"author":{"gitId":"KimIdeas8"},"content":"    private static void printsList() {"},{"lineNumber":204,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":205,"author":{"gitId":"KimIdeas8"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":206,"author":{"gitId":"KimIdeas8"},"content":"            int taskNumber \u003d i+1; //stores the current numbering of the bulleted tasks"},{"lineNumber":207,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(taskNumber + \".\" + tasks.get(i).convertToTaskOutputString());"},{"lineNumber":208,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":211,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":212,"author":{"gitId":"KimIdeas8"},"content":"    //END OF METHODS USED IN MAIN FUNCTION"},{"lineNumber":213,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":214,"author":{"gitId":"KimIdeas8"},"content":"    //Methods used by the \u0027Main\u0027 methods above:"},{"lineNumber":215,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"KimIdeas8"},"content":"     * Removes taskType from user\u0027s entire input string"},{"lineNumber":217,"author":{"gitId":"KimIdeas8"},"content":"     * Stores remaining string (with taskName and taskDate combined) in static variable taskInputString"},{"lineNumber":218,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":219,"author":{"gitId":"KimIdeas8"},"content":"     * throws exception if user string does not contain proper taskName (taskName, taskDate etc.)"},{"lineNumber":220,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - entire input string of the user, made of taskType + taskName + taskDate"},{"lineNumber":221,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"KimIdeas8"},"content":"    public static void separateTypeOfTaskAndTaskInputString(String input) throws NoTaskNameException {"},{"lineNumber":223,"author":{"gitId":"KimIdeas8"},"content":"        //find position between taskType and rest of task description:"},{"lineNumber":224,"author":{"gitId":"KimIdeas8"},"content":"        int taskInputStringPosition \u003d input.indexOf(\" \") + 1;"},{"lineNumber":225,"author":{"gitId":"KimIdeas8"},"content":"        taskInputString \u003d input.substring(taskInputStringPosition);"},{"lineNumber":226,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":227,"author":{"gitId":"KimIdeas8"},"content":"        boolean hasNoTaskInputString \u003d false;"},{"lineNumber":228,"author":{"gitId":"KimIdeas8"},"content":"        if(taskInputStringPosition \u003d\u003d 0) {"},{"lineNumber":229,"author":{"gitId":"KimIdeas8"},"content":"            hasNoTaskInputString \u003d true; //since input.indexOf(\" \") returns -1 if no TaskName"},{"lineNumber":230,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":232,"author":{"gitId":"KimIdeas8"},"content":"        if (hasNoTaskInputString || taskInputString.isBlank() || taskInputString.startsWith(\"/\")) {"},{"lineNumber":233,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskNameException();"},{"lineNumber":234,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":237,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in the remaining \u0027taskInputString\u0027 of the user\u0027s input"},{"lineNumber":239,"author":{"gitId":"KimIdeas8"},"content":"     * Splits it into two parts, then stores into TaskName"},{"lineNumber":240,"author":{"gitId":"KimIdeas8"},"content":"     * and TaskDateString of the task"},{"lineNumber":241,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":242,"author":{"gitId":"KimIdeas8"},"content":"     * Splits TaskDateString into 2 parts, complement word \"by:\" or \"at:\" \u0026 taskDate (further split by \" \")"},{"lineNumber":243,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"KimIdeas8"},"content":"     * TaskDateFormatException() - TaskDateString is written in an incorrect format"},{"lineNumber":245,"author":{"gitId":"KimIdeas8"},"content":"     * NoTaskDateException() - no date after \u0027/at\u0027 or \u0027/by\u0027"},{"lineNumber":246,"author":{"gitId":"KimIdeas8"},"content":"     * EmptyTaskDateException() - empty date after \u0027/at\u0027 or \u0027/by\u0027"},{"lineNumber":247,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"KimIdeas8"},"content":"     * End Results: TaskName and TaskDate"},{"lineNumber":249,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskInput - essentially taskInputString, which does not include taskType"},{"lineNumber":250,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"KimIdeas8"},"content":"    public static void splitTaskNameAndDate(String taskInput) throws TaskDateFormatException, NoTaskDateException, EmptyTaskDateException {"},{"lineNumber":252,"author":{"gitId":"KimIdeas8"},"content":"        int beforeDatePosition \u003d taskInput.indexOf(\"/\");"},{"lineNumber":253,"author":{"gitId":"KimIdeas8"},"content":"        if (beforeDatePosition \u003d\u003d -1) {"},{"lineNumber":254,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if no \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":255,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"KimIdeas8"},"content":"        taskName \u003d taskInput.substring(0, beforeDatePosition);"},{"lineNumber":257,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":258,"author":{"gitId":"KimIdeas8"},"content":"        int dateStringPosition \u003d beforeDatePosition + 1;"},{"lineNumber":259,"author":{"gitId":"KimIdeas8"},"content":"        String taskDateString \u003d taskInput.substring(dateStringPosition);"},{"lineNumber":260,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":261,"author":{"gitId":"KimIdeas8"},"content":"        String[] taskDateStringWord \u003d taskDateString.split(\" \");"},{"lineNumber":262,"author":{"gitId":"KimIdeas8"},"content":"        if (!(taskDateStringWord[0].equals(\"at\") || taskDateStringWord[0].equals(\"by\"))) {"},{"lineNumber":263,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if incorrect complement word in non-empty string after \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":264,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":266,"author":{"gitId":"KimIdeas8"},"content":"        int datePosition \u003d taskDateString.indexOf(\" \") + 1;"},{"lineNumber":267,"author":{"gitId":"KimIdeas8"},"content":"        if (datePosition \u003d\u003d 0) {"},{"lineNumber":268,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskDateException(); //if no date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":269,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":270,"author":{"gitId":"KimIdeas8"},"content":"        taskDate \u003d taskDateString.substring(datePosition);"},{"lineNumber":271,"author":{"gitId":"KimIdeas8"},"content":"        if (taskDate.isBlank()) {"},{"lineNumber":272,"author":{"gitId":"KimIdeas8"},"content":"            throw new EmptyTaskDateException(); //if empty date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":273,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":276,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":277,"author":{"gitId":"KimIdeas8"},"content":"     * Prints out the taskType, status, taskName and taskDate of the task added by the user"},{"lineNumber":278,"author":{"gitId":"KimIdeas8"},"content":"     * and prints the current total number of tasks in the user\u0027s list"},{"lineNumber":279,"author":{"gitId":"KimIdeas8"},"content":"     * Add to total taskCount (since new task is added)"},{"lineNumber":280,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":281,"author":{"gitId":"KimIdeas8"},"content":"    public static void printAddedTask() {"},{"lineNumber":282,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"  \" + tasks.get(taskCount).convertToTaskOutputString()); //prints task added"},{"lineNumber":283,"author":{"gitId":"KimIdeas8"},"content":"        taskCount++;"},{"lineNumber":284,"author":{"gitId":"KimIdeas8"},"content":"        //prints current total number of tasks (in the list of tasks):"},{"lineNumber":285,"author":{"gitId":"KimIdeas8"},"content":"        System.out.print(\"Now you have \" + taskCount + \" task\");"},{"lineNumber":286,"author":{"gitId":"KimIdeas8"},"content":"        if (taskCount \u003e 1) {"},{"lineNumber":287,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"s\");"},{"lineNumber":288,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":289,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\" in the list.\");"},{"lineNumber":290,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":292,"author":{"gitId":"KimIdeas8"},"content":"    //MAIN:"},{"lineNumber":293,"author":{"gitId":"KimIdeas8"},"content":"    public static void main(String[] args) {"},{"lineNumber":294,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":295,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":296,"author":{"gitId":"KimIdeas8"},"content":"            loadPrevListIntoNewList(); //load previous ArrayList from local hard disk"},{"lineNumber":297,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":298,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"IO exception :O\");"},{"lineNumber":299,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":300,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":301,"author":{"gitId":"KimIdeas8"},"content":"        saysHiToUser();"},{"lineNumber":302,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":303,"author":{"gitId":"KimIdeas8"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":304,"author":{"gitId":"KimIdeas8"},"content":"        String input \u003d in.nextLine(); //take in User\u0027s first input:"},{"lineNumber":305,"author":{"gitId":"KimIdeas8"},"content":"        //list, mark or add user\u0027s tasks (until user inputs \"bye\"):"},{"lineNumber":306,"author":{"gitId":"KimIdeas8"},"content":"        while (!input.equals(\"bye\")) {"},{"lineNumber":307,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":308,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(line); //start of current response to User"},{"lineNumber":309,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":310,"author":{"gitId":"KimIdeas8"},"content":"            //add and store task to list of tasks"},{"lineNumber":311,"author":{"gitId":"KimIdeas8"},"content":"            if (input.startsWith(\"todo\")) {"},{"lineNumber":312,"author":{"gitId":"KimIdeas8"},"content":"                addToDo(input);"},{"lineNumber":313,"author":{"gitId":"KimIdeas8"},"content":"            } else if (input.startsWith(\"deadline\")) {"},{"lineNumber":314,"author":{"gitId":"KimIdeas8"},"content":"                addDeadline(input);"},{"lineNumber":315,"author":{"gitId":"KimIdeas8"},"content":"            } else if (input.startsWith(\"event\")) {"},{"lineNumber":316,"author":{"gitId":"KimIdeas8"},"content":"                addEvent(input);"},{"lineNumber":317,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":318,"author":{"gitId":"KimIdeas8"},"content":"            //OR: remove task from list of tasks"},{"lineNumber":319,"author":{"gitId":"KimIdeas8"},"content":"            else if (input.startsWith(\"delete\")) {"},{"lineNumber":320,"author":{"gitId":"KimIdeas8"},"content":"                deleteAndPrintTask(input);"},{"lineNumber":321,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":322,"author":{"gitId":"KimIdeas8"},"content":"            //OR: mark current task as \u0027done\u0027 \u0026 outputs the taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":323,"author":{"gitId":"KimIdeas8"},"content":"            else if (input.startsWith(\"done\")) {"},{"lineNumber":324,"author":{"gitId":"KimIdeas8"},"content":"                markAndPrintsTaskAsDone(input);"},{"lineNumber":325,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":326,"author":{"gitId":"KimIdeas8"},"content":"            //OR: lists all the user\u0027s current tasks in the format of taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":327,"author":{"gitId":"KimIdeas8"},"content":"            else if (input.startsWith(\"list\")) {"},{"lineNumber":328,"author":{"gitId":"KimIdeas8"},"content":"                printsList();"},{"lineNumber":329,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":330,"author":{"gitId":"KimIdeas8"},"content":"            //OR: deal with invalid command"},{"lineNumber":331,"author":{"gitId":"KimIdeas8"},"content":"            else {"},{"lineNumber":332,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":333,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":334,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":335,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(line); //end of current response to User"},{"lineNumber":336,"author":{"gitId":"KimIdeas8"},"content":"            //takes in next input:"},{"lineNumber":337,"author":{"gitId":"KimIdeas8"},"content":"            input \u003d in.nextLine();"},{"lineNumber":338,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":339,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":340,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":341,"author":{"gitId":"KimIdeas8"},"content":"        overwriteDukeListFile();"},{"lineNumber":342,"author":{"gitId":"KimIdeas8"},"content":"        saysByeToUser();"},{"lineNumber":343,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":344,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":345,"author":{"gitId":"KimIdeas8"},"content":"    //Methods to Save \u0027DukeList.txt\u0027:"},{"lineNumber":346,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"KimIdeas8"},"content":"     * If file exists, loads older data from file into ArrayList \u0027tasks\u0027"},{"lineNumber":348,"author":{"gitId":"KimIdeas8"},"content":"     * Else, creates new file"},{"lineNumber":349,"author":{"gitId":"KimIdeas8"},"content":"     * In both cases, file used to store new data in this iteration of Duke Main"},{"lineNumber":350,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IOException"},{"lineNumber":351,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":352,"author":{"gitId":"KimIdeas8"},"content":"    public static void loadPrevListIntoNewList() throws IOException {"},{"lineNumber":353,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":354,"author":{"gitId":"KimIdeas8"},"content":"            Scanner s \u003d new Scanner(dukePrevInputList); // create a Scanner using the File as the source"},{"lineNumber":355,"author":{"gitId":"KimIdeas8"},"content":"            // add one todo, deadline OR event task"},{"lineNumber":356,"author":{"gitId":"KimIdeas8"},"content":"            // based on current entry:"},{"lineNumber":357,"author":{"gitId":"KimIdeas8"},"content":"            while (s.hasNext()) {"},{"lineNumber":358,"author":{"gitId":"KimIdeas8"},"content":"                String[] prevListEntryWord \u003d s.nextLine().split(\"/\");"},{"lineNumber":359,"author":{"gitId":"KimIdeas8"},"content":"                switch (prevListEntryWord[0]) {"},{"lineNumber":360,"author":{"gitId":"KimIdeas8"},"content":"                case \"T\":"},{"lineNumber":361,"author":{"gitId":"KimIdeas8"},"content":"                    tasks.add(new ToDos(prevListEntryWord[2]));"},{"lineNumber":362,"author":{"gitId":"KimIdeas8"},"content":"                    break;"},{"lineNumber":363,"author":{"gitId":"KimIdeas8"},"content":"                case \"D\":"},{"lineNumber":364,"author":{"gitId":"KimIdeas8"},"content":"                    tasks.add(new Deadlines(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":365,"author":{"gitId":"KimIdeas8"},"content":"                    break;"},{"lineNumber":366,"author":{"gitId":"KimIdeas8"},"content":"                case \"E\":"},{"lineNumber":367,"author":{"gitId":"KimIdeas8"},"content":"                    tasks.add(new Events(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":368,"author":{"gitId":"KimIdeas8"},"content":"                    break;"},{"lineNumber":369,"author":{"gitId":"KimIdeas8"},"content":"                default:"},{"lineNumber":370,"author":{"gitId":"KimIdeas8"},"content":"                    break;"},{"lineNumber":371,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":372,"author":{"gitId":"KimIdeas8"},"content":"                if (prevListEntryWord[1].equals(\"true\")) {"},{"lineNumber":373,"author":{"gitId":"KimIdeas8"},"content":"                    tasks.get(taskCount).markAsDone(); //if is a \u0027false\u0027, task is auto-marked as not done"},{"lineNumber":374,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":375,"author":{"gitId":"KimIdeas8"},"content":"                taskCount++; //increment taskCount for added task"},{"lineNumber":376,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":377,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":378,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":379,"author":{"gitId":"KimIdeas8"},"content":"            //For the first time, create a new file for the user:"},{"lineNumber":380,"author":{"gitId":"KimIdeas8"},"content":"            File dataDirectory \u003d new File(\"data\");"},{"lineNumber":381,"author":{"gitId":"KimIdeas8"},"content":"            dataDirectory.mkdir();"},{"lineNumber":382,"author":{"gitId":"KimIdeas8"},"content":"            File dukeFile \u003d new File(\"data\",\"dukeList.txt\");"},{"lineNumber":383,"author":{"gitId":"KimIdeas8"},"content":"            dukeFile.createNewFile();"},{"lineNumber":384,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":385,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":386,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":387,"author":{"gitId":"KimIdeas8"},"content":"    public static void overwriteDukeListFile() {"},{"lineNumber":388,"author":{"gitId":"KimIdeas8"},"content":"        //write to file:"},{"lineNumber":389,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":390,"author":{"gitId":"KimIdeas8"},"content":"            PrintWriter writer \u003d new PrintWriter(\"data/dukeList.txt\");"},{"lineNumber":391,"author":{"gitId":"KimIdeas8"},"content":"            writer.print(\"\");"},{"lineNumber":392,"author":{"gitId":"KimIdeas8"},"content":"            writer.close();"},{"lineNumber":393,"author":{"gitId":"KimIdeas8"},"content":"            for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":394,"author":{"gitId":"KimIdeas8"},"content":"                Tasks currentTask \u003d tasks.get(i);"},{"lineNumber":395,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(currentTask.typeOfTask + \"/\" +"},{"lineNumber":396,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.isDone + \"/\" +"},{"lineNumber":397,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.description);"},{"lineNumber":398,"author":{"gitId":"KimIdeas8"},"content":"                if (currentTask.typeOfTask.equals(\"D\") || currentTask.typeOfTask.equals(\"E\")) {"},{"lineNumber":399,"author":{"gitId":"KimIdeas8"},"content":"                    appendToDukeListFile(\"/\" + currentTask.date);"},{"lineNumber":400,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":401,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(System.lineSeparator());"},{"lineNumber":402,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":403,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":404,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":405,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Write: File not found\");"},{"lineNumber":406,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":407,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"Unable to write to file\");"},{"lineNumber":408,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":409,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":410,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":411,"author":{"gitId":"KimIdeas8"},"content":"    public static void appendToDukeListFile(String textToAdd) throws IOException {"},{"lineNumber":412,"author":{"gitId":"KimIdeas8"},"content":"        FileWriter fw \u003d new FileWriter(\"data/dukeList.txt\", true);"},{"lineNumber":413,"author":{"gitId":"KimIdeas8"},"content":"        fw.write(textToAdd);"},{"lineNumber":414,"author":{"gitId":"KimIdeas8"},"content":"        fw.close();"},{"lineNumber":415,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":417,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":417}},{"path":"src/main/java/duke/taskexceptions/EmptyTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class EmptyTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/NoTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/NoTaskNameException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskNameException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/TaskDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class TaskDateFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/tasksmanager/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Deadlines extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Deadlines(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"D\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString()  + \"(\" + \"by: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Events extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Events(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString() + \"(\" + \"at: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public String description;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"    public boolean isDone;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"    public String typeOfTask;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    public String date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public Tasks(String description) {"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public void markAsDone() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    public String getStatusIcon() {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or blank space"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public String getDescription() {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        return this.description;"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    //common output for \u0027todo\u0027, \u0027deadlines\u0027, \u0027events\u0027 + \u0027tasks\u0027 + \u0027done\u0027 command:"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":32}},{"path":"src/main/java/duke/tasksmanager/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class ToDos extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public ToDos(String description) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString();"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"list"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"bye"}],"authorContributionMap":{"KimIdeas8":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"KimIdeas8":2,"-":19}}]
