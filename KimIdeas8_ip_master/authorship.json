[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update IntelliJ to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### On IntelliJ version 2020.3.1 (latest) and beyond"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into IntelliJ as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the output below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"KimIdeas8":2,"-":24}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Deadlines;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Events;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.ToDos;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.*;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Parser.commandWord;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Storage.tasksCount;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"public class Command {"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"    public static boolean isExit \u003d false;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    public Command() {"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    public static boolean execute (TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        if (commandWord.equals(\"todo\")) {"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"            addToDo(taskName, tasks);"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"        } else if (commandWord.equals(\"deadline\")) {"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"            addDeadline(taskName, taskDate, tasks);"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"        } else if (commandWord.equals(\"event\")) {"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"            addEvent(taskName, taskDate, tasks);"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"        //OR: remove task from list of tasks"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"delete\")) {"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"            deleteAndPrintTask(index, tasks);"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"        //OR: mark current task as \u0027done\u0027 \u0026 outputs the taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"done\")) {"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"            markAndPrintsTaskAsDone(index, tasks);"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"        //OR: lists all the user\u0027s current tasks in the format of taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"list\")) {"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"            printsList(tasks);"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"find\")) {"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"            findTasksContainingKeyWord(keyword, tasks);"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"        else if (commandWord.equals(\"bye\")) {"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"            ui.saysByeToUser();"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"            isExit \u003d true;"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        //OR: deal with invalid command"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"        return isExit;"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"     * Adds todo type task to \u0027tasks\u0027 array"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added todo task"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName - user\u0027s input for Name"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"    public static void addToDo(String taskName, TaskList tasks) {"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new ToDos(taskName)); //add task to list"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"     * Adds deadline type task to \u0027tasks\u0027 array"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added deadline task"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName,taskDate - user\u0027s input"},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":"    private static void addDeadline(String taskName, String taskDate, TaskList tasks) {"},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new Deadlines(taskName, taskDate)); //add task to list"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"     * Adds event type task to \u0027tasks\u0027 array"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"     * Prints added event task"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskName,taskDate - user\u0027s input"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"    private static void addEvent(String taskName, String taskDate, TaskList tasks) {"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(new Events(taskName, taskDate)); //add task to list"},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"        printAddedTask(tasks);"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"     * Splits into 2 parts, the command \u0027delete\u0027 \u0026 TaskNumber"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"     * NumberFormatException() - when user does not input a TaskNumber"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"     * Obtains Index of Task to be deleted from it\u0027s taskNumber"},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"     * IndexOutOfBoundsException() - when user inputs an \u0027out of range\u0027 taskNumber"},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"     * Removes Task from \u0027tasks\u0027 array"},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":"     * Prints deleted task"},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"     * @param index - user\u0027s input - format: \u0027delete taskNumber\u0027"},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":"    private static void deleteAndPrintTask(int index, TaskList tasks) {"},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":"            Tasks deletedTask \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":"            tasks.remove(index); //remove task"},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + deletedTask.convertToTaskOutputString());"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":123,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":124,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":127,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in User\u0027s input string"},{"lineNumber":129,"author":{"gitId":"KimIdeas8"},"content":"     * Splits into 2 parts, the command \u0027done\u0027 \u0026 TaskNumber"},{"lineNumber":130,"author":{"gitId":"KimIdeas8"},"content":"     * NumberFormatException() - when user does not input a TaskNumber"},{"lineNumber":131,"author":{"gitId":"KimIdeas8"},"content":"     * Obtains Index of Task to be deleted from it\u0027s taskNumber"},{"lineNumber":132,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"KimIdeas8"},"content":"     * IndexOutOfBoundsException() - when user inputs an \u0027out of range\u0027 taskNumber"},{"lineNumber":134,"author":{"gitId":"KimIdeas8"},"content":"     * Marks Task as done (in \u0027tasks\u0027 array)"},{"lineNumber":135,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"KimIdeas8"},"content":"     * Prints marked task"},{"lineNumber":137,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"KimIdeas8"},"content":"     * @param index - user\u0027s input string - format: \u0027delete taskNumber\u0027"},{"lineNumber":139,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"KimIdeas8"},"content":"    public static void markAndPrintsTaskAsDone(int index, TaskList tasks) {"},{"lineNumber":141,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"KimIdeas8"},"content":"            Tasks taskDone \u003d tasks.get(index); //throws IndexOutOfBoundsException() if taskNumber out of bounds"},{"lineNumber":143,"author":{"gitId":"KimIdeas8"},"content":"            taskDone.markAsDone(); //mark task given by current command as \u0027done\u0027"},{"lineNumber":144,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":145,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":146,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\" \" + taskDone.convertToTaskOutputString());"},{"lineNumber":147,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":148,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":149,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":150,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":151,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":154,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"KimIdeas8"},"content":"     * Prints out the taskType, status, taskName and taskDate of the task added by the user"},{"lineNumber":156,"author":{"gitId":"KimIdeas8"},"content":"     * and prints the current total number of tasks in the user\u0027s list"},{"lineNumber":157,"author":{"gitId":"KimIdeas8"},"content":"     * Add to total taskCount (since new task is added)"},{"lineNumber":158,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"KimIdeas8"},"content":"    public static void printAddedTask(TaskList tasks) {"},{"lineNumber":160,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"  \" + tasks.get(tasksCount-1).convertToTaskOutputString()); //prints task added"},{"lineNumber":161,"author":{"gitId":"KimIdeas8"},"content":"        //prints current total number of tasks (in the list of tasks):don"},{"lineNumber":162,"author":{"gitId":"KimIdeas8"},"content":"        System.out.print(\"Now you have \" + tasksCount + \" task\");"},{"lineNumber":163,"author":{"gitId":"KimIdeas8"},"content":"        if (tasksCount \u003e 1) {"},{"lineNumber":164,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"s\");"},{"lineNumber":165,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\" in the list.\");"},{"lineNumber":167,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":169,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"KimIdeas8"},"content":"     * Prints all tasks in current List \u0027tasks\u0027"},{"lineNumber":171,"author":{"gitId":"KimIdeas8"},"content":"     * */"},{"lineNumber":172,"author":{"gitId":"KimIdeas8"},"content":"    private static void printsList(TaskList tasks) {"},{"lineNumber":173,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":174,"author":{"gitId":"KimIdeas8"},"content":"        for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":175,"author":{"gitId":"KimIdeas8"},"content":"            int taskNumber \u003d i+1; //stores the current numbering of the bulleted tasks"},{"lineNumber":176,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(taskNumber + \".\" + tasks.get(i).convertToTaskOutputString());"},{"lineNumber":177,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":180,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"KimIdeas8"},"content":"     * Searches through the latest List called tasks"},{"lineNumber":182,"author":{"gitId":"KimIdeas8"},"content":"     * to add all tasks with: taskName or taskDate containing the keyword"},{"lineNumber":183,"author":{"gitId":"KimIdeas8"},"content":"     * to a list called matchingTasks"},{"lineNumber":184,"author":{"gitId":"KimIdeas8"},"content":"     * Outputs \u0027no tasks found\u0027 or all matchingTasks"},{"lineNumber":185,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"KimIdeas8"},"content":"    private static void findTasksContainingKeyWord(String keyword, TaskList tasks) {"},{"lineNumber":187,"author":{"gitId":"KimIdeas8"},"content":"        int matchingTasksCount \u003d 0;"},{"lineNumber":188,"author":{"gitId":"KimIdeas8"},"content":"        //Adds all tasks containing \u0027keyword\u0027 to a list:"},{"lineNumber":189,"author":{"gitId":"KimIdeas8"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":190,"author":{"gitId":"KimIdeas8"},"content":"        for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":191,"author":{"gitId":"KimIdeas8"},"content":"            int taskNumber \u003d i+1; //stores the current numbering of the bulleted tasks"},{"lineNumber":192,"author":{"gitId":"KimIdeas8"},"content":"            if (tasks.get(i).description.contains(keyword) || tasks.get(i).date.contains(keyword)) {"},{"lineNumber":193,"author":{"gitId":"KimIdeas8"},"content":"                matchingTasks.add(taskNumber + \".\" + tasks.get(i).convertToTaskOutputString());"},{"lineNumber":194,"author":{"gitId":"KimIdeas8"},"content":"                matchingTasksCount++;"},{"lineNumber":195,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":198,"author":{"gitId":"KimIdeas8"},"content":"        //Output:"},{"lineNumber":199,"author":{"gitId":"KimIdeas8"},"content":"        if (matchingTasksCount \u003d\u003d 0) {"},{"lineNumber":200,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"There are no matching tasks that contains the word.\");"},{"lineNumber":201,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":203,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Here are the matching tasks in the list:\");"},{"lineNumber":204,"author":{"gitId":"KimIdeas8"},"content":"            for (String currentTask: matchingTasks) {"},{"lineNumber":205,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(currentTask);"},{"lineNumber":206,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":210,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":210}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.EmptyTaskDateException;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskDateException;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskNameException;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.TaskDateFormatException;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.KeywordFormatException;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    private static Storage storage;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    private static TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"    private static Ui ui;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    public Duke(String filePath) {"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"        ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList(storage.loadPrevListIntoNewList());"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"            ui.showLoadingError();"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"            ui.showNullPointerError();"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"    public void run() {"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        ui.saysHiToUser();"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"        boolean isExit \u003d false;"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"        while(!isExit) {"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"                storage.overwriteDukeListFile(); //update DukeList (stores all latest tasks)"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"                String fullCommand \u003d ui.readCommand(); //take in User\u0027s Command"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"                ui.showLine(); // start of current Response to User"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"                Parser.parse(fullCommand); //parse User\u0027s Command"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"                isExit \u003d Command.execute(tasks, ui, storage); //Check if command \u003d \u0027bye\u0027 \u0026 Execute the current command"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NoTaskNameException e) {"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"â˜¹ OOPS!!! The description of a task cannot be empty.\");"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"            } catch (TaskDateFormatException e) {"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add date in the format of \\\"Task /by Date\\\" for Deadlines or \\\"Task /at Date\\\" for Events.\"); //wrong date format"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NoTaskDateException e) {"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add a date to the task description. :))\"); //missing date"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"            } catch (EmptyTaskDateException e) {"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please add a date to the task description. :))\"); //empty date"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input in the format of \\\u0027done taskNumber OR delete taskNumber\\\u0027\"); //wrong format"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input a smaller or bigger valid task number.\");"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"You can list all tasks to check the total number of tasks you have. :))\"); //invalid TaskNumber"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"            } catch (KeywordFormatException e) {"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"                System.out.println(\"Please input in the format of: find \\\u0027keyword\\\u0027\"); //wrong format"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"            } finally {"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"                ui.showLine(); //end of current Response to User"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"    public static void main(String[] args) {"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"        new Duke(\"data/dukeList.txt\").run();"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":70}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"public class DukeException extends IOException {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"}"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":""}],"authorContributionMap":{"KimIdeas8":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.EmptyTaskDateException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskDateException;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.NoTaskNameException;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.TaskDateFormatException;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"import duke.taskexceptions.KeywordFormatException;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public static String commandWord;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskInputString; //contains taskName and taskDate (from user\u0027s input)"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskName;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public static String taskDate;"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    public static int index; //contains index of task to be \u0027marked as done\u0027 OR \u0027deleted\u0027"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"    public static String keyword; //tasks with \u0027keyword\u0027 are to be found"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public Parser() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"    public static void parse (String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException, NumberFormatException, KeywordFormatException {"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"        if (input.startsWith(\"todo\")) {"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"todo\";"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"            parseAddToDoCommand(input);"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"        } else if (input.startsWith(\"deadline\")) {"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"deadline\";"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"            parseAddDeadlineCommand(input);"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        } else if (input.startsWith(\"event\")) {"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"event\";"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"            parseAddEventCommand(input);"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"        //OR: remove task from list of tasks"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"delete\")) {"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"delete\";"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"            parseDeleteCommand(input);"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"        //OR: mark current task as \u0027done\u0027 \u0026 outputs the taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"done\")) {"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"done\";"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"            parseDoneCommand(input);"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"        //OR: lists all the user\u0027s current tasks in the format of taskType,taskStatus,taskName(and taskDate):"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"list\")) {"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"list\";"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"        else if (input.startsWith(\"find\")) {"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"find\";"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"            parseFindCommand(input);"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"         else if (input.startsWith(\"bye\")) {"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"bye\";"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"        //OR: deal with invalid command"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"        else {"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"            commandWord \u003d \"random\";"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"        };"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddToDoCommand (String input) throws NoTaskNameException {"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"        taskName \u003d taskInputString;"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddDeadlineCommand(String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException {"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"        splitTaskNameAndDate(taskInputString);"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseAddEventCommand(String input) throws NoTaskNameException, NoTaskDateException, EmptyTaskDateException, TaskDateFormatException {"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"        separateTypeOfTaskAndTaskInputString(input);"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":"        splitTaskNameAndDate(taskInputString);"},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseDeleteCommand(String input) throws NumberFormatException {"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"            throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"        index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseDoneCommand(String input) throws NumberFormatException {"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndTaskNumber \u003d input.split(\" \");"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndTaskNumber.length \u003c 2) {"},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"            throw new NumberFormatException(); //throws NumberFormatException() when user does not input a number after word \u0027done\u0027"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"        index \u003d Integer.parseInt(commandAndTaskNumber[1]) - 1; //obtain index from task number(which starts from 1)"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"    private static void parseFindCommand(String input) throws KeywordFormatException {"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"        //format: find + keyword"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"        String[] commandAndKeyword\u003d input.split(\" \");"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":"        if (commandAndKeyword.length \u003c 2) {"},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"            throw new KeywordFormatException(); //throws KeywordFormatException() when user does not input a keyword after \u0027find\u0027 command"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"        keyword \u003d commandAndKeyword[1]; //tasks with \u0027keyword\u0027 are to be found"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"     * Removes taskType from user\u0027s entire input string"},{"lineNumber":107,"author":{"gitId":"KimIdeas8"},"content":"     * Stores remaining string (with taskName and taskDate combined) in static variable taskInputString"},{"lineNumber":108,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"KimIdeas8"},"content":"     * throws exception if user string does not contain proper taskName (taskName, taskDate etc.)"},{"lineNumber":110,"author":{"gitId":"KimIdeas8"},"content":"     * @param input - entire input string of the user, made of taskType + taskName + taskDate"},{"lineNumber":111,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"KimIdeas8"},"content":"    public static void separateTypeOfTaskAndTaskInputString(String input) throws NoTaskNameException {"},{"lineNumber":113,"author":{"gitId":"KimIdeas8"},"content":"        //find position between taskType and rest of task description:"},{"lineNumber":114,"author":{"gitId":"KimIdeas8"},"content":"        int taskInputStringPosition \u003d input.indexOf(\" \") + 1;"},{"lineNumber":115,"author":{"gitId":"KimIdeas8"},"content":"        taskInputString \u003d input.substring(taskInputStringPosition);"},{"lineNumber":116,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":117,"author":{"gitId":"KimIdeas8"},"content":"        boolean hasNoTaskInputString \u003d false;"},{"lineNumber":118,"author":{"gitId":"KimIdeas8"},"content":"        if(taskInputStringPosition \u003d\u003d 0) {"},{"lineNumber":119,"author":{"gitId":"KimIdeas8"},"content":"            hasNoTaskInputString \u003d true; //since input.indexOf(\" \") returns -1 if no TaskName"},{"lineNumber":120,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":122,"author":{"gitId":"KimIdeas8"},"content":"        if (hasNoTaskInputString || taskInputString.isBlank() || taskInputString.startsWith(\"/\")) {"},{"lineNumber":123,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskNameException();"},{"lineNumber":124,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":127,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"KimIdeas8"},"content":"     * Takes in the remaining \u0027taskInputString\u0027 of the user\u0027s input"},{"lineNumber":129,"author":{"gitId":"KimIdeas8"},"content":"     * Splits it into two parts, then stores into TaskName"},{"lineNumber":130,"author":{"gitId":"KimIdeas8"},"content":"     * and TaskDateString of the task"},{"lineNumber":131,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"KimIdeas8"},"content":"     * Splits TaskDateString into 2 parts, complement word \"by:\" or \"at:\" \u0026 taskDate (further split by \" \")"},{"lineNumber":133,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"KimIdeas8"},"content":"     * TaskDateFormatException() - TaskDateString is written in an incorrect format"},{"lineNumber":135,"author":{"gitId":"KimIdeas8"},"content":"     * NoTaskDateException() - no date after \u0027/at\u0027 or \u0027/by\u0027"},{"lineNumber":136,"author":{"gitId":"KimIdeas8"},"content":"     * EmptyTaskDateException() - empty date after \u0027/at\u0027 or \u0027/by\u0027"},{"lineNumber":137,"author":{"gitId":"KimIdeas8"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"KimIdeas8"},"content":"     * End Results: TaskName and TaskDate"},{"lineNumber":139,"author":{"gitId":"KimIdeas8"},"content":"     * @param taskInput - essentially taskInputString, which does not include taskType"},{"lineNumber":140,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"KimIdeas8"},"content":"    public static void splitTaskNameAndDate(String taskInput) throws TaskDateFormatException, NoTaskDateException, EmptyTaskDateException {"},{"lineNumber":142,"author":{"gitId":"KimIdeas8"},"content":"        int beforeDatePosition \u003d taskInput.indexOf(\"/\");"},{"lineNumber":143,"author":{"gitId":"KimIdeas8"},"content":"        if (beforeDatePosition \u003d\u003d -1) {"},{"lineNumber":144,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if no \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":145,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"KimIdeas8"},"content":"        taskName \u003d taskInput.substring(0, beforeDatePosition);"},{"lineNumber":147,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":148,"author":{"gitId":"KimIdeas8"},"content":"        int dateStringPosition \u003d beforeDatePosition + 1;"},{"lineNumber":149,"author":{"gitId":"KimIdeas8"},"content":"        String taskDateString \u003d taskInput.substring(dateStringPosition);"},{"lineNumber":150,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":151,"author":{"gitId":"KimIdeas8"},"content":"        String[] taskDateStringWord \u003d taskDateString.split(\" \");"},{"lineNumber":152,"author":{"gitId":"KimIdeas8"},"content":"        if (!(taskDateStringWord[0].equals(\"at\") || taskDateStringWord[0].equals(\"by\"))) {"},{"lineNumber":153,"author":{"gitId":"KimIdeas8"},"content":"            throw new TaskDateFormatException(); //if incorrect complement word in non-empty string after \u0027/\u0027, asks user to change TaskDateString format"},{"lineNumber":154,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":156,"author":{"gitId":"KimIdeas8"},"content":"        int datePosition \u003d taskDateString.indexOf(\" \") + 1;"},{"lineNumber":157,"author":{"gitId":"KimIdeas8"},"content":"        if (datePosition \u003d\u003d 0) {"},{"lineNumber":158,"author":{"gitId":"KimIdeas8"},"content":"            throw new NoTaskDateException(); //if no date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":159,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"KimIdeas8"},"content":"        taskDate \u003d taskDateString.substring(datePosition);"},{"lineNumber":161,"author":{"gitId":"KimIdeas8"},"content":"        if (taskDate.isBlank()) {"},{"lineNumber":162,"author":{"gitId":"KimIdeas8"},"content":"            throw new EmptyTaskDateException(); //if empty date after \u0027/at:\u0027 or \u0027/by:\u0027, asks user to \u0027add date\u0027"},{"lineNumber":163,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":166,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":166}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Deadlines;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Events;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.ToDos;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"import java.io.PrintWriter;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"import static duke.TaskList.tasks;"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e updatedTasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public static String storagePath;"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"    public static int tasksCount;"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"    public Storage(String filepath) {"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"        this.storagePath \u003d filepath;"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"        this.tasksCount \u003d 0;"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"    //Methods to Save \u0027DukeList.txt\u0027:"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"     * If file exists, loads older data from file into ArrayList \u0027tasks\u0027"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"     * Else, creates new file"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"     * In both cases, file used to store new data in this iteration of Duke Main"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"     * @throws IOException"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e loadPrevListIntoNewList() throws IOException {"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"            Scanner s \u003d new Scanner(new File(storagePath)); // create a Scanner using the File as the source"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"            // add one todo, deadline OR event task"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":"            // based on current entry:"},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"            while (s.hasNext()) {"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"                String[] prevListEntryWord \u003d s.nextLine().split(\"/\");"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"                switch (prevListEntryWord[0]) {"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":"                    case \"T\":"},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new ToDos(prevListEntryWord[2]));"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"                    case \"D\":"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new Deadlines(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":53,"author":{"gitId":"KimIdeas8"},"content":"                    case \"E\":"},{"lineNumber":54,"author":{"gitId":"KimIdeas8"},"content":"                        updatedTasksList.add(new Events(prevListEntryWord[2], prevListEntryWord[3]));"},{"lineNumber":55,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":56,"author":{"gitId":"KimIdeas8"},"content":"                    default:"},{"lineNumber":57,"author":{"gitId":"KimIdeas8"},"content":"                        break;"},{"lineNumber":58,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"KimIdeas8"},"content":"                if (prevListEntryWord[1].equals(\"true\")) {"},{"lineNumber":60,"author":{"gitId":"KimIdeas8"},"content":"                    updatedTasksList.get(tasksCount).markAsDone(); //if is a \u0027false\u0027, task is auto-marked as not done"},{"lineNumber":61,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"KimIdeas8"},"content":"                tasksCount++; //increment taskCount for added task"},{"lineNumber":63,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":65,"author":{"gitId":"KimIdeas8"},"content":"            //Split given filepath by \"/\":"},{"lineNumber":66,"author":{"gitId":"KimIdeas8"},"content":"            String[] storagePathArray \u003d storagePath.split(\"/\");"},{"lineNumber":67,"author":{"gitId":"KimIdeas8"},"content":"            //For the first time, create a new file for the user:"},{"lineNumber":68,"author":{"gitId":"KimIdeas8"},"content":"            File dataDirectory \u003d new File(storagePathArray[0]);"},{"lineNumber":69,"author":{"gitId":"KimIdeas8"},"content":"            dataDirectory.mkdir();"},{"lineNumber":70,"author":{"gitId":"KimIdeas8"},"content":"            File dukeFile \u003d new File(storagePathArray[0], storagePathArray[1]); //File(parent, child)"},{"lineNumber":71,"author":{"gitId":"KimIdeas8"},"content":"            dukeFile.createNewFile();"},{"lineNumber":72,"author":{"gitId":"KimIdeas8"},"content":"        } finally {"},{"lineNumber":73,"author":{"gitId":"KimIdeas8"},"content":"            return updatedTasksList;"},{"lineNumber":74,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":77,"author":{"gitId":"KimIdeas8"},"content":"    public static void overwriteDukeListFile() {"},{"lineNumber":78,"author":{"gitId":"KimIdeas8"},"content":"        //write to file:"},{"lineNumber":79,"author":{"gitId":"KimIdeas8"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"KimIdeas8"},"content":"            PrintWriter writer \u003d new PrintWriter(storagePath);"},{"lineNumber":81,"author":{"gitId":"KimIdeas8"},"content":"            writer.print(\"\");"},{"lineNumber":82,"author":{"gitId":"KimIdeas8"},"content":"            writer.close();"},{"lineNumber":83,"author":{"gitId":"KimIdeas8"},"content":"            for (int i \u003d 0; i \u003c tasksCount; i++) {"},{"lineNumber":84,"author":{"gitId":"KimIdeas8"},"content":"                Tasks currentTask \u003d tasks.get(i);"},{"lineNumber":85,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(currentTask.typeOfTask + \"/\" +"},{"lineNumber":86,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.isDone + \"/\" +"},{"lineNumber":87,"author":{"gitId":"KimIdeas8"},"content":"                        currentTask.description);"},{"lineNumber":88,"author":{"gitId":"KimIdeas8"},"content":"                if (currentTask.typeOfTask.equals(\"D\") || currentTask.typeOfTask.equals(\"E\")) {"},{"lineNumber":89,"author":{"gitId":"KimIdeas8"},"content":"                    appendToDukeListFile(\"/\" + currentTask.date);"},{"lineNumber":90,"author":{"gitId":"KimIdeas8"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"KimIdeas8"},"content":"                appendToDukeListFile(System.lineSeparator());"},{"lineNumber":92,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"KimIdeas8"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":94,"author":{"gitId":"KimIdeas8"},"content":"            System.out.println(\"Write: File not found\");"},{"lineNumber":95,"author":{"gitId":"KimIdeas8"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitId":"KimIdeas8"},"content":"            System.out.print(\"Unable to write to file\");"},{"lineNumber":97,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":100,"author":{"gitId":"KimIdeas8"},"content":"    public static void appendToDukeListFile(String textToAdd) throws IOException {"},{"lineNumber":101,"author":{"gitId":"KimIdeas8"},"content":"        FileWriter fw \u003d new FileWriter(storagePath, true);"},{"lineNumber":102,"author":{"gitId":"KimIdeas8"},"content":"        fw.write(textToAdd);"},{"lineNumber":103,"author":{"gitId":"KimIdeas8"},"content":"        fw.close();"},{"lineNumber":104,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":106,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":106}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import duke.tasksmanager.Tasks;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"import static duke.Storage.tasksCount;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public static ArrayList\u003cTasks\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"        this(new ArrayList\u003c\u003e());"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"        //tasksCount \u003d 0;"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    public TaskList(ArrayList\u003cTasks\u003e prevTaskList) {"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"        tasks \u003d new ArrayList\u003c\u003e(); //for storing (all types of) tasks"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"        if (prevTaskList.size() \u003e 0){"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"            for (Tasks prevTask:prevTaskList) {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"                tasks.add(prevTask);"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":"    public static void add(Tasks currentTask) {"},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"        tasks.add(currentTask);"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"        tasksCount++;"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"    public static void remove(int index) {"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"        tasks.remove(index);"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"        tasksCount--;"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"    public static Tasks get(int index) {"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"        return tasks.get(index);"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":40}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"//deals with interactions from User:"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    public static String line \u003d \"____________________________________________________________\";"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    public static Scanner in \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    //deal with new user input:"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    public Ui(){"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines to welcome the user:"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysHiToUser() {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        //Greeting:"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"     * Prints some lines when user exits:"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    public static void saysByeToUser() {"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":"        //exits with \"bye\":"},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\"); //exits"},{"lineNumber":33,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":35,"author":{"gitId":"KimIdeas8"},"content":"    public static void showLine() {"},{"lineNumber":36,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(line);"},{"lineNumber":37,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":39,"author":{"gitId":"KimIdeas8"},"content":"    public static String readCommand() {"},{"lineNumber":40,"author":{"gitId":"KimIdeas8"},"content":"        String input \u003d in.nextLine(); //take in User\u0027s current input"},{"lineNumber":41,"author":{"gitId":"KimIdeas8"},"content":"        return input;"},{"lineNumber":42,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":44,"author":{"gitId":"KimIdeas8"},"content":"    public static void showLoadingError() {"},{"lineNumber":45,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Loading Error :((\");"},{"lineNumber":46,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":48,"author":{"gitId":"KimIdeas8"},"content":"    public void showNullPointerError() {"},{"lineNumber":49,"author":{"gitId":"KimIdeas8"},"content":"        System.out.println(\"Null Pointer Error :((\");"},{"lineNumber":50,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"KimIdeas8"},"content":"  "},{"lineNumber":52,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":52}},{"path":"src/main/java/duke/taskexceptions/EmptyTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class EmptyTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/KeywordFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"public class KeywordFormatException extends IOException{"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":7}},{"path":"src/main/java/duke/taskexceptions/NoTaskDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskDateException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/NoTaskNameException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class NoTaskNameException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/taskexceptions/TaskDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.taskexceptions;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class TaskDateFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":5}},{"path":"src/main/java/duke/tasksmanager/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Deadlines extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Deadlines(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"D\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString()  + \"(\" + \"by: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Events extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public Events(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"        this.date \u003d date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String getDate() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return this.date;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString() + \"(\" + \"at: \" + this.date + \")\";"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":24}},{"path":"src/main/java/duke/tasksmanager/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public String description;"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"    public boolean isDone;"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"    public String typeOfTask;"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    public String date;"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public Tasks(String description) {"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public void markAsDone() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        this.isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"    public String getStatusIcon() {"},{"lineNumber":20,"author":{"gitId":"KimIdeas8"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or blank space"},{"lineNumber":21,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":23,"author":{"gitId":"KimIdeas8"},"content":"    public String getDescription() {"},{"lineNumber":24,"author":{"gitId":"KimIdeas8"},"content":"        return this.description;"},{"lineNumber":25,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":27,"author":{"gitId":"KimIdeas8"},"content":"    //common output for \u0027todo\u0027, \u0027deadlines\u0027, \u0027events\u0027 + \u0027tasks\u0027 + \u0027done\u0027 command:"},{"lineNumber":28,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":29,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":30,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":32,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":32}},{"path":"src/main/java/duke/tasksmanager/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"package duke.tasksmanager;"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"public class ToDos extends Tasks {"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"    public ToDos(String description) {"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"        this.typeOfTask \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"    public String getTypeOfTask() {"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"        return this.typeOfTask;"},{"lineNumber":12,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":14,"author":{"gitId":"KimIdeas8"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"KimIdeas8"},"content":"    public String convertToTaskOutputString() {"},{"lineNumber":16,"author":{"gitId":"KimIdeas8"},"content":"        return \"[\" + getTypeOfTask() + \"]\" + super.convertToTaskOutputString();"},{"lineNumber":17,"author":{"gitId":"KimIdeas8"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":""},{"lineNumber":19,"author":{"gitId":"KimIdeas8"},"content":"}"}],"authorContributionMap":{"KimIdeas8":19}},{"path":"text-ui-test/data/dukeList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":""}],"authorContributionMap":{"KimIdeas8":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KimIdeas8"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"KimIdeas8"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"KimIdeas8"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"KimIdeas8"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"KimIdeas8"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"KimIdeas8"},"content":"list"},{"lineNumber":9,"author":{"gitId":"KimIdeas8"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"KimIdeas8"},"content":"bye"}],"authorContributionMap":{"KimIdeas8":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"KimIdeas8"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"KimIdeas8"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"KimIdeas8":2,"-":19}}]
