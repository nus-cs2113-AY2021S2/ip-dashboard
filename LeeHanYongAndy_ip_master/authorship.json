[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"# Track-The-Mushroom User Guide"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":"By: `Lee Han Yong Andy` Since: `February 2021`"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"![logo](https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcQ1LaKa9rD5VVLnenXNNu_K41jslGmqFI6amA\u0026usqp\u003dCAU)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"- [Track-The-Mushroom User Guide](#track-the-mushroom-user-guide)"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    * [1. Introduction](#1-introduction)"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"    * [2. Quick Start in Intellij](#2-quick-start-in-intellij)"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"    * [3. Features](#3-features)"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.1 Add a Todo task: `todo`](#31-add-a-todo-task-todo)"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.2 Add a Deadline task: `deadline`](#32-add-a-deadline-task-deadline)"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.3 Add an Event task: `event`](#33-add-an-event-task-event)"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.4 List all the tasks: `list`](#34-list-all-the-tasks-list)"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.5 Complete a task: `done`](#35-complete-a-task-done)"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.6 Delete a task: `delete`](#36-delete-a-task-delete)"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.7 Search task by keyword: `find`](#37-search-task-by-keyword-find)"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.8 Exit the program: `bye`](#38-exit-the-program-bye)"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"      + [3.9 Task Storage](#39-task-storage)"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    * [4. Frequently Asked Question (FAQ)](#4-faq)"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"    * [5. Command Summary](#5-command-summary)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"## 1. Introduction "},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"Track-The-Mushroom is a beginner-friendly console application to manage all your track."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"## 2. Quick Start in Intellij"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"2. Set up the correct JDK version, as follows:"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"    1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"    2. If JDK 11 is listed in the drop-down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"    3. Click `OK`"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"3. Import the project into Intellij as follows:"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"    1. Click `Open or Import`."},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"    2. Select the project directory, and click `OK`"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    3. If there are any further prompts, accept the defaults."},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"4. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see a welcome message:"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"Welcome to Track-The-Mushroom!"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"Mushroom Tracker is here to serve you!"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"## 3. Features"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.1 Add a Todo task: `todo`"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will add a Todo task to the task list."},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `todo \u003cTask Description\u003e`"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `todo Grow Mushroom`"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"[T][ ] Grow Mushroom"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"Now you have 1 tasks in the list."},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.2 Add a Deadline task: `deadline`"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will add a Deadline task to the task list."},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `deadline \u003cTask Description\u003e /by \u003cyyyy/MM/dd\u003e`"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `deadline Plant Mushroom /by 2020-02-25`"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"[D][ ] Plant Mushroom (by: 2020-02-25)"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"Now you have 2 tasks in the list."},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.3 Add an Event task: `Event`"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will add an Event task to the task list."},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `event \u003cTask Description\u003e /at \u003cDate or Day\u003e`"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `event Mushroom Concert /at Sunday`"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"[E][ ] Mushroom Concert (at: Sunday)"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"Now you have 3 tasks in the list."},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.4 List all the tasks: `list`"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will list all the tasks found in the task list."},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `list`"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"Below are all your task:"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":"1.[T][ ] Grow Mushroom"},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"2.[D][ ] Plant Mushroom (by: 2020-02-25)"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"3.[E][ ] Mushroom Concert (at: Sunday)"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.5 Complete a task: `done`"},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will mark the task as completed."},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `done \u003cTask Number\u003e`"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `done 2`"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"Nice! I\u0027ve marked the task as done:"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"[D][X] Plant Mushroom (by: 2020-02-25)"},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.6 Delete a task: `delete`"},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will delete a task from the task list."},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `delete \u003cTask Number\u003e`"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `delete 2`"},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"Noted. I will remove this task:"},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"[D][X] Plant Mushroom (by: 2020-02-25)"},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":"Now you have 2 tasks in the list."},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.7 Search task by keyword: `find`"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will search all the tasks with the keyword found in the task description."},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"The keyword is case insensitive."},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"Example: `find mushroom`"},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"Processing keyword searches, please wait."},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":"1.[T][ ] Grow Mushroom"},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":"2.[E][ ] Mushroom Concert (at: Sunday)"},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":"Search is complete!"},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.8 Exit the program: `bye`"},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"This operation will exit the program."},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"Format: `bye`"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"Expected Output:"},{"lineNumber":150,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":151,"author":{"gitId":"LeeHanYongAndy"},"content":"Goodbye! Hope to see you again soon!"},{"lineNumber":152,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":153,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":154,"author":{"gitId":"LeeHanYongAndy"},"content":"### 3.9 Task Storage"},{"lineNumber":155,"author":{"gitId":"LeeHanYongAndy"},"content":"#### 3.9.1 Automatically load data from an existing file to the program."},{"lineNumber":156,"author":{"gitId":"LeeHanYongAndy"},"content":"* Expected Outcome if successful:"},{"lineNumber":157,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":158,"author":{"gitId":"LeeHanYongAndy"},"content":"Loading file..."},{"lineNumber":159,"author":{"gitId":"LeeHanYongAndy"},"content":"Loading Successful!"},{"lineNumber":160,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":161,"author":{"gitId":"LeeHanYongAndy"},"content":"   "},{"lineNumber":162,"author":{"gitId":"LeeHanYongAndy"},"content":"* Expected outcome if not successful:"},{"lineNumber":163,"author":{"gitId":"LeeHanYongAndy"},"content":"     "},{"lineNumber":164,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":165,"author":{"gitId":"LeeHanYongAndy"},"content":"Loading file..."},{"lineNumber":166,"author":{"gitId":"LeeHanYongAndy"},"content":"Loading Failed - Unable to detect file."},{"lineNumber":167,"author":{"gitId":"LeeHanYongAndy"},"content":"```"},{"lineNumber":168,"author":{"gitId":"LeeHanYongAndy"},"content":"#### 3.9.2 Automatically save the current task list to a file."},{"lineNumber":169,"author":{"gitId":"LeeHanYongAndy"},"content":"* After enter `bye`, program will automatically store all the tasks into a task_logs.txt file."},{"lineNumber":170,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":171,"author":{"gitId":"LeeHanYongAndy"},"content":"## 4. FAQ"},{"lineNumber":172,"author":{"gitId":"LeeHanYongAndy"},"content":"**Q1**: Where is the task_logs.txt stored after I exit the program?"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":174,"author":{"gitId":"LeeHanYongAndy"},"content":"\u003e The file `task_logs.txt` is stored in the directory you ran the program in."},{"lineNumber":175,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":176,"author":{"gitId":"LeeHanYongAndy"},"content":"**Q2**: Do I need to create a task_logs.txt file?"},{"lineNumber":177,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":178,"author":{"gitId":"LeeHanYongAndy"},"content":"\u003e No. The `task_logs.txt` will be automatically created for you if you do not have the file."},{"lineNumber":179,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":180,"author":{"gitId":"LeeHanYongAndy"},"content":"## 5. Command Summary"},{"lineNumber":181,"author":{"gitId":"LeeHanYongAndy"},"content":"| Command   | Format                                            | Example                                   |"},{"lineNumber":182,"author":{"gitId":"LeeHanYongAndy"},"content":"| ---       | ---                                               | ---                                       |"},{"lineNumber":183,"author":{"gitId":"LeeHanYongAndy"},"content":"| todo      | `todo \u003cTask Description\u003e`                         | `todo Grow Mushroom`                      |"},{"lineNumber":184,"author":{"gitId":"LeeHanYongAndy"},"content":"| deadline  | `deadline \u003cTask Description\u003e /by \u003cyyyy/MM/dd\u003e`    | `deadline Plant Mushroom /by 2020-02-25`  |"},{"lineNumber":185,"author":{"gitId":"LeeHanYongAndy"},"content":"| event     | `event \u003cTask Description\u003e /at \u003cDate or Day\u003e`      | `event Mushroom Concert /at Sunday`       |"},{"lineNumber":186,"author":{"gitId":"LeeHanYongAndy"},"content":"| list      | `list`                                            | `list`                                    |"},{"lineNumber":187,"author":{"gitId":"LeeHanYongAndy"},"content":"| done      | `done \u003cTask Number\u003e`                              | `done 2`                                  |"},{"lineNumber":188,"author":{"gitId":"LeeHanYongAndy"},"content":"| delete    | `delete \u003cTask Number\u003e`                            | `delete 2`                                |"},{"lineNumber":189,"author":{"gitId":"LeeHanYongAndy"},"content":"| find      | `find \u003cKeywordD\u003e`                                 | `find mushroom`                           |"},{"lineNumber":190,"author":{"gitId":"LeeHanYongAndy"},"content":"| bye       | `bye`                                             | `bye`                                     |"}],"authorContributionMap":{"LeeHanYongAndy":181,"-":9}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"import command.CommandHandler;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":"import constant.Constant;"},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import parser.Parser;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import storage.Storage;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":" * Main class for Mushroom Head."},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final CommandHandler commandHandler \u003d new CommandHandler();"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     * This is the start of the main program."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     * 1. initFile() will load any existing file if found."},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"     * 2. looper() will prompt the user for the commands to take action on."},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"     * 3. saveFile() will save any current data into a text file named tasks_log.txt."},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"        Storage.initFile();"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"        looper();"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"        Storage.saveFile();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prompt the user for the commands to take action on,"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"     * takes in the command from console terminal and execute the command,"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"     * stop only when it detects the exit command."},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void looper() {"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"        int commandCode;"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        String userInput;"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"        Scanner userScanner \u003d new Scanner(System.in);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        do {"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"            userInput \u003d userScanner.nextLine();"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"            commandCode \u003d Parser.getCommandCode(userInput);"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"            commandHandler.performAction(commandCode, userInput);"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        } while (commandCode !\u003d Constant.INPUT_CODE_EXIT);"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":36,"-":4}},{"path":"src/main/java/command/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import parser.Parser;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import constant.Constant;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import ui.Ui;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.Deadline;"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.Event;"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.TaskHandler;"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.Todo;"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":" * CommandHandler class for handling the related command operation."},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"public class CommandHandler {"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final TaskHandler taskHandler \u003d new TaskHandler();"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Identify the operations and proceed to perform the required action."},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param commandCode is the verified operation/command code extracted from calling method."},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void performAction(int commandCode, String userInput) {"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (commandCode \u003d\u003d Constant.INPUT_CODE_EXIT) {"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printExitMessage();"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_LIST) {"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"            performList();"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_DONE) {"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"            performDone(userInput);"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_TODO) {"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"            performTodo(userInput);"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_DEADLINE) {"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"            performDeadline(userInput);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_EVENT) {"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"            performEvent(userInput);"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_DELETE) {"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"            performDelete(userInput);"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_FIND) {"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"            performFind(userInput);"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_INVALID) {"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"            performInvalid();"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (commandCode \u003d\u003d Constant.INPUT_CODE_DEFAULT_INVALID) {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"            performDefault();"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Unknown Operation!\");"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the list all task in task list operation."},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performList() {"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"        Ui.printEntireCollection();"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the mark as done operation."},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performDone(String userInput) {"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"        int indexFromUserInput \u003d Parser.getIndexFromUserInput(userInput);"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (indexFromUserInput \u003e taskHandler.getTaskCount()) {"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"There is no task number \" + indexFromUserInput + \" to mark done.\");"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please try again!\");"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else if (taskHandler.checkStatus(indexFromUserInput - 1)) {"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You have already completed this task.\");"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.markDone(indexFromUserInput - 1);"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Nice! I\u0027ve marked the task as done:\");"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskDetails(indexFromUserInput - 1);"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the todo operation by adding a todo task to the task list."},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performTodo(String userInput) {"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription \u003d Parser.extractTaskDescription(userInput);"},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.addTask(new Todo(taskDescription));"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"        Ui.printAddedTask(taskHandler.getTaskCount());"},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.increaseTaskCount();"},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the deadline operation by adding a deadline task to the task list."},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performDeadline(String userInput) {"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription, taskTiming;"},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskDescription \u003d Parser.extractTaskDescription(userInput);"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskTiming \u003d Parser.extractTaskTiming(userInput);"},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.addTask(new Deadline(taskDescription, taskTiming));"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":"        Ui.printAddedTask(taskHandler.getTaskCount());"},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.increaseTaskCount();"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the event operation by adding a event task to the task list."},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performEvent(String userInput) {"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription, taskTiming;"},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskDescription \u003d Parser.extractTaskDescription(userInput);"},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskTiming \u003d Parser.extractTaskTiming(userInput);"},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.addTask(new Event(taskDescription, taskTiming));"},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"        Ui.printAddedTask(taskHandler.getTaskCount());"},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.increaseTaskCount();"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the delete operation by deleting a task from the task list."},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performDelete(String userInput) {"},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":"        int indexFromUserInput \u003d Parser.getIndexFromUserInput(userInput);"},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (indexFromUserInput \u003e taskHandler.getTaskCount()) {"},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"There is no task number \" + indexFromUserInput + \" to delete.\");"},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please try again!\");"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Noted. I will remove this task:\");"},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskDetails(indexFromUserInput - 1);"},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.deleteTask(indexFromUserInput - 1);"},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.decreaseTaskCount();"},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Now you have \" + taskHandler.getTaskCount() + \" tasks in the list.\");"},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the find operation by using the keyword from user input."},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":151,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performFind(String userInput) {"},{"lineNumber":153,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":154,"author":{"gitId":"LeeHanYongAndy"},"content":"        String keyword \u003d Parser.extractTaskDescription(userInput);"},{"lineNumber":155,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskHandler.findByWord(keyword);"},{"lineNumber":156,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":157,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":159,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the invalid operation."},{"lineNumber":161,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the try again message to inform the user of wrong format."},{"lineNumber":162,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performInvalid() {"},{"lineNumber":164,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Please try again with correct format!\");"},{"lineNumber":165,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":166,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":168,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Perform the default invalid operation."},{"lineNumber":170,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the unrecognizable message to inform the user of invalid command code."},{"lineNumber":171,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void performDefault() {"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":174,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Mushroom head could not recognize your command code!\");"},{"lineNumber":175,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Please try again!\");"},{"lineNumber":176,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":177,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":178}},{"path":"src/main/java/constant/Constant.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package constant;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * Constant class containing the fixed constants."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Constant {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Constants used to represent each individual common code."},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_EXIT \u003d -1;"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_DEFAULT_INVALID \u003d 0;"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_LIST \u003d 1;"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_DONE \u003d 2;"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_INVALID \u003d 3;"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_TODO \u003d 4;"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_DEADLINE \u003d 5;"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_EVENT \u003d 6;"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_DELETE \u003d 7;"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final int INPUT_CODE_FIND \u003d 8;"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Constants used for printing repetitive messages."},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String DIVIDER_LINE \u003d \"____________________________________________________________\";"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String LIST_STARTING_MESSAGE \u003d \"Below are all your task:\";"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String FILE_PATH \u003d \"task_logs.txt\";"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String FILE_LOAD_MESSAGE \u003d \"Loading file...\";"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String FILE_LOAD_SUCCESS \u003d \"Loading successful!\";"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String FILE_LOAD_FAILURE \u003d \"Loading failed - Unable to detect file.\";"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static final String FILE_LOAD_SUCCESS_WELCOME \u003d \"What can Mushroom Tracker do for you?\";"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":31}},{"path":"src/main/java/error/DeadlineCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * DeadlineCommandException class to handle any deadline exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class DeadlineCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/DeleteCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * DeleteCommandException class to handle any delete exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class DeleteCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/DoneCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * DoneCommandException class to handle any done exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class DoneCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/EmptyTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * EmptyTaskDescriptionException class to handle any empty task description exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class EmptyTaskDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/EmptyTimeDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * EmptyTimeDescriptionException class to handle any empty task time exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class EmptyTimeDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/EventCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * EventCommandException class to handle any event exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class EventCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/error/FindCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package error;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * FindCommandException class to handle any find exception."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class FindCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    // nothing to add here"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":8}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import constant.Constant;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"import error.*;"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"import ui.Ui;"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":" * Parser class in charge of parsing, validating, and extraction of input."},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Parse the input from the user to the respective commands."},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return A fixed constant tagged to the respective command."},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static int getCommandCode(String userInput) {"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"        String commandCode;"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"            commandCode \u003d words[0].toLowerCase();"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_DEFAULT_INVALID;"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"        // No Fallthrough intended in this switch statement"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"        switch (commandCode) {"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"bye\":"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_EXIT;"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"list\":"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_LIST;"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"done\":"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckDone(userInput, words);"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"todo\":"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckTodo(userInput, words);"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"deadline\":"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckDeadline(userInput);"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"event\":"},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckEvent(userInput);"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"delete\":"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckDelete(userInput, words);"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"find\":"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"            return initCheckFind(userInput, words);"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_DEFAULT_INVALID;"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027done\u0027 command."},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027done\u0027 command."},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckDone(String userInput, String[] words) {"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateDoneCommand(words);"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (DoneCommandException e) {"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"There is no task smaller than 1!\");"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You need a task number behind done command!\");"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027todo\u0027 command."},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027todo\u0027 command."},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckTodo(String userInput, String[] words) {"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateTodoCommand(words);"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EmptyTaskDescriptionException e) {"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You need an task behind!\");"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027deadline\u0027 command."},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027deadline\u0027 command."},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckDeadline(String userInput) {"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateDeadlineCommand(userInput);"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (DeadlineCommandException e) {"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please use a correct format with \u0027 /by \u0027!\");"},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EmptyTimeDescriptionException e) {"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please enter a date!\");"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EmptyTaskDescriptionException e) {"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please enter a task description!\");"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Your date format is wrong!\");"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027event\u0027 command."},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027event\u0027 command."},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckEvent(String userInput) {"},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateEventCommand(userInput);"},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EventCommandException e) {"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please use a correct format with \u0027 /at \u0027!\");"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EmptyTimeDescriptionException e) {"},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please enter a date or time!\");"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (EmptyTaskDescriptionException e) {"},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Please enter a task description!\");"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027delete\u0027 command."},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027delete\u0027 command."},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckDelete(String userInput, String[] words) {"},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateDeleteCommand(words);"},{"lineNumber":151,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (DeleteCommandException e) {"},{"lineNumber":152,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":153,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You cannot delete a task smaller than 1!\");"},{"lineNumber":154,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":155,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":156,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":157,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You need a task number behind delete command!\");"},{"lineNumber":158,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":159,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":162,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch validation block for printing error messages of \u0027find\u0027 command."},{"lineNumber":164,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":166,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":167,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027find\u0027 command."},{"lineNumber":168,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int initCheckFind(String userInput, String[] words) {"},{"lineNumber":170,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"LeeHanYongAndy"},"content":"            return validateFindCommand(words);"},{"lineNumber":172,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (FindCommandException e) {"},{"lineNumber":173,"author":{"gitId":"LeeHanYongAndy"},"content":"            Ui.printTaskWarningMessage(userInput);"},{"lineNumber":174,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You need a key word to search!\");"},{"lineNumber":175,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_INVALID;"},{"lineNumber":176,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":179,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":181,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":183,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws DoneCommandException if the task number given is smaller than 1."},{"lineNumber":184,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no task number given."},{"lineNumber":185,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027done\u0027 command."},{"lineNumber":186,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateDoneCommand(String[] words) throws DoneCommandException,"},{"lineNumber":188,"author":{"gitId":"LeeHanYongAndy"},"content":"            ArrayIndexOutOfBoundsException {"},{"lineNumber":189,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (Integer.parseInt(words[1]) \u003c 1) {"},{"lineNumber":190,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new DoneCommandException();"},{"lineNumber":191,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":192,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_DONE;"},{"lineNumber":193,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":196,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":198,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":200,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EmptyTaskDescriptionException if the task description is empty."},{"lineNumber":201,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027todo\u0027 command."},{"lineNumber":202,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateTodoCommand(String[] words) throws EmptyTaskDescriptionException {"},{"lineNumber":204,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (words.length \u003c\u003d 1) {"},{"lineNumber":205,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EmptyTaskDescriptionException();"},{"lineNumber":206,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":207,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_TODO;"},{"lineNumber":208,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":211,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":213,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":214,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":215,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws DeadlineCommandException if the deadline identifier format is wrong."},{"lineNumber":216,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EmptyTimeDescriptionException if the time field is empty."},{"lineNumber":217,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EmptyTaskDescriptionException if the task description is empty."},{"lineNumber":218,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws DateTimeParseException if the time field format is wrong."},{"lineNumber":219,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027deadline\u0027 command."},{"lineNumber":220,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateDeadlineCommand(String userInput) throws DeadlineCommandException,"},{"lineNumber":222,"author":{"gitId":"LeeHanYongAndy"},"content":"            EmptyTimeDescriptionException, EmptyTaskDescriptionException, DateTimeParseException {"},{"lineNumber":223,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (!userInput.contains(\" /by \")) {"},{"lineNumber":224,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new DeadlineCommandException();"},{"lineNumber":225,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":227,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] splitUserInput \u003d userInput.split(\" /by \", 2);"},{"lineNumber":228,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (splitUserInput[1].isEmpty()) {"},{"lineNumber":229,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EmptyTimeDescriptionException();"},{"lineNumber":230,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":232,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription \u003d splitUserInput[0].replaceAll(\"deadline\", \"\");"},{"lineNumber":233,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (taskDescription.isEmpty()) {"},{"lineNumber":234,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EmptyTaskDescriptionException();"},{"lineNumber":235,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":237,"author":{"gitId":"LeeHanYongAndy"},"content":"        LocalDate.parse(splitUserInput[1]);"},{"lineNumber":238,"author":{"gitId":"LeeHanYongAndy"},"content":"        return Constant.INPUT_CODE_DEADLINE;"},{"lineNumber":239,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":241,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":243,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":245,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EventCommandException if the event identifier format is wrong."},{"lineNumber":246,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EmptyTimeDescriptionException if the time field is empty."},{"lineNumber":247,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws EmptyTaskDescriptionException if the task description is empty."},{"lineNumber":248,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027event\u0027 command."},{"lineNumber":249,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateEventCommand(String userInput) throws EventCommandException,"},{"lineNumber":251,"author":{"gitId":"LeeHanYongAndy"},"content":"            EmptyTimeDescriptionException, EmptyTaskDescriptionException {"},{"lineNumber":252,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (!userInput.contains(\" /at \")) {"},{"lineNumber":253,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EventCommandException();"},{"lineNumber":254,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":256,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] splitUserInput \u003d userInput.split(\" /at \", 2);"},{"lineNumber":257,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (splitUserInput[1].isEmpty()) {"},{"lineNumber":258,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EmptyTimeDescriptionException();"},{"lineNumber":259,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":260,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":261,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription \u003d splitUserInput[0].replaceAll(\"event\", \"\");"},{"lineNumber":262,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (taskDescription.isEmpty()) {"},{"lineNumber":263,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new EmptyTaskDescriptionException();"},{"lineNumber":264,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":266,"author":{"gitId":"LeeHanYongAndy"},"content":"        return Constant.INPUT_CODE_EVENT;"},{"lineNumber":267,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":269,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":271,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":272,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":273,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws DeleteCommandException if the task number given is smaller than 1."},{"lineNumber":274,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no task number given."},{"lineNumber":275,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027delete\u0027 command."},{"lineNumber":276,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateDeleteCommand(String[] words) throws DeleteCommandException,"},{"lineNumber":278,"author":{"gitId":"LeeHanYongAndy"},"content":"            ArrayIndexOutOfBoundsException {"},{"lineNumber":279,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (Integer.parseInt(words[1]) \u003c 1) {"},{"lineNumber":280,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new DeleteCommandException();"},{"lineNumber":281,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":282,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_DELETE;"},{"lineNumber":283,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":284,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":286,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":287,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check if the input is in correct format."},{"lineNumber":288,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":289,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param words contains the individual words from userInput."},{"lineNumber":290,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws FindCommandException if no keyword is given."},{"lineNumber":291,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return valid or invalid command code for \u0027find\u0027 command."},{"lineNumber":292,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int validateFindCommand(String[] words) throws FindCommandException {"},{"lineNumber":294,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (words.length \u003d\u003d 1) {"},{"lineNumber":295,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new FindCommandException();"},{"lineNumber":296,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":297,"author":{"gitId":"LeeHanYongAndy"},"content":"            return Constant.INPUT_CODE_FIND;"},{"lineNumber":298,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":301,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":302,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the task timing from the input."},{"lineNumber":303,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":304,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":305,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string containing the task timing."},{"lineNumber":306,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static String extractTaskTiming(String userInput) {"},{"lineNumber":308,"author":{"gitId":"LeeHanYongAndy"},"content":"        String unfilteredTaskTiming \u003d removeCommandCode(userInput);"},{"lineNumber":309,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] taskTiming \u003d unfilteredTaskTiming.split(\"/\", 2);"},{"lineNumber":310,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskTiming \u003d taskTiming[1].split(\" \", 2);"},{"lineNumber":311,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskTiming[1];"},{"lineNumber":312,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":314,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Remove the command code from the input."},{"lineNumber":316,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":317,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":318,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string without the command code."},{"lineNumber":319,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":320,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static String removeCommandCode(String userInput) {"},{"lineNumber":321,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] userInputArray \u003d userInput.split(\" \", 2);"},{"lineNumber":322,"author":{"gitId":"LeeHanYongAndy"},"content":"        return userInputArray[1];"},{"lineNumber":323,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":324,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":325,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":326,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the task description from the input."},{"lineNumber":327,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":328,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":329,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string containing the task description."},{"lineNumber":330,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":331,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static String extractTaskDescription(String userInput) {"},{"lineNumber":332,"author":{"gitId":"LeeHanYongAndy"},"content":"        String taskDescription \u003d removeCommandCode(userInput);"},{"lineNumber":333,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (taskDescription.contains(\"/\")) {"},{"lineNumber":334,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskDescription \u003d removeDateAndTime(taskDescription);"},{"lineNumber":335,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskDescription;"},{"lineNumber":337,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":339,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":340,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Remove the date and time from the input."},{"lineNumber":341,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":342,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param unfilteredDescription is the input without the command code."},{"lineNumber":343,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string without the time and date."},{"lineNumber":344,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static String removeDateAndTime(String unfilteredDescription) {"},{"lineNumber":346,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] unfilteredDescriptionArray \u003d unfilteredDescription.split(\"/\", 2);"},{"lineNumber":347,"author":{"gitId":"LeeHanYongAndy"},"content":"        return unfilteredDescriptionArray[0];"},{"lineNumber":348,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":350,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":351,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the task number from the input."},{"lineNumber":352,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":353,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param userInput is the input from the console terminal."},{"lineNumber":354,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a integer of the task number."},{"lineNumber":355,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":356,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static int getIndexFromUserInput(String userInput) {"},{"lineNumber":357,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":358,"author":{"gitId":"LeeHanYongAndy"},"content":"        return Integer.parseInt(words[1]);"},{"lineNumber":359,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":360}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.*;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import constant.Constant;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import ui.Ui;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.StringJoiner;"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":" * Storage class for handling the loading and storing of file to the hard disk."},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final TaskHandler taskHandler \u003d new TaskHandler();"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch block for attempting to load a file if it exist."},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Print the relevant welcome message and file loading status."},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void initFile() {"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"        Ui.printWelcomeMessage();"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.FILE_LOAD_MESSAGE);"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"            tryRunFile();"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.FILE_LOAD_SUCCESS);"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.FILE_LOAD_SUCCESS_WELCOME);"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.FILE_LOAD_FAILURE);"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Load and read the file input and then add them to the task list."},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws IOException if the file is unable to load."},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void tryRunFile() throws IOException {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"        File sourceFile \u003d new File(Constant.FILE_PATH);"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"        String fileData;"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (sourceFile.createNewFile()){"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"            throw new IOException();"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"        Scanner fileScanner \u003d new Scanner(sourceFile);"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"        while (fileScanner.hasNextLine()) {"},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileData \u003d fileScanner.nextLine();"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"            processFileData(fileData, taskHandler.getTaskCount());"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.increaseTaskCount();"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Add the type of task to the task list based on the input record."},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Default print out any unexpected data found during the process."},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param fileData is the record of 1 task from the file."},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskNumber is the current index in the task list managed by taskHandler."},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void processFileData(String fileData, int taskNumber) {"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"        String[] splitFileData \u003d fileData.split(\" \\\\| \");"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        String fileInput, fileDescription, fileTiming;"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"        int argumentLength \u003d splitFileData.length;"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"        switch (splitFileData[0]) {"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"T\":"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileInput \u003d extractFileInfo(splitFileData,2, argumentLength);"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.addTask(new Todo(fileInput));"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"            checkFileInputDoneStatus(taskNumber, splitFileData);"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"D\":"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileDescription \u003d extractFileInfo(splitFileData, 2, argumentLength - 1);"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileTiming \u003d extractFileInfo(splitFileData,argumentLength - 1, argumentLength);"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.addTask(new Deadline(fileDescription + \" \", fileTiming));"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"            checkFileInputDoneStatus(taskNumber, splitFileData);"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"        case \"E\":"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileDescription \u003d extractFileInfo(splitFileData, 2, argumentLength - 1);"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"            fileTiming \u003d extractFileInfo(splitFileData,argumentLength - 1, argumentLength);"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.addTask(new Event(fileDescription + \" \", fileTiming));"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"            checkFileInputDoneStatus(taskNumber, splitFileData);"},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Unknown file data\");"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Mark the task as done or undone based on the input records."},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskNumber is the current index in the task list managed by taskHandler."},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param splitFileData contains the information such as type, status, and description of a task."},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void checkFileInputDoneStatus(int taskNumber, String[] splitFileData) {"},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (splitFileData[1].equals(\"X\")) {"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"            taskHandler.markDone(taskNumber);"},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract a single task information based on the requirement given in param."},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param splitFileData contains the information such as type, status, and description of a task."},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param start is the index of the first block to concatenate."},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param end is the index of the last block to concatenate."},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the information requested by the calling method (task description or timing field)."},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static String extractFileInfo(String[] splitFileData, int start, int end) {"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"        StringJoiner joiner \u003d new StringJoiner(\" \");"},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (int i \u003d start; i \u003c end; i++) {"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"            joiner.add(splitFileData[i]);"},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"        return joiner.toString();"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Try-catch block for attempting to save the current task list into a file."},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints an error if error an occur during the saving process."},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void saveFile() {"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"        try {"},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"            tryWriteToFiles();"},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Error in IO!\");"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Write the records in the task list to the file."},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @throws IOException if an error if error an occur during the writing to file process."},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void tryWriteToFiles() throws IOException {"},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"        FileWriter fw \u003d new FileWriter(Constant.FILE_PATH);"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"        fw.write(convertToFileInput());"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"        fw.close();"},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Convert the task list to the saving format."},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string containing the format for writing in the file by calling method."},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static String convertToFileInput() {"},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskHandler.toFileFormat();"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":149}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * Deadline class for handling the deadline task type."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String TASK_SYMBOL_D \u003d \"D\";"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String taskTiming;"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Deadline constructor."},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskDescription contains the task description of the task."},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskTiming contains the task timing of the task."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Deadline(String taskDescription, String taskTiming) {"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"        super(taskDescription);"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"        this.taskTiming \u003d taskTiming;"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the deadline task type."},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the deadline task type."},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskSymbol() {"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"        return TASK_SYMBOL_D;"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the deadline task timing."},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the deadline task timing."},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskTiming() {"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        return this.printTaskTiming();"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the deadline task timing."},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the deadline task timing."},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String printTaskTiming() {"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        return \"(by: \" + this.taskTiming + \")\";"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task information for writing to hard disk."},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string in correct file format for writing."},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getFileFormat() {"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"        return super.getFileFormat() + \"| \" + taskTiming;"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":59}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * Event class for handling the event task type."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String TASK_SYMBOL_EVENT \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"    private String taskTiming;"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Event constructor."},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskDescription contains the task description of the task."},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskTiming contains the task timing of the task."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Event(String taskDescription, String taskTiming) {"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"        super(taskDescription);"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"        this.taskTiming \u003d taskTiming;"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the event task type."},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the event task type."},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskSymbol() {"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"        return TASK_SYMBOL_EVENT;"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the event task timing."},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the event task timing."},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskTiming() {"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        return this.printTaskTiming();"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the event task timing."},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the event task timing."},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String printTaskTiming() {"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        return \"(at: \" + this.taskTiming + \")\";"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task information for writing to hard disk."},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string in correct file format for writing."},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getFileFormat() {"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"        return super.getFileFormat() + \"| \" + taskTiming;"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":59}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * Task class for storing the information of each task."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    protected static final String MARK_DONE \u003d \"X\";"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"    protected static final String MARK_UNDONE \u003d \" \";"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"    protected static final String TASK_SYMBOL_NA \u003d \" \";"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    protected String taskStatus;"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    protected String taskDescription;"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Task constructor."},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskDescription is the task description to be recorded."},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Task(String taskDescription) {"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"        this.taskStatus \u003d MARK_UNDONE;"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task type."},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the task type."},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskSymbol() {"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"        return TASK_SYMBOL_NA;"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task type."},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the task type."},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskStatus() {"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":"        return this.taskStatus;"},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task description."},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the task description."},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskDescription() {"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"        return this.taskDescription;"},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task timing."},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the task timing."},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskTiming() {"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"        return \"\";"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the task information for writing to hard disk."},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return a string in correct file format for writing."},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getFileFormat() {"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        return getTaskSymbol() + \" | \" + getTaskStatus() + \" | \" + getTaskDescription();"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Mark the given task as done."},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void setTaskAsDone() {"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"        this.taskStatus \u003d MARK_DONE;"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the true or false based on the completion status of the task."},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return true if done, false if undone."},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"    public boolean isDone() {"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"        return this.taskStatus.equals(MARK_DONE);"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":83}},{"path":"src/main/java/task/TaskHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import ui.Ui;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"import java.util.StringJoiner;"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":" * TaskHandler class for handling the entire collection of tasks."},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"public class TaskHandler {"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static int taskCount \u003d 0;"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Add a task to the collection."},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param task is a task given by the calling method."},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void addTask(Task task) {"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskArrayList.add(task);"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Increase the task count."},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void increaseTaskCount() {"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskCount++;"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Delete a task from the collection."},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void deleteTask(int index) {"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskArrayList.remove(index);"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Decrease the task count."},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void decreaseTaskCount() {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskCount--;"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the current total task count."},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the current total task count."},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"    public int getTaskCount() {"},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskCount;"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Check whether the task is marked as done or undone."},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the true or false based on the status of the task."},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"    public boolean checkStatus(int index) {"},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskArrayList.get(index).isDone();"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Mark the task as done."},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskNumber is the index of the task in the collection."},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void markDone(int taskNumber) {"},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"        taskArrayList.get(taskNumber).setTaskAsDone();"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Find the task that matches the keyword given."},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Print the tasks (if any)."},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param keyword is the keyword specified."},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"    public void findByWord(String keyword) {"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"        boolean isFound \u003d false;"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Processing keyword searches, please wait.\");"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {"},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"            if (taskArrayList.get(i).getTaskDescription().toLowerCase().contains(keyword.toLowerCase())) {"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"                System.out.print((i+1) + \".\");"},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"                Ui.printTaskDetails(i);"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"                isFound \u003d true;"},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (!isFound) {"},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Oh no mushroom head could not find any matches!\");"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"Search is complete!\");"},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Convert the task list to the file writing format."},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the string containing the correct file writing format."},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String toFileFormat() {"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"        StringJoiner joiner \u003d new StringJoiner(\"\\n\");"},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"        for (Task currentTask : taskArrayList) {"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":"            joiner.add(currentTask.getFileFormat());"},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"        return joiner.toString();"},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the task timing."},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the string containing the task timing."},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String extractTaskTiming(int index) {"},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskArrayList.get(index).getTaskTiming();"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the task type."},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":124,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the string containing the task type."},{"lineNumber":125,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String extractTaskSymbol(int index) {"},{"lineNumber":127,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskArrayList.get(index).getTaskSymbol();"},{"lineNumber":128,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":130,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the given task status."},{"lineNumber":132,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":134,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the string containing the task status."},{"lineNumber":135,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String extractTaskStatus(int index) {"},{"lineNumber":137,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskArrayList.get(index).getTaskStatus();"},{"lineNumber":138,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":140,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Extract the given task description."},{"lineNumber":142,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the collection."},{"lineNumber":144,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the string containing the task description."},{"lineNumber":145,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String extractTaskDescription(int index) {"},{"lineNumber":147,"author":{"gitId":"LeeHanYongAndy"},"content":"        return taskArrayList.get(index).getTaskDescription();"},{"lineNumber":148,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":149}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":" * Todo class for handling the todo task type."},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final String TASK_SYMBOL_TODO \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Todo constructor."},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param taskDescription contains the task description of the task."},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"    public Todo(String taskDescription) {"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"        super(taskDescription);"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Return the todo task type."},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @return the todo task type."},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"    public String getTaskSymbol() {"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"        return TASK_SYMBOL_TODO;"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":27}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"import constant.Constant;"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"import task.TaskHandler;"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":" * Ui class for handling the UI printing."},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static final TaskHandler taskHandler \u003d new TaskHandler();"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the welcome message."},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"        String logo \u003d \"           ____\\n\" +"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"       _.-\u002778o `\\\"`--._\\n\" +"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"   ,o888o.  .o888o,   \u0027\u0027-.\\n\" +"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"                \" ,88888P  `78888P..______.]\\n\" +"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"/_..__..----\\\"\\\"        __.\u0027\\n\" +"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"`-._       /\\\"\\\"| _..-\u0027\u0027\\n\" +"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"    \\\"`-----\\\\  `\\\\\\n\" +"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"            |   ;.-\\\"\\\"--..\\n\" +"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"            | ,8o.  o88. `.\\n\" +"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"            `;888P  `788P  :\\n\" +"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"      .o\\\"\\\"-.|`-._         ./\\n\" +"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"     J88 _.-/    \\\";\\\"-P----\u0027\\n\" +"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"     `--\u0027\\\\`|     /  /\\n\" +"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"         | /     |  |\\n\" +"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"         \\\\|     /   |akn\\n\" +"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"                \"          `-----`---\u0027\\n\";"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(logo);"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Welcome to Track-The-Mushroom!\");"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Mushroom Tracker is here to serve you!\");"},{"lineNumber":36,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":37,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":39,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the exit message."},{"lineNumber":41,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printExitMessage() {"},{"lineNumber":43,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":44,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Goodbye! Hope to see you again soon!\");"},{"lineNumber":45,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":46,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":48,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the invalid command."},{"lineNumber":50,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param invalidUserInput is the input from the console terminal entered by the user."},{"lineNumber":52,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printTaskWarningMessage(String invalidUserInput) {"},{"lineNumber":54,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(Constant.DIVIDER_LINE);"},{"lineNumber":55,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Invalid command: \" + invalidUserInput);"},{"lineNumber":56,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":58,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the task added to the list."},{"lineNumber":60,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the task list."},{"lineNumber":62,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printAddedTask(int index) {"},{"lineNumber":64,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":65,"author":{"gitId":"LeeHanYongAndy"},"content":"        printTaskDetails(index);"},{"lineNumber":66,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(\"Now you have \" + (index + 1) + \" tasks in the list.\");"},{"lineNumber":67,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":69,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints all the task found in the task list."},{"lineNumber":71,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printEntireCollection() {"},{"lineNumber":73,"author":{"gitId":"LeeHanYongAndy"},"content":"        if (taskHandler.getTaskCount() \u003d\u003d 0) {"},{"lineNumber":74,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(\"You have no item in the task list!\");"},{"lineNumber":75,"author":{"gitId":"LeeHanYongAndy"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"LeeHanYongAndy"},"content":"            System.out.println(Constant.LIST_STARTING_MESSAGE);"},{"lineNumber":77,"author":{"gitId":"LeeHanYongAndy"},"content":"            for (int i \u003d 0; i \u003c taskHandler.getTaskCount(); i++) {"},{"lineNumber":78,"author":{"gitId":"LeeHanYongAndy"},"content":"                System.out.print((i + 1) + \".\");"},{"lineNumber":79,"author":{"gitId":"LeeHanYongAndy"},"content":"                printTaskDetails(i);"},{"lineNumber":80,"author":{"gitId":"LeeHanYongAndy"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"LeeHanYongAndy"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":84,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the task details such as type, completion status and description."},{"lineNumber":86,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the task list."},{"lineNumber":88,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"LeeHanYongAndy"},"content":"    public static void printTaskDetails(int index) {"},{"lineNumber":90,"author":{"gitId":"LeeHanYongAndy"},"content":"        printTaskSymbol(index);"},{"lineNumber":91,"author":{"gitId":"LeeHanYongAndy"},"content":"        printTaskCompletionStatus(index);"},{"lineNumber":92,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.print(\" \");"},{"lineNumber":93,"author":{"gitId":"LeeHanYongAndy"},"content":"        printTaskDescription(index);"},{"lineNumber":94,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.println(taskHandler.extractTaskTiming(index));"},{"lineNumber":95,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":97,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the task type."},{"lineNumber":99,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the task list."},{"lineNumber":101,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void printTaskSymbol(int index) {"},{"lineNumber":103,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.print(\"[\" + taskHandler.extractTaskSymbol(index) + \"]\");"},{"lineNumber":104,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":106,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the task completion status."},{"lineNumber":108,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the task list."},{"lineNumber":110,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void printTaskCompletionStatus(int index) {"},{"lineNumber":112,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.print(\"[\" + taskHandler.extractTaskStatus(index) + \"]\");"},{"lineNumber":113,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"LeeHanYongAndy"},"content":""},{"lineNumber":115,"author":{"gitId":"LeeHanYongAndy"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"LeeHanYongAndy"},"content":"     * Prints the task description."},{"lineNumber":117,"author":{"gitId":"LeeHanYongAndy"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"LeeHanYongAndy"},"content":"     * @param index is the index of the task in the task list."},{"lineNumber":119,"author":{"gitId":"LeeHanYongAndy"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"LeeHanYongAndy"},"content":"    private static void printTaskDescription(int index) {"},{"lineNumber":121,"author":{"gitId":"LeeHanYongAndy"},"content":"        System.out.print(taskHandler.extractTaskDescription(index));"},{"lineNumber":122,"author":{"gitId":"LeeHanYongAndy"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"LeeHanYongAndy"},"content":"}"}],"authorContributionMap":{"LeeHanYongAndy":123}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LeeHanYongAndy"},"content":"todo Grow Mushroom"},{"lineNumber":2,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline Plant Mushroom /by 2020-02-25"},{"lineNumber":3,"author":{"gitId":"LeeHanYongAndy"},"content":"event Mushroom Concert /at Sunday"},{"lineNumber":4,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":5,"author":{"gitId":"LeeHanYongAndy"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"LeeHanYongAndy"},"content":"delete 2"},{"lineNumber":7,"author":{"gitId":"LeeHanYongAndy"},"content":"find mushroom"},{"lineNumber":8,"author":{"gitId":"LeeHanYongAndy"},"content":"todo testdelete todo"},{"lineNumber":9,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline testdelete deadline /by 2020-02-02"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"event testfind event /at monday"},{"lineNumber":11,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":12,"author":{"gitId":"LeeHanYongAndy"},"content":"find test"},{"lineNumber":13,"author":{"gitId":"LeeHanYongAndy"},"content":"find testdelete"},{"lineNumber":14,"author":{"gitId":"LeeHanYongAndy"},"content":"find jackma"},{"lineNumber":15,"author":{"gitId":"LeeHanYongAndy"},"content":"find find"},{"lineNumber":16,"author":{"gitId":"LeeHanYongAndy"},"content":"delete 0"},{"lineNumber":17,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":18,"author":{"gitId":"LeeHanYongAndy"},"content":"delete 7"},{"lineNumber":19,"author":{"gitId":"LeeHanYongAndy"},"content":"done 4"},{"lineNumber":20,"author":{"gitId":"LeeHanYongAndy"},"content":"done 5"},{"lineNumber":21,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":22,"author":{"gitId":"LeeHanYongAndy"},"content":"delete 4"},{"lineNumber":23,"author":{"gitId":"LeeHanYongAndy"},"content":"delete 4"},{"lineNumber":24,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":25,"author":{"gitId":"LeeHanYongAndy"},"content":"done -1"},{"lineNumber":26,"author":{"gitId":"LeeHanYongAndy"},"content":"done 7"},{"lineNumber":27,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":28,"author":{"gitId":"LeeHanYongAndy"},"content":"todo test invalid format for command code"},{"lineNumber":29,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline /by 2019-01-01"},{"lineNumber":30,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline purposely wrong date /by 2019-30-30"},{"lineNumber":31,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline purposely wrong identifier format /at 2019-01-01"},{"lineNumber":32,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline purposely wrong identifier format/by2019-01-01"},{"lineNumber":33,"author":{"gitId":"LeeHanYongAndy"},"content":"deadline purpose no identifier format"},{"lineNumber":34,"author":{"gitId":"LeeHanYongAndy"},"content":"list"},{"lineNumber":35,"author":{"gitId":"LeeHanYongAndy"},"content":"bye"}],"authorContributionMap":{"LeeHanYongAndy":35}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"LeeHanYongAndy"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"LeeHanYongAndy":1,"-":20}}]
